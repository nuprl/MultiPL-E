name: HumanEval_160_do_algebra
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length)\n    {\n        switch(operator[i])\n        {\n       \
    \     case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result *= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for addition and subtraction, but for multiplication and division it gives me\
    \ a wrong answer. For example, for multiplication the result is always wrong.\
    \ For example, for multiplication the result is always wrong. For example, for\
    \ multiplication the result is always wrong. For example, for multiplication the\
    \ result is always wrong. For example, for multiplication the result is always\
    \ wrong. For example, for multiplication the result is always wrong. For example,\
    \ for multiplication the result is always wrong. For example, for multiplication\
    \ the result is always wrong. For example, for multiplication the result is always\
    \ wrong. For example, for multiplication the result is always wrong. For example,\
    \ for multiplication the result is always wrong. For example, for multiplication\
    \ the result is always wrong. For example, for multiplication the result is always\
    \ wrong. For example, for multiplication the result is always wrong. For example,\
    \ for multiplication the result is always wrong. For example, for multiplication\
    \ the result is always wrong. For example, for multiplication the result is always\
    \ wrong. For example, for multiplication the result is always wrong. For example,\
    \ for multiplication the result is always wrong. For example, for multiplication\
    \ the result is always wrong. For example, for multiplication the result is always\
    \ wrong. For example, for multiplication the result is always wrong. For example,\
    \ for multiplication the result is always wrong. For example, for multiplication\
    \ the result is always wrong. For example, for multiplication the result is always\
    \ wrong. For example, for multiplication the result is always wrong. For example,\
    \ for multiplication the result is always wrong. For example, for multiplication\
    \ the result is always wrong. For example, for multiplication the result is always\
    \ wrong. For example, for multiplication the result is always wrong. For example,\
    \ for multiplication the result is always wrong. For example, for multiplication\
    \ the result is always wrong. For example, for multiplication the result is always\
    \ wrong. For example, for multiplication the result is always wrong. For example,\
    \ for multiplication the result is always wrong. For example, for multiplication\
    \ the result is always wrong. For example, for multiplication the result is always\
    \ wrong. For example, for multiplication the result is always wrong. For example,\
    \ for multiplication the result is always wrong. For example, for multiplication\
    \ the result is \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplcvkqpgn.d(58): Error: declaration expected, not `<`\\n/tmp/tmplcvkqpgn.d(66):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmplcvkqpgn.d(67): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmplcvkqpgn.d(68): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmplcvkqpgn.d(69): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplcvkqpgn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operand.length)\n \
    \   {\n        switch(operator[i])\n        {\n            case '+':\n       \
    \         result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result %= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error \"Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ 0\n at com.example.test.main(test.java:35)\" at line \"result = do_algebra(operator,\
    \ array);\"\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to put a default\
    \ case in the switch statement. Now it should work\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error \"Exception in thread\
    \ \"main\" java.lang.ArrayIndexOutOfBoundsException: 0\n at com.example.test.main(test.java:35)\"\
    \ at line \"result = do_algebra(operator, array);\"\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I forgot to put a default case in the switch statement. Now it should\
    \ work\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error \"Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ 0\n at com.example.test.main(test.java:35)\" at line \"result = do_algebra(operator,\
    \ array);\"\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwo_lu3be.d(58): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwo_lu3be.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result = result + operand[i];\n                break;\n            case\
    \ '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '^':\n                result = result\
    \ ^ operand[i];\n                break;\n            default:\n              \
    \  throw new Exception(\"Invalid operator\");\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nI like your solution, but\
    \ I believe that your solution does not take into account the fact that OP wants\
    \ to evaluate an expression that contains operators with more than 2 operands.\
    \ For example, `2 + 3 * 4 - 5` should be evaluated as `2 + 3 * 4 - 5`, not as\
    \ `2 + 3 * 4 - 5 + 5`.\n<|/ c |>\n<| c |>\nI agree with you, I have edited my\
    \ answer to include a solution that does take into account the fact that OP wants\
    \ to evaluate an expression that contains operators with more than 2 operands.\n\
    <|/ c |>\n<| c |>\nI believe that your solution does not take into account the\
    \ fact that OP wants to evaluate an expression that contains operators with more\
    \ than 2 operands. For example, `2 + 3 * 4 - 5` should be evaluated as `2 + 3\
    \ * 4 - 5`, not as `2 + 3 * 4 - 5 + 5`.\n<|/ c |>\n<| c |>\nI believe that your\
    \ solution does not take into account the fact that OP wants to evaluate an expression\
    \ that contains operators with more than 2 operands. For example, `2 + 3 * 4 -\
    \ 5` should be evaluated as `2 + 3 * 4 - 5`, not as `2 + 3 * 4 - 5 + 5`.\n<|/\
    \ c |>\n<| c |>\nI believe that your solution does not take into account the fact\
    \ that OP wants to evaluate an expression that contains operators with more than\
    \ 2 operands. For example, `2 + 3 * 4 - 5` should be evaluated as `2 + 3 * 4 -\
    \ 5`, not as `2 + 3 * 4 - 5 + 5`.\n<|/ c |>\n<| a |>\nI believe that your solution\
    \ does not take into account the fact that OP wants to evaluate an expression\
    \ that contains operators with more than 2 operands. For example, 2 + 3 * 4 -\
    \ 5 should be evaluated as 2 + 3 * 4 - 5, not as 2 + 3 * 4 - 5 + 5.\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvggmphe0.d(56): Error: declaration expected, not `<`\\n/tmp/tmpvggmphe0.d(79):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpvggmphe0.d(80): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpvggmphe0.d(81): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpvggmphe0.d(82): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvggmphe0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcf2qgob6.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcf2qgob6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result = result + operand[i];\n                break;\n            case\
    \ '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '%':\n                result = result\
    \ % operand[i];\n                break;\n            case '^':\n             \
    \   result = result ^ operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your\
    \ answer. Your code works perfectly for addition and subtraction, but for multiplication\
    \ and division it returns wrong results. I edited my question to show you the\
    \ problem.\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to add the case for\
    \ multiplication and division.\n<|/ c |>\n<| c |>\nThank you for your answer.\
    \ Your code works perfectly for addition and subtraction, but for multiplication\
    \ and division it returns wrong results. I edited my question to show you the\
    \ problem.\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to add the case for\
    \ multiplication and division.\n<|/ c |>\n<| c |>\nThank you for your answer.\
    \ Your code works perfectly for addition and subtraction, but for multiplication\
    \ and division it returns wrong results. I edited my question to show you the\
    \ problem.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv38y6aa5.d(59): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv38y6aa5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx5awefkn.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx5awefkn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case \"+\": result = result\
    \ + operand[i]; break;\n            case \"-\": result = result - operand[i];\
    \ break;\n            case \"*\": result = result * operand[i]; break;\n     \
    \       case \"//\": result = result / operand[i]; break;\n            case \"\
    **\": result = result ** operand[i]; break;\n            default: return -1;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your\
    \ solution, but I wonder why you used `long` instead of `int`? I thought `int`\
    \ was the right type for numbers in C#.\n<|/ c |>\n<| c |>\nI used long to avoid\
    \ overflow problems. I guess int is also fine.\n<|/ c |>\n<| c |>\nI guess `long`\
    \ would be the right type for numbers in C#, but I thought `int` was the right\
    \ type for numbers in C#.\n<|/ c |>\n<| c |>\n`int` would be the right type for\
    \ numbers in C#, but I thought `int` was the right type for numbers in C#.\n<|/\
    \ c |>\n<| c |>\nI guess `int` would be the right type for numbers in C#, but\
    \ I thought `int` was the right type for numbers in C#.\n<|/ c |>\n<| a tags=c#,algorithm\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv11autyk.d(44): Error: declaration expected, not `<`\\n/tmp/tmpv11autyk.d(64):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpv11autyk.d(64): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpv11autyk.d(65): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpv11autyk.d(65): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpv11autyk.d(66): Error: semicolon expected, not `.`\\n/tmp/tmpv11autyk.d(66):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpv11autyk.d(67): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpv11autyk.d(67): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpv11autyk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppnh6keff.d(117): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmppnh6keff.d(117): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnh6keff.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n\
    \    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long \nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfudj6a5k.d(135): Error: no identifier for declarator `long`\\\
    n/tmp/tmpfudj6a5k.d(135): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfudj6a5k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++){\n \
    \       switch(operator[i]){\n            case \"+\": result += operand[i]; break;\n\
    \            case \"-\": result -= operand[i]; break;\n            case \"*\"\
    : result *= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; result /= operand[i];\
    \ break;\n            default: return -1;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome! If this answer helped you,\
    \ please consider accepting it by clicking the check mark next to it. This will\
    \ help future visitors who may have a similar issue and will also increase your\
    \ reputation.\n<|/ c |>\n<| c |>\nI did that! Thanks again!\n<|/ c |>\n<| a tags=java,arrays,algorithm,math\
    \ |>\n<code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3j23hiy.d(43): Error: declaration expected, not `<`\\n/tmp/tmph3j23hiy.d(49):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmph3j23hiy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzkd60mvp.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkd60mvp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length; i++)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result = result + operand[i];\n                break;\n           \
    \ case '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '%':\n                result = result\
    \ % operand[i];\n                break;\n            case '^':\n             \
    \   result = result ^ operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math,c++ |>\n<| c |>\n\
    This code doesn't compile. `operator` is an array of `string`s, not `char`s. `operator[i]`\
    \ is a `char`, not a `string`.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkvr3ansc.d(60): Error: declaration expected, not `<`\\n/tmp/tmpkvr3ansc.d(63):\
    \ Error: unterminated character constant\\n/tmp/tmpkvr3ansc.d(71): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpkvr3ansc.d(71): Error: no identifier for declarator\
    \ `.Collections.Generic`\\n/tmp/tmpkvr3ansc.d(72): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmpkvr3ansc.d(72): Error: no identifier for declarator `.Linq`\\\
    n/tmp/tmpkvr3ansc.d(73): Error: semicolon expected, not `.`\\n/tmp/tmpkvr3ansc.d(73):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpkvr3ansc.d(74): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpkvr3ansc.d(74): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpkvr3ansc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n    \
    \        result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,algorithm,math |>\n<| c |>\nI like your solution, however it won't\
    \ work if there are more than 2 operators. I believe OP wants to support `+`,\
    \ `-`, `*`, `/`, `**`.\n<|/ c |>\n<| c |>\nYes, I agree with you. I've updated\
    \ my answer to support `+`, `-`, `*`, `/`, `**`.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. However I cannot use any external libraries. I must implement it\
    \ myself.\n<|/ c |>\n<| c |>\nI updated my answer with my own implementation.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. However I cannot\
    \ use any external libraries. I must implement it myself.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI believe this should work:\n<code>\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfrnwrvbm.d(50): Error: unterminated character constant\\n/tmp/tmpfrnwrvbm.d(50):\
    \ Error: unterminated character constant\\n/tmp/tmpfrnwrvbm.d(51): Error: found\
    \ `{` when expecting `)`\\n/tmp/tmpfrnwrvbm.d(52): Error: expression expected,\
    \ not `*=`\\n/tmp/tmpfrnwrvbm.d(52): Error: found `operand` when expecting `;`\
    \ following statement\\n/tmp/tmpfrnwrvbm.d(56): Error: declaration expected, not\
    \ `return`\\n/tmp/tmpfrnwrvbm.d(57): Error: unrecognized declaration\\n/tmp/tmpfrnwrvbm.d(61):\
    \ Error: unterminated character constant\\n/tmp/tmpfrnwrvbm.d(64): Error: unterminated\
    \ character constant\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfrnwrvbm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy9pkys5c.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9pkys5c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpag3yjxw3.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpag3yjxw3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_1dtexnb.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1dtexnb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++) \n \
    \   {\n        switch(operator[i]) \n        {\n            case \"+\": result\
    \ += operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n\
    \            case \"*\": result *= operand[i]; break;\n            case \"/\"\
    : result /= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; break;\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for\
    \ your answer. Unfortunately I cannot use any libraries other than std.\n<|/ c\
    \ |>\n<| c |>\nI added a solution without std.\n<|/ c |>\n<| c |>\nThank you for\
    \ your answer. Unfortunately I cannot use any libraries other than std.\n<|/ c\
    \ |>\n<| c |>\nI added a solution without std.\n<|/ c |>\n<| a dscore=0 |>\nI\
    \ wrote a solution in C#, using only basic arithmetic operators and no libraries.\
    \ \n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiaewnk0e.d(45): Error: declaration expected, not `<`\\n/tmp/tmpiaewnk0e.d(63):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpiaewnk0e.d(63): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpiaewnk0e.d(64): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpiaewnk0e.d(64): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpiaewnk0e.d(65): Error: semicolon expected, not `.`\\n/tmp/tmpiaewnk0e.d(65):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpiaewnk0e.d(66): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpiaewnk0e.d(66): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpiaewnk0e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_cp6dk6b.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_cp6dk6b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXXX\
    \ = 0;\n    long YYYY = 0;\n    long ZZZZ = 0;\n    long AAAAA\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp64bj20q1.d(128): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmp64bj20q1.d(128): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64bj20q1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n    \
    \        result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,algorithm,math |>\n<| a tags=java,algorithm,math |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd64zerlp.d(50): Error: unterminated character constant\\n/tmp/tmpd64zerlp.d(50):\
    \ Error: unterminated character constant\\n/tmp/tmpd64zerlp.d(51): Error: found\
    \ `{` when expecting `)`\\n/tmp/tmpd64zerlp.d(52): Error: expression expected,\
    \ not `*=`\\n/tmp/tmpd64zerlp.d(52): Error: found `operand` when expecting `;`\
    \ following statement\\n/tmp/tmpd64zerlp.d(56): Error: declaration expected, not\
    \ `return`\\n/tmp/tmpd64zerlp.d(57): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd64zerlp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++){\n \
    \       switch(operator[i]){\n            case '+':\n                result =\
    \ result + operand[i];\n                break;\n            case '-':\n      \
    \          result = result - operand[i];\n                break;\n           \
    \ case '*':\n                result = result * operand[i];\n                break;\n\
    \            case '/':\n                result = result / operand[i];\n      \
    \          break;\n            case '^':\n                result = result ** operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThank you so much for this. I really appreciate it. I\
    \ will try this out and let you know how it goes. Thanks again!\n<|/ c |>\n<|\
    \ c |>\nI implemented this and it works perfectly. Thank you so much for this.\
    \ I really appreciate it. I will try this out and let you know how it goes. Thanks\
    \ again!\n<|/ c |>\n<| c |>\nNo problem. Glad to help.\n<|/ c |>\n<| a |>\nI implemented\
    \ this and it works perfectly. Thank you so much for this. I really appreciate\
    \ it. I will try this out and let you know how it goes. Thanks again!\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvcwy22lr.d(54): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcwy22lr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length)\n    {\n        switch(operator[i])\n        {\n       \
    \     case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this doesn't\
    \ solve the problem. Your code doesn't even compile. `operator` is an array of\
    \ `char`s, not `string`s. `operand` is an array of `long`s, not `int`s. Also,\
    \ `operator[i]` is a `char`, not a `string`. `operand[i]` is a `long`, not a `int`.\
    \ And `operator[i]` is a `char`, not a `string`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ code so it compiles. I didn't test it, so there might be some bugs. I hope it\
    \ helps.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't solve\
    \ the problem. Your code doesn't even compile. `operator` is an array of `char`s,\
    \ not `string`s. `operand` is an array of `long`s, not `int`s. Also, `operator[i]`\
    \ is a `char`, not a `string`. `operand[i]` is a `long`, not a `int`. And `operator[i]`\
    \ is a `char`, not a `string`.\n<|/ c |>\n<| c |>\nI fixed the code so it compiles.\
    \ I didn't test it, so there might be some bugs. I hope it helps.\n<|/ c |>\n\
    <| c |>\nI appreciate your efforts, but this doesn't solve the problem. Your code\
    \ doesn't even compile. `operator` is an array of `char`s, not `string`s. `operand`\
    \ is an array of `long`s, not `int`s. Also, `operator[i]` is a `char`, not a `string`.\
    \ `operand[i]` is a `long`, not a `int`. And `operator[i]` is a `char`, not a\
    \ `string`.\n<|/ c |>\n<| a tags=c#,algorithm |>\nI believe this can be solved\
    \ using dynamic programming.\nThe idea is to build a table of possible results\
    \ for each possible combination of operands and operators. \n<code>\nstatic int[,]\
    \ table = new \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmue_5kfw.d(58): Error: declaration expected, not `<`\\n/tmp/tmpmue_5kfw.d(61):\
    \ Error: unterminated character constant\\n/tmp/tmpmue_5kfw.d(61): Error: unterminated\
    \ character constant\\n/tmp/tmpmue_5kfw.d(64): Error: unterminated character constant\\\
    n/tmp/tmpmue_5kfw.d(67): Error: unterminated character constant\\n/tmp/tmpmue_5kfw.d(67):\
    \ Error: unterminated character constant\\n/tmp/tmpmue_5kfw.d(70): Error: unterminated\
    \ character constant\\n/tmp/tmpmue_5kfw.d(73): Error: unterminated character constant\\\
    n/tmp/tmpmue_5kfw.d(73): Error: unterminated character constant\\n/tmp/tmpmue_5kfw.d(84):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpmue_5kfw.d(85): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpmue_5kfw.d(86): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpmue_5kfw.d(87): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmue_5kfw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9xt3ay4a.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9xt3ay4a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.size(); i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result = result + operand[i];\n                break;\n            case\
    \ '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '//':\n                result = result\
    \ / operand[i];\n                break;\n            case '**':\n            \
    \    result = result ** operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nThanks\
    \ for the answer. I'm going to try this out and see how it works.\n<|/ c |>\n\
    <| c |>\nI got it to work. Thanks for your help. I appreciate it.\n<|/ c |>\n\
    <| c |>\nI added a C# version of the code to the answer. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for your help. I appreciate it.\n<|/ c |>\n<| a tags=c#,algorithm,math\
    \ |>\nThe simplest way is to use recursion.\n<code>\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4dsbse46.d(47): Error: unterminated character constant\\n/tmp/tmp4dsbse46.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmp4dsbse46.d(48): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmp4dsbse46.d(48): Error: found `=` instead\
    \ of statement\\n/tmp/tmp4dsbse46.d(50): Error: unterminated character constant\\\
    n/tmp/tmp4dsbse46.d(50): Error: unterminated character constant\\n/tmp/tmp4dsbse46.d(51):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmp4dsbse46.d(51): Error: found\
    \ `=` instead of statement\\n/tmp/tmp4dsbse46.d(59): Error: declaration expected,\
    \ not `<`\\n/tmp/tmp4dsbse46.d(62): Error: unterminated character constant\\n/tmp/tmp4dsbse46.d(80):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp4dsbse46.d(81): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp4dsbse46.d(82): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp4dsbse46.d(83): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dsbse46.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc\
    \ = 0;\n    long Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n\
    \    long Hh = 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long\
    \ Ll = 0;\n    long Mm = 0;\n    long Nn = 0;\n    long On = 0;\n    long Pp =\
    \ 0;\n    long Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n\
    \    long Uu = 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long\
    \ Yy = 0;\n    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc\
    \ = 0;\n    long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg\
    \ = 0;\n    long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk\
    \ = 0;\n    long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Onn\
    \ = 0;\n    long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss\
    \ = 0;\n    long Ttt = 0;\n    long Uuu = 0;\n    long Vvv = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk50hadql.d(124): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk50hadql.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case \"+\"\
    :\n                temp = result + operand[i];\n                break;\n     \
    \       case \"-\":\n                temp = result - operand[i];\n           \
    \     break;\n            case \"*\":\n                temp = result * operand[i];\n\
    \                break;\n            case \"/\":\n                temp = result\
    \ / operand[i];\n                break;\n            case \"//\":\n          \
    \      temp = result / operand[i];\n                break;\n            case \"\
    **\":\n                temp = result * operand[i];\n                break;\n \
    \           default:\n                throw new Exception(\"Invalid operator\"\
    );\n        }\n        result = temp;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,algorithm,math,c++ |>\n<| c |>\nThis code does not compile. `operator`\
    \ is an array of strings and `operand` is an array of `long`s. You cannot assign\
    \ a `long` to a `string`. Also, `operator` has more elements than `operand`.\n\
    <|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing out the mistake.\n<|/\
    \ c |>\n<| c |>\nThe code still does not compile. `operator` is an array of strings\
    \ and `operand` is an array of `long`s. You cannot assign a `long` to a `string`.\
    \ Also, `operator` has more elements than `operand`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the code. Thanks for pointing out the mistake.\n<|/ c |>\n<| a dscore=2 |>\n\
    I wrote a C# program to solve this problem using recursion. \n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp99b_w3cr.d(61): Error: declaration expected, not `<`\\n/tmp/tmp99b_w3cr.d(79):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmp99b_w3cr.d(79): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmp99b_w3cr.d(80): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmp99b_w3cr.d(80): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmp99b_w3cr.d(81): Error: semicolon expected, not `.`\\n/tmp/tmp99b_w3cr.d(81):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmp99b_w3cr.d(82): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmp99b_w3cr.d(82): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp99b_w3cr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++) \n \
    \   {\n        switch(operator[i]) \n        {\n            case \"+\": result\
    \ += operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n\
    \            case \"*\": result *= operand[i]; break;\n            case \"//\"\
    : result /= operand[i]; break;\n            case \"**\": result *= operand[i];\
    \ result *= operand[i]; break;\n            default: return -1;\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so\
    \ much for your help. I really appreciate it. I will try this out and let you\
    \ know how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI tried to implement your\
    \ code, but I keep getting a null pointer exception. I tried debugging, but I\
    \ can't seem to find where I went wrong. Could you please take a look at my code\
    \ and tell me where I went wrong? I appreciate your help!\n<|/ c |>\n<| c |>\n\
    I edited my answer to include your code. Hope it helps.\n<|/ c |>\n<| c |>\nThank\
    \ you so much! I really appreciate your help. I really appreciate it. I will try\
    \ this out and let you know how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI tried\
    \ to implement your code, but I keep getting a null pointer exception. I tried\
    \ debugging, but I can't seem to find where I went wrong. Could you please take\
    \ a look at my code and tell me where I went wrong? I appreciate your help!\n\
    <|/ c |>\n<| a tags=java,arrays,algorithm,math |>\n<code>\nimport java.util.Scanner;\n\
    import java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxr18wbkb.d(45): Error: declaration expected, not `<`\\n/tmp/tmpxr18wbkb.d(51):\
    \ Error: unterminated character constant\\n/tmp/tmpxr18wbkb.d(60): Error: unterminated\
    \ character constant\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxr18wbkb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmponljc_8w.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponljc_8w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphrzbejvy.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphrzbejvy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case \"+\": result +=\
    \ operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n \
    \           case \"*\": result *= operand[i]; break;\n            case \"/\":\
    \ result /= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; break;\n            default:\
    \ throw new Exception(\"Invalid operator\");\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I really appreciate it!\
    \ But I still don't understand how to use this function in my code. Could you\
    \ please show me how to use this function in my code? Thanks!\n<|/ c |>\n<| c\
    \ |>\nI added the function to the answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! I really appreciate it! But I still don't understand how\
    \ to use this function in my code. Could you please show me how to use this function\
    \ in my code? Thanks!\n<|/ c |>\n<| c |>\nI added the function to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it! But I still don't understand how to use this function in my code. Could\
    \ you please show me how to use this function in my code? Thanks!\n<|/ c |>\n\
    <| a tags=c#,math,algorithm |>\nI wrote a C# program to solve this problem. Hope\
    \ it helps.\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoesu_gmj.d(46): Error: declaration expected, not `<`\\n/tmp/tmpoesu_gmj.d(49):\
    \ Error: unterminated character constant\\n/tmp/tmpoesu_gmj.d(55): Error: unterminated\
    \ character constant\\n/tmp/tmpoesu_gmj.d(61): Error: unterminated character constant\\\
    n/tmp/tmpoesu_gmj.d(67): Error: semicolon expected, not `.`\\n/tmp/tmpoesu_gmj.d(67):\
    \ Error: no identifier for declarator `.Collections.Generic`\\n/tmp/tmpoesu_gmj.d(68):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpoesu_gmj.d(68): Error: no identifier\
    \ for declarator `.Linq`\\n/tmp/tmpoesu_gmj.d(69): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmpoesu_gmj.d(69): Error: no identifier for declarator `.Text`\\\
    n/tmp/tmpoesu_gmj.d(70): Error: semicolon expected, not `.`\\n/tmp/tmpoesu_gmj.d(70):\
    \ Error: no identifier for declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpoesu_gmj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc\
    \ = 0;\n    long Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n\
    \    long Hh = 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long\
    \ Ll = 0;\n    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp =\
    \ 0;\n    long Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n\
    \    long Uu = 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long\
    \ Yy = 0;\n    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc\
    \ = 0;\n    long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg\
    \ = 0;\n    long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk\
    \ = 0;\n    long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo\
    \ = 0;\n    long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss\
    \ = 0;\n    long Ttt = 0;\n    long Uuu = 0;\n    long Vvv\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptcw6hzes.d(124): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmptcw6hzes.d(124): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptcw6hzes.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long Dd =\
    \ 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh = 0;\n\
    \    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n    long\
    \ Mm = 0;\n    long Nn = 0;\n    long On = 0;\n    long Pp = 0;\n    long Qq =\
    \ 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu = 0;\n\
    \    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n    long\
    \ Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n    long Ddd\
    \ = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n    long Hhh\
    \ = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n    long Lll\
    \ = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Onn = 0;\n    long Ppp\
    \ = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n    long Ttt\
    \ = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long Www\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyxx2sna2.d(124): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpyxx2sna2.d(124): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxx2sna2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n   \
    \ long temp84 = 0;\n    long temp85 = 0;\n\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4zp0rbdy.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zp0rbdy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n\
    \    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long \nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7x2_5i8_.d(135): Error: no identifier for declarator `long`\\\
    n/tmp/tmp7x2_5i8_.d(135): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7x2_5i8_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length) \n    {\n        switch(operator[i]) \n        {\n     \
    \       case '+': result += operand[i]; break;\n            case '-': result -=\
    \ operand[i]; break;\n            case '*': result *= operand[i]; break;\n   \
    \         case '/': result /= operand[i]; break;\n            case '//': result\
    \ /= operand[i]; break;\n            case '**': result *= operand[i]; break;\n\
    \            default: return -1;\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis doesn't work if\
    \ you have a negative number in the operand list. Also, the result will be negative\
    \ if you have a negative number in the operator list.\n<|/ c |>\n<| c |>\nYes,\
    \ I forgot to mention that. Thanks for pointing that out. I've updated my answer.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require negative numbers in\
    \ the operand list. Also, I've added a solution that doesn't require negative\
    \ numbers in the operator list.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require negative numbers in the operand list. Also, I've added a solution that\
    \ doesn't require negative numbers in the operator list.\n<|/ c |>\n<| c |>\n\
    This solution doesn't work if you have a negative number in the operator list.\
    \ Also, the result will be negative if you have a negative number in the operand\
    \ list.\n<|/ c |>\n<| a dscore=2 |>\nI believe that you can solve this problem\
    \ using recursion. \nThe idea is to write a function that will take two arrays\
    \ and an index and will return the result of the operation between the two arrays.\
    \ \nThe base case is when the index is equal to the length of the arrays. \nThe\
    \ recursive case is when the index is less than the length of the arrays. \nThe\
    \ recursive case will call the function with the next index and the current array.\
    \ \nThe base case will call the function with the next index and the current array\
    \ but with the next index + 1 (the index will be incremented after each recursive\
    \ call). \nThe function will look something like this: \n<code>\npublic long do_algebra(String[]\
    \ operator, long[] operand, int index) \n{\n    if (index == operator.length)\n\
    \    {\n        return do_algebra(operator, operand, index + 1);\n    }\n    else\
    \ if (index < operator.length)\n    {\n        switch(operator[index])\n     \
    \   {\n            case '+': return operand[index] + do_algebra(operator, operand,\
    \ index + 1);\n            case '-': return operand[index] - do_algebra(operator,\
    \ operand, index + 1);\n            case '*': return operand[index] * \nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd5lai43x.d(40): Error: unterminated character constant\\n/tmp/tmpd5lai43x.d(40):\
    \ Error: unterminated character constant\\n/tmp/tmpd5lai43x.d(40): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpd5lai43x.d(40): Error: found `/=` instead\
    \ of statement\\n/tmp/tmpd5lai43x.d(41): Error: unterminated character constant\\\
    n/tmp/tmpd5lai43x.d(41): Error: unterminated character constant\\n/tmp/tmpd5lai43x.d(41):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpd5lai43x.d(41): Error: found\
    \ `*=` instead of statement\\n/tmp/tmpd5lai43x.d(48): Error: declaration expected,\
    \ not `<`\\n/tmp/tmpd5lai43x.d(51): Error: unterminated character constant\\n/tmp/tmpd5lai43x.d(54):\
    \ Error: unterminated character constant\\n/tmp/tmpd5lai43x.d(57): Error: unterminated\
    \ character constant\\n/tmp/tmpd5lai43x.d(57): Error: unterminated character constant\\\
    n/tmp/tmpd5lai43x.d(57): Error: unterminated character constant\\n/tmp/tmpd5lai43x.d(60):\
    \ Error: unterminated character constant\\n/tmp/tmpd5lai43x.d(60): Error: unterminated\
    \ character constant\\n/tmp/tmpd5lai43x.d(60): Error: unterminated character constant\\\
    n/tmp/tmpd5lai43x.d(63): Error: unterminated character constant\\n/tmp/tmpd5lai43x.d(79):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpd5lai43x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result = result + operand[i];\n          \
    \      break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '^':\n\
    \                result = result ^ operand[i];\n                break;\n     \
    \   }\n        i++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm\
    \ |>\n<| c |>\nI like your solution, but I do not understand why you used a switch\
    \ statement instead of an if statement. Also, why did you use long? Why not int?\n\
    <|/ c |>\n<| c |>\nI used switch statement because I wanted to show that you can\
    \ add more operators and operands without changing the code. Also, I used long\
    \ because I wanted to show that you can add more operands without changing the\
    \ code. Also, I used int because I wanted to show that you can add more operators\
    \ without changing the code. Also, I used long because I wanted to show that you\
    \ can add more operands without changing the code. Also, I used int because I\
    \ wanted to show that you can add more operators without changing the code. Also,\
    \ I used int because I wanted to show that you can add more operators without\
    \ changing the code. Also, I used int because I wanted to show that you can add\
    \ more operators without changing the code. Also, I used int because I wanted\
    \ to show that you can add more operators without changing the code.\n<|/ c |>\n\
    <| c |>\nI used int because I wanted to show that you can add more operators without\
    \ changing the code. Also, I used int because I wanted to show that you can add\
    \ more operators without changing the code. Also, I used int because I wanted\
    \ to show that you can add more operators without changing the code. Also, I used\
    \ int because I wanted to show that you can add more operators without changing\
    \ the code. Also, I used int because I wanted to show that you can add more operators\
    \ without changing the code. Also, I used int because I wanted to show that you\
    \ can add more operators without changing the code. Also, I used int because I\
    \ wanted to show that you can add more operators without changing the code. Also,\
    \ I used int because I wanted to show that you can add more operators without\
    \ changing the code. Also, I used int because I wanted to show that you can add\
    \ more operators without changing the code.\n<|/ c |>\n<| c |>\nI used int because\
    \ I wanted to show that you can add more operators without changing the code.\
    \ Also, I used int because I wanted to show that you can add more operators without\
    \ changing the code. Also, I used int because I wanted to \nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd8p46mez.d(57): Error: declaration expected, not `<`\\n/tmp/tmpd8p46mez.d(74):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpd8p46mez.d(75): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpd8p46mez.d(76): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpd8p46mez.d(77): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd8p46mez.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpemyffypr.d(117): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpemyffypr.d(117): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpemyffypr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp22d0k7ve.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22d0k7ve.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnwexionf.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnwexionf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.Length &&\
    \ i < operand.Length)\n    {\n        if(operator[i] == '+')\n        {\n    \
    \        result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result *=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,algorithm |>\n<| c |>\nThis doesn't work for me. I'm getting a stack\
    \ overflow exception when I try to run it.\n<|/ c |>\n<| c |>\nIt works for me\
    \ with your example input. Can you post the code you are using to call this function?\n\
    <|/ c |>\n<| c |>\nI added the code to the original post. I'm getting a stack\
    \ overflow exception when I try to run it.\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution to my answer. Does that work for you?\n<|/ c |>\n<| c |>\nI added a\
    \ recursive solution to my answer. Does that work for you?\n<|/ c |>\n<| a dscore=1\
    \ |>\nI wrote a recursive solution that should work for you:\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9w8u56go.d(50): Error: unterminated character constant\\n/tmp/tmp9w8u56go.d(50):\
    \ Error: unterminated character constant\\n/tmp/tmp9w8u56go.d(51): Error: found\
    \ `{` when expecting `)`\\n/tmp/tmp9w8u56go.d(56): Error: declaration expected,\
    \ not `return`\\n/tmp/tmp9w8u56go.d(57): Error: unrecognized declaration\\n/tmp/tmp9w8u56go.d(61):\
    \ Error: unterminated character constant\\n/tmp/tmp9w8u56go.d(61): Error: unterminated\
    \ character constant\\n/tmp/tmp9w8u56go.d(67): Error: unterminated character constant\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9w8u56go.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp15eap6ul.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15eap6ul.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc_jsvnva.d(117): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpc_jsvnva.d(117): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_jsvnva.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdet21kz7.d(117): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpdet21kz7.d(117): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdet21kz7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxhu0bjej.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhu0bjej.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length)\n    {\n        switch(operator[i])\n        {\n       \
    \     case '+':\n                result = result + operand[i];\n             \
    \   break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '%':\n\
    \                result = result % operand[i];\n                break;\n     \
    \       case '^':\n                result = result ^ operand[i];\n           \
    \     break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ libraries other than std.\n<|/ c |>\n<| c |>\nI added the code I wrote to solve\
    \ the problem without using any libraries.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any libraries other than std.\n<|/ c |>\n<|\
    \ c |>\nI added the code I wrote to solve the problem without using any libraries.\n\
    <|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <string>\n#include <algorithm>\n#include <numeric>\n#include\
    \ <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <iomanip>\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4almv4c8.d(61): Error: declaration expected, not `<`\\n/tmp/tmp4almv4c8.d(90):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp4almv4c8.d(91): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp4almv4c8.d(92): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp4almv4c8.d(93): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4almv4c8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgteujjth.d(133): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgteujjth.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b =\
    \ 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n   \
    \ long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n   \
    \ long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d =\
    \ 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m =\
    \ 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n   \
    \ long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v =\
    \ 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n   \
    \ long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e =\
    \ 0;\n    long f = 0;\n    long \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4_7sztn3.d(135): Error: no identifier for declarator `long`\\\
    n/tmp/tmp4_7sztn3.d(135): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_7sztn3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result ^= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm\
    \ |>\n<| c |>\nI like your solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\n\
    I like your solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\nI like your solution.\
    \ Very elegant. Thanks!\n<|/ c |>\n<| a tags=c#,algorithm |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_bp0q0h.d(56): Error: declaration expected, not `<`\\n/tmp/tmp1_bp0q0h.d(70):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmp1_bp0q0h.d(70): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmp1_bp0q0h.d(71): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmp1_bp0q0h.d(71): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmp1_bp0q0h.d(72): Error: semicolon expected, not `.`\\n/tmp/tmp1_bp0q0h.d(72):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmp1_bp0q0h.d(73): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmp1_bp0q0h.d(73): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1_bp0q0h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcjgtbhqq.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjgtbhqq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1v139l9v.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1v139l9v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.Length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+': result +=\
    \ operand[i]; break;\n            case '-': result -= operand[i]; break;\n   \
    \         case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '^': result ^= operand[i]; break;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math\
    \ |>\n<| c |>\nThis doesn't work. Try it with `operator['+', '*', '-']` and `array\
    \ = [2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nI tested it and it works. I used the example\
    \ you provided. Did you try it with the example I provided?\n<|/ c |>\n<| c |>\n\
    Yes, I did. And it works. But your solution doesn't work. Try it with `operator['+',\
    \ '*', '-']` and `array = [2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works. I used the example you provided. Did you try it with the example\
    \ I provided?\n<|/ c |>\n<| c |>\nYes, I did. And it works. But your solution\
    \ doesn't work. Try it with `operator['+', '*', '-']` and `array = [2, 3, 4, 5]`\n\
    <|/ c |>\n<| a |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1aqhhxpa.d(44): Error: declaration expected, not `<`\\n/tmp/tmp1aqhhxpa.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmp1aqhhxpa.d(53): Error: unterminated\
    \ character constant\\n/tmp/tmp1aqhhxpa.d(59): Error: unterminated character constant\\\
    n/tmp/tmp1aqhhxpa.d(64): Error: semicolon expected, not `.`\\n/tmp/tmp1aqhhxpa.d(64):\
    \ Error: no identifier for declarator `.Collections.Generic`\\n/tmp/tmp1aqhhxpa.d(65):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmp1aqhhxpa.d(65): Error: no identifier\
    \ for declarator `.Linq`\\n/tmp/tmp1aqhhxpa.d(66): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmp1aqhhxpa.d(66): Error: no identifier for declarator `.Text`\\\
    n/tmp/tmp1aqhhxpa.d(67): Error: semicolon expected, not `.`\\n/tmp/tmp1aqhhxpa.d(67):\
    \ Error: no identifier for declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1aqhhxpa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    \n    for(i\
    \ = 0; i < operand.length - 1; i++)\n    {\n        temp = operand[i] + operand[i\
    \ + 1];\n        result += operator[i] * temp;\n    }\n    \n    temp = operand[operand.length\
    \ - 1];\n    result += operator[i] * temp;\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you for your answer. I tried your code, but\
    \ I got this error \"Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ -1\" at line \"temp = operand[operand.length - 1];\"\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a complete working example. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThank you for your answer. I tried your code, but I got this error \"\
    Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: -1\" at\
    \ line \"temp = operand[operand.length - 1];\"\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to include a complete working example. Hope it helps.\n<|/ c |>\n<| c\
    \ |>\nThank you for your answer. I tried your code, but I got this error \"Exception\
    \ in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: -1\" at line \"\
    temp = operand[operand.length - 1];\"\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Scanner;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd6k6yr87.d(45): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6k6yr87.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++) \n \
    \   {\n        switch(operator[i]) \n        {\n            case \"+\": result\
    \ += operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n\
    \            case \"*\": result *= operand[i]; break;\n            case \"//\"\
    : result /= operand[i]; break;\n            case \"**\": result *= operand[i];\
    \ result *= operand[i]; break;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,algorithm,math |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to avoid the switch statement. Maybe with reflection?\n<|/ c\
    \ |>\n<| c |>\nI added a reflection solution to my answer\n<|/ c |>\n<| c |>\n\
    I like the reflection solution, but I wonder if there is a way to avoid the switch\
    \ statement. Maybe with reflection?\n<|/ c |>\n<| c |>\nI added a reflection solution\
    \ to my answer\n<|/ c |>\n<| c |>\nI added a reflection solution to my answer\n\
    <|/ c |>\n<| a dscore=1 |>\nI like your solution, but I wonder if there is a way\
    \ to avoid the switch statement. Maybe with reflection?\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbru89kn_.d(44): Error: declaration expected, not `<`\\n/tmp/tmpbru89kn_.d(67):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpbru89kn_.d(68): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpbru89kn_.d(69): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpbru89kn_.d(70): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbru89kn_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++) \n \
    \   {\n        switch(operator[i]) \n        {\n            case '+': result +=\
    \ operand[i]; break;\n            case '-': result -= operand[i]; break;\n   \
    \         case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '//': result /= operand[i]; break;\n\
    \            case '**': result *= operand[i]; break;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nI believe that your\
    \ algorithm is wrong. Try `operator = ['+', '-', '*']` and `operand = [2, 3, 4,\
    \ 5]`. Your algorithm will return `result = -(-2 + 3 * 4 - 5) = -2`.\n<|/ c |>\n\
    <| c |>\nYes, you are right. My algorithm is wrong. Thank you for pointing it\
    \ out. I've corrected my answer.\n<|/ c |>\n<| a tags=c#,algorithm |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfgxatnnc.d(39): Error: unterminated character constant\\n/tmp/tmpfgxatnnc.d(39):\
    \ Error: unterminated character constant\\n/tmp/tmpfgxatnnc.d(39): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpfgxatnnc.d(39): Error: found `/=` instead\
    \ of statement\\n/tmp/tmpfgxatnnc.d(40): Error: unterminated character constant\\\
    n/tmp/tmpfgxatnnc.d(40): Error: unterminated character constant\\n/tmp/tmpfgxatnnc.d(40):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpfgxatnnc.d(40): Error: found\
    \ `*=` instead of statement\\n/tmp/tmpfgxatnnc.d(45): Error: declaration expected,\
    \ not `<`\\n/tmp/tmpfgxatnnc.d(51): Error: unterminated character constant\\n/tmp/tmpfgxatnnc.d(56):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpfgxatnnc.d(56): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpfgxatnnc.d(57): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpfgxatnnc.d(57): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpfgxatnnc.d(58): Error: semicolon expected, not `.`\\n/tmp/tmpfgxatnnc.d(58):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpfgxatnnc.d(59): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpfgxatnnc.d(59): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfgxatnnc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp938s21nx.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp938s21nx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.Length\
    \ && i < operand.Length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result *= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nThis doesn't work if the operator\
    \ is `+` or `-`.\n<|/ c |>\n<| c |>\nIt does work, just tested it. The only thing\
    \ that doesn't work is when the operator is `/` or `^`.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work when the operator is `/` or `^`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work when the operator is `/` or `^`.\n<|/ c |>\n<| c |>\nIt doesn't work when\
    \ the operator is `/` or `^`.\n<|/ c |>\n<| a tags=c#,algorithm,math |>\nThis\
    \ code will work for all operators and operands including division and exponentiation.\n\
    <code>\npublic long Calculate(string[] operator, long[] operand)\n{\n    long\
    \ result = 0;\n    int i = 0;\n    \n    while(i < operator.Length && i < operand.Length)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result *= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static long Calculate(string[]\
    \ operator, long[] operand)\n{\n    long result = 0;\n    int i = 0;\n    \n \
    \   while(i < operator.Length && i < operand.Length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                result += operand[i];\n   \
    \             break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8g17lkq_.d(59): Error: declaration expected, not `<`\\n/tmp/tmp8g17lkq_.d(62):\
    \ Error: unterminated character constant\\n/tmp/tmp8g17lkq_.d(65): Error: unterminated\
    \ character constant\\n/tmp/tmp8g17lkq_.d(68): Error: unterminated character constant\\\
    n/tmp/tmp8g17lkq_.d(71): Error: unterminated character constant\\n/tmp/tmp8g17lkq_.d(74):\
    \ Error: unterminated character constant\\n/tmp/tmp8g17lkq_.d(84): Error: declaration\
    \ expected, not `while`\\n/tmp/tmp8g17lkq_.d(90): Error: declaration expected,\
    \ not `break`\\n/tmp/tmp8g17lkq_.d(91): Error: declaration expected, not `case`\\\
    n/tmp/tmp8g17lkq_.d(93): Error: declaration expected, not `break`\\n/tmp/tmp8g17lkq_.d(94):\
    \ Error: declaration expected, not `case`\\n/tmp/tmp8g17lkq_.d(96): Error: declaration\
    \ expected, not `break`\\n/tmp/tmp8g17lkq_.d(97): Error: declaration expected,\
    \ not `case`\\n/tmp/tmp8g17lkq_.d(99): Error: declaration expected, not `break`\\\
    n/tmp/tmp8g17lkq_.d(100): Error: declaration expected, not `case`\\n/tmp/tmp8g17lkq_.d(102):\
    \ Error: declaration expected, not `break`\\n/tmp/tmp8g17lkq_.d(103): Error: declaration\
    \ expected, not `default`\\n/tmp/tmp8g17lkq_.d(105): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8g17lkq_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp35j4qk5l.d(117): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmp35j4qk5l.d(117): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35j4qk5l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n   \
    \ long temp84 = 0;\n    long temp85 = 0;\n\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_x0gkb8i.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_x0gkb8i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6jzxjjpq.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jzxjjpq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkdrle5fw.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdrle5fw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnkbrb1d1.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkbrb1d1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbnshz4o_.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbnshz4o_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_7_ttquy.d(134): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_7_ttquy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.size(); i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result = result + operand[i];\n                break;\n            case\
    \ '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '%':\n                result = result\
    \ % operand[i];\n                break;\n            case '^':\n             \
    \   result = result ^ operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your\
    \ effort, but this doesn't answer the question. Your code doesn't use any lists,\
    \ it just uses arrays. Also, your code is very inefficient, since it does a lot\
    \ of unnecessary calculations.\n<|/ c |>\n<| c |>\nI appreciate your effort, but\
    \ this doesn't answer the question. Your code doesn't use any lists, it just uses\
    \ arrays. Also, your code is very inefficient, since it does a lot of unnecessary\
    \ calculations.\n<|/ c |>\n<| c |>\nI appreciate your effort, but this doesn't\
    \ answer the question. Your code doesn't use any lists, it just uses arrays. Also,\
    \ your code is very inefficient, since it does a lot of unnecessary calculations.\n\
    <|/ c |>\n<| c |>\nI appreciate your effort, but this doesn't answer the question.\
    \ Your code doesn't use any lists, it just uses arrays. Also, your code is very\
    \ inefficient, since it does a lot of unnecessary calculations.\n<|/ c |>\n<|\
    \ c |>\nI appreciate your effort, but this doesn't answer the question. Your code\
    \ doesn't use any lists, it just uses arrays. Also, your code is very inefficient,\
    \ since it does a lot of unnecessary calculations.\n<|/ c |>\n<| a tags=java,algorithm\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7u5d10b.d(59): Error: declaration expected, not `<`\\n/tmp/tmpz7u5d10b.d(62):\
    \ Error: unterminated character constant\\n/tmp/tmpz7u5d10b.d(62): Error: unterminated\
    \ character constant\\n/tmp/tmpz7u5d10b.d(65): Error: unterminated character constant\\\
    n/tmp/tmpz7u5d10b.d(65): Error: unterminated character constant\\n/tmp/tmpz7u5d10b.d(68):\
    \ Error: unterminated character constant\\n/tmp/tmpz7u5d10b.d(68): Error: unterminated\
    \ character constant\\n/tmp/tmpz7u5d10b.d(71): Error: unterminated character constant\\\
    n/tmp/tmpz7u5d10b.d(71): Error: unterminated character constant\\n/tmp/tmpz7u5d10b.d(74):\
    \ Error: unterminated character constant\\n/tmp/tmpz7u5d10b.d(74): Error: unterminated\
    \ character constant\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7u5d10b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    \n    for(i\
    \ = 0; i < operator.length; i++)\n    {\n        switch(operator[i])\n       \
    \ {\n            case '+':\n                temp = result + operand[i];\n    \
    \            break;\n            case '-':\n                temp = result - operand[i];\n\
    \                break;\n            case '*':\n                temp = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   temp = result / operand[i];\n                break;\n            case '^':\n\
    \                temp = result ^ operand[i];\n                break;\n       \
    \ }\n        \n        result = temp;\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ fine, but I wanted to know if there is a way to do it without using switch statement.\
    \ Because I wanted to learn more about switch statement. Thanks again.\n<|/ c\
    \ |>\n<| c |>\nI added a solution without switch statement. Hope it helps.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1o0b8a9y.d(60): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1o0b8a9y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprqmd0kr6.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqmd0kr6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case \"+\": result +=\
    \ operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n \
    \           case \"*\": result *= operand[i]; break;\n            case \"/\":\
    \ result /= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; break;\n            default:\
    \ return -1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI appreciate your efforts, but this doesn't answer the question.\
    \ OP asked for a solution that doesn't use any external libraries.\n<|/ c |>\n\
    <| c |>\nI appreciate your efforts, but this doesn't answer the question. OP asked\
    \ for a solution that doesn't use any external libraries.\n<|/ c |>\n<| c |>\n\
    I appreciate your efforts, but this doesn't answer the question. OP asked for\
    \ a solution that doesn't use any external libraries.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts, but this doesn't answer the question. OP asked for a solution\
    \ that doesn't use any external libraries.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ efforts, but this doesn't answer the question. OP asked for a solution that\
    \ doesn't use any external libraries.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ytbhwal.d(46): Error: declaration expected, not `<`\\n/tmp/tmp8ytbhwal.d(49):\
    \ Error: unterminated character constant\\n/tmp/tmp8ytbhwal.d(49): Error: unterminated\
    \ character constant\\n/tmp/tmp8ytbhwal.d(52): Error: unterminated character constant\\\
    n/tmp/tmp8ytbhwal.d(52): Error: unterminated character constant\\n/tmp/tmp8ytbhwal.d(55):\
    \ Error: unterminated character constant\\n/tmp/tmp8ytbhwal.d(55): Error: unterminated\
    \ character constant\\n/tmp/tmp8ytbhwal.d(58): Error: unterminated character constant\\\
    n/tmp/tmp8ytbhwal.d(58): Error: unterminated character constant\\n/tmp/tmp8ytbhwal.d(61):\
    \ Error: unterminated character constant\\n/tmp/tmp8ytbhwal.d(61): Error: unterminated\
    \ character constant\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ytbhwal.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoc4p0v83.d(117): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpoc4p0v83.d(117): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoc4p0v83.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.Length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result = result + operand[i];\n                break;\n            case\
    \ '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '//':\n                result = result\
    \ / operand[i];\n                break;\n            case '**':\n            \
    \    result = result * operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't compile.\
    \ `operator` is a `string[]` but you try to access it like an `int[]`.\n<|/ c\
    \ |>\n<| c |>\nI fixed the code so it compiles. I forgot to change `operator[i]`\
    \ to `operator[string[i]]`\n<|/ c |>\n<| c |>\nI fixed the code so it compiles.\
    \ I forgot to change `operator[i]` to `operator[string[i]]`\n<|/ c |>\n<| c |>\n\
    I fixed the code so it compiles. I forgot to change `operator[i]` to `operator[string[i]]`\n\
    <|/ c |>\n<| c |>\nI fixed the code so it compiles. I forgot to change `operator[i]`\
    \ to `operator[string[i]]`\n<|/ c |>\n<| a dscore=2 |>\nI wrote a library that\
    \ does this for you:\nhttps://github.com/jonathanhurst/Mathematica-Expression-Parser\n\
    It has support for basic arithmetic operators, binary operators, unary operators,\
    \ parentheses, etc.\n<|/ a tags=c#,math,algorithm |>\n<| a tags=c#,math,algorithm\
    \ |>\nI wrote a library that does this for you:\nhttps://github.com/jonathanhurst/Mathematica-Expression-Parser\n\
    It has support for basic arithmetic operators, binary operators, unary operators,\
    \ parentheses, etc.\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI wrote a library that\
    \ does this for you:\nhttps://github.com/jonathanhurst/Mathematica-Expression-Parser\n\
    It has support for basic arithmetic operators, binary operators, unary operators,\
    \ parentheses, etc.\n<|/ a tags=c#,math,algorithm |>\n<| a |>\nI wrote a library\
    \ that does this for you:\nhttps://github.com/jonathanh\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnfcct8g1.d(47): Error: unterminated character constant\\n/tmp/tmpnfcct8g1.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmpnfcct8g1.d(48): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpnfcct8g1.d(48): Error: found `=` instead\
    \ of statement\\n/tmp/tmpnfcct8g1.d(50): Error: unterminated character constant\\\
    n/tmp/tmpnfcct8g1.d(50): Error: unterminated character constant\\n/tmp/tmpnfcct8g1.d(51):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpnfcct8g1.d(51): Error: found\
    \ `=` instead of statement\\n/tmp/tmpnfcct8g1.d(59): Error: declaration expected,\
    \ not `<`\\n/tmp/tmpnfcct8g1.d(62): Error: unterminated character constant\\n/tmp/tmpnfcct8g1.d(98):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpnfcct8g1.d(99): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpnfcct8g1.d(100): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpnfcct8g1.d(101): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfcct8g1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_tguazl2.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_tguazl2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa38424i_.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa38424i_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    \n    for(i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case \"+\"\
    : result += operand[i]; break;\n            case \"-\": result -= operand[i];\
    \ break;\n            case \"*\": result *= operand[i]; break;\n            case\
    \ \"//\": result /= operand[i]; break;\n            case \"**\": result **= operand[i];\
    \ break;\n            default: return -1;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your code,\
    \ but I got this error `Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ -1\n at com.example.myapp.Main.main(Main.java:24)` at line `result += operand[i];`\n\
    <|/ c |>\n<| c |>\nI edited my answer to fix the error. Can you try it again?\n\
    <|/ c |>\n<| c |>\nI still get the same error. I also tried with different inputs\
    \ and I still get the same error.\n<|/ c |>\n<| c |>\nI edited my answer to fix\
    \ the error. Can you try it again?\n<|/ c |>\n<| c |>\nI still get the same error.\
    \ I also tried with different inputs and I still get the same error.\n<|/ c |>\n\
    <| a |>\n<code>\nimport java.util.Scanner;\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd6sy5cqz.d(41): Error: expression expected, not `*=`\\n/tmp/tmpd6sy5cqz.d(41):\
    \ Error: found `operand` when expecting `;` following statement\\n/tmp/tmpd6sy5cqz.d(47):\
    \ Error: declaration expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpd6sy5cqz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length)\n    {\n        switch(operator[i])\n        {\n       \
    \     case '+': result += operand[i]; break;\n            case '-': result -=\
    \ operand[i]; break;\n            case '*': result *= operand[i]; break;\n   \
    \         case '/': result /= operand[i]; break;\n            case '//': result\
    \ /= operand[i]; break;\n            case '**': result *= operand[i]; break;\n\
    \            default: return -1;\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzhb6q4w8.d(40): Error: unterminated character constant\\n/tmp/tmpzhb6q4w8.d(40):\
    \ Error: unterminated character constant\\n/tmp/tmpzhb6q4w8.d(40): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpzhb6q4w8.d(40): Error: found `/=` instead\
    \ of statement\\n/tmp/tmpzhb6q4w8.d(41): Error: unterminated character constant\\\
    n/tmp/tmpzhb6q4w8.d(41): Error: unterminated character constant\\n/tmp/tmpzhb6q4w8.d(41):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpzhb6q4w8.d(41): Error: found\
    \ `*=` instead of statement\\n/tmp/tmpzhb6q4w8.d(48): Error: declaration expected,\
    \ not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzhb6q4w8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n   \
    \ long temp84 = 0;\n    long temp85 = 0;\n\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph6nbg0zf.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6nbg0zf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1vo65qim.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1vo65qim.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5i1a6opt.d(134): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5i1a6opt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length; ++i)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result %= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math\
    \ |>\n<| c |>\nThis doesn't work for negative numbers, e.g. `operator['+', '*',\
    \ '-']` and `array = [2, 3, 4, -5]` gives `result = -25`\n<|/ c |>\n<| c |>\n\
    I added a note about negative numbers. I didn't want to complicate the answer\
    \ too much.\n<|/ c |>\n<| c |>\nI added a note about negative numbers. I didn't\
    \ want to complicate the answer too much.\n<|/ c |>\n<| c |>\nI added a note about\
    \ negative numbers. I didn't want to complicate the answer too much.\n<|/ c |>\n\
    <| c |>\nI added a note about negative numbers. I didn't want to complicate the\
    \ answer too much.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6krqivo.d(57): Error: declaration expected, not `<`\\n/tmp/tmpq6krqivo.d(60):\
    \ Error: unterminated character constant\\n/tmp/tmpq6krqivo.d(63): Error: unterminated\
    \ character constant\\n/tmp/tmpq6krqivo.d(66): Error: unterminated character constant\\\
    n/tmp/tmpq6krqivo.d(69): Error: unterminated character constant\\n/tmp/tmpq6krqivo.d(72):\
    \ Error: unterminated character constant\\n/tmp/tmpq6krqivo.d(77): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpq6krqivo.d(77): Error: no identifier for declarator\
    \ `.Collections.Generic`\\n/tmp/tmpq6krqivo.d(78): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmpq6krqivo.d(78): Error: no identifier for declarator `.Linq`\\\
    n/tmp/tmpq6krqivo.d(79): Error: semicolon expected, not `.`\\n/tmp/tmpq6krqivo.d(79):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpq6krqivo.d(80): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpq6krqivo.d(80): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpq6krqivo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.size(); i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case \"+\": result +=\
    \ operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n \
    \           case \"*\": result *= operand[i]; break;\n            case \"/\":\
    \ result /= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; break;\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for\
    \ your answer. Your code works fine, but I still don't understand why my code\
    \ doesn't work. Could you please explain it to me?\n<|/ c |>\n<| c |>\nThe problem\
    \ is your `operator` array is of size `3` but you are trying to access `operator[3]`\
    \ which doesn't exist. Your code doesn't work because you are trying to access\
    \ `operator[3]` which doesn't exist.\n<|/ c |>\n<| c |>\nI understand that my\
    \ code doesn't work, but I don't understand why my code doesn't work. Could you\
    \ please explain it to me?\n<|/ c |>\n<| c |>\nI updated my answer with some explanation.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\nusing namespace std;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6pdrfam.d(45): Error: declaration expected, not `<`\\n/tmp/tmpq6pdrfam.d(48):\
    \ Error: unterminated character constant\\n/tmp/tmpq6pdrfam.d(48): Error: unterminated\
    \ character constant\\n/tmp/tmpq6pdrfam.d(51): Error: unterminated character constant\\\
    n/tmp/tmpq6pdrfam.d(51): Error: unterminated character constant\\n/tmp/tmpq6pdrfam.d(51):\
    \ Error: unterminated character constant\\n/tmp/tmpq6pdrfam.d(54): Error: unterminated\
    \ character constant\\n/tmp/tmpq6pdrfam.d(54): Error: unterminated character constant\\\
    n/tmp/tmpq6pdrfam.d(54): Error: unterminated character constant\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6pdrfam.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\n    \n    while(i\
    \ < operator.length && j < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                result += operand[j];\n   \
    \             break;\n            case '-':\n                result -= operand[j];\n\
    \                break;\n            case '*':\n                result *= operand[j];\n\
    \                break;\n            case '/':\n                result /= operand[j];\n\
    \                break;\n            case '^':\n                result ^= operand[j];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n        j++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nI like your solution,\
    \ but I believe that `switch` statement is too much for this task. `switch` statement\
    \ is very slow in comparison to `if` statement. Also `switch` statement is very\
    \ hard to read and maintain. Also `switch` statement is very hard to debug. `if`\
    \ statement is much easier to read and maintain.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I believe that switch statement is more readable and maintainable than\
    \ if statement. Also switch statement is more easy to debug. Also switch statement\
    \ is more easy to read and maintain.\n<|/ c |>\n<| c |>\nI agree with you too,\
    \ but I believe that switch statement is more readable and maintainable than if\
    \ statement. Also switch statement is more easy to debug. Also switch statement\
    \ is more easy to read and maintain.\n<|/ c |>\n<| c |>\nI agree with you too,\
    \ but I believe that switch statement is more readable and maintainable than if\
    \ statement. Also switch statement is more easy to debug. Also switch statement\
    \ is more easy to read and maintain.\n<|/ c |>\n<| c |>\nI agree with you too,\
    \ but I believe that switch statement is more readable and maintainable than if\
    \ statement. Also switch statement is more easy to debug. Also switch statement\
    \ is more easy to read and maintain.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe33fic4h.d(61): Error: declaration expected, not `<`\\n/tmp/tmpe33fic4h.d(81):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpe33fic4h.d(81): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpe33fic4h.d(82): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpe33fic4h.d(82): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpe33fic4h.d(83): Error: semicolon expected, not `.`\\n/tmp/tmpe33fic4h.d(83):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpe33fic4h.d(84): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpe33fic4h.d(84): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe33fic4h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp80oi3adw.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80oi3adw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++){\n \
    \       switch(operator[i]){\n            case \"+\": result = result + operand[i];\
    \ break;\n            case \"-\": result = result - operand[i]; break;\n     \
    \       case \"*\": result = result * operand[i]; break;\n            case \"\
    //\": result = result / operand[i]; break;\n            case \"**\": result =\
    \ result ** operand[i]; break;\n            default: throw new Exception(\"Invalid\
    \ operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math\
    \ |>\n<| a tags=c#,algorithm,math |>\n<code>\npublic long Calculate(string[] operators,\
    \ long[] operands)\n{\n    long result = 0;\n    foreach (string operator in operators)\n\
    \    {\n        switch (operator)\n        {\n            case \"+\":\n      \
    \          result += operands[0];\n                operands.RemoveAt(0);\n   \
    \             break;\n            case \"-\":\n                result -= operands[0];\n\
    \                operands.RemoveAt(0);\n                break;\n            case\
    \ \"*\":\n                result *= operands[0];\n                operands.RemoveAt(0);\n\
    \                break;\n            case \"/\":\n                result /= operands[0];\n\
    \                operands.RemoveAt(0);\n                break;\n            case\
    \ \"**\":\n                result **= operands[0];\n                operands.RemoveAt(0);\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic long Calculate(string[] operators,\
    \ long[] operands)\n{\n    long result = 0;\n    foreach (string operator in operators)\n\
    \    {\n        switch (operator)\n        {\n            case \"+\":\n      \
    \          result += operands[0];\n                operands.RemoveAt(0);\n   \
    \             break;\n            case \"-\":\n                result -= operands[0];\n\
    \                operands.RemoveAt(0);\n                break;\n            case\
    \ \"*\":\n                result *= operands[0];\n                operands.RemoveAt(0);\n\
    \                break;\n            case \"/\":\n                result /= operands[0];\n\
    \                operands.RemoveAt(0);\n                break;\n            case\
    \ \"**\":\n                result **= operands[0];\n                operands.RemoveAt(0);\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c#,algorithm,math |>\n<| a tags=c#,algorithm,math |>\n<code>\npublic long\
    \ Calculate(string[] operators, long[] operands)\n{\n    long result = 0;\n  \
    \  foreach (string operator in operators)\n\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqkjt3_c9.d(43): Error: declaration expected, not `<`\\n/tmp/tmpqkjt3_c9.d(50):\
    \ Error: declaration expected, not `foreach`\\n/tmp/tmpqkjt3_c9.d(56): Error:\
    \ unexpected `(` in declarator\\n/tmp/tmpqkjt3_c9.d(56): Error: basic type expected,\
    \ not `0`\\n/tmp/tmpqkjt3_c9.d(56): Error: found `0` when expecting `)`\\n/tmp/tmpqkjt3_c9.d(56):\
    \ Error: no identifier for declarator `operands.RemoveAt(_error_)`\\n/tmp/tmpqkjt3_c9.d(56):\
    \ Error: semicolon expected following function declaration\\n/tmp/tmpqkjt3_c9.d(56):\
    \ Error: declaration expected, not `)`\\n/tmp/tmpqkjt3_c9.d(57): Error: declaration\
    \ expected, not `break`\\n/tmp/tmpqkjt3_c9.d(58): Error: declaration expected,\
    \ not `case`\\n/tmp/tmpqkjt3_c9.d(60): Error: unexpected `(` in declarator\\n/tmp/tmpqkjt3_c9.d(60):\
    \ Error: basic type expected, not `0`\\n/tmp/tmpqkjt3_c9.d(60): Error: found `0`\
    \ when expecting `)`\\n/tmp/tmpqkjt3_c9.d(60): Error: no identifier for declarator\
    \ `operands.RemoveAt(_error_)`\\n/tmp/tmpqkjt3_c9.d(60): Error: semicolon expected\
    \ following function declaration\\n/tmp/tmpqkjt3_c9.d(60): Error: declaration\
    \ expected, not `)`\\n/tmp/tmpqkjt3_c9.d(61): Error: declaration expected, not\
    \ `break`\\n/tmp/tmpqkjt3_c9.d(62): Error: declaration expected, not `case`\\\
    n/tmp/tmpqkjt3_c9.d(64): Error: unexpected `(` in declarator\\n/tmp/tmpqkjt3_c9.d(64):\
    \ Error: basic type expected, not `0`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqkjt3_c9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n    long C2 = 0;\n    long D2 =\
    \ 0;\n    long E2 = 0;\n    long F2 = 0;\n    long G2 = 0;\n    long H2 = 0;\n\
    \    long I2 = 0;\n    long J2 = 0;\n    long K2 = 0;\n    long L2 = 0;\n    long\
    \ M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n    long P2 = 0;\n    long Q2 =\
    \ 0;\n    long R2 = 0;\n    long S2 = 0;\n    long T2 = 0;\n    long U2 = 0;\n\
    \    long V2 = 0;\n    long W2 = 0;\n    long X2 = 0;\n    long Y2 = 0;\n    long\
    \ Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n    long C3 = 0;\n    long D3 =\
    \ 0;\n    long E3 = 0;\n    long F3 = 0;\n    long G3 = 0;\n    long H3 = 0;\n\
    \    long I3 = 0;\n    long J3 = 0;\n    long K3 = 0;\n    long L3 = 0;\n    long\
    \ M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n    long P3 = 0;\n    long Q3 =\
    \ 0;\n    long R3 = 0;\n    long S3 = 0;\n    long T3 = 0;\n    long U3 = 0;\n\
    \    long V3 = 0;\n    long W3 = 0;\n    long X3 = 0;\n    long Y3 = 0;\n    long\
    \ Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n    long C4 = 0;\n    long D4 =\
    \ 0;\n    long E4 = 0;\n    long F\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpznfgdin6.d(133): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpznfgdin6.d(133): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznfgdin6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case '+':\
    \ result += operand[i]; break;\n            case '-': result -= operand[i]; break;\n\
    \            case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '//': result /= operand[i]; break;\n\
    \            case '**': result *= operand[i]; break;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,algorithm,math,c++ |>\n<| c |>\nI like this\
    \ solution, although I wonder if it will perform better than the recursive solution.\
    \ I'll have to test it out to see.\n<|/ c |>\n<| c |>\nI tested it out and it's\
    \ about twice as fast as the recursive solution. Thanks!\n<|/ c |>\n<| c |>\n\
    I tested it out and it's about twice as fast as the recursive solution. Thanks!\n\
    <|/ c |>\n<| c |>\nI tested it out and it's about twice as fast as the recursive\
    \ solution. Thanks!\n<|/ c |>\n<| a tags=c#,algorithm,math,c++ |>\nI believe that\
    \ you can solve this problem using recursion. \n<code>\npublic long Calculate(string\
    \ operator, long[] operand)\n{\n    long result = 0;\n    switch(operator)\n \
    \   {\n        case \"+\": result = operand[0] + operand[1]; break;\n        case\
    \ \"-\": result = operand[0] - operand[1]; break;\n        case \"*\": result\
    \ = operand[0] * operand[1]; break;\n        case \"/\": result = operand[0] /\
    \ operand[1]; break;\n        case \"//\": result = operand[0] / operand[1]; break;\n\
    \        case \"**\": result = operand[0] * operand[1]; break;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, although\
    \ I wonder if it will perform better than the recursive solution. I'll have to\
    \ test it out to see.\n<|/ c |>\n<| c |>\nI tested it out and it's about twice\
    \ as fast as the recursive solution. Thanks!\n<|/ c |>\n<| a tags=c#,algorithm,math,c++\
    \ |>\nI believe that you can solve this problem using recursion. \n<code>\npublic\
    \ long Calculate(string operator, long[] operand)\n{\n    long result = 0;\n \
    \   switch(operator)\n    {\n        case \"+\": result = operand[0] + operand[1];\
    \ break;\n        case \"-\": result = \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt93ibape.d(40): Error: unterminated character constant\\n/tmp/tmpt93ibape.d(40):\
    \ Error: unterminated character constant\\n/tmp/tmpt93ibape.d(40): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpt93ibape.d(40): Error: found `/=` instead\
    \ of statement\\n/tmp/tmpt93ibape.d(41): Error: unterminated character constant\\\
    n/tmp/tmpt93ibape.d(41): Error: unterminated character constant\\n/tmp/tmpt93ibape.d(41):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpt93ibape.d(41): Error: found\
    \ `*=` instead of statement\\n/tmp/tmpt93ibape.d(46): Error: declaration expected,\
    \ not `<`\\n/tmp/tmpt93ibape.d(49): Error: unterminated character constant\\n/tmp/tmpt93ibape.d(52):\
    \ Error: unterminated character constant\\n/tmp/tmpt93ibape.d(55): Error: unterminated\
    \ character constant\\n/tmp/tmpt93ibape.d(58): Error: unterminated character constant\\\
    n/tmp/tmpt93ibape.d(66): Error: declaration expected, not `switch`\\n/tmp/tmpt93ibape.d(68):\
    \ Error: declaration expected, not `break`\\n/tmp/tmpt93ibape.d(69): Error: declaration\
    \ expected, not `case`\\n/tmp/tmpt93ibape.d(69): Error: declaration expected,\
    \ not `break`\\n/tmp/tmpt93ibape.d(70): Error: declaration expected, not `case`\\\
    n/tmp/tmpt93ibape.d(70): Error: declaration expected, not `break`\\n/tmp/tmpt93ibape.d(71):\
    \ Error: declaration expected, not `case`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpt93ibape.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4\
    \ = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long\
    \ temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n\
    \    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15\
    \ = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n   \
    \ long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22\
    \ = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n   \
    \ long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29\
    \ = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n   \
    \ long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36\
    \ = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n   \
    \ long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43\
    \ = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n   \
    \ long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50\
    \ = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n   \
    \ long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57\
    \ = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n   \
    \ long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64\
    \ = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n   \
    \ long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71\
    \ = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n   \
    \ long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78\
    \ = 0;\n    long temp79 = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n   \
    \ long temp82 = 0;\n    long temp83 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjqaaripv.d(118): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqaaripv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length; i++)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '//':\n                result /= operand[i];\n             \
    \   break;\n            case '**':\n                result *= operand[i];\n  \
    \              break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=algorithm,c#,math |>\n<| c |>\nThis doesn't seem to work. `do_algebra`\
    \ returns `0` for `operator['+', '*', '-']` and `array = [2, 3, 4, 5]` which should\
    \ return `9`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test case\
    \ in the answer. Can you please try it again?\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it works. I added the test case in the answer. Can you please try\
    \ it again?\n<|/ c |>\n<| c |>\nI tested it again and it works. I added the test\
    \ case in the answer. Can you please try it again?\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it works. I added the test case in the answer. Can you please try\
    \ it again?\n<|/ c |>\n<| a tags=algorithm,c#,math |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx83adda8.d(48): Error: unterminated character constant\\n/tmp/tmpx83adda8.d(48):\
    \ Error: unterminated character constant\\n/tmp/tmpx83adda8.d(49): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpx83adda8.d(49): Error: found `/=` instead\
    \ of statement\\n/tmp/tmpx83adda8.d(51): Error: unterminated character constant\\\
    n/tmp/tmpx83adda8.d(51): Error: unterminated character constant\\n/tmp/tmpx83adda8.d(52):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpx83adda8.d(52): Error: found\
    \ `*=` instead of statement\\n/tmp/tmpx83adda8.d(60): Error: declaration expected,\
    \ not `<`\\n/tmp/tmpx83adda8.d(63): Error: unterminated character constant\\n/tmp/tmpx83adda8.d(80):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpx83adda8.d(80): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpx83adda8.d(81): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpx83adda8.d(81): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpx83adda8.d(82): Error: semicolon expected, not `.`\\n/tmp/tmpx83adda8.d(82):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpx83adda8.d(83): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpx83adda8.d(83): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpx83adda8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case \"+\"\
    : \n                temp = result + operand[i];\n                break;\n    \
    \        case \"-\": \n                temp = result - operand[i];\n         \
    \       break;\n            case \"*\": \n                temp = result * operand[i];\n\
    \                break;\n            case \"//\": \n                temp = result\
    \ / operand[i];\n                break;\n            case \"**\": \n         \
    \       temp = result ** operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n     \
    \   result = temp;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to know how to implement the\
    \ algebraic expressions themselves.\n<|/ c |>\n<| c |>\nI believe this does answer\
    \ the question. OP wants to know how to implement the algebraic expressions themselves.\
    \ I added a code sample to my answer to show how this can be done.\n<|/ c |>\n\
    <| c |>\nThe question was how to implement the algebraic expressions themselves,\
    \ not how to implement the addition operator. Your answer doesn't do that.\n<|/\
    \ c |>\n<| c |>\nThe question was how to implement the algebraic expressions themselves,\
    \ not how to implement the addition operator. Your answer doesn't do that.\n<|/\
    \ c |>\n<| c |>\nThe question was how to implement the algebraic expressions themselves,\
    \ not how to implement the addition operator. Your answer doesn't do that.\n<|/\
    \ c |>\n<| a dscore=0 |>\nI wrote a Java program that does this for me. \n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8dh1583d.d(58): Error: declaration expected, not `<`\\n/tmp/tmp8dh1583d.d(61):\
    \ Error: unterminated character constant\\n/tmp/tmp8dh1583d.d(67): Error: unterminated\
    \ character constant\\n/tmp/tmp8dh1583d.d(70): Error: unterminated character constant\\\
    n/tmp/tmp8dh1583d.d(73): Error: unterminated character constant\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dh1583d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3tnzdyzk.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tnzdyzk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '**':\n                result *= operand[i];\n   \
    \             break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. `operator` has two elements and `operand`\
    \ has five.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test case\
    \ in the answer. Can you please tell me what is not working?\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added the test case in the answer. Can you please\
    \ tell me what is not working?\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ added the test case in the answer. Can you please tell me what is not working?\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\
    \ Can you please tell me what is not working?\n<|/ c |>\n<| a tags=c#,algorithm\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm75k_sne.d(48): Error: unterminated character constant\\n/tmp/tmpm75k_sne.d(48):\
    \ Error: unterminated character constant\\n/tmp/tmpm75k_sne.d(49): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpm75k_sne.d(49): Error: found `*=` instead\
    \ of statement\\n/tmp/tmpm75k_sne.d(57): Error: declaration expected, not `<`\\\
    n/tmp/tmpm75k_sne.d(60): Error: unterminated character constant\\n/tmp/tmpm75k_sne.d(77):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpm75k_sne.d(77): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpm75k_sne.d(78): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpm75k_sne.d(78): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpm75k_sne.d(79): Error: semicolon expected, not `.`\\n/tmp/tmpm75k_sne.d(79):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpm75k_sne.d(80): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpm75k_sne.d(80): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpm75k_sne.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long Dd =\
    \ 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh = 0;\n\
    \    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n    long\
    \ Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long Qq =\
    \ 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu = 0;\n\
    \    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n    long\
    \ Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n    long Ddd\
    \ = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n    long Hhh\
    \ = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n    long Lll\
    \ = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n    long Ppp\
    \ = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n    long Ttt\
    \ = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdbhq456y.d(124): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpdbhq456y.d(124): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbhq456y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe5kqyip9.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5kqyip9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result %= operand[i];\n              \
    \  break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for the answer. Can you please explain why you used switch statement\
    \ instead of if statement?\n<|/ c |>\n<| c |>\nI used switch statement because\
    \ I thought that it is more readable than if-else statement. Also I used switch\
    \ statement because I thought that it is more readable than if-else statement.\
    \ Also I used switch statement because I thought that it is more readable than\
    \ if-else statement. Also I used switch statement because I thought that it is\
    \ more readable than if-else statement. Also I used switch statement because I\
    \ thought that it is more readable than if-else statement. Also I used switch\
    \ statement because I thought that it is more readable than if-else statement.\
    \ Also I used switch statement because I thought that it is more readable than\
    \ if-else statement. Also I used switch statement because I thought that it is\
    \ more readable than if-else statement. Also I used switch statement because I\
    \ thought that it is more readable than if-else statement. Also I used switch\
    \ statement because I thought that it is more readable than if-else statement.\
    \ Also I used switch statement because I thought that it is more readable than\
    \ if-else statement. Also I used switch statement because I thought that it is\
    \ more readable than if-else statement. Also I used switch statement because I\
    \ thought that it is more readable than if-else statement. Also I used switch\
    \ statement because I thought that it is more readable than if-else statement.\
    \ Also I used switch statement because I thought that it is more readable than\
    \ if-else statement. Also I used switch statement because I thought that it is\
    \ more readable than if-else statement. Also I used switch statement because I\
    \ thought that it is more readable than if-else statement. Also I used switch\
    \ statement because I thought that it is more readable than if-else statement.\
    \ Also I used switch statement because I thought that it is more readable than\
    \ if-else statement. Also I used switch statement because I thought that it is\
    \ more readable than if-else statement. Also I used switch statement because I\
    \ thought that it is more readable than if-else statement. \nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy44_5cd_.d(54): Error: declaration expected, not `<`\\n/tmp/tmpy44_5cd_.d(65):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpy44_5cd_.d(66): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpy44_5cd_.d(67): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpy44_5cd_.d(68): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy44_5cd_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp93hqxp21.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93hqxp21.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvd8sqavt.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvd8sqavt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfelvbnz_.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfelvbnz_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++){\n \
    \       switch(operator[i]){\n            case '+':\n                result +=\
    \ operand[i];\n                break;\n            case '-':\n               \
    \ result -= operand[i];\n                break;\n            case '*':\n     \
    \           result *= operand[i];\n                break;\n            case '/':\n\
    \                result /= operand[i];\n                break;\n            case\
    \ '^':\n                result *= operand[i];\n                break;\n      \
    \      default:\n                throw new Exception(\"Invalid operator\");\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,math\
    \ |>\n<| c |>\nI like your solution, however I believe it can be made more efficient\
    \ by using a stack to store the operands and operators. Also the code can be made\
    \ more readable by using a switch statement instead of an if statement.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. Stack implementation is more efficient. Also\
    \ I agree with you that switch statement is more readable. However I believe that\
    \ switch statement is more readable than if-else statement. Also I believe that\
    \ switch statement is more readable than if-else statement because switch statement\
    \ is more readable than if-else statement because switch statement is more readable\
    \ than if-else statement because switch statement is more readable than if-else\
    \ statement because switch statement is more readable than if-else statement because\
    \ switch statement is more readable than if-else statement because switch statement\
    \ is more readable than if-else statement because switch statement is more readable\
    \ than if-else statement because switch statement is more readable than if-else\
    \ statement because switch statement is more readable than if-else statement because\
    \ switch statement is more readable than if-else statement because switch statement\
    \ is more readable than if-else statement because switch statement is more readable\
    \ than if-else statement because switch statement is more readable than if-else\
    \ statement because switch statement is more readable than if-else statement because\
    \ switch statement is more readable than if-else statement because switch statement\
    \ is more readable than if-else statement because switch statement is more readable\
    \ than if-else statement because switch statement is more readable than if-else\
    \ statement because switch statement is more readable than if-else statement because\
    \ switch statement is more readable than if-else statement because switch statement\
    \ is more readable than if-else statement because switch statement is more readable\
    \ than if-else statement because switch statement is more readable than if-else\
    \ statement because switch statement is more readable than if-else statement because\
    \ switch statement is more readable than if-else statement because switch statement\
    \ is more readable than if-else statement because switch statement is more \n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7vqmz9_b.d(54): Error: declaration expected, not `<`\\n/tmp/tmp7vqmz9_b.d(65):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp7vqmz9_b.d(66): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp7vqmz9_b.d(67): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp7vqmz9_b.d(68): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vqmz9_b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.size(); i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result *= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you so much for your help. I really appreciate it. I will\
    \ try this out and let you know how it goes.\n<|/ c |>\n<| c |>\nI got it to work.\
    \ Thank you so much. I really appreciate it.\n<|/ c |>\n<| c |>\nI got it to work.\
    \ Thank you so much. I really appreciate it.\n<|/ c |>\n<| c |>\nI got it to work.\
    \ Thank you so much. I really appreciate it.\n<|/ c |>\n<| c |>\nI got it to work.\
    \ Thank you so much. I really appreciate it.\n<|/ c |>\n<| a tags=c#,algorithm\
    \ |>\nI wrote a solution in C#. \n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpog5kxq6c.d(56): Error: declaration expected, not `<`\\n/tmp/tmpog5kxq6c.d(77):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpog5kxq6c.d(77): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpog5kxq6c.d(78): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpog5kxq6c.d(78): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpog5kxq6c.d(79): Error: semicolon expected, not `.`\\n/tmp/tmpog5kxq6c.d(79):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpog5kxq6c.d(80): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpog5kxq6c.d(80): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpog5kxq6c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n    \
    \        result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '^')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the answer! I appreciate it! But I still\
    \ don't understand why my code doesn't work. Can you please explain to me why\
    \ my code doesn't work?\n<|/ c |>\n<| c |>\nThe reason your code doesn't work\
    \ is because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement the algorithm correctly. Your code doesn't work\
    \ because you didn't implement \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyvo46ard.d(52): Error: expression expected, not `*=`\\n/tmp/tmpyvo46ard.d(52):\
    \ Error: found `operand` when expecting `;` following statement\\n/tmp/tmpyvo46ard.d(58):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpyvo46ard.d(61): Error: unterminated\
    \ character constant\\n/tmp/tmpyvo46ard.d(61): Error: unterminated character constant\\\
    n/tmp/tmpyvo46ard.d(61): Error: unterminated character constant\\n/tmp/tmpyvo46ard.d(64):\
    \ Error: unterminated character constant\\n/tmp/tmpyvo46ard.d(64): Error: unterminated\
    \ character constant\\n/tmp/tmpyvo46ard.d(64): Error: unterminated character constant\\\
    n/tmp/tmpyvo46ard.d(64): Error: unterminated character constant\\n/tmp/tmpyvo46ard.d(64):\
    \ Error: unterminated character constant\\n/tmp/tmpyvo46ard.d(64): Error: unterminated\
    \ character constant\\n/tmp/tmpyvo46ard.d(64): Error: unterminated character constant\\\
    n/tmp/tmpyvo46ard.d(64): Error: unterminated character constant\\n/tmp/tmpyvo46ard.d(64):\
    \ Error: unterminated character constant\\n/tmp/tmpyvo46ard.d(64): Error: unterminated\
    \ character constant\\n/tmp/tmpyvo46ard.d(64): Error: unterminated character constant\\\
    n/tmp/tmpyvo46ard.d(64): Error: unterminated character constant\\n/tmp/tmpyvo46ard.d(64):\
    \ Error: unterminated character constant\\n/tmp/tmpyvo46ard.d(64): Error: unterminated\
    \ character constant\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyvo46ard.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvn8wq48c.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn8wq48c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length; ++i)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result %= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Can you please explain how this works?\n<|/ c\
    \ |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Can you please explain how this works?\n<|/ c\
    \ |>\n<| a tags=java,arrays,algorithm |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_4p3ouls.d(57): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4p3ouls.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n    long C2 = 0;\n    long D2 =\
    \ 0;\n    long E2 = 0;\n    long F2 = 0;\n    long G2 = 0;\n    long H2 = 0;\n\
    \    long I2 = 0;\n    long J2 = 0;\n    long K2 = 0;\n    long L2 = 0;\n    long\
    \ M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n    long P2 = 0;\n    long Q2 =\
    \ 0;\n    long R2 = 0;\n    long S2 = 0;\n    long T2 = 0;\n    long U2 = 0;\n\
    \    long V2 = 0;\n    long W2 = 0;\n    long X2 = 0;\n    long Y2 = 0;\n    long\
    \ Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n    long C3 = 0;\n    long D3 =\
    \ 0;\n    long E3 = 0;\n    long F3 = 0;\n    long G3 = 0;\n    long H3 = 0;\n\
    \    long I3 = 0;\n    long J3 = 0;\n    long K3 = 0;\n    long L3 = 0;\n    long\
    \ M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n    long P3 = 0;\n    long Q3 =\
    \ 0;\n    long R3 = 0;\n    long S3 = 0;\n    long T3 = 0;\n    long U3 = 0;\n\
    \    long V3 = 0;\n    long W3 = 0;\n    long X3 = 0;\n    long Y3 = 0;\n    long\
    \ Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n    long C4 = 0;\n    long D4 =\
    \ 0;\n    long E4 = 0;\n    long F\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb3sr5h6_.d(133): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpb3sr5h6_.d(133): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb3sr5h6_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++) \n \
    \   {\n        switch(operator[i]) \n        {\n            case \"+\": result\
    \ += operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n\
    \            case \"*\": result *= operand[i]; break;\n            case \"//\"\
    : result /= operand[i]; break;\n            case \"**\": result *= operand[i];\
    \ result *= operand[i]; break;\n            default: return -1;\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `operator[]` set to `+` and `operand` set to `[2,\
    \ 3, 4, 5]`.\n<|/ c |>\n<| c |>\nIt does work. Try it with the example I gave\
    \ you. `operator[]` set to `+` and `operand` set to `[2, 3, 4, 5]`.\n<|/ c |>\n\
    <| c |>\nI see now. Thanks for clarifying.\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't use recursion.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ use recursion.\n<|/ c |>\n<| a dscore=0 |>\nThe simplest way is to just loop\
    \ through the array and add each element to the result until you reach the end\
    \ of the array. \n<code>\nlong do_algebra(string[] operator, long[] operand) {\n\
    \    long result = 0;\n    for(int i = 0; i < operator.length; i++) \n    {\n\
    \        switch(operator[i]) \n        {\n            case \"+\": result += operand[i];\
    \ break;\n            case \"-\": result -= operand[i]; break;\n            case\
    \ \"*\": result *= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; result *= operand[i];\
    \ break;\n            default: return -1;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with\
    \ `operator[]` set to `+` and `operand` set to `[2, 3, 4, 5]`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with the example I gave you. `operator[]` set to `+`\
    \ and `operand` set to `[2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nI see now. Thanks for\
    \ clarifying.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknwt4uqr.d(45): Error: declaration expected, not `<`\\n/tmp/tmpknwt4uqr.d(48):\
    \ Error: unterminated character constant\\n/tmp/tmpknwt4uqr.d(57): Error: unterminated\
    \ character constant\\n/tmp/tmpknwt4uqr.d(60): Error: unterminated character constant\\\
    n/tmp/tmpknwt4uqr.d(67): Error: declaration expected, not `for`\\n/tmp/tmpknwt4uqr.d(67):\
    \ Error: no identifier for declarator `i`\\n/tmp/tmpknwt4uqr.d(67): Error: declaration\
    \ expected, not `<`\\n/tmp/tmpknwt4uqr.d(67): Error: no identifier for declarator\
    \ `i`\\n/tmp/tmpknwt4uqr.d(67): Error: declaration expected, not `++`\\n/tmp/tmpknwt4uqr.d(71):\
    \ Error: declaration expected, not `break`\\n/tmp/tmpknwt4uqr.d(72): Error: declaration\
    \ expected, not `case`\\n/tmp/tmpknwt4uqr.d(72): Error: declaration expected,\
    \ not `break`\\n/tmp/tmpknwt4uqr.d(73): Error: declaration expected, not `case`\\\
    n/tmp/tmpknwt4uqr.d(73): Error: declaration expected, not `break`\\n/tmp/tmpknwt4uqr.d(74):\
    \ Error: declaration expected, not `case`\\n/tmp/tmpknwt4uqr.d(74): Error: declaration\
    \ expected, not `break`\\n/tmp/tmpknwt4uqr.d(75): Error: declaration expected,\
    \ not `case`\\n/tmp/tmpknwt4uqr.d(75): Error: no identifier for declarator `result`\\\
    n/tmp/tmpknwt4uqr.d(75): Error: declaration expected, not `*=`\\n/tmp/tmpknwt4uqr.d(75):\
    \ Error: declaration expected, not `break`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpknwt4uqr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    int j = 0;\n\
    \    \n    while(i < operator.length && j < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                temp = operand[j] + operand[j+1];\n\
    \                result += temp;\n                i += 2;\n                j +=\
    \ 2;\n                break;\n            case '-':\n                temp = operand[j]\
    \ - operand[j+1];\n                result += temp;\n                i += 2;\n\
    \                j += 2;\n                break;\n            case '*':\n    \
    \            temp = operand[j] * operand[j+1];\n                result += temp;\n\
    \                i += 2;\n                j += 2;\n                break;\n  \
    \          case '/':\n                temp = operand[j] / operand[j+1];\n    \
    \            result += temp;\n                i += 2;\n                j += 2;\n\
    \                break;\n            case '%':\n                temp = operand[j]\
    \ % operand[j+1];\n                result += temp;\n                i += 2;\n\
    \                j += 2;\n                break;\n            case '^':\n    \
    \            temp = operand[j] ^ operand[j+1];\n                result += temp;\n\
    \                i += 2;\n                j += 2;\n                break;\n  \
    \          default:\n                result += operand[j];\n                i\
    \ += 1;\n                j += 1;\n                break;\n        }\n    }\n \
    \   return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you very much for your\
    \ answer! I appreciate it! I tried to implement your solution, but I got stuck\
    \ on a couple of things. I edited my question to include my new code and the error\
    \ I got from it. Can you please take a look and see what I'm doing wrong? Thank\
    \ you!\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that works\
    \ with your new code. Let me know if you have any questions.\n<|/ c |>\n<| c |>\n\
    Thank you so much! I really appreciate it! I got it to work! I really appreciate\
    \ your help!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<|\
    \ a dscore=0 |>\nI believe this can be done using recursion.\n<code>\npublic int\
    \ doMath(String operator, int[] operand) {\n    int result = 0;\n    int i = 0;\n\
    \    int j = 0;\n    \n    while(i < operator.length && j < operand.length) {\n\
    \        switch(operator[i]) {\n            case '+':\n                result\
    \ += operand[j] + operand[j+1];\n                i += 2;\n                j +=\
    \ 2;\n                break;\n            case '-':\n                result +=\
    \ operand[j] - \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0dfozuzu.d(84): Error: declaration expected, not `<`\\n/tmp/tmp0dfozuzu.d(87):\
    \ Error: unterminated character constant\\n/tmp/tmp0dfozuzu.d(106): Error: declaration\
    \ expected, not `while`\\n/tmp/tmp0dfozuzu.d(110): Error: no identifier for declarator\
    \ `i`\\n/tmp/tmp0dfozuzu.d(110): Error: declaration expected, not `+=`\\n/tmp/tmp0dfozuzu.d(111):\
    \ Error: no identifier for declarator `j`\\n/tmp/tmp0dfozuzu.d(111): Error: declaration\
    \ expected, not `+=`\\n/tmp/tmp0dfozuzu.d(112): Error: declaration expected, not\
    \ `break`\\n/tmp/tmp0dfozuzu.d(113): Error: declaration expected, not `case`\\\
    n/tmp/tmp0dfozuzu.d(119): Error: declaration expected, not `assert`\\n/tmp/tmp0dfozuzu.d(120):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp0dfozuzu.d(121): Error:\
    \ declaration expected, not `assert`\\n/tmp/tmp0dfozuzu.d(122): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dfozuzu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    \n    for(i\
    \ = 0; i < operator.length; i++) \n    {\n        switch(operator[i]) \n     \
    \   {\n            case '+':\n                temp = result + operand[i];\n  \
    \              break;\n            case '-':\n                temp = result -\
    \ operand[i];\n                break;\n            case '*':\n               \
    \ temp = result * operand[i];\n                break;\n            case '/':\n\
    \                temp = result / operand[i];\n                break;\n       \
    \     case '**':\n                temp = result ** operand[i];\n             \
    \   break;\n            default:\n                temp = result;\n           \
    \     break;\n        }\n        result = temp;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,algorithm |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1yh2wata.d(50): Error: unterminated character constant\\n/tmp/tmp1yh2wata.d(50):\
    \ Error: unterminated character constant\\n/tmp/tmp1yh2wata.d(51): Error: found\
    \ `temp` when expecting `:`\\n/tmp/tmp1yh2wata.d(51): Error: found `=` instead\
    \ of statement\\n/tmp/tmp1yh2wata.d(61): Error: declaration expected, not `<`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yh2wata.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b =\
    \ 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n   \
    \ long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n   \
    \ long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d =\
    \ 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m =\
    \ 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n   \
    \ long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v =\
    \ 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n   \
    \ long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e =\
    \ 0;\n    long f = 0;\n    long \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpctlcd8k8.d(135): Error: no identifier for declarator `long`\\\
    n/tmp/tmpctlcd8k8.d(135): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctlcd8k8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu3u0jvw7.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3u0jvw7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf1hxoco6.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1hxoco6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfe79k8kp.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe79k8kp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length)\n    {\n        switch(operator[i])\n        {\n       \
    \     case '+':\n                result = result + operand[i];\n             \
    \   break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '//':\n\
    \                result = result / operand[i];\n                break;\n     \
    \       case '**':\n                result = result ** operand[i];\n         \
    \       break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator: \" + operator[i]);\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much! This was very helpful!\n\
    <|/ c |>\n<| a tags=java,algorithm,math |>\nI wrote a Java program to solve this\
    \ problem in O(n) time complexity and O(1) space complexity. \n<code>\nimport\
    \ java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq0si57su.d(48): Error: unterminated character constant\\n/tmp/tmpq0si57su.d(48):\
    \ Error: unterminated character constant\\n/tmp/tmpq0si57su.d(49): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpq0si57su.d(49): Error: found `=` instead\
    \ of statement\\n/tmp/tmpq0si57su.d(51): Error: unterminated character constant\\\
    n/tmp/tmpq0si57su.d(51): Error: unterminated character constant\\n/tmp/tmpq0si57su.d(52):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpq0si57su.d(52): Error: found\
    \ `=` instead of statement\\n/tmp/tmpq0si57su.d(61): Error: declaration expected,\
    \ not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0si57su.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC =\
    \ 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC =\
    \ 0;\n    long AD = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp869gq3li.d(133): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp869gq3li.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.size(); i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result = result + operand[i];\n                break;\n            case\
    \ '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '//':\n                result = result\
    \ / operand[i];\n                break;\n            case '**':\n            \
    \    result = result * operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math |>\n<| a tags=c#,algorithm,math\
    \ |>\nI wrote a C# program that solves this problem in O(n) time. \n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphjys6rqo.d(47): Error: unterminated character constant\\n/tmp/tmphjys6rqo.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmphjys6rqo.d(48): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmphjys6rqo.d(48): Error: found `=` instead\
    \ of statement\\n/tmp/tmphjys6rqo.d(50): Error: unterminated character constant\\\
    n/tmp/tmphjys6rqo.d(50): Error: unterminated character constant\\n/tmp/tmphjys6rqo.d(51):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmphjys6rqo.d(51): Error: found\
    \ `=` instead of statement\\n/tmp/tmphjys6rqo.d(59): Error: declaration expected,\
    \ not `<`\\n/tmp/tmphjys6rqo.d(65): Error: semicolon expected, not `.`\\n/tmp/tmphjys6rqo.d(65):\
    \ Error: no identifier for declarator `.Collections.Generic`\\n/tmp/tmphjys6rqo.d(66):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmphjys6rqo.d(66): Error: no identifier\
    \ for declarator `.Linq`\\n/tmp/tmphjys6rqo.d(67): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmphjys6rqo.d(67): Error: no identifier for declarator `.Text`\\\
    n/tmp/tmphjys6rqo.d(68): Error: semicolon expected, not `.`\\n/tmp/tmphjys6rqo.d(68):\
    \ Error: no identifier for declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphjys6rqo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operand.length)\n \
    \   {\n        switch(operator[i])\n        {\n            case '+':\n       \
    \         result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result *= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,algorithm,math,algorithm |>\n<| c |>\nI believe that your solution\
    \ is more elegant than mine. Thanks for sharing your solution.\n<|/ c |>\n<| c\
    \ |>\nI believe that your solution is more elegant than mine. Thanks for sharing\
    \ your solution.\n<|/ c |>\n<| a dscore=1 |>\nI believe that your solution is\
    \ more elegant than mine. Thanks for sharing your solution.\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxety5d6f.d(58): Error: declaration expected, not `<`\\n/tmp/tmpxety5d6f.d(70):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpxety5d6f.d(70): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpxety5d6f.d(71): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpxety5d6f.d(71): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpxety5d6f.d(72): Error: semicolon expected, not `.`\\n/tmp/tmpxety5d6f.d(72):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpxety5d6f.d(73): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpxety5d6f.d(73): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpxety5d6f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmeh5a82v.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmeh5a82v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case \"+\"\
    : \n                temp = result + operand[i];\n                break;\n    \
    \        case \"-\": \n                temp = result - operand[i];\n         \
    \       break;\n            case \"*\": \n                temp = result * operand[i];\n\
    \                break;\n            case \"//\": \n                temp = result\
    \ / operand[i];\n                break;\n            case \"**\": \n         \
    \       temp = result ** operand[i];\n                break;\n            default:\
    \ \n                throw new Exception(\"Invalid operator\");\n        }\n  \
    \      result = temp;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,math\
    \ |>\n<| c |>\nThis is not the correct solution. OP wants to evaluate an expression\
    \ like `2 + 3 * 4 - 5` where `operator` is `+,-,*,/,**` and operand is `[2, 3,\
    \ 4, 5]`\n<|/ c |>\n<| c |>\nYes, I missed that detail. Thanks for pointing it\
    \ out. I've updated my answer accordingly.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution is incorrect. `2 + 3 * 4 - 5` should be evaluated as `2 + 3 * 4 - 5`,\
    \ not as `2 + 3 - 5`.\n<|/ c |>\n<| c |>\nYes, you're right. I've updated my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nThis solution is still incorrect. `2 + 3 *\
    \ 4 - 5` should be evaluated as `2 + 3 * 4 - 5`, not as `2 + 3 - 5`.\n<|/ c |>\n\
    <| a dscore=2 |>\nThe simplest solution is to use recursion:\n<code>\npublic int\
    \ evaluate(String expression, int[] operands) {\n    if (expression.length() ==\
    \ 0) {\n        return 0;\n    }\n    if (expression.charAt(0) == '-') {\n   \
    \     return evaluate(expression.substring(1), operands) * -1;\n    }\n    if\
    \ (expression.charAt(0) == '+') {\n        return evaluate(expression.substring(1),\
    \ operands);\n    }\n    if (expression.charAt(0) == '*') {\n        return evaluate(expression.substring(1),\
    \ operands) * operands[0];\n    }\n    if (expression.charAt(0) == '/') {\n  \
    \      return evaluate(expression.substring(1), operands) / operands[0];\n   \
    \ }\n    if (expression.charAt(0) == '^') {\n        return evaluate(expression.substring(1),\
    \ operands) ^ operands[0];\n    }\n    throw new IllegalArgumentException(\"Invalid\
    \ expression: \" + expression);\n}\n</code>\n<|/ a tags=java,algorithm,math |>\n\
    <| c |>\nThis solution is incorrect. `2 + 3 * 4 - 5` should be evaluated as `2\
    \ + 3 * 4 - \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7i6n6wz8.d(58): Error: declaration expected, not `<`\\n/tmp/tmp7i6n6wz8.d(64):\
    \ Error: unterminated character constant\\n/tmp/tmp7i6n6wz8.d(70): Error: unterminated\
    \ character constant\\n/tmp/tmp7i6n6wz8.d(70): Error: unterminated character constant\\\
    n/tmp/tmp7i6n6wz8.d(81): Error: unrecognized declaration\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp7i6n6wz8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp69n1x2y7.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69n1x2y7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp40e1_ix_.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40e1_ix_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0dbhij5d.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dbhij5d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) \n\
    \    {\n        switch(operator[i]) \n        {\n            case '+': result\
    \ += operand[i]; break;\n            case '-': result -= operand[i]; break;\n\
    \            case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '//': result /= operand[i]; break;\n\
    \            case '**': result *= operand[i]; break;\n            default: throw\
    \ new Exception(\"Invalid operator\");\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThis doesn't work. Try it with\
    \ `operator['+', '*', '-', '**']` and `array = [2, 3, 4, 5]`.\n<|/ c |>\n<| c\
    \ |>\nYes, it doesn't. I've added a note to the answer.\n<|/ c |>\n<| c |>\nI\
    \ see what you mean. I've added a note to the answer.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work. Try it with `operator['+', '*', '-', '**']` and `array = [2, 3,\
    \ 4, 5]`.\n<|/ c |>\n<| c |>\nIt does work. I've added a note to the answer.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe simplest solution is to use recursion:\n<code>\n\
    long do_algebra(string[] operator, long[] operand)\n{\n    if (operator.Length\
    \ == 0)\n        return operand[0];\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpty58sckr.d(39): Error: unterminated character constant\\n/tmp/tmpty58sckr.d(39):\
    \ Error: unterminated character constant\\n/tmp/tmpty58sckr.d(39): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpty58sckr.d(39): Error: found `/=` instead\
    \ of statement\\n/tmp/tmpty58sckr.d(40): Error: unterminated character constant\\\
    n/tmp/tmpty58sckr.d(40): Error: unterminated character constant\\n/tmp/tmpty58sckr.d(40):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpty58sckr.d(40): Error: found\
    \ `*=` instead of statement\\n/tmp/tmpty58sckr.d(46): Error: declaration expected,\
    \ not `<`\\n/tmp/tmpty58sckr.d(49): Error: unterminated character constant\\n/tmp/tmpty58sckr.d(52):\
    \ Error: unterminated character constant\\n/tmp/tmpty58sckr.d(52): Error: unterminated\
    \ character constant\\n/tmp/tmpty58sckr.d(55): Error: unterminated character constant\\\
    n/tmp/tmpty58sckr.d(58): Error: unterminated character constant\\n/tmp/tmpty58sckr.d(61):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpty58sckr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i < operator.size();\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                temp = result + operand[i];\n                break;\n       \
    \     case '-':\n                temp = result - operand[i];\n               \
    \ break;\n            case '*':\n                temp = result * operand[i];\n\
    \                break;\n            case '/':\n                temp = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   temp = result ^ operand[i];\n                break;\n            default:\n\
    \                temp = result;\n                break;\n        }\n        result\
    \ = temp;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nI didn't downvote, but I suspect it's because you didn't explain how\
    \ this works. You don't explain how you get the result 9. Also, your answer doesn't\
    \ explain why you chose to implement it this way.\n<|/ c |>\n<| c |>\nI added\
    \ some explanation to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote, but I suspect it's because you didn't explain how this works. You\
    \ don't explain how you get the result 9. Also, your answer doesn't explain why\
    \ you chose to implement it this way.\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect\
    \ it's because you didn't explain how this works. You don't explain how you get\
    \ the result 9. Also, your answer doesn't explain why you chose to implement it\
    \ this way.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps3gt6777.d(59): Error: declaration expected, not `<`\\n/tmp/tmps3gt6777.d(62):\
    \ Error: unterminated character constant\\n/tmp/tmps3gt6777.d(62): Error: unterminated\
    \ character constant\\n/tmp/tmps3gt6777.d(62): Error: unterminated character constant\\\
    n/tmp/tmps3gt6777.d(62): Error: unterminated character constant\\n/tmp/tmps3gt6777.d(62):\
    \ Error: unterminated character constant\\n/tmp/tmps3gt6777.d(68): Error: unterminated\
    \ character constant\\n/tmp/tmps3gt6777.d(68): Error: unterminated character constant\\\
    n/tmp/tmps3gt6777.d(68): Error: unterminated character constant\\n/tmp/tmps3gt6777.d(68):\
    \ Error: unterminated character constant\\n/tmp/tmps3gt6777.d(68): Error: unterminated\
    \ character constant\\n/tmp/tmps3gt6777.d(74): Error: unterminated character constant\\\
    n/tmp/tmps3gt6777.d(74): Error: unterminated character constant\\n/tmp/tmps3gt6777.d(74):\
    \ Error: unterminated character constant\\n/tmp/tmps3gt6777.d(74): Error: unterminated\
    \ character constant\\n/tmp/tmps3gt6777.d(74): Error: unterminated character constant\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3gt6777.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkvibhqhe.d(134): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvibhqhe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    \n    while(i\
    \ < operator.length && i < operand.length)\n    {\n        if(operator[i] == '+')\n\
    \        {\n            temp = result + operand[i];\n        }\n        else if(operator[i]\
    \ == '-')\n        {\n            temp = result - operand[i];\n        }\n   \
    \     else if(operator[i] == '*')\n        {\n            temp = result * operand[i];\n\
    \        }\n        else if(operator[i] == '/')\n        {\n            temp =\
    \ result / operand[i];\n        }\n        else if(operator[i] == '**')\n    \
    \    {\n            temp = result ** operand[i];\n        }\n        i++;\n  \
    \  }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,algorithm\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxaud58mb.d(52): Error: unterminated character constant\\n/tmp/tmpxaud58mb.d(52):\
    \ Error: unterminated character constant\\n/tmp/tmpxaud58mb.d(53): Error: found\
    \ `{` when expecting `)`\\n/tmp/tmpxaud58mb.d(59): Error: declaration expected,\
    \ not `return`\\n/tmp/tmpxaud58mb.d(60): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxaud58mb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_xo3motz.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xo3motz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length; i++)\
    \ \n    {\n        switch(operator[i]) \n        {\n            case \"+\": result\
    \ += operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n\
    \            case \"*\": result *= operand[i]; break;\n            case \"/\"\
    : result /= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; break;\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c\
    \ |>\nI like your solution, but I believe it would be better to use a `std::map`\
    \ instead of a `switch` statement. Also, the `switch` statement is missing a `break`\
    \ statement after each `case`.\n<|/ c |>\n<| c |>\nI agree, `std::map` would be\
    \ better. But the OP asked for a solution in C++.\n<|/ c |>\n<| c |>\nI added\
    \ a C++ solution to the answer.\n<|/ c |>\n<| c |>\nI added a C++ solution to\
    \ the answer.\n<|/ c |>\n<| c |>\nI added a C++ solution to the answer.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\n#include <algorithm>\n#include <cmath>\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbni71jqy.d(46): Error: declaration expected, not `<`\\n/tmp/tmpbni71jqy.d(74):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpbni71jqy.d(75): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpbni71jqy.d(76): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpbni71jqy.d(77): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbni71jqy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long ao = 0;\n    long bo =\
    \ 0;\n    long co = 0;\n    long do = 0;\n    long eo = 0;\n    long fo = 0;\n\
    \    long go = 0;\n    long ho = 0;\n    long io = 0;\n    long jo = 0;\n    long\
    \ ko = 0;\n    long lo = 0;\n    long mo = 0;\n    long no = 0;\n    long oo =\
    \ 0;\n    long po = 0;\n    long qo = 0;\n    long ro = 0;\n    long so = 0;\n\
    \    long to = 0;\n    long uo = 0;\n    long vo = 0;\n    long wo = 0;\n    long\
    \ xo = 0;\n    long yo = 0;\n    long zo = 0;\n    long aaa = 0;\n    long aab\
    \ = 0;\n    long aac = 0;\n    long aad = 0;\n    long aee = 0;\n    long aaf\
    \ = 0;\n    long aag = 0;\n    long ahh = 0;\n    long aii = 0;\n    long ajj\
    \ = 0;\n    long akk = 0;\n    long all = 0;\n    long amm = 0;\n    long ann\
    \ = 0;\n\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_u5mnv_x.d(93): Error: no identifier for declarator `long`\\\
    n/tmp/tmp_u5mnv_x.d(93): Error: found `=` instead of statement\\n/tmp/tmp_u5mnv_x.d(94):\
    \ Error: found `long` when expecting `while`\\n/tmp/tmp_u5mnv_x.d(94): Error:\
    \ found `eo` when expecting `(`\\n/tmp/tmp_u5mnv_x.d(94): Error: expression expected,\
    \ not `=`\\n/tmp/tmp_u5mnv_x.d(94): Error: found `0` when expecting `)`\\n/tmp/tmp_u5mnv_x.d(131):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_u5mnv_x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    \n    for(i\
    \ = 0; i < operand.length - 1; i++) \n    {\n        temp = operand[i] + operand[i\
    \ + 1];\n        result += operator[i] * temp;\n    }\n    \n    temp = operand[operand.length\
    \ - 1];\n    result += operator[i] * temp;\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=algorithm,c# |>\n<| c |>\nThis doesn't work. Try it with `operator['+',\
    \ '*', '-']` and `array = [2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I edited my answer to include a test case.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I edited my answer to include a test case.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I edited my answer to include a test case.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I edited my answer to include a test\
    \ case.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwwe1r7t4.d(45): Error: declaration expected, not `<`\\n/tmp/tmpwwe1r7t4.d(48):\
    \ Error: unterminated character constant\\n/tmp/tmpwwe1r7t4.d(65): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpwwe1r7t4.d(65): Error: no identifier for declarator\
    \ `.Collections.Generic`\\n/tmp/tmpwwe1r7t4.d(66): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmpwwe1r7t4.d(66): Error: no identifier for declarator `.Linq`\\\
    n/tmp/tmpwwe1r7t4.d(67): Error: semicolon expected, not `.`\\n/tmp/tmpwwe1r7t4.d(67):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpwwe1r7t4.d(68): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpwwe1r7t4.d(68): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpwwe1r7t4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC =\
    \ 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC =\
    \ 0;\n    long AD = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaj72m3gg.d(133): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaj72m3gg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    while(i <\
    \ operator.length && i < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                temp = result + operand[i];\n\
    \                break;\n            case '-':\n                temp = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   temp = result * operand[i];\n                break;\n            case '/':\n\
    \                temp = result / operand[i];\n                break;\n       \
    \     case '**':\n                temp = result ** operand[i];\n             \
    \   break;\n            default:\n                temp = result;\n           \
    \     break;\n        }\n        result = temp;\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,algorithm,math |>\n<| a tags=c#,algorithm,math\
    \ |>\nI wrote a C# program that solves this problem in O(n) time complexity. \n\
    <code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96chst5q.d(49): Error: unterminated character constant\\n/tmp/tmp96chst5q.d(49):\
    \ Error: unterminated character constant\\n/tmp/tmp96chst5q.d(50): Error: found\
    \ `temp` when expecting `:`\\n/tmp/tmp96chst5q.d(50): Error: found `=` instead\
    \ of statement\\n/tmp/tmp96chst5q.d(61): Error: declaration expected, not `<`\\\
    n/tmp/tmp96chst5q.d(67): Error: semicolon expected, not `.`\\n/tmp/tmp96chst5q.d(67):\
    \ Error: no identifier for declarator `.Collections.Generic`\\n/tmp/tmp96chst5q.d(68):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmp96chst5q.d(68): Error: no identifier\
    \ for declarator `.Linq`\\n/tmp/tmp96chst5q.d(69): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmp96chst5q.d(69): Error: no identifier for declarator `.Text`\\\
    n/tmp/tmp96chst5q.d(70): Error: semicolon expected, not `.`\\n/tmp/tmp96chst5q.d(70):\
    \ Error: no identifier for declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp96chst5q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxyxsh5jo.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyxsh5jo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    \n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   result = result ^ operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=algorithm,c# |>\n<| c |>\nI like this\
    \ solution, however it has a few issues. Firstly, it assumes that all operators\
    \ are commutative. Secondly, it assumes that all operators are associative. Thirdly,\
    \ it assumes that all operators are commutative and associative. Fourthly, it\
    \ assumes that all operators are commutative and associative. Fifthly, it assumes\
    \ that all operators are commutative and associative. Sixthly, it assumes that\
    \ all operators are commutative and associative. Seventhly, it assumes that all\
    \ operators are commutative and associative. Eighthly, it assumes that all operators\
    \ are commutative and associative. Ninthly, it assumes that all operators are\
    \ commutative and associative. Tenthly, it assumes that all operators are commutative\
    \ and associative. Eleventhly, it assumes that all operators are commutative and\
    \ associative. Twelfthly, it assumes that all operators are commutative and associative.\
    \ Thirteenthly, it assumes that all operators are commutative and associative.\
    \ Fourteenthly, it assumes that all operators are commutative and associative.\
    \ Fifteenthly, it assumes that all operators are commutative and associative.\
    \ Sixteenthly, it assumes that all operators are commutative and associative.\
    \ Seventeenthly, it assumes that all operators are commutative and associative.\
    \ Eighteenthly, it assumes that all operators are commutative and associative.\
    \ Nineteenthly, it assumes that all operators are commutative and associative.\
    \ Twentiethly, it assumes that all operators are commutative and associative.\
    \ Eleventhly, it assumes that all operators are commutative and associative. Twelfthly,\
    \ it assumes that all operators are commutative and associative. Thirteenthly,\
    \ it assumes that all operators are commutative and associative. Fourteenthly,\
    \ it assumes that all operators are commutative and associative. \nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm616qpu3.d(58): Error: declaration expected, not `<`\\n/tmp/tmpm616qpu3.d(66):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpm616qpu3.d(67): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpm616qpu3.d(68): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpm616qpu3.d(69): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm616qpu3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n   \
    \ long temp84 = 0;\n    long temp85 = 0;\n\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptwyghuxd.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwyghuxd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplqjk53xs.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplqjk53xs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppqvsjh9w.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppqvsjh9w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b =\
    \ 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n   \
    \ long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n   \
    \ long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d =\
    \ 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m =\
    \ 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n   \
    \ long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v =\
    \ 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n   \
    \ long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e =\
    \ 0;\n    long f = 0;\n    long \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz52_6zpc.d(135): Error: no identifier for declarator `long`\\\
    n/tmp/tmpz52_6zpc.d(135): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz52_6zpc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbp3l3yjq.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbp3l3yjq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length; i++)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+': result +=\
    \ operand[i]; break;\n            case '-': result -= operand[i]; break;\n   \
    \         case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '//': result /= operand[i]; break;\n\
    \            case '**': result *= operand[i]; break;\n            default: return\
    \ -1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=c#,algorithm |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppvchfmtf.d(40): Error: unterminated character constant\\n/tmp/tmppvchfmtf.d(40):\
    \ Error: unterminated character constant\\n/tmp/tmppvchfmtf.d(40): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmppvchfmtf.d(40): Error: found `/=` instead\
    \ of statement\\n/tmp/tmppvchfmtf.d(41): Error: unterminated character constant\\\
    n/tmp/tmppvchfmtf.d(41): Error: unterminated character constant\\n/tmp/tmppvchfmtf.d(41):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmppvchfmtf.d(41): Error: found\
    \ `*=` instead of statement\\n/tmp/tmppvchfmtf.d(47): Error: declaration expected,\
    \ not `<`\\n/tmp/tmppvchfmtf.d(52): Error: semicolon expected, not `.`\\n/tmp/tmppvchfmtf.d(52):\
    \ Error: no identifier for declarator `.Collections.Generic`\\n/tmp/tmppvchfmtf.d(53):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmppvchfmtf.d(53): Error: no identifier\
    \ for declarator `.Linq`\\n/tmp/tmppvchfmtf.d(54): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmppvchfmtf.d(54): Error: no identifier for declarator `.Text`\\\
    n/tmp/tmppvchfmtf.d(55): Error: semicolon expected, not `.`\\n/tmp/tmppvchfmtf.d(55):\
    \ Error: no identifier for declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmppvchfmtf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nI like your solution, however\
    \ it seems that it can only handle addition and subtraction. I am looking for\
    \ a solution that can handle multiplication and division as well.\n<|/ c |>\n\
    <| c |>\nI added a solution for multiplication and division.\n<|/ c |>\n<| c |>\n\
    I added a solution for multiplication and division.\n<|/ c |>\n<| c |>\nI added\
    \ a solution for multiplication and division.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsxt5439c.d(59): Error: declaration expected, not `<`\\n/tmp/tmpsxt5439c.d(76):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpsxt5439c.d(76): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpsxt5439c.d(77): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpsxt5439c.d(77): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpsxt5439c.d(78): Error: semicolon expected, not `.`\\n/tmp/tmpsxt5439c.d(78):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpsxt5439c.d(79): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpsxt5439c.d(79): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpsxt5439c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph6te5o4j.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6te5o4j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo_fx4f__.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_fx4f__.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu59gbux5.d(134): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu59gbux5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    \n    while(i\
    \ < operand.length)\n    {\n        switch(operator[i])\n        {\n         \
    \   case '+':\n                temp = result + operand[i];\n                break;\n\
    \            case '-':\n                temp = result - operand[i];\n        \
    \        break;\n            case '*':\n                temp = result * operand[i];\n\
    \                break;\n            case '/':\n                temp = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   temp = result ^ operand[i];\n                break;\n            default:\n\
    \                temp = result;\n                break;\n        }\n        result\
    \ = temp;\n        i++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm\
    \ |>\n<| c |>\nThe `switch` statement is unnecessary. Just use `result = operator[i](result,\
    \ operand[i]);`.\n<|/ c |>\n<| c |>\nI didn't know that. Thanks for pointing that\
    \ out. I'll update my answer.\n<|/ c |>\n<| c |>\nI didn't know that either. Thanks\
    \ for pointing that out. I'll update my answer.\n<|/ c |>\n<| c |>\nI didn't know\
    \ that either. Thanks for pointing that out. I'll update my answer.\n<|/ c |>\n\
    <| c |>\nI didn't know that either. Thanks for pointing that out. I'll update\
    \ my answer.\n<|/ c |>\n<| a tags=c#,algorithm |>\nI wrote a C# program that solves\
    \ this problem in O(n) time complexity. \n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5htoycw5.d(62): Error: declaration expected, not `<`\\n/tmp/tmp5htoycw5.d(68):\
    \ Error: unterminated character constant\\n/tmp/tmp5htoycw5.d(68): Error: unterminated\
    \ character constant\\n/tmp/tmp5htoycw5.d(71): Error: unterminated character constant\\\
    n/tmp/tmp5htoycw5.d(71): Error: unterminated character constant\\n/tmp/tmp5htoycw5.d(74):\
    \ Error: unterminated character constant\\n/tmp/tmp5htoycw5.d(74): Error: unterminated\
    \ character constant\\n/tmp/tmp5htoycw5.d(77): Error: unterminated character constant\\\
    n/tmp/tmp5htoycw5.d(77): Error: unterminated character constant\\n/tmp/tmp5htoycw5.d(83):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmp5htoycw5.d(83): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmp5htoycw5.d(84): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmp5htoycw5.d(84): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmp5htoycw5.d(85): Error: semicolon expected, not `.`\\n/tmp/tmp5htoycw5.d(85):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmp5htoycw5.d(86): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmp5htoycw5.d(86): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5htoycw5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.size(); i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result = result + operand[i];\n                break;\n            case\
    \ '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '**':\n                result = result\
    \ ** operand[i];\n                break;\n            default:\n             \
    \   throw new RuntimeException(\"Invalid operator: \" + operator[i]);\n      \
    \  }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=java,algorithm,math\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvr4wovcw.d(47): Error: unterminated character constant\\n/tmp/tmpvr4wovcw.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmpvr4wovcw.d(48): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpvr4wovcw.d(48): Error: found `=` instead\
    \ of statement\\n/tmp/tmpvr4wovcw.d(56): Error: declaration expected, not `<`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvr4wovcw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long Dd =\
    \ 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh = 0;\n\
    \    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n    long\
    \ Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long Qq =\
    \ 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu = 0;\n\
    \    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n    long\
    \ Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n    long Ddd\
    \ = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n    long Hhh\
    \ = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n    long Lll\
    \ = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n    long Ppp\
    \ = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n    long Ttt\
    \ = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsgsj486z.d(124): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpsgsj486z.d(124): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgsj486z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46g_jjkl.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46g_jjkl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length) \n    {\n        switch(operator[i]) \n        {\n     \
    \       case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '%':\n                result %= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,algorithm,math |>\n<| c |>\nThis doesn't work if the\
    \ operator is `+` and the operand is `0`.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for `+` with operand `0` because `0` is `0`.\n<|/ c |>\n<| c |>\nYes, but `0`\
    \ is an operand and `0` is an operator, so the code doesn't work. `0` doesn't\
    \ have a corresponding operator or operand.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've updated my answer to account for that case.\n<|/ c |>\n<| c |>\n\
    This doesn't work if the operator is `+` and the operand is `0`.\n<|/ c |>\n<|\
    \ a dscore=3 |>\nI wrote a Java library for doing algebraic expressions called\
    \ Javaluator. It can handle all kinds of expressions, including those with parentheses\
    \ and multiple operators. Here is an example expression:\n<code>\nExpression e\
    \ = new Expression(\"(a + b) * c\");\n</code>\nYou can evaluate it like this:\n\
    <code>\ndouble result = e.evaluate();\n</code>\nThe library also supports evaluating\
    \ expressions containing variables:\n<code>\nExpression e = new Expression(\"\
    a + b\");\ne.addVariable(\"a\", 1);\ne.addVariable(\"b\", 2);\ne.addVariable(\"\
    c\", 3);\ndouble result = e.evaluate();\n</code>\nThe library also supports evaluating\
    \ expressions containing variables and constants:\n<code>\nExpression e = new\
    \ Expression(\"a + b + c\");\ne.addVariable(\"a\", 1);\ne.addVariable(\"b\", 2);\n\
    e.addVariable(\"c\", 3);\ndouble result = e.evaluate();\n</code>\nThe library\
    \ also supports evaluating expressions containing variables and constants:\n<code>\n\
    Expression e = new Expression(\"(a + b) * c\");\ne.addVariable(\"a\", 1);\n\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45u0y2mx.d(61): Error: declaration expected, not `<`\\n/tmp/tmp45u0y2mx.d(64):\
    \ Error: unterminated character constant\\n/tmp/tmp45u0y2mx.d(67): Error: unterminated\
    \ character constant\\n/tmp/tmp45u0y2mx.d(70): Error: unterminated character constant\\\
    n/tmp/tmp45u0y2mx.d(70): Error: unterminated character constant\\n/tmp/tmp45u0y2mx.d(73):\
    \ Error: unterminated character constant\\n/tmp/tmp45u0y2mx.d(76): Error: unterminated\
    \ character constant\\n/tmp/tmp45u0y2mx.d(82): Error: declaration expected, not\
    \ `<`\\n/tmp/tmp45u0y2mx.d(86): Error: declaration expected, not `<`\\n/tmp/tmp45u0y2mx.d(90):\
    \ Error: unexpected `(` in declarator\\n/tmp/tmp45u0y2mx.d(90): Error: basic type\
    \ expected, not `\"a\"`\\n/tmp/tmp45u0y2mx.d(90): Error: found `\"a\"` when expecting\
    \ `)`\\n/tmp/tmp45u0y2mx.d(90): Error: no identifier for declarator `e.addVariable(_error_)`\\\
    n/tmp/tmp45u0y2mx.d(90): Error: semicolon expected following function declaration\\\
    n/tmp/tmp45u0y2mx.d(90): Error: declaration expected, not `,`\\n/tmp/tmp45u0y2mx.d(91):\
    \ Error: unexpected `(` in declarator\\n/tmp/tmp45u0y2mx.d(91): Error: basic type\
    \ expected, not `\"b\"`\\n/tmp/tmp45u0y2mx.d(91): Error: found `\"b\"` when expecting\
    \ `)`\\n/tmp/tmp45u0y2mx.d(91): Error: no identifier for declarator `e.addVariable(_error_)`\\\
    n/tmp/tmp45u0y2mx.d(91): Error: semicolon expected following function declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45u0y2mx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n    long C2\
    \ = 0;\n    long D2 = 0;\n    long E2 = 0;\n    long F2 = 0;\n    long G2 = 0;\n\
    \    long H2 = 0;\n    long I2 = 0;\n    long J2 = 0;\n    long K2 = 0;\n    long\
    \ L2 = 0;\n    long M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n    long P2 =\
    \ 0;\n    long Q2 = 0;\n    long R2 = 0;\n    long S2 = 0;\n    long T2 = 0;\n\
    \    long U2 = 0;\n    long V2 = 0;\n    long W2 = 0;\n    long X2 = 0;\n    long\
    \ Y2 = 0;\n    long Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n    long C3 =\
    \ 0;\n    long D3 = 0;\n    long E3 = 0;\n    long F3 = 0;\n    long G3 = 0;\n\
    \    long H3 = 0;\n    long I3 = 0;\n    long J3 = 0;\n    long K3 = 0;\n    long\
    \ L3 = 0;\n    long M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n    long P3 =\
    \ 0;\n    long Q3 = 0;\n    long R3 = 0;\n    long S3 = 0;\n    long T3 = 0;\n\
    \    long U3 = 0;\n    long V3 = 0;\n    long W3 = 0;\n    long X3 = 0;\n    long\
    \ Y3 = 0;\n    long Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n    long C4 =\
    \ 0;\n    long D4 = 0;\n    long E\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ljubg_f.d(133): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmp0ljubg_f.d(133): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ljubg_f.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3pg8046y.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pg8046y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaee84cjf.d(117): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpaee84cjf.d(117): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaee84cjf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i < operator.size();\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                temp = result + operand[i];\n                break;\n       \
    \     case '-':\n                temp = result - operand[i];\n               \
    \ break;\n            case '*':\n                temp = result * operand[i];\n\
    \                break;\n            case '/':\n                temp = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   temp = result ^ operand[i];\n                break;\n            default:\n\
    \                temp = result;\n                break;\n        }\n        result\
    \ = temp;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,algorithm,math\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4if0b0zw.d(59): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4if0b0zw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case \"+\": result = result\
    \ + operand[i]; break;\n            case \"-\": result = result - operand[i];\
    \ break;\n            case \"*\": result = result * operand[i]; break;\n     \
    \       case \"/\": result = result / operand[i]; break;\n            case \"\
    //\": result = result / operand[i]; break;\n            case \"**\": result =\
    \ result ** operand[i]; break;\n            default: return -1;\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for\
    \ your answer. Your code works perfectly fine, but I wanted to know if there is\
    \ a way to do it without using switch statements. I already have a working code\
    \ using switch statements, but I wanted to know if there is a way to do it without\
    \ using switch statements.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use switch statements.\n<|/ c |>\n<| c |>\nThank you for your answer. I tried\
    \ your code, but it gives me a wrong answer. For example, for operator = ['+',\
    \ '*', '-'] and operand = [2, 3, 4, 5], the result is -27. But the correct answer\
    \ is 9.\n<|/ c |>\n<| c |>\nI tested the code and it works fine for me. Can you\
    \ please post the code you tried and the wrong result?\n<|/ c |>\n<| c |>\nI added\
    \ the code I tried, and the wrong result.\n<|/ c |>\n<| a tags=c#,algorithm,math\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmploklnjhg.d(45): Error: declaration expected, not `<`\\n/tmp/tmploklnjhg.d(51):\
    \ Error: unterminated character constant\\n/tmp/tmploklnjhg.d(65): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmploklnjhg.d(65): Error: no identifier for declarator\
    \ `.Collections.Generic`\\n/tmp/tmploklnjhg.d(66): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmploklnjhg.d(66): Error: no identifier for declarator `.Linq`\\\
    n/tmp/tmploklnjhg.d(67): Error: semicolon expected, not `.`\\n/tmp/tmploklnjhg.d(67):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmploklnjhg.d(68): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmploklnjhg.d(68): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmploklnjhg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbsuh19uw.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsuh19uw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpss4ahiwe.d(117): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpss4ahiwe.d(117): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss4ahiwe.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpihb5at2v.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihb5at2v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++){\n \
    \       switch(operator[i]){\n            case \"+\": result += operand[i]; break;\n\
    \            case \"-\": result -= operand[i]; break;\n            case \"*\"\
    : result *= operand[i]; break;\n            case \"/\": result /= operand[i];\
    \ break;\n            case \"//\": result /= operand[i]; break;\n            case\
    \ \"**\": result *= operand[i]; break;\n            default: return -1;\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you for your answer! I appreciate it! But I still don't understand how I can\
    \ use your code to solve the problem I described. Can you please explain how I\
    \ can use your code to solve the problem I described? Thank you!\n<|/ c |>\n<|\
    \ c |>\nI added a code example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer! I appreciate it! But I still don't understand how I\
    \ can use your code to solve the problem I described. Can you please explain how\
    \ I can use your code to solve the problem I described? Thank you!\n<|/ c |>\n\
    <| c |>\nI added a code example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer! I appreciate it! But I still don't understand how I\
    \ can use your code to solve the problem I described. Can you please explain how\
    \ I can use your code to solve the problem I described? Thank you!\n<|/ c |>\n\
    <| a tags=java,arrays,algorithm,math |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Scanner;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxanocrj7.d(44): Error: declaration expected, not `<`\\n/tmp/tmpxanocrj7.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmpxanocrj7.d(53): Error: unterminated\
    \ character constant\\n/tmp/tmpxanocrj7.d(59): Error: unterminated character constant\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxanocrj7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbfz2f5zq.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfz2f5zq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpae541ia9.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpae541ia9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    \n    for(i\
    \ = 0; i < operator.length; i++)\n    {\n        switch(operator[i])\n       \
    \ {\n            case '+':\n                temp = result + operand[i];\n    \
    \            break;\n            case '-':\n                temp = result - operand[i];\n\
    \                break;\n            case '*':\n                temp = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   temp = result / operand[i];\n                break;\n            case '^':\n\
    \                temp = result ^ operand[i];\n                break;\n       \
    \     default:\n                temp = result;\n                break;\n     \
    \   }\n        result = temp;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm\
    \ |>\n<| c |>\nThe OP wants to implement the algorithm using Java.\n<|/ c |>\n\
    <| c |>\nYes, I know. But I thought it would be helpful to give a Java solution\
    \ as well. Anyway, I added a Java solution as well.\n<|/ c |>\n<| c |>\nThank\
    \ you very much for your answer. I will try this out and let you know if it works.\n\
    <|/ c |>\n<| c |>\nI added a Java solution as well. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThank you very much for your answer. I will try this out and let you\
    \ know if it works.\n<|/ c |>\n<| a dscore=0 |>\nYou can use a recursive function\
    \ for this problem. \n<code>\npublic int evaluate(String operator, int[] operands)\
    \ {\n    int result = 0;\n    switch(operator) {\n        case \"+\": result =\
    \ evaluate(operator, operands); break;\n        case \"-\": result = evaluate(operator,\
    \ operands); break;\n        case \"*\": result = evaluate(operator, operands);\
    \ break;\n        case \"/\": result = evaluate(operator, operands); break;\n\
    \        case \"^\": result = evaluate(operator, operands); break;\n        default:\
    \ return result;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpinncwi56.d(61): Error: declaration expected, not `<`\\n/tmp/tmpinncwi56.d(83):\
    \ Error: declaration expected, not `switch`\\n/tmp/tmpinncwi56.d(84): Error: declaration\
    \ expected, not `break`\\n/tmp/tmpinncwi56.d(85): Error: declaration expected,\
    \ not `case`\\n/tmp/tmpinncwi56.d(85): Error: declaration expected, not `break`\\\
    n/tmp/tmpinncwi56.d(86): Error: declaration expected, not `case`\\n/tmp/tmpinncwi56.d(86):\
    \ Error: declaration expected, not `break`\\n/tmp/tmpinncwi56.d(87): Error: declaration\
    \ expected, not `case`\\n/tmp/tmpinncwi56.d(87): Error: declaration expected,\
    \ not `break`\\n/tmp/tmpinncwi56.d(88): Error: declaration expected, not `case`\\\
    n/tmp/tmpinncwi56.d(88): Error: declaration expected, not `break`\\n/tmp/tmpinncwi56.d(89):\
    \ Error: declaration expected, not `default`\\n/tmp/tmpinncwi56.d(90): Error:\
    \ unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpinncwi56.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result = result + operand[i];\n          \
    \      break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '//':\n\
    \                result = result / operand[i];\n                break;\n     \
    \       case '**':\n                result = result ** operand[i];\n         \
    \       break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for the answer. I'm going to try this out and\
    \ see how it goes. I appreciate your help.\n<|/ c |>\n<| c |>\nI added a test\
    \ case to my original post. I'm getting a result of -2 instead of 9. I'm going\
    \ to try and figure out why this is.\n<|/ c |>\n<| c |>\nI added a test case to\
    \ my original post. I'm getting a result of -2 instead of 9. I'm going to try\
    \ and figure out why this is.\n<|/ c |>\n<| c |>\nI added a test case to my original\
    \ post. I'm getting a result of -2 instead of 9. I'm going to try and figure out\
    \ why this is.\n<|/ c |>\n<| c |>\nI added a test case to my original post. I'm\
    \ getting a result of -2 instead of 9. I'm going to try and figure out why this\
    \ is.\n<|/ c |>\n<| a |>\nI believe your problem is that you're trying to use\
    \ an int to store a long value.  Try using long instead of int for your variables.\
    \  \n<code>\nlong result = 0;\n</code>\n<|/ a tags=java,arrays,algorithm,math\
    \ dscore=0 |>\n<| c |>\nI added a test case to my original post. I'm getting a\
    \ result of -2 instead of 9. I'm going to try and figure out why this is.\n<|/\
    \ c |>\n<| a dscore=0 |>\nThe problem is that the variable result is an int and\
    \ you are trying to assign a long to it.  Try using long instead of int.\n<|/\
    \ a tags=java,arrays,algorithm,math |>\n<| c |>\nI added a test case to my original\
    \ post. I'm getting a result of -2 instead of 9. I'm going to try and figure out\
    \ why this is.\n<|/ c |>\n<| a dscore=0 |>\nThe problem is that the variable result\
    \ is an int and you are trying to \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy35u6kvf.d(49): Error: unterminated character constant\\n/tmp/tmpy35u6kvf.d(49):\
    \ Error: unterminated character constant\\n/tmp/tmpy35u6kvf.d(50): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmpy35u6kvf.d(50): Error: found `=` instead\
    \ of statement\\n/tmp/tmpy35u6kvf.d(52): Error: unterminated character constant\\\
    n/tmp/tmpy35u6kvf.d(52): Error: unterminated character constant\\n/tmp/tmpy35u6kvf.d(53):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmpy35u6kvf.d(53): Error: found\
    \ `=` instead of statement\\n/tmp/tmpy35u6kvf.d(62): Error: declaration expected,\
    \ not `<`\\n/tmp/tmpy35u6kvf.d(65): Error: unterminated character constant\\n/tmp/tmpy35u6kvf.d(68):\
    \ Error: unterminated character constant\\n/tmp/tmpy35u6kvf.d(68): Error: unterminated\
    \ character constant\\n/tmp/tmpy35u6kvf.d(71): Error: unterminated character constant\\\
    n/tmp/tmpy35u6kvf.d(71): Error: unterminated character constant\\n/tmp/tmpy35u6kvf.d(74):\
    \ Error: unterminated character constant\\n/tmp/tmpy35u6kvf.d(74): Error: unterminated\
    \ character constant\\n/tmp/tmpy35u6kvf.d(77): Error: unterminated character constant\\\
    n/tmp/tmpy35u6kvf.d(77): Error: unterminated character constant\\n/tmp/tmpy35u6kvf.d(80):\
    \ Error: unterminated character constant\\n/tmp/tmpy35u6kvf.d(83): Error: declaration\
    \ expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy35u6kvf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmar_igxp.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmar_igxp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppbuk_5fq.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppbuk_5fq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5xfwvklv.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xfwvklv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_tmosybn.d(57): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_tmosybn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n   \
    \ long temp84 = 0;\n    long temp85 = 0;\n\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp76cytcr2.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76cytcr2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result %= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThank you so much for your help. I really appreciate it. I will try this\
    \ out and let you know how it goes.\n<|/ c |>\n<| c |>\nI got it to work. Thank\
    \ you so much for your help. I really appreciate it. I will try this out and let\
    \ you know how it goes.\n<|/ c |>\n<| c |>\nI got it to work. Thank you so much\
    \ for your help. I really appreciate it. I will try this out and let you know\
    \ how it goes.\n<|/ c |>\n<| c |>\nI got it to work. Thank you so much for your\
    \ help. I really appreciate it. I will try this out and let you know how it goes.\n\
    <|/ c |>\n<| c |>\nI got it to work. Thank you so much for your help. I really\
    \ appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| a tags=c#,arrays,list |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp07v4y3d2.d(56): Error: declaration expected, not `<`\\n/tmp/tmp07v4y3d2.d(76):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmp07v4y3d2.d(76): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmp07v4y3d2.d(77): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmp07v4y3d2.d(77): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmp07v4y3d2.d(78): Error: semicolon expected, not `.`\\n/tmp/tmp07v4y3d2.d(78):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmp07v4y3d2.d(79): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmp07v4y3d2.d(79): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp07v4y3d2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case \"+\": \n            \
    \    temp = result + operand[i];\n                break;\n            case \"\
    -\": \n                temp = result - operand[i];\n                break;\n \
    \           case \"*\": \n                temp = result * operand[i];\n      \
    \          break;\n            case \"//\": \n                temp = result /\
    \ operand[i];\n                break;\n            case \"**\": \n           \
    \     temp = result ** operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n     \
    \   result = temp;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThank you very much for your answer. Your code works perfectly fine.\
    \ I am just wondering why you used switch case instead of if else statement?\n\
    <|/ c |>\n<| c |>\nI used switch case because I wanted to show you the use of\
    \ switch case. Using if else would have been more appropriate. Also I wanted to\
    \ show you the use of switch case in general.\n<|/ c |>\n<| c |>\nThank you very\
    \ much for your answer. Your code works perfectly fine. I am just wondering why\
    \ you used switch case instead of if else statement?\n<|/ c |>\n<| c |>\nI used\
    \ switch case because I wanted to show you the use of switch case. Using if else\
    \ would have been more appropriate. Also I wanted to show you the use of switch\
    \ case in general.\n<|/ c |>\n<| c |>\nThank you very much for your answer. Your\
    \ code works perfectly fine. I am just wondering why you used switch case instead\
    \ of if else statement?\n<|/ c |>\n<| a tags=java,arrays,algorithm,math |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbepbcyim.d(56): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbepbcyim.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result ^= operand[i];\n              \
    \  break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math\
    \ |>\n<| c |>\nThis doesn't work. `operator` has `+`, `-`, `*` and `/` while `operand`\
    \ has `2`, `3`, `4` and `5`. `operator` has `+` but `operand` has `2`, `3`, `4`\
    \ and `5`. `operator` has `-` but `operand` has `2`, `3`, `4` and `5`. `operator`\
    \ has `*` but `operand` has `2`, `3`, `4` and `5`. `operator` has `/` but `operand`\
    \ has `2`, `3`, `4` and `5`. `operator` has `^` but `operand` has `2`, `3`, `4`\
    \ and `5`. `operator` has `+` but `operand` has `2`, `3`, `4` and `5`. `operator`\
    \ has `-` but `operand` has `2`, `3`, `4` and `5`. `operator` has `*` but `operand`\
    \ has `2`, `3`, `4` and `5`. `operator` has `/` but `operand` has `2`, `3`, `4`\
    \ and `5`. `operator` has `^` but `operand` has `2`, `3`, `4` and `5`. `operator`\
    \ has `+` but `operand` has `2`, `3`, `4` and `5`. `operator` has `-` but `operand`\
    \ has `2`, `3`, `4` and `5`. `operator` has `*` but `operand` has `2`, `3`, `4`\
    \ and `5`. `operator` has `/` but `operand` has `2`, `3`, `4` and `5`. `operator`\
    \ has `^` but `operand` has `2`, `3`, `4` and `5`. `operator` has `+` but `operand`\
    \ has `2`, `3`, `4` and `5`. `operator` has `-` but `operand` has `2`, `3`, `4`\
    \ and `5`. `operator` has `*` but `operand` has `\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplyitqcon.d(54): Error: declaration expected, not `<`\\n/tmp/tmplyitqcon.d(57):\
    \ Error: unterminated character constant\\n/tmp/tmplyitqcon.d(57): Error: unterminated\
    \ string constant starting at /tmp/tmplyitqcon.d(57)\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmplyitqcon.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprwv94zs7.d(117): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmprwv94zs7.d(117): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprwv94zs7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b =\
    \ 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n   \
    \ long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n   \
    \ long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d =\
    \ 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m =\
    \ 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n   \
    \ long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v =\
    \ 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n   \
    \ long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e =\
    \ 0;\n    long f = 0;\n    long \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpor2i9t56.d(135): Error: no identifier for declarator `long`\\\
    n/tmp/tmpor2i9t56.d(135): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpor2i9t56.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long Dd =\
    \ 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh = 0;\n\
    \    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n    long\
    \ Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long Qq =\
    \ 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu = 0;\n\
    \    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n    long\
    \ Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n    long Ddd\
    \ = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n    long Hhh\
    \ = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n    long Lll\
    \ = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n    long Ppp\
    \ = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n    long Ttt\
    \ = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpps1zq_p3.d(124): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpps1zq_p3.d(124): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpps1zq_p3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length &&\
    \ i < operand.length)\n    {\n        switch(operator[i])\n        {\n       \
    \     case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '//':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result *= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThanks for your answer. Can you\
    \ please explain why you used a switch statement instead of a if statement?\n\
    <|/ c |>\n<| c |>\nI used switch statement because I thought it would be more\
    \ readable. Also I used switch statement because I thought it would be more readable.\
    \ Also I used switch statement because I thought it would be more readable. Also\
    \ I used switch statement because I thought it would be more readable. Also I\
    \ used switch statement because I thought it would be more readable. Also I used\
    \ switch statement because I thought it would be more readable. Also I used switch\
    \ statement because I thought it would be more readable. Also I used switch statement\
    \ because I thought it would be more readable. Also I used switch statement because\
    \ I thought it would be more readable. Also I used switch statement because I\
    \ thought it would be more readable. Also I used switch statement because I thought\
    \ it would be more readable. Also I used switch statement because I thought it\
    \ would be more readable. Also I used switch statement because I thought it would\
    \ be more readable. Also I used switch statement because I thought it would be\
    \ more readable. Also I used switch statement because I thought it would be more\
    \ readable. Also I used switch statement because I thought it would be more readable.\
    \ Also I used switch statement because I thought it would be more readable. Also\
    \ I used switch statement because I thought it would be more readable. Also I\
    \ used switch statement because I thought it would be more readable. Also I used\
    \ switch statement because I thought it would be more readable. Also I used switch\
    \ statement because I thought it would be more readable. Also I used switch statement\
    \ because I thought it would be more readable. Also I used switch statement because\
    \ I thought it would be more readable. Also I used switch statement because I\
    \ thought it would be more readable. Also I used switch statement because I thought\
    \ it would be more readable. Also I used switch statement because I thought it\
    \ would be more readable. Also I used \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8n3wn6nn.d(48): Error: unterminated character constant\\n/tmp/tmp8n3wn6nn.d(48):\
    \ Error: unterminated character constant\\n/tmp/tmp8n3wn6nn.d(49): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmp8n3wn6nn.d(49): Error: found `/=` instead\
    \ of statement\\n/tmp/tmp8n3wn6nn.d(51): Error: unterminated character constant\\\
    n/tmp/tmp8n3wn6nn.d(51): Error: unterminated character constant\\n/tmp/tmp8n3wn6nn.d(52):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmp8n3wn6nn.d(52): Error: found\
    \ `*=` instead of statement\\n/tmp/tmp8n3wn6nn.d(61): Error: declaration expected,\
    \ not `<`\\n/tmp/tmp8n3wn6nn.d(72): Error: declaration expected, not `assert`\\\
    n/tmp/tmp8n3wn6nn.d(73): Error: declaration expected, not `assert`\\n/tmp/tmp8n3wn6nn.d(74):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp8n3wn6nn.d(75): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8n3wn6nn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length; i++)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result %= operand[i];\n              \
    \  break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,math\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it! I really like your\
    \ solution and I understand it very well. I will definitely try this out and see\
    \ how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI did some testing and it seems\
    \ like this solution works very well for my needs. Thanks again!\n<|/ c |>\n<|\
    \ c |>\nI added a test case to my answer, and I added a test case to my answer\
    \ as well. Both tests pass. I hope this helps you!\n<|/ c |>\n<| c |>\nI added\
    \ a test case to my answer, and I added a test case to my answer as well. Both\
    \ tests pass. I hope this helps you!\n<|/ c |>\n<| c |>\nI added a test case to\
    \ my answer, and I added a test case to my answer as well. Both tests pass. I\
    \ hope this helps you!\n<|/ c |>\n<| a dscore=2 |>\nI wrote a Java program to\
    \ solve this problem in O(n) time complexity. \n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ygtk24a.d(55): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ygtk24a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    \n    for(i\
    \ = 0; i < operator.length; i++)\n    {\n        switch(operator[i])\n       \
    \ {\n            case '+':\n                temp = result + operand[i];\n    \
    \            break;\n            case '-':\n                temp = result - operand[i];\n\
    \                break;\n            case '*':\n                temp = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   temp = result / operand[i];\n                break;\n            case '**':\n\
    \                temp = result ** operand[i];\n                break;\n      \
    \      default:\n                temp = result;\n                break;\n    \
    \    }\n        result = temp;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,math\
    \ |>\n<| c |>\nThe code doesn't work if there are more than 2 operands. I added\
    \ a solution that works with more than 2 operands.\n<|/ c |>\n<| c |>\nThe code\
    \ doesn't work if there are more than 2 operands. I added a solution that works\
    \ with more than 2 operands.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a solution that\
    \ works with more than 2 operands. I used the fact that we can use binary operations\
    \ to solve this problem. \n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprnra88m8.d(50): Error: unterminated character constant\\n/tmp/tmprnra88m8.d(50):\
    \ Error: unterminated character constant\\n/tmp/tmprnra88m8.d(51): Error: found\
    \ `temp` when expecting `:`\\n/tmp/tmprnra88m8.d(51): Error: found `=` instead\
    \ of statement\\n/tmp/tmprnra88m8.d(61): Error: declaration expected, not `<`\\\
    n/tmp/tmprnra88m8.d(64): Error: unterminated character constant\\n/tmp/tmprnra88m8.d(67):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmprnra88m8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+':\n        \
    \        result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result *= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math\
    \ |>\n<| c |>\nThis code doesn't compile. `operator` isn't a string, and `operand`\
    \ isn't a long.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing out\
    \ my mistake.\n<|/ c |>\n<| c |>\nThis code doesn't compile. `operator` isn't\
    \ a string, and `operand` isn't a long.\n<|/ c |>\n<| c |>\nI fixed the code.\
    \ Thanks for pointing out my mistake.\n<|/ c |>\n<| c |>\nThis code doesn't compile.\
    \ `operator` isn't a string, and `operand` isn't a long.\n<|/ c |>\n<| a tags=c#,algorithm,math\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_r4l41wf.d(56): Error: declaration expected, not `<`\\n/tmp/tmp_r4l41wf.d(59):\
    \ Error: unterminated character constant\\n/tmp/tmp_r4l41wf.d(59): Error: unterminated\
    \ character constant\\n/tmp/tmp_r4l41wf.d(59): Error: unterminated character constant\\\
    n/tmp/tmp_r4l41wf.d(65): Error: unterminated character constant\\n/tmp/tmp_r4l41wf.d(65):\
    \ Error: unterminated character constant\\n/tmp/tmp_r4l41wf.d(65): Error: unterminated\
    \ character constant\\n/tmp/tmp_r4l41wf.d(71): Error: unterminated character constant\\\
    n/tmp/tmp_r4l41wf.d(71): Error: unterminated character constant\\n/tmp/tmp_r4l41wf.d(71):\
    \ Error: unterminated character constant\\n/tmp/tmp_r4l41wf.d(76): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmp_r4l41wf.d(76): Error: no identifier for declarator\
    \ `.Collections.Generic`\\n/tmp/tmp_r4l41wf.d(77): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmp_r4l41wf.d(77): Error: no identifier for declarator `.Linq`\\\
    n/tmp/tmp_r4l41wf.d(78): Error: semicolon expected, not `.`\\n/tmp/tmp_r4l41wf.d(78):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmp_r4l41wf.d(79): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmp_r4l41wf.d(79): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_r4l41wf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+': result +=\
    \ operand[i]; break;\n            case '-': result -= operand[i]; break;\n   \
    \         case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '^': result ^= operand[i]; break;\n\
    \            default:\n                throw new Exception(\"Invalid operator\"\
    );\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThank you very much for your answer! I appreciate it. I will try this out\
    \ and let you know how it goes.\n<|/ c |>\n<| c |>\nI implemented your solution\
    \ and it works perfectly. Thank you very much for your help!\n<|/ c |>\n<| c |>\n\
    Glad I could help. If this answer solved your problem, please consider accepting\
    \ it by clicking the checkmark next to it.\n<|/ c |>\n<| a tags=java,arrays,algorithm,math\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfl2kg12e.d(46): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfl2kg12e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7mwfuk_.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7mwfuk_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqhyf43dm.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqhyf43dm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwbg7cmlx.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbg7cmlx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operand.length)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result = result + operand[i];\n                break;\n           \
    \ case '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '//':\n                result = result\
    \ / operand[i];\n                break;\n            case '**':\n            \
    \    result = result ** operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n     \
    \   i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer! I really appreciate it! I did some research and found\
    \ out that you can do that with recursion. Do you think it's possible to do that\
    \ with recursion? If so, could you please show me how? Thanks again!\n<|/ c |>\n\
    <| c |>\nI added a recursive solution to my answer. Hope it helps!\n<|/ c |>\n\
    <| c |>\nThank you so much! I really appreciate it! I really appreciate your help!\
    \ I really appreciate it! I really appreciate your help! I really appreciate your\
    \ help! I really appreciate your help! I really appreciate your help! I really\
    \ appreciate your help! I really appreciate your help! I really appreciate your\
    \ help! I really appreciate your help! I really appreciate your help! I really\
    \ appreciate your help! I really appreciate your help! I really appreciate your\
    \ help! I really appreciate your help! I really appreciate your help! I really\
    \ appreciate your help! I really appreciate your help! I really appreciate your\
    \ help! I really appreciate your help! I really appreciate your help! I really\
    \ appreciate your help! I really appreciate your help! I really appreciate your\
    \ help! I really appreciate your help! I really appreciate your help! I really\
    \ appreciate your help! I really appreciate your help! I really appreciate your\
    \ help! I really appreciate your help! I really appreciate your help! I really\
    \ appreciate your help! I really appreciate your help! I really appreciate your\
    \ help! I really appreciate your help! I really appreciate your help! I really\
    \ appreciate your help! I really appreciate your help! I really appreciate your\
    \ help! I really appreciate your help\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0yb759qg.d(49): Error: unterminated character constant\\n/tmp/tmp0yb759qg.d(49):\
    \ Error: unterminated character constant\\n/tmp/tmp0yb759qg.d(50): Error: found\
    \ `result` when expecting `:`\\n/tmp/tmp0yb759qg.d(50): Error: found `=` instead\
    \ of statement\\n/tmp/tmp0yb759qg.d(52): Error: unterminated character constant\\\
    n/tmp/tmp0yb759qg.d(52): Error: unterminated character constant\\n/tmp/tmp0yb759qg.d(53):\
    \ Error: found `result` when expecting `:`\\n/tmp/tmp0yb759qg.d(53): Error: found\
    \ `=` instead of statement\\n/tmp/tmp0yb759qg.d(62): Error: declaration expected,\
    \ not `<`\\n/tmp/tmp0yb759qg.d(65): Error: unterminated character constant\\n/tmp/tmp0yb759qg.d(76):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp0yb759qg.d(77): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp0yb759qg.d(78): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp0yb759qg.d(79): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yb759qg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.size(); i++)\n  \
    \  {\n        switch(operator[i])\n        {\n            case '+': result +=\
    \ operand[i]; break;\n            case '-': result -= operand[i]; break;\n   \
    \         case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '^': result ^= operand[i]; break;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm |>\n\
    <| c |>\nThis code doesn't work. Try it with `operator = ['+', '*', '-']` and\
    \ `operand = [2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nIt does work. Try it with the example\
    \ I gave in the answer.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work. Try\
    \ it with `operator = ['+', '*', '-']` and `operand = [2, 3, 4, 5]`\n<|/ c |>\n\
    <| c |>\nI tested it and it does work. Try it with the example I gave in the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it does work. Try it with the example I gave\
    \ in the answer.\n<|/ c |>\n<| a |>\nI believe that your problem is that you are\
    \ trying to use an ArrayList to store your operators and operands. ArrayList is\
    \ meant for storing primitive types. You will need to use an ArrayList of Strings\
    \ to store your operators and operands. \n<code>\nArrayList<String> operators\
    \ = new ArrayList<String>();\nArrayList<String> operands = new ArrayList<String>();\n\
    </code>\n<|/ a tags=java,algorithm dscore=0 |>\n<| c |>\nI believe that your problem\
    \ is that you are trying to use an ArrayList to store your operators and operands.\
    \ ArrayList is meant for storing primitive types. You will need to use an ArrayList\
    \ of Strings to store your operators and operands.\n<|/ c |>\n<| c |>\nI believe\
    \ that your problem is that you are trying to use an ArrayList to store your operators\
    \ and operands. ArrayList is meant for storing primitive types. You will need\
    \ to use an ArrayList of Strings to store your operators and operands.\n<|/ c\
    \ |>\n<| c |>\nI believe that your problem is that you are trying to use an ArrayList\
    \ to store your operators and operands. ArrayList is meant for storing primitive\
    \ types. You will need to use an ArrayList of Strings to store your operators\
    \ and operands.\n<|/ c |>\n<| c |>\nI believe that your problem is that you are\
    \ trying to use an ArrayList to store your operators and operands. ArrayList is\
    \ meant for storing \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpax78nhov.d(44): Error: declaration expected, not `<`\\n/tmp/tmpax78nhov.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmpax78nhov.d(53): Error: unterminated\
    \ character constant\\n/tmp/tmpax78nhov.d(65): Error: no identifier for declarator\
    \ `ArrayList`\\n/tmp/tmpax78nhov.d(65): Error: declaration expected, not `<`\\\
    n/tmp/tmpax78nhov.d(66): Error: declaration expected, not `<`\\n/tmp/tmpax78nhov.d(83):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpax78nhov.d(84): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpax78nhov.d(85): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpax78nhov.d(86): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax78nhov.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD =\
    \ 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n\
    \    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long\
    \ MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ =\
    \ 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n\
    \    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long\
    \ ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD\
    \ = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH\
    \ = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL\
    \ = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP\
    \ = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT\
    \ = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX\
    \ = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe7bthbt_.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7bthbt_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long op1, op2, op3, op4, op5, op6, op7, op8,\
    \ op9, op10, op11, op12, op13, op14, op15;\n    long op16, op17, op18, op19, op20,\
    \ op21, op22, op23, op24, op25, op26, op27, op28, op29, op30;\n    long op31,\
    \ op32, op33, op34, op35, op36, op37, op38, op39, op40, op41, op42, op43, op44;\n\
    \    long op45, op46, op47, op48, op49, op50, op51, op52, op53, op54, op55, op56,\
    \ op57, op58;\n    long op59, op60, op61, op62, op63, op64, op65, op66, op67,\
    \ op68, op69, op70, op71, op72;\n    long op73, op74, op75, op76, op77, op78,\
    \ op79, op80, op81, op82, op83, op84, op85, op86;\n    long op87, op88, op89,\
    \ op90, op91, op92, op93, op94, op95, op96, op97, op98, op99;\n    long op100;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpndtet5t7.d(39): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpndtet5t7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.Length &&\
    \ i < operand.Length)\n    {\n        switch(operator[i])\n        {\n       \
    \     case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result *= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp005m_e96.d(58): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp005m_e96.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '%':\n             \
    \   result = result % operand[i];\n                break;\n            case '^':\n\
    \                result = result ^ operand[i];\n                break;\n     \
    \       default:\n                throw new Exception(\"Invalid operator\");\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math\
    \ |>\n<| c |>\nThe OP wants to implement the algorithm himself. He doesn't want\
    \ to use any external libraries.\n<|/ c |>\n<| c |>\nI didn't say he wants to\
    \ use external libraries. I said he wants to implement the algorithm himself.\
    \ He doesn't want to use any external libraries.\n<|/ c |>\n<| c |>\nI didn't\
    \ say he wants to use external libraries. I said he wants to implement the algorithm\
    \ himself. He doesn't want to use any external libraries.\n<|/ c |>\n<| c |>\n\
    I didn't say he wants to use external libraries. I said he wants to implement\
    \ the algorithm himself. He doesn't want to use any external libraries.\n<|/ c\
    \ |>\n<| c |>\nI didn't say he wants to use external libraries. I said he wants\
    \ to implement the algorithm himself. He doesn't want to use any external libraries.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic long Calculate(string operation, long\
    \ a, long b)\n{\n    long result = 0;\n    string oper = operation.ToLower();\n\
    \    string op1 = oper.Substring(0, 1);\n    string op2 = oper.Substring(1, 1);\n\
    \    string op3 = oper.Substring(2, 1);\n    string op4 = oper.Substring(3, 1);\n\
    \    string op5 = oper.Substring(4, 1);\n    string op6 = oper.Substring(5, 1);\n\
    \    string op7 = oper.Substring(6, 1);\n    string op8 = oper.Substring(7, 1);\n\
    \    string op9 = oper.Substring(8, 1);\n    string op10 = oper.Substring(9, 1);\n\
    \    string op11 = oper.Substring(10, 1);\n    string op12 = oper.Substring(11,\
    \ 1);\n    string op13 = oper.Substring(12, 1);\n    string op\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8zxy_58i.d(60): Error: declaration expected, not `<`\\n/tmp/tmp8zxy_58i.d(63):\
    \ Error: unterminated character constant\\n/tmp/tmp8zxy_58i.d(66): Error: unterminated\
    \ character constant\\n/tmp/tmp8zxy_58i.d(66): Error: unterminated character constant\\\
    n/tmp/tmp8zxy_58i.d(69): Error: unterminated character constant\\n/tmp/tmp8zxy_58i.d(69):\
    \ Error: unterminated character constant\\n/tmp/tmp8zxy_58i.d(72): Error: unterminated\
    \ character constant\\n/tmp/tmp8zxy_58i.d(72): Error: unterminated character constant\\\
    n/tmp/tmp8zxy_58i.d(75): Error: unterminated character constant\\n/tmp/tmp8zxy_58i.d(75):\
    \ Error: unterminated character constant\\n/tmp/tmp8zxy_58i.d(97): Error: semicolon\
    \ expected, not `unittest`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8zxy_58i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprlyiouc5.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprlyiouc5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc\
    \ = 0;\n    long Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n\
    \    long Hh = 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long\
    \ Ll = 0;\n    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp =\
    \ 0;\n    long Qq = 0;\n    long Rr = 0;\n    long Sq = 0;\n    long Tt = 0;\n\
    \    long Uu = 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long\
    \ Yy = 0;\n    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc\
    \ = 0;\n    long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg\
    \ = 0;\n    long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk\
    \ = 0;\n    long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo\
    \ = 0;\n    long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss\
    \ = 0;\n    long Ttt = 0;\n    long Uuu = 0;\n    long Vvv\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpms37y62d.d(124): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpms37y62d.d(124): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpms37y62d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgjbt6mv8.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjbt6mv8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n   \
    \ long temp84 = 0;\n    long temp85 = 0;\n\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7mw2y54t.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mw2y54t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long Dd =\
    \ 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh = 0;\n\
    \    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n    long\
    \ Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long Qq =\
    \ 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu = 0;\n\
    \    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n    long\
    \ Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n    long Ddd\
    \ = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n    long Hhh\
    \ = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n    long Lll\
    \ = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n    long Ppp\
    \ = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n    long Ttt\
    \ = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm2zonesy.d(124): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpm2zonesy.d(124): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2zonesy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqomohs7c.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqomohs7c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    int j = 0;\n\
    \    \n    for(i = 0; i < operator.length; i++){\n        for(j = 0; j < operand.length;\
    \ j++){\n            if(operator[i] == operator[j]){\n                temp = operand[j];\n\
    \                operand[j] = operand[i];\n                operand[i] = temp;\n\
    \            }\n        }\n    }\n    \n    for(i = 0; i < operator.length; i++){\n\
    \        result += operand[i] * operator[i];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis is not an answer\
    \ to the question. OP asked for an algorithm, not an implementation. Also, your\
    \ algorithm is wrong. Try `operator['+', '*', '-']` and `array = [2, 3, 4, 5]`\n\
    <|/ c |>\n<| c |>\nI agree with you, my algorithm is wrong. I will fix it.\n<|/\
    \ c |>\n<| c |>\nI fixed my algorithm and added a link to my github repo.\n<|/\
    \ c |>\n<| c |>\nI fixed my algorithm and added a link to my github repo.\n<|/\
    \ c |>\n<| c |>\nI fixed my algorithm and added a link to my github repo.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8wbu_y59.d(51): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8wbu_y59.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long ao = 0;\n    long bo =\
    \ 0;\n    long co = 0;\n    long do = 0;\n    long eo = 0;\n    long fo = 0;\n\
    \    long go = 0;\n    long ho = 0;\n    long io = 0;\n    long jo = 0;\n    long\
    \ ko = 0;\n    long lo = 0;\n    long mo = 0;\n    long no = 0;\n    long oo =\
    \ 0;\n    long po = 0;\n    long qo = 0;\n    long ro = 0;\n    long so = 0;\n\
    \    long to = 0;\n    long uo = 0;\n    long vo = 0;\n    long wo = 0;\n    long\
    \ xo = 0;\n    long yo = 0;\n    long zo = 0;\n    long AAO = 0;\n    long AAB\
    \ = 0;\n    long AAC = 0;\n    long AAD = 0;\n    long AAE = 0;\n    long AAF\
    \ = 0;\n    long AAG = 0;\n    long AAH = 0;\n    long AAI = 0;\n    long AAJ\
    \ = 0;\n    long AAK = 0;\n    long AAL = 0;\n    long AAM = 0;\n    long A\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkkqzwjz7.d(93): Error: no identifier for declarator `long`\\\
    n/tmp/tmpkkqzwjz7.d(93): Error: found `=` instead of statement\\n/tmp/tmpkkqzwjz7.d(94):\
    \ Error: found `long` when expecting `while`\\n/tmp/tmpkkqzwjz7.d(94): Error:\
    \ found `eo` when expecting `(`\\n/tmp/tmpkkqzwjz7.d(94): Error: expression expected,\
    \ not `=`\\n/tmp/tmpkkqzwjz7.d(94): Error: found `0` when expecting `)`\\n/tmp/tmpkkqzwjz7.d(130):\
    \ Error: semicolon expected, not `unittest`\\n/tmp/tmpkkqzwjz7.d(130): Error:\
    \ found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpkkqzwjz7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n    for(i = 0;\
    \ i < operator.length; i++){\n        switch(operator[i]){\n            case \"\
    +\": result += operand[i]; break;\n            case \"-\": result -= operand[i];\
    \ break;\n            case \"*\": result *= operand[i]; break;\n            case\
    \ \"//\": result /= operand[i]; break;\n            case \"**\": result *= operand[i];\
    \ result *= operand[i]; break;\n            default: return -1;\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThe\
    \ question was about C#, not C++.\n<|/ c |>\n<| c |>\nThe question was about C#,\
    \ not C++.\n<|/ c |>\n<| c |>\nThe question was about C#, not C++.\n<|/ c |>\n\
    <| c |>\nThe question was about C#, not C++.\n<|/ c |>\n<| c |>\nThe question\
    \ was about C#, not C++.\n<|/ c |>\n<| a |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0o_4orjl.d(45): Error: declaration expected, not `<`\\n/tmp/tmp0o_4orjl.d(65):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmp0o_4orjl.d(65): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmp0o_4orjl.d(66): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmp0o_4orjl.d(66): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmp0o_4orjl.d(67): Error: semicolon expected, not `.`\\n/tmp/tmp0o_4orjl.d(67):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmp0o_4orjl.d(68): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmp0o_4orjl.d(68): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp0o_4orjl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoqnz216t.d(134): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqnz216t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC\
    \ = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n\
    \    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long\
    \ LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP =\
    \ 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n\
    \    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long\
    \ YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC\
    \ = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG\
    \ = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK\
    \ = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO\
    \ = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS\
    \ = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW\
    \ = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8c02vv59.d(128): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c02vv59.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD =\
    \ 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n\
    \    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long\
    \ AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ =\
    \ 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n\
    \    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long\
    \ AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD =\
    \ 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n\
    \    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long\
    \ BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ =\
    \ 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n\
    \    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long\
    \ BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long CD =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpia0q6gdh.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpia0q6gdh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < operator.length; i++) \n \
    \   {\n        switch(operator[i]) \n        {\n            case \"+\": result\
    \ += operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n\
    \            case \"*\": result *= operand[i]; break;\n            case \"/\"\
    : result /= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; break;\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<|\
    \ c |>\nI like this solution, but I believe it can be optimized further by using\
    \ a `switch` statement instead of an `if` statement. Also, `switch` statements\
    \ are faster than `if` statements.\n<|/ c |>\n<| c |>\nI agree, switch statements\
    \ are faster than if statements. I did some tests and it seems that switch statements\
    \ are faster than if statements. I updated my answer with the results.\n<|/ c\
    \ |>\n<| c |>\nI believe that switch statements are faster than if statements\
    \ because switch statements are compiled to jump tables and if statements are\
    \ compiled to if-else statements. I updated my answer with the results. I hope\
    \ it helps.\n<|/ c |>\n<| c |>\nI believe that switch statements are faster than\
    \ if statements because switch statements are compiled to jump tables and if statements\
    \ are compiled to if-else statements. I updated my answer with the results. I\
    \ hope it helps.\n<|/ c |>\n<| c |>\nI believe that switch statements are faster\
    \ than if statements because switch statements are compiled to jump tables and\
    \ if statements are compiled to if-else statements. I updated my answer with the\
    \ results. I hope it helps.\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\n\
    public static void main(String[] args) {\n    String[] operators = {\"+\", \"\
    -\", \"*\", \"/\", \"//\", \"**\"};\n    long[] operands = {1, 2, 3, 4, 5};\n\
    \    long result = doAlgebra(operators, operands);\n    System.out.println(result);\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6jsdqgln.d(45): Error: declaration expected, not `<`\\n/tmp/tmp6jsdqgln.d(68):\
    \ Error: identifier expected following `.` instead of `out`\\n/tmp/tmp6jsdqgln.d(68):\
    \ Error: no identifier for declarator `System`\\n/tmp/tmp6jsdqgln.d(68): Error:\
    \ declaration expected, not `out`\\n/tmp/tmp6jsdqgln.d(69): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jsdqgln.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    \n    while(i\
    \ < operator.length && i < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                temp = result + operand[i];\n\
    \                break;\n            case '-':\n                temp = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   temp = result * operand[i];\n                break;\n            case '/':\n\
    \                temp = result / operand[i];\n                break;\n       \
    \     case '//':\n                temp = result / operand[i];\n              \
    \  break;\n            case '**':\n                temp = result ** operand[i];\n\
    \                break;\n            default:\n                temp = result;\n\
    \                break;\n        }\n        result = temp;\n        i++;\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so\
    \ much for your answer! I really appreciate it! I understand it now. Thank you\
    \ so much for your help!\n<|/ c |>\n<| c |>\nYou're welcome! I'm glad it helped\
    \ you. Good luck with your coding :)\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.List;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmperqu51bt.d(50): Error: unterminated character constant\\n/tmp/tmperqu51bt.d(50):\
    \ Error: unterminated character constant\\n/tmp/tmperqu51bt.d(51): Error: found\
    \ `temp` when expecting `:`\\n/tmp/tmperqu51bt.d(51): Error: found `=` instead\
    \ of statement\\n/tmp/tmperqu51bt.d(53): Error: unterminated character constant\\\
    n/tmp/tmperqu51bt.d(53): Error: unterminated character constant\\n/tmp/tmperqu51bt.d(54):\
    \ Error: found `temp` when expecting `:`\\n/tmp/tmperqu51bt.d(54): Error: found\
    \ `=` instead of statement\\n/tmp/tmperqu51bt.d(65): Error: declaration expected,\
    \ not `<`\\n/tmp/tmperqu51bt.d(71): Error: unterminated character constant\\n/tmp/tmperqu51bt.d(71):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmperqu51bt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6539_kk.d(117): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6539_kk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC =\
    \ 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC =\
    \ 0;\n    long AD = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsmw4ipil.d(133): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmw4ipil.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length; i++)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result **= operand[i];\n             \
    \   break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math\
    \ |>\n<| c |>\nThis code does not compile. `operator` is a `string[]` but `operand`\
    \ is a `long[]`. `operator[i]` is a `char` but `operand[i]` is a `long`. `operator[i]`\
    \ cannot be implicitly converted to a `long`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ code by changing `operator[i]` to `operator[i - 1]`\n<|/ c |>\n<| c |>\nThis\
    \ code does not compile. `operator` is a `string[]` but `operand` is a `long[]`.\
    \ `operator[i]` is a `char` but `operand[i]` is a `long`. `operator[i]` cannot\
    \ be implicitly converted to a `long`.\n<|/ c |>\n<| c |>\nI fixed the code by\
    \ changing `operator[i]` to `operator[i - 1]`\n<|/ c |>\n<| c |>\nThis code does\
    \ not compile. `operator` is a `string[]` but `operand` is a `long[]`. `operator[i]`\
    \ is a `char` but `operand[i]` is a `long`. `operator[i]` cannot be implicitly\
    \ converted to a `long`.\n<|/ c |>\n<| a tags=c#,algorithm,math |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzi87ht_k.d(49): Error: expression expected, not `*=`\\n/tmp/tmpzi87ht_k.d(49):\
    \ Error: found `operand` when expecting `;` following statement\\n/tmp/tmpzi87ht_k.d(57):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpzi87ht_k.d(77): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpzi87ht_k.d(77): Error: no identifier for declarator\
    \ `.Collections.Generic`\\n/tmp/tmpzi87ht_k.d(78): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmpzi87ht_k.d(78): Error: no identifier for declarator `.Linq`\\\
    n/tmp/tmpzi87ht_k.d(79): Error: semicolon expected, not `.`\\n/tmp/tmpzi87ht_k.d(79):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpzi87ht_k.d(80): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpzi87ht_k.d(80): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpzi87ht_k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprr4mykxv.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr4mykxv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC\
    \ = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n\
    \    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long\
    \ AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP =\
    \ 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n\
    \    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long\
    \ AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC =\
    \ 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n\
    \    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long\
    \ BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP =\
    \ 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n\
    \    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long\
    \ BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptea0izgf.d(131): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptea0izgf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
