name: HumanEval_140_fix_spaces
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace\
  \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
  \ spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"\
  Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\"\
  \ Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\
  \n    \n*/\nstring fix_spaces(string text) \n"
tests: "unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
  Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
  );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
  );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
  \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
completions: ["{\n    size_t len = text.length();\n    size_t i;\n    \n    for(i\
    \ = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n        {\n         \
    \   if(i + 1 < len && text[i + 1] == ' ')\n            {\n                text[i]\
    \ = '_';\n                ++i;\n            }\n            else\n            {\n\
    \                text[i] = '_';\n            }\n        }\n    }\n    \n    return\
    \ text;\n}", "{\n    size_t len = text.length();\n    \n    for(int i = 0; i <\
    \ len; i++)\n    {\n        if(text[i] == ' ')\n        {\n            if(i+1\
    \ < len && text[i+1] == ' ')\n            {\n                text[i] = '_';\n\
    \                text[i+1] = '-';\n                i += 2;\n            }\n  \
    \          else\n            {\n                text[i] = '_';\n            }\n\
    \        }\n    }\n    \n    return text;\n}", "{\n    size_t len = text.length();\n\
    \    size_t i;\n    string result = \"\";\n    \n    for (i = 0; i < len; ++i)\n\
    \    {\n        if (text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + '_';\n  \
    \      }\n    }\n    \n    if (result.length() > 2)\n    {\n        result = result.substr(0,\
    \ result.length() - 2);\n    }\n    \n    return result;\n}", "{\n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            string temp = text;\n            temp = temp.replace(text[i], \"\
    _\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            ",
  "{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n\
    \        if(result[i] == ' ')\n        {\n            int j = i + 1;\n       \
    \     while(j < result.length() && result[j] == ' ')\n            {\n        \
    \        result[j] = '_';\n                j++;\n            }\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp\
    \ = text;\n            temp = temp.replace(text[i], \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n\
    \    return text;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like your solution,\
    \ but I do not understand why you use \"text\" twice. Why not just use \"temp\"\
    \ instead?\n<|/ c |>\n<| c |>\nBecause I wanted to keep the same variable names.\
    \ I didn't want to change them all to temp. I'll edit my answer to reflect this.\n\
    <|/ c |>\n<| a |>\nI wrote a function that will replace all spaces with underscores\
    \ and then replace all underscores with spaces. I tested it and it works.\n<code>\n\
    string fix_spaces(string text)\n{\n    string temp = text;\n    for(int i = 0;\
    \ i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n    \
    \        temp = temp.replace(text[i], \"_\");\n        }\n    }\n    temp = temp.replace(\"\
    _\", \" \");\n    return temp;\n}\n</code>\n<|/ a dscore=0 tags=c++,string |>\n\
    <| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    for(int i = 0; i <\
    \ text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n          \
    \  result += text[i];\n        }\n        else\n        {\n            result\
    \ += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.size();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    string result = text;\n\
    \    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n \
    \   for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == '\
    \ ')\n        {\n            int j = i + 1;\n            while(j < result.length()\
    \ && result[j] == ' ')\n            {\n                result[j] = '_';\n    \
    \            j++;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n     \
    \   if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j\
    \ < result.length() && result[j] == ' ')\n            {\n                result[j]\
    \ = '_';\n                j++;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=c++,string,replace,regex |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <regex>", "{\n    for(int i = 0; i <\
    \ text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    string temp = text;\n            temp = temp.replace(text[i], \"_\");\n \
    \           temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            ",
  "{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + '_';\n  \
    \      }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i = 0;\
    \ i < result.size(); i++)\n        {\n            if(result[i] == ' ')\n     \
    \       {\n                result[i] = '_';\n            }\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.length() && result[j] == ' ')\n         \
    \   {\n                result[j] = '_';\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = text;\n   \
    \ \n    for(int i = 0; i < result.size(); ++i)\n    {\n        if(result[i] ==\
    \ ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int\
    \ i = 0; i < result.size(); ++i)\n    {\n        if(result[i] == ' ')\n      \
    \  {\n            int j = i + 1;\n            while(j < result.size() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                ++j;\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = text;\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() -\
    \ 2; i++)\n        {\n            result[i] = result[i] + '-';\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n    {\n    \
    \    if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n\
    \        else\n        {\n            result += text[i] + '_';\n        }\n  \
    \  }\n    \n    if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size()\
    \ - 2; ++i)\n        {\n            result[i] = result[i] + '-';\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    size_t len = text.length();\n  \
    \  string result = \"\";\n    \n    for(int i = 0; i < len; ++i)\n    {\n    \
    \    if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n\
    \        else\n        {\n            result += text[i] + '_';\n        }\n  \
    \  }\n    \n    size_t nSpaces = result.find_first_of(' ');\n    \n    if(nSpaces\
    \ != string::npos)\n    {\n        string sub = result.substr(0, nSpaces);\n \
    \       string rest = result.substr(nSpaces);\n        \n        size_t nSpaceRest\
    \ = rest.find_first_of(' ');\n        \n        if(nSpaceRest != string::npos)\n\
    \        {\n            string subRest = result.substr(0, nSpaceRest);\n     \
    \       string restRest = result.substr(nSpaceRest);\n            \n         \
    \   string newRest = \"\";\n            \n            for(int i = 0; i < restRest.length();\
    \ ++i)\n            {\n                if(restRest[i] == ' ')\n              \
    \  {\n                    newRest += restRest[i];\n                }\n       \
    \         else\n                {\n                    newRest += '-';\n     \
    \           }\n            }\n            \n            result += sub + newRest;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    size_t len = text.length();\n\
    \    size_t i;\n    string result = \"\";\n    \n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + '_';\n  \
    \      }\n    }\n    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i];\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = text;\n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"\
    _\";\n        }\n        else\n        {\n            result += text[i];\n   \
    \     }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n  \
    \      if(result[i] == ' ')\n        {\n            result += \"-\";\n       \
    \ }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    size_t len = text.length();\n    string result = \"\";\n\
    \    \n    for (size_t i = 0; i < len; ++i)\n    {\n        char c = text[i];\n\
    \        \n        if (c == ' ')\n        {\n            result += c;\n      \
    \  }\n        else if (i > 0 && c == ' ' && text[i - 1] == ' ')\n        {\n \
    \           result += '_';\n        }\n        else\n        {\n            result\
    \ += c;\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ if(result.length() > 2)\n    {\n        result = result.substr(0, result.length()\
    \ - 2);\n    }\n    \n    return result;\n}", "{\n    string result = text;\n\
    \    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n \
    \   for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == '\
    \ ')\n        {\n            int j = i + 1;\n            while(j < result.length()\
    \ && result[j] == ' ')\n            {\n                result[j] = '_';\n    \
    \            j++;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    size_t len = text.length();\n    string result = \"\";\n    \n   \
    \ for(size_t i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n       \
    \ {\n            result += text[i];\n        }\n        else\n        {\n    \
    \        result += text[i] + '_';\n        }\n    }\n    \n    size_t len = result.length();\n\
    \    \n    for(size_t i = 0; i < len; ++i)\n    {\n        if(result[i] == '_')\n\
    \        {\n            result += text[i];\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i\
    \ = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i].toChar();\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() -\
    \ 2; i++)\n        {\n            result[i] = result[i].toChar();\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    size_t len = text.length();\n  \
    \  string result = text;\n    \n    for(int i = 0; i < len; ++i)\n    {\n    \
    \    if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n\
    \        else\n        {\n            result += text[i] + '_';\n        }\n  \
    \  }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < len;\
    \ ++i)\n        {\n            if(text[i] == ' ')\n            {\n           \
    \     result += text[i];\n            }\n            else\n            {\n   \
    \             result += text[i] + '-';\n            }\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    string result = text;\n    size_t len = result.size();\n\
    \    for(size_t i = 0; i < len; ++i)\n    {\n        char c = result[i];\n   \
    \     if(c == ' ')\n        {\n            result += '_';\n        }\n       \
    \ else if(c == '\\t')\n        {\n            result += '_';\n        }\n    }\n\
    \    \n    if(result.size() > 2)\n    {\n        size_t i = 0;\n        size_t\
    \ j = result.size() - 1;\n        while(i < j)\n        {\n            if(result[i]\
    \ == ' ' && result[j] == ' ')\n            {\n                result += '-';\n\
    \                ++i;\n                --j;\n            }\n            else if(result[i]\
    \ == ' ' && result[j] != '\\t')\n            {\n                result += '-';\n\
    \                ++i;\n            }\n            else if(result[i] != '\\t' &&\
    \ result[j] == ' ')\n            {\n                result += '-';\n         \
    \       --j;\n            }\n            else if(result[i] != '\\t' && result[j]\
    \ != '\\t')\n            {\n                result += '-';\n                ++i;\n\
    \                --j;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    size_t len = text.length();\n    \n    for(int i = 0; i < len; ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            if(i+1 < len && text[i+1]\
    \ == ' ')\n            {\n                text[i] = '_';\n                text[i+1]\
    \ = '-';\n                i += 2;\n            }\n            else\n         \
    \   {\n                text[i] = '_';\n            }\n        }\n    }\n    \n\
    \    return text;\n}", "{\n    string result = text;\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n\
    \            while(j < result.length() && result[j] == ' ')\n            {\n \
    \               result[j] = '_';\n                j++;\n            }\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    string result = text;\n   \
    \ for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n\
    \        {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0;\
    \ i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         text[i] = '_';\n        }\n        else if(text[i] == ' ')\n       \
    \ {\n            text[i] = '-';\n        }\n    }\n    return text;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if there are multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\nI added a fix for that case\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    string fix_spaces(string text) {\n    string result = \"\";\n    for(int i = 0;\
    \ i < text.size(); ++i) {\n        if(text[i] == ' ') {\n            result +=\
    \ text[i];\n        }\n        else {\n            result += text[i] + '_';\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n\
    <| c |>\nThis doesn't work if there are multiple consecutive spaces.\n<|/ c |>\n\
    <| c |>\nI added a fix for that case\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring\
    \ fix_spaces(string text) {\n    string result = \"\";\n    for(int i = 0; i <\
    \ text.size(); ++i) {\n        if(text[i] == ' ') {\n            result += text[i];\n\
    \        }\n        else {\n            result += text[i] + '_';\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| a tags=c++,string\
    \ |>\n<code>\nstring fix_spaces(string text) {\n    string result = \"\";\n  \
    \  for(int i = 0; i < text.size(); ++i) {\n        if(text[i] == ' ') {\n    \
    \        result += text[i];\n        }\n        else {\n            result +=\
    \ text[i] + '_';\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,string |>\n<code>\nstring fix_spaces(string text) {\n    string\
    \ result = \"\";\n    for(int i = 0; i < text.size(); ++i) {\n        if(text[i]\
    \ == ' ') {\n            result += text[i];\n        }\n        else {\n     \
    \       result += text[i] + '_';\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring fix_spaces(string text) {\n\
    \    string result = \"\";\n    for(int i = 0; i < text.size(); ++i) {\n     \
    \   if(text[i] == ' ') {\n            result += text[i];\n        }\n        else\
    \ {\n            result += text[i] + '_';\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| a dscore=1 |>\n<code>\nstring fix_spaces(string\
    \ text) {\n", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n\
    \            while(j < result.length() && result[j] == ' ')\n            {\n \
    \               result[j] = '_';\n                j++;\n            }\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    string result = text;\n   \
    \ \n    for (int i = 0; i < result.length(); i++)\n    {\n        if (result[i]\
    \ == ' ')\n        {\n            result[i] = '_';\n        }\n        else if\
    \ (result.length() > 2 && result[i] == ' ' && result[i + 1] == ' ')\n        {\n\
    \            result[i] = '-';\n        }\n    }\n    \n    return result;\n}",
  "{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            text[i] = '_';\n        }\n    }\n    \n    for(int i\
    \ = 0; i < text.length() - 1; i++)\n    {\n        if(text[i] == ' ' && text[i\
    \ + 1] == ' ')\n        {\n            text[i] = '_';\n        }\n    }\n    \n\
    \    return text;\n}", "{\n    string result = \"\";\n    \n    for(int i = 0;\
    \ i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n        else\n        {\n            result\
    \ += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size() > 2)\n   \
    \ {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n         \
    \   result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i =\
    \ 0; i < result.size() - 2; ++i)\n        {\n            result[i] = result[i]\
    \ + \"-\";\n        }\n    }\n    \n    return result;\n}", "{\n    for(int i\
    \ = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            string temp = text;\n            temp = temp.replace(text[i], \"\
    _\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      string temp = text;\n            temp = temp.replace(text[i], \"-\");\n\
    \            text = temp;\n        }\n    }\n    \n    return text;\n}\n</code>\n\
    <|/ a tags=c++,string,replace,algorithm |>\n<| c |>\nThis doesn't work if the\
    \ string has more than two consecutive spaces.\n<|/ c |>\n<| c |>\nIt does. I\
    \ tested it before posting it. It replaces consecutive spaces with a single dash.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. It replaces consecutive\
    \ spaces with a single dash.\n<|/ c |>\n<| c |>\nIt doesn't work if there are\
    \ more than two consecutive spaces.\n<|/ c |>\n<| c |>\nIt does work. Did you\
    \ test it?\n<|/ c |>\n<| a tags=c++,string,replace,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i\
    \ = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i]\
    \ + \"-\";\n        }\n    }\n    \n    return result;\n}", "{\n    size_t len\
    \ = text.length();\n    \n    size_t i;\n    string result = \"\";\n    \n   \
    \ for (i = 0; i < len; ++i)\n    {\n        if (isspace(text[i]))\n        {\n\
    \            result += text[i];\n        }\n        else if (text[i] == ' ')\n\
    \        {\n            result += text[i];\n        }\n        else\n        {\n\
    \            result += '_';\n        }\n    }\n    \n    if (result.length() >\
    \ 2)\n    {\n        string temp;\n        size_t j;\n        \n        for (j\
    \ = result.length() - 2; j >= 0; --j)\n        {\n            if (isspace(result[j]))\n\
    \            {\n                temp += result[j];\n            }\n          \
    \  else\n            {\n                break;\n            }\n        }\n   \
    \     \n        if (temp.length() > 0)\n        {\n            result += temp;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    \n    for (int i = 0; i < text.size(); ++i)\n    {\n        char c = text[i];\n\
    \        \n        if (c == ' ')\n        {\n            if (result.length() >\
    \ 0)\n                result += '_';\n            else\n                result\
    \ += '_';\n        }\n        else\n        {\n            result += c;\n    \
    \    }\n    }\n    \n    if (result.length() > 2)\n    {\n        result = result.substr(0,\
    \ result.length() - 2);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    \n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n  \
    \      {\n            result += text[i];\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n     \
    \   if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j\
    \ < result.length() && result[j] == ' ')\n            {\n                result[j]\
    \ = '_';\n                j++;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,string,replace |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i]\
    \ == \" \")\n        {\n            result += \"_\";\n        }\n        else\n\
    \        {\n            result += text[i];\n        }\n    }\n    return result;\n\
    }", "{\n    size_t len = text.length();\n    \n    for(int i = 0; i < len; ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            text.erase(i, 1);\n\
    \            text.insert(i, '_');\n        }\n    }\n    \n    while(text.find_first_of('\
    \ ') != string::npos)\n    {\n        text.erase(text.find_first_of(' ') + 1);\n\
    \        text.insert(text.find_first_of(' '), '-');\n    }\n    \n    return text;\n\
    }", "{\n    string result = \"\";\n    for(int i = 0; i < text.size(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + '_';\n  \
    \      }\n    }\n    \n    for(int i = 0; i < text.size(); i++)\n    {\n     \
    \   if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    \n  \
    \  for (int i = 0; i < text.length(); i++)\n    {\n        char c = text[i];\n\
    \        \n        if (c != ' ')\n        {\n            result += c;\n      \
    \  }\n        else\n        {\n            result += ' ';\n        }\n    }\n\
    \    \n    for (int i = 0; i < result.length(); i++)\n    {\n        if (result[i]\
    \ == ' ')\n        {\n            if (result.length() > 2 && result[i + 1] ==\
    \ ' ')\n            {\n                result += '-';\n            }\n       \
    \     else\n            {\n                result += '_';\n            }\n   \
    \     }\n    }\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work if there are multiple spaces in a row. Try `fix_spaces(\"Example\
    \   3\")`.\n<|/ c |>\n<| c |>\nFixed it\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    string fix_spaces(string text) {\n    string result = \"\";\n    bool first =\
    \ true;\n    for (int i = 0; i < text.length(); i++) {\n        char c = text[i];\n\
    \        if (c != ' ') {\n            result += c;\n        } else {\n       \
    \     if (first) {\n                result += '_';\n                first = false;\n\
    \            } else {\n                result += '-';\n            }\n       \
    \ }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| a tags=c++,string\
    \ |>\n<code>\nstring fix_spaces(string text) {\n    string result = \"\";\n  \
    \  bool first = true;\n    for (int i = 0; i < text.length(); i++) {\n       \
    \ char c = text[i];\n        if (c != ' ') {\n            result += c;\n     \
    \   } else {\n            if (first) {\n                result += '_';\n     \
    \           first = false;\n            } else {\n                result += '-';\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c++,string |>\n<code>\nstring fix_spaces(string text) {\n    string\
    \ result = \"\";\n    bool first = true;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        char c = text[i];\n        if (c != ' ') {\n            result\
    \ += c;\n        } else {\n            if (first) {\n                result +=\
    \ '_';\n                first = false;\n            } else {\n               \
    \ result += '-';\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nstring fix_spaces(string text) {\n    string\
    \ result = \"\";\n    bool first = true;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        char c = text[i];\n        if (c != ' ') {\n            result\
    \ += c;\n        } else {\n            if (first) {\n                result +=\
    \ '_';", "{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i],\
    \ \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp =\
    \ temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n\
    \            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            ", "{\n    size_t len = text.length();\n    string result = text;\n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(text[i] == ' ')\n       \
    \ {\n            result += text[i];\n        }\n        else\n        {\n    \
    \        result += text[i] + '_';\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        string last_space = result.rfind(' ');\n        result\
    \ += result.substr(0, last_space);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n \
    \   {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i =\
    \ 0; i < result.size() - 2; ++i)\n        {\n            result[i] = result[i]\
    \ + \"-\";\n        }\n    }\n    \n    return result;\n}", "{\n    size_t len\
    \ = text.length();\n    \n    size_t i;\n    size_t j;\n    \n    string result\
    \ = \"\";\n    \n    for (i = 0; i < len; ++i)\n    {\n        char c = text[i];\n\
    \        \n        if (c == ' ')\n        {\n            if (j > 0)\n        \
    \    {\n                result += text[j-1];\n            }\n            \n  \
    \          result += text[i];\n            \n            j = i;\n        }\n \
    \       else if (j > 0)\n        {\n            result += text[j-1];\n       \
    \ }\n    }\n    \n    if (j > 0)\n    {\n        result += text[j-1];\n    }\n\
    \    \n    return result;\n}", "{\n    for(int i = 0; i < text.size(); ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            int j = i;\n            while(j < text.size() && text[j] == ' ')\n\
    \                ++j;\n            string s = text.substr(0, j);\n           \
    \ string t = text.substr(j);\n            temp = temp.replace(s, t);\n       \
    \     text = temp;\n        }\n    }\n    return text;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThe `fix_spaces` function doesn't work if there are multiple spaces\
    \ in a row. For example, `\" Example   3\"` becomes `\"Example-3\"`.\n<|/ c |>\n\
    <| c |>\n: Yes, I noticed that after I posted my comment. Fixed now.\n<|/ c |>\n\
    <| c |>\n: I added a fix for multiple spaces in a row.\n<|/ c |>\n<| c |>\n: I\
    \ added a fix for multiple spaces in a row.\n<|/ c |>\n<| c |>\n: I added a fix\
    \ for multiple spaces in a row.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring fix_spaces(string\
    \ text)\n{\n    string result = \"\";\n    for(int i = 0; i < text.size(); ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis\
    \ doesn't work if there are multiple spaces in a row. For example, `\" Example\
    \   3\"` becomes `\"Example-3\"`.\n<|/ c |>\n<| c |>\n: Yes, I noticed that after\
    \ I posted my comment. Fixed now.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>", "{\n    string result = text;\n    \n    for(int i = 0; i\
    \ < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n  \
    \          result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.length() && result[j] == ' ')\n         \
    \   {\n                result[j] = '_';\n                j++;\n            }\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    size_t len = text.length();\n\
    \    string result = \"\";\n    \n    for (size_t i = 0; i < len; ++i)\n    {\n\
    \        char c = text[i];\n        \n        if (c == ' ')\n        {\n     \
    \       result += \"_\";\n        }\n        else if (c == ' ' && i + 1 < len\
    \ && text[i + 1] == ' ')\n        {\n            result += \"-\";\n        }\n\
    \        else\n        {\n            result += c;\n        }\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    for(int i = 0; i <\
    \ text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n          \
    \  result += \"_\";\n        }\n        else\n        {\n            result +=\
    \ text[i];\n        }\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n  \
    \      {\n            result += text[i];\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = text;\n    for(int i = 0; i < result.size(); ++i)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    \n    for(int i = 0; i < result.size(); ++i)\n    {\n \
    \       if(result[i] == ' ')\n        {\n            int j = i + 1;\n        \
    \    while(j < result.size() && result[j] == ' ')\n            {\n           \
    \     result[j] = '_';\n                ++j;\n            }\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    size_t len = text.length();\n    \n    for(size_t i = 0;\
    \ i < len; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            char\
    \ c = text[i];\n            \n            for(size_t j = i + 1; j < len; ++j)\n\
    \            {\n                if(text[j] == ' ')\n                {\n      \
    \              c = text[j];\n                    \n                    for(size_t\
    \ k = j + 1; k < len; ++k)\n                    {\n                        if(text[k]\
    \ == ' ')\n                        {\n                            c = text[k];\n\
    \                            \n                            break;\n          \
    \              }\n                    }\n                    \n              \
    \      break;\n                }\n            }\n            \n            text.erase(i,\
    \ 1);\n            text.insert(i, c);\n            \n            i += 1;\n   \
    \     }\n    }\n    \n    return text;\n}", "{\n    string result = \"\";\n  \
    \  for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n \
    \       {\n            result += \"_\";\n        }\n        else\n        {\n\
    \            result += text[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = text;\n    size_t pos = 0;\n    size_t len = result.size();\n\
    \    while (pos < len) {\n        char c = result[pos];\n        if (c == ' ')\
    \ {\n            while (pos < len && result[pos] == ' ') {\n                pos++;\n\
    \            }\n            if (pos < len) {\n                result[pos] = '_';\n\
    \            }\n        }\n        pos++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string |>\n<| c |>\nThis doesn't work if there are multiple spaces\
    \ between words. For example, `\" Example   3\"` becomes `\"_Example-3\"`.\n<|/\
    \ c |>\n<| c |>\n: Yes, I missed that case. Thanks for pointing it out. I've updated\
    \ my answer accordingly.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = text;\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            result += text[i];\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n       \
    \ for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i]\
    \ == ' ' && result[i + 1] == ' ')\n            {\n                result[i] =\
    \ '-';\n            }\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring fix_spaces(string text) \n\
    {\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i\
    \ = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == '\
    \ ' && result[i + 1] == ' ')\n            {\n                result[i] = '-';\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,string |>\n<| a |>\n<code>\nstring fix_spaces(string text) \n{\n  \
    \  string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i\
    \ = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == '\
    \ ' && result[i + 1] == ' ')\n            {\n                result[i] = '-';\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,string dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring fix_spaces(string\
    \ text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n       \
    \ for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i]\
    \ == ' ' && result[i + 1] == ' ')\n            {\n                result[i] =\
    \ '-';\n            }\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string |>\n<| a tags=c++,string |>\n<code>\nstring fix_spaces(string\
    \ text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    if(result.length() > 2)\n", "{\n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            if(i + 1 < text.size() && text[i + 1] == ' ')\n            {\n  \
    \              text[i] = '_';\n                ++i;\n            }\n         \
    \   else\n            {\n                text[i] = '_';\n            }\n     \
    \   }\n    }\n    \n    return text;\n}", "{\n    string result = \"\";\n    \n\
    \    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            result += text[i];\n        }\n        else\n        {\n\
    \            result += text[i] + '_';\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size(); i++)\n        {\n   \
    \         if(result[i] == ' ')\n            {\n                result[i] = '_';\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n\
    \        if(result[i] == ' ')\n        {\n            result[i] = '_';\n     \
    \   }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result[i] == ' ')\n        {\n            int j = i + 1;\n           \
    \ while(j < result.length() && result[j] == ' ')\n            {\n            \
    \    result[j] = '_';\n                j++;\n            }\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = text;\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n  \
    \      if(text[i] == ' ')\n        {\n            result += text[i];\n       \
    \ }\n        else\n        {\n            result += text[i] + '_';\n        }\n\
    \    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    string result = text;\n    for(int i = 0; i <\
    \ result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n    \
    \        result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            if(result.length()\
    \ > i + 1)\n            {\n                if(result[i + 1] == ' ')\n        \
    \        {\n                    result[i] = '-';\n                }\n        \
    \    }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            for(int j = i + 1;\
    \ j < result.length(); j++)\n            {\n                if(result[j] == '\
    \ ')\n                {\n                    result[j] = '_';\n              \
    \  }\n            }\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n      \
    \  if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n\
    \    }\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length()\
    \ && result[j] == ' ')\n            {\n                result[j] = '_';\n    \
    \            j++;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    size_t len = text.length();\n    \n    for(size_t i = 0; i < len; ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            char c = text[i];\n\
    \            \n            for(size_t j = i + 1; j < len; ++j)\n            {\n\
    \                if(text[j] == ' ')\n                {\n                    text[j]\
    \ = '_';\n                }\n            }\n            \n            i = j;\n\
    \        }\n    }\n    \n    return text;\n}", "{\n    string result = \"\";\n\
    \    \n    for (int i = 0; i < text.length(); i++)\n    {\n        if (text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ int spaces = 0;\n    for (int i = 0; i < text.length(); i++)\n    {\n      \
    \  if (text[i] == ' ')\n        {\n            spaces++;\n        }\n    }\n \
    \   \n    if (spaces > 2)\n    {\n        for (int i = 0; i < text.length(); i++)\n\
    \        {\n            if (text[i] == ' ')\n            {\n                result\
    \ += text[i] + '-';\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n\
    \            while(j < result.length() && result[j] == ' ')\n            {\n \
    \               result[j] = '_';\n                j++;\n            }\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    size_t len = text.length();\n\
    \    \n    for(size_t i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            text.erase(i, 1);\n            text.insert(i, '_');\n\
    \            \n            while(i < len && text[i] == ' ')\n            {\n \
    \               text.erase(i, 1);\n                text.insert(i, '_');\n    \
    \            ++i;\n            }\n        }\n    }\n    \n    return text;\n}",
  "{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i =\
    \ 0; i < result.size() - 2; i++)\n        {\n            result[i] = result[i]\
    \ + \"-\";\n        }\n    }\n    \n    return result;\n}", "{\n    for(int i\
    \ = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            string temp = text;\n            temp = temp.replace(text[i], \"\
    _\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            ",
  "{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + '_';\n  \
    \      }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i = 0;\
    \ i < result.size() - 2; ++i)\n        {\n            result[i] = result[i] +\
    \ '-';\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            for(int j = i + 1; j < result.length(); j++)\n           \
    \ {\n                if(result[j] == ' ')\n                {\n               \
    \     result[j] = '-';\n                }\n            }\n        }\n    }\n \
    \   return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    size_t len = text.length();\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        if(text[i] == ' ')\n \
    \       {\n            string temp = text;\n            \n            int j =\
    \ i;\n            while(j < len && text[j] == ' ')\n            {\n          \
    \      j++;\n            }\n            \n            string sub = text.substr(i,\
    \ j - i);\n            \n            if(sub.find_first_not_of(\"abcdefghijklmnopqrstuvwxyz\"\
    ) == string::npos)\n            {\n                temp = temp.replace(i, 1, sub);\n\
    \            }\n            else\n            {\n                temp = temp.replace(i,\
    \ 1, sub).replace(i, 1, sub);\n            }\n            \n            i = j;\n\
    \        }\n    }\n    \n    return temp;\n}", "{\n    size_t len = text.length();\n\
    \    size_t i;\n    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            if(i + 1 < len && text[i + 1] == ' ')\n    \
    \        {\n                text[i] = '_';\n                ++i;\n           \
    \ }\n            else\n            {\n                text[i] = '_';\n       \
    \     }\n        }\n    }\n    \n    return text;\n}", "{\n    size_t len = text.length();\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        if(text[i] == ' ')\n \
    \       {\n            text.erase(i, 1);\n            text.insert(i, '_');\n \
    \           \n            i += 1;\n        }\n    }\n    \n    if(text.find_first_not_of('\
    \ ') != string::npos)\n    {\n        text.erase(text.find_first_not_of(' '),\
    \ len);\n        text.insert(text.find_first_not_of(' '), '-');\n    }\n    \n\
    \    return text;\n}", "{\n    string result = text;\n    \n    for(int i = 0;\
    \ i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n    \
    \        result += text[i];\n        }\n        else\n        {\n            result\
    \ += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < text.length()\
    \ - 1; i++)\n    {\n        if(text[i] == ' ')\n        {\n            result\
    \ += text[i];\n        }\n        else\n        {\n            result += text[i]\
    \ + '-';\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n \
    \   if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size() - 2;\
    \ ++i)\n        {\n            result[i] = result[i] + \"-\";\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try `fix_spaces(\"Example 1\")` which should return `\"Example_1\"` but\
    \ returns `\"Example_1_\"`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < text.size();\
    \ ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + '_';\n  \
    \      }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i = 0;\
    \ i < result.size() - 2; ++i)\n        {\n            result[i] = result[i] +\
    \ '-';\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n       \
    \ if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n \
    \   }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length()\
    \ && result[j] == ' ')\n            {\n                result[j] = '_';\n    \
    \            j++;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i],\
    \ \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp =\
    \ temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n\
    \            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            ", "{\n    for(int i = 0; i < text.size(); ++i)\n    {\n     \
    \   if(text[i] == ' ')\n        {\n            if(i+1 < text.size() && text[i+1]\
    \ == ' ')\n            {\n                text[i] = '_';\n                text[i+1]\
    \ = '-';\n                i += 2;\n            }\n            else\n         \
    \   {\n                text[i] = '_';\n                ++i;\n            }\n \
    \       }\n    }\n    return text;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c\
    \ |>\nI like your solution, but I wonder why you didn't just use `std::replace`\
    \ from the standard library?\n<|/ c |>\n<| c |>\nI didn't know about `std::replace`,\
    \ but it's probably a better solution. I'll add it to the answer.\n<|/ c |>\n\
    <| c |>\nI like your solution, but I wonder why you didn't just use `std::replace`\
    \ from the standard library?\n<|/ c |>\n<| c |>\nBecause I didn't know about it\
    \ either, and I didn't want to reinvent the wheel. :)\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I wonder why you didn't just use `std::replace` from the\
    \ standard library?\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>", "{\n    size_t len = text.length();\n\
    \    \n    for(int i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n \
    \       {\n            if(i + 1 < len && text[i + 1] == ' ')\n            {\n\
    \                text[i] = '_';\n                ++i;\n            }\n       \
    \     else\n            {\n                text[i] = '_';\n            }\n   \
    \     }\n    }\n    \n    return text;\n}", "{\n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            char c = text[i];\n\
    \            for(int j = i + 1; j < text.length(); j++)\n            {\n     \
    \           if(text[j] == ' ')\n                {\n                    text[j]\
    \ = '_';\n                }\n            }\n        }\n    }\n    \n    if(text.find_first_not_of('\
    \ ') != string::npos)\n    {\n        string s = text.substr(0, text.find_first_not_of('\
    \ '));\n        string t = text.substr(text.find_first_not_of(' '));\n       \
    \ \n        for(int i = 0; i < s.length(); i++)\n        {\n            if(s[i]\
    \ == ' ')\n            {\n                s[i] = '_';\n            }\n       \
    \ }\n        \n        for(int i = 0; i < t.length(); i++)\n        {\n      \
    \      if(t[i] == ' ')\n            {\n                t[i] = '_';\n         \
    \   }\n        }\n        \n        text += s;\n        text += t;\n    }\n  \
    \  \n    return text;\n}", "{\n    for(int i = 0; i < text.length(); i++)\n  \
    \  {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text\
    \ = temp;\n        }\n    }\n    return text;\n}", "{\n    for(int i = 0; i <\
    \ text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n          \
    \  text[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < text.size();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            for(int j =\
    \ i+1; j < text.size(); j++)\n            {\n                if(text[j] == ' ')\n\
    \                {\n                    text[j] = '_';\n                }\n  \
    \          }\n        }\n    }\n    \n    return text;\n}", "{\n    string result\
    \ = text;\n    size_t len = result.size();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    size_t k = 0;\n    \n    while (i < len) {\n        char c = result[i];\n\
    \        \n        if (c == ' ') {\n            j = i;\n            \n       \
    \     while (j < len && result[j] == ' ') {\n                j++;\n          \
    \  }\n            \n            if (j - i > 2) {\n                k = j;\n   \
    \             while (k < len && result[k] == ' ') {\n                    k++;\n\
    \                }\n                \n                result.replace(k, j - i,\
    \ '_');\n            }\n            \n            i = j;\n        }\n        \n\
    \        i++;\n    }\n    \n    return result;\n}", "{\n    for(int i = 0; i <\
    \ text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n          \
    \  string temp = text;\n            temp.replace(i, i+1, \"_\");\n           \
    \ temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1,\
    \ \"_\");\n            temp = temp.replace(i, i+1, \"\");\n            temp =\
    \ temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n\
    \            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            temp\
    \ = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\"\
    );\n            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            temp\
    \ = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\"\
    );\n            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            temp\
    \ = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\"\
    );\n            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            temp\
    \ = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\"\
    );\n            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            temp\
    \ = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\"\
    );\n            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            temp\
    \ = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\"\
    );\n            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            temp\
    \ = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\"\
    );\n            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            temp\
    \ = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\"\
    );\n            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            temp\
    \ = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i, i+1, \"\"\
    );\n            temp = temp.replace(i, i+1, \"\");\n            temp = temp.replace(i,\
    \ i+1, \"\");\n            temp = temp.replace(i, i+1, \"\");\n            ",
  "{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n  \
    \  {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n     \
    \   if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j\
    \ < result.length() && result[j] == ' ')\n            {\n                result[j]\
    \ = '_';\n                j++;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            for(int j = i + 1;\
    \ j < result.length(); j++)\n            {\n                if(result[j] == '\
    \ ')\n                {\n                    result[j] = '-';\n              \
    \  }\n            }\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c++,string,replace |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>", "{\n    string result = \"\";\n    \n\
    \    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            result += text[i];\n        }\n        else\n        {\n\
    \            result += text[i] + '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         result += text[i];\n        }\n    }\n    \n    return result;\n}",
  "{\n    size_t len = text.length();\n    \n    for(int i = 0; i < len; ++i)\n  \
    \  {\n        if(text[i] == ' ')\n        {\n            if(i + 1 < len && text[i\
    \ + 1] == ' ')\n            {\n                text[i] = '_';\n              \
    \  ++i;\n            }\n            else\n            {\n                text[i]\
    \ = '_';\n            }\n        }\n    }\n    \n    return text;\n}", "{\n  \
    \  size_t len = text.length();\n    \n    for(int i = 0; i < len; i++)\n    {\n\
    \        if(text[i] == ' ')\n        {\n            string temp = text;\n    \
    \        \n            int j = i;\n            while(j < len && text[j] == ' ')\n\
    \            {\n                j++;\n            }\n            \n          \
    \  if(j - i > 2)\n            {\n                string temp2 = text;\n      \
    \          \n                for(int k = i; k < j; k++)\n                {\n \
    \                   temp2[k] = '_';\n                }\n                \n   \
    \             temp = temp2;\n            }\n            \n            text = temp;\n\
    \        }\n    }\n    \n    return text;\n}", "{\n    string result = \"\";\n\
    \    \n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] ==\
    \ ' ')\n        {\n            result += text[i];\n        }\n        else\n \
    \       {\n            result += text[i] + \"_\";\n        }\n    }\n    \n  \
    \  if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size() - 2;\
    \ ++i)\n        {\n            result[i] = result[i] + \"-\";\n        }\n   \
    \ }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n\
    <| c |>\nThe first example is wrong. `fix_spaces(\"Example\")` should return `\"\
    Example\"`, not `\"Example_\"`.\n<|/ c |>\n<| c |>\nYes, I missed that one. Thanks\
    \ for pointing it out. Fixed now.\n<|/ c |>\n<| c |>\nThe first example is wrong.\
    \ `fix_spaces(\"Example\")` should return `\"Example\"`, not `\"Example_\"`.\n\
    <|/ c |>\n<| c |>\nFixed now. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    `fix_spaces(\"Example\")` should return `\"Example\"`, not `\"Example_\"`.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>", "{\n    string result = text;\n    size_t len = result.size();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    \n    while (i < len) {\n        if\
    \ (result[i] == ' ') {\n            while (j < len && result[j] == ' ') {\n  \
    \              j++;\n            }\n            if (j > i) {\n               \
    \ char c = result[i];\n                result[i] = '_';\n                while\
    \ (j < len && result[j] != c) {\n                    result[j + 1] = result[j];\n\
    \                    j++;\n                }\n                result[j + 1] =\
    \ c;\n            }\n        }\n        i++;\n    }\n    return result;\n}", "{\n\
    \    string result = text;\n    for(int i = 0; i < result.length(); i++)\n   \
    \ {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n \
    \       }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n      \
    \  if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j\
    \ < result.length() && result[j] == ' ')\n            {\n                result[j]\
    \ = '_';\n                j++;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    size_t len = text.length();\n    string result = \"\";\n    \n   \
    \ for (size_t i = 0; i < len; i++)\n    {\n        char c = text[i];\n       \
    \ \n        if (c == ' ')\n        {\n            result += \"_\";\n        }\n\
    \        else\n        {\n            result += c;\n        }\n    }\n    \n \
    \   if (result.length() > 2)\n    {\n        string last_space = result.substr(result.length()\
    \ - 1);\n        \n        if (last_space == \" \")\n        {\n            result\
    \ += \"-\";\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n       \
    \ if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n \
    \   }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            if(result.length() - i > 1)\n            {\n\
    \                string temp = result.substr(i + 1, result.length() - i - 1);\n\
    \                \n                for(int j = 0; j < temp.length(); j++)\n  \
    \              {\n                    if(temp[j] == ' ')\n                   \
    \ {\n                        temp[j] = '-';\n                    }\n         \
    \       }\n                \n                result.replace(i, i + 1, temp);\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    size_t\
    \ len = text.length();\n    size_t i;\n    string result = \"\";\n    \n    for(i\
    \ = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n        {\n         \
    \   result += text[i];\n        }\n        else\n        {\n            result\
    \ += text[i] + '_';\n        }\n    }\n    \n    for(i = len - 1; i >= 0; --i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + '-';\n  \
    \      }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=string,c++,replace,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            for(int j = i + 1; j < result.length(); j++)\n           \
    \ {\n                if(result[j] == ' ')\n                {\n               \
    \     result[j] = '_';\n                }\n            }\n        }\n    }\n \
    \   return result;\n}\n</code>\n<|/ a tags=string,c++,replace |>\n<| c |>\nThe\
    \ second for loop should be `for(int j = i + 1; j < result.length(); j++)`\n<|/\
    \ c |>\n<| c |>\nThanks, fixed it.\n<|/ c |>\n<| a tags=string,c++,replace |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n   \
    \ {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n \
    \       }\n        else\n        {\n            result += text[i] + \"_\";\n \
    \       }\n    }\n    \n    for(int i = 0; i < text.size(); ++i)\n    {\n    \
    \    if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            text[i] = '_';\n\
    \        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n \
    \       if(text[i] == ' ')\n        {\n            int j = i + 1;\n          \
    \  while(j < text.length() && text[j] == ' ')\n            {\n               \
    \ j++;\n            }\n            \n            if(j - i > 1)\n            {\n\
    \                text[i] = '_';\n                for(int k = i; k < j; k++)\n\
    \                {\n                    text[k] = '-';\n                }\n  \
    \          }\n        }\n    }\n    \n    return text;\n}", "{\n    size_t len\
    \ = text.length();\n    size_t i = 0;\n    size_t j = 0;\n    string result =\
    \ \"\";\n    \n    while (i < len) \n    {\n        if (text[i] == ' ') \n   \
    \     {\n            result += text[i];\n            while (i < len && text[i]\
    \ == ' ') \n            {\n                result += text[i];\n              \
    \  ++i;\n            }\n        }\n        else \n        {\n            result\
    \ += text[i];\n            while (i < len && text[i] != ' ') \n            {\n\
    \                result += text[i];\n                ++i;\n            }\n   \
    \     }\n        ++i;\n    }\n    \n    while (j < len) \n    {\n        if (text[j]\
    \ == ' ') \n        {\n            result += text[j];\n            while (j <\
    \ len && text[j] == ' ') \n            {\n                result += text[j];\n\
    \                ++j;\n            }\n        }\n        else \n        {\n  \
    \          result += text[j];\n            while (j < len && text[j] != ' ') \n\
    \            {\n                result += text[j];\n                ++j;\n   \
    \         }\n        }\n        ++j;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i\
    \ = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i].toLower();\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    string result = text;\n\
    \    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] ==\
    \ ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n  \
    \      {\n            result += text[i];\n        }\n    }\n    \n    return result;\n\
    }", "{\n    size_t len = text.length();\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string sub = text.substr(0,\
    \ i);\n            string rest = text.substr(i + 1, len - i - 1);\n          \
    \  \n            if(sub.find_first_not_of(' ') != string::npos)\n            {\n\
    \                string sub2 = sub.substr(0, sub.find_first_not_of(' '));\n  \
    \              string rest2 = rest.substr(0, rest.find_first_not_of(' '));\n \
    \               \n                string result = sub2 + rest2;\n            \
    \    \n                text = result;\n            }\n        }\n    }\n    \n\
    \    return text;\n}", "{\n    string result = text;\n    \n    for (int i = 0;\
    \ i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    \n    for (int i = 0; i <\
    \ result.length(); i++)\n    {\n        if (result.length() - i > 1)\n       \
    \ {\n            if (result[i] == ' ' && result[i - 1] == ' ')\n            {\n\
    \                result[i] = '_';\n            }\n        }\n    }\n    \n   \
    \ return result;\n}", "{\n    string result = text;\n    size_t len = result.size();\n\
    \    size_t i;\n    \n    for (i = 0; i < len; ++i)\n    {\n        if (result[i]\
    \ == ' ')\n        {\n            result += '_';\n        }\n        else if (i\
    \ > 0 && result[i-1] == ' ')\n        {\n            result += '-';\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    \n  \
    \  for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n \
    \       {\n            result += text[i];\n        }\n        else\n        {\n\
    \            result += text[i] + '_';\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + '-';\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    size_t len = text.length();\n    size_t i = 0;\n    \n\
    \    while (i < len) \n    {\n        if (text[i] == ' ') \n        {\n      \
    \      i++;\n        }\n        else if (text[i] == ' ')\n        {\n        \
    \    while (i < len && text[i] == ' ') \n            {\n                i++;\n\
    \            }\n            \n            if (i < len) \n            {\n     \
    \           string s = text.substr(0, i);\n                string t = text.substr(i,\
    \ len - i);\n                \n                text = s + t;\n            }\n\
    \        }\n        else \n        {\n            text += '_';\n        }\n  \
    \      \n        i++;\n    }\n    \n    return text;\n}", "{\n    for(int i =\
    \ 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           text += \"_\";\n        }\n        else\n        {\n            text\
    \ += text[i];\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            text += \"-\";\n  \
    \      }\n    }\n    \n    return text;\n}", "{\n    size_t len = text.length();\n\
    \    \n    for(int i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n \
    \       {\n            if(i + 1 < len && text[i + 1] == ' ')\n            {\n\
    \                text[i] = '_';\n                ++i;\n            }\n       \
    \ }\n    }\n    \n    for(int i = 0; i < len; ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            if(i + 1 < len && text[i + 1] == ' ')\n    \
    \        {\n                text[i] = '_';\n                ++i;\n           \
    \ }\n        }\n    }\n    \n    return text;\n}", "{\n    string result = \"\"\
    ;\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n \
    \   if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length()\
    \ - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp\
    \ = text;\n            temp = temp.replace(text[i], \"_\");\n            temp\
    \ = temp.replace(text[i+1], \"\");\n            text = temp;\n        }\n    }\n\
    \    \n    if(text.find_first_not_of(\"  \", 0) != string::npos)\n    {\n    \
    \    string temp = text;\n        temp = temp.replace(\"  \", \"_\");\n      \
    \  text = temp;\n    }\n    \n    return text;\n}", "{\n    string result = text;\n\
    \    for(int i = 0; i < result.size(); ++i)\n    {\n        if(result[i] == '\
    \ ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int i\
    \ = 0; i < result.size(); ++i)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.size() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                ++j;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    \n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n \
    \   if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size() - 2;\
    \ i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size(); i++)\n        {\n   \
    \         if(result[i] == ' ')\n            {\n                result[i] = '_';\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            text[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            int j = i +\
    \ 1;\n            while(j < text.length() && text[j] == ' ')\n            {\n\
    \                j++;\n            }\n            \n            if(j - i > 1)\n\
    \            {\n                string temp = text.substr(i, j - i);\n       \
    \         text.replace(temp, temp + \"-\");\n            }\n        }\n    }\n\
    \    \n    return text;\n}", "{\n    size_t len = text.length();\n    string result\
    \ = \"\";\n    \n    for(size_t i = 0; i < len; ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ if(result.length() > 2)\n    {\n        size_t i = 0;\n        size_t j = result.length()\
    \ - 1;\n        \n        while(i < j)\n        {\n            if(result[i] ==\
    \ result[j])\n            {\n                result += result[i];\n          \
    \      ++i;\n                --j;\n            }\n            else\n         \
    \   {\n                result += result[j];\n                --j;\n          \
    \  }\n        }\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n \
    \   for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == '\
    \ ')\n        {\n            int j = i + 1;\n            while(j < result.length()\
    \ && result[j] == ' ')\n            {\n                result[j] = '_';\n    \
    \            j++;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n\
    \            while(j < result.length() && result[j] == ' ')\n            {\n \
    \               result[j] = '_';\n                j++;\n            }\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n   \
    \ \n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            result += text[i];\n        }\n        else\n        {\n\
    \            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size(); i++)\n        {\n   \
    \         if(result[i] == ' ')\n            {\n                result += \"-\"\
    ;\n            }\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = text;\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n  \
    \      if(text[i] == ' ')\n        {\n            result += text[i];\n       \
    \ }\n        else\n        {\n            result += text[i] + '_';\n        }\n\
    \    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length()\
    \ - 2; i++)\n        {\n            result[i] = result[i] + '-';\n        }\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,string,replace |>\n\
    <| a tags=c++,string,replace |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>", "{\n    string result = text;\n    \n\
    \    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] ==\
    \ ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n\
    \        if(result[i] == ' ')\n        {\n            result[i] = '_';\n     \
    \   }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result[i] == ' ')\n        {\n            int j = i + 1;\n           \
    \ while(j < result.length() && result[j] == ' ')\n            {\n            \
    \    result[j] = '_';\n                j++;\n            }\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.size(); i++)\n    {\n        char c = text[i];\n        \n \
    \       if (c == ' ')\n        {\n            result += \"_\";\n        }\n  \
    \      else if (c != ' ')\n        {\n            result += c;\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    if(result.size() >\
    \ 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n \
    \           result[i] = result[i] + '-';\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = text;\n    size_t pos = 0;\n    size_t len = result.size();\n\
    \    while(pos < len) {\n        size_t next = find_if(text.begin() + pos, text.end(),\
    \ isspace);\n        if(next == text.end()) {\n            break;\n        }\n\
    \        \n        string replacement = \" \";\n        if(next == text.begin()\
    \ + pos) {\n            replacement = \"_\";\n        }\n        \n        size_t\
    \ replacement_len = replacement.size();\n        size_t replacement_pos = 0;\n\
    \        while(replacement_pos < replacement_len) {\n            size_t next_pos\
    \ = find_if(text.begin() + next, text.end(), isspace);\n            if(next_pos\
    \ == text.end()) {\n                break;\n            }\n            \n    \
    \        string replacement2 = \" \";\n            if(next_pos == text.begin()\
    \ + next) {\n                replacement2 = \"_\";\n            }\n          \
    \  \n            size_t replacement2_len = replacement2.size();\n            size_t\
    \ replacement2_pos = 0;\n            while(replacement2_pos < replacement2_len)\
    \ {\n                size_t next_pos2 = find_if(text.begin() + next_pos, text.end(),\
    \ isspace);\n                if(next_pos2 == text.end()) {\n                 \
    \   break;\n                }\n                \n                string replacement3\
    \ = \" \";\n                if(next_pos2 == text.begin() + next_pos) {\n     \
    \               replacement3 = \"_\";\n                }\n                \n \
    \               size_t replacement3_len = replacement3.size();\n             \
    \   size_t replacement3_pos = 0;\n                while(replacement3_pos < replacement3_len)\
    \ {\n                    size_t next_pos3 = find_if(text.begin() + next_pos2,\
    \ text.end(), isspace);\n                    if(next_pos3 == text.end()) {\n \
    \                       break;\n                    }\n                    \n\
    \                    string replacement4 = \" \";\n                    if(next_pos3\
    \ == text.begin() + next_pos2) {\n                        replacement4 = \"_\"\
    ;\n                    }\n                    \n                    size_t replacement4_len\
    \ = replacement4.size();\n                    size_t replacement4_pos = 0;\n \
    \                   while(replacement4_pos < replacement4_len) {\n           \
    \             size_t next_pos4 = find_if(text.begin() + next_pos3, text.end(),\
    \ isspace);\n                        if(next_pos4 == text.end()) {\n         \
    \                   break;\n                        }\n                      \
    \  \n                        string replacement5 = \" \";\n                  \
    \      if(next_pos4 == text.begin() + next_pos3) {\n                         \
    \   replacement5 = \"_\";\n                        }\n                       \
    \ \n                        size_t replacement5_len = replacement5.size();\n \
    \                       size_t replacement5_pos = 0;\n                       \
    \ while(replacement5_pos < replacement5_len) {\n                            size_t\
    \ next_pos5 = find_if(text.begin() + next_pos4, text.end(), isspace);\n      \
    \                      if(next_pos5 == text.end()) {\n                       \
    \         break;\n", "{\n    string result = \"\";\n    \n    for(int i = 0; i\
    \ < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n        else\n        {\n            result\
    \ += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n \
    \   {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n     \
    \       result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = text;\n    \n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + '_';\n  \
    \      }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i =\
    \ 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i]\
    \ + '-';\n        }\n    }\n    \n    return result;\n}", "{\n    size_t len =\
    \ text.length();\n    string result = text;\n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n\
    \        }\n        else\n        {\n            result += text[i];\n        }\n\
    \    }\n    \n    if(result.length() > 2)\n    {\n        string temp = result;\n\
    \        result = \"\";\n        for(int i = 0; i < temp.length(); i++)\n    \
    \    {\n            if(temp[i] == ' ')\n            {\n                result\
    \ += temp[i];\n            }\n            else\n            {\n              \
    \  result += temp[i] + \"-\";\n            }\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    for(int i = 0; i < text.length(); i++)\n    {\n       \
    \ if(text[i] == ' ')\n        {\n            string temp = text;\n           \
    \ temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \"\
    , \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp =\
    \ temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n\
    \            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            ", "{\n    string result = \"\";\n\
    \    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] ==\
    \ ' ')\n        {\n            result += text[i];\n        }\n        else\n \
    \       {\n            result += text[i] + \"_\";\n        }\n    }\n    \n  \
    \  if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length()\
    \ - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    \n  \
    \  for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n \
    \       {\n            result += text[i];\n        }\n        else\n        {\n\
    \            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i\
    \ = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           result += text[i];\n        }\n    }\n    \n    return result;\n}",
  "{\n    size_t len = text.length();\n    size_t i;\n    string result = \"\";\n\
    \    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n     \
    \   {\n            result += text[i];\n        }\n        else\n        {\n  \
    \          result += text[i] + '_';\n        }\n    }\n    \n    for(i = 0; i\
    \ < len; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result\
    \ += text[i];\n        }\n        else\n        {\n            result += text[i]\
    \ + '-';\n        }\n    }\n    \n    return result;\n}", "{\n    size_t len =\
    \ text.length();\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            text.erase(i, 1);\n            len--;\n    \
    \    }\n    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            text.erase(i, 1);\n            len--;\n    \
    \    }\n    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            text.erase(i, 1);\n            len--;\n    \
    \    }\n    }\n    \n    return text;\n}", "{\n    for(int i = 0; i < text.size();\
    \ ++i)\n    {\n        if(text[i] == ' ')\n        {\n            string temp\
    \ = text;\n            temp[i] = '_';\n            for(int j = i+1; j < text.size();\
    \ ++j)\n            {\n                if(text[j] == ' ')\n                {\n\
    \                    temp[j] = '_';\n                }\n            }\n      \
    \      text = temp;\n        }\n    }\n    \n    if(text.size() > 2)\n    {\n\
    \        string temp = text;\n        for(int i = 0; i < text.size()-1; ++i)\n\
    \        {\n            if(text[i] == ' ')\n            {\n                temp[i]\
    \ = '_';\n            }\n        }\n        text = temp;\n    }\n    \n    return\
    \ text;\n}", "{\n    string result = \"\";\n    for(int i = 0; i < text.size();\
    \ i++)\n    {\n        if(text[i] == \" \")\n        {\n            result +=\
    \ \"_\";\n        }\n        else\n        {\n            result += text[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    size_t len = text.length();\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        if(text[i] == ' ')\n \
    \       {\n            string s = text.substr(0, i);\n            string t = text.substr(i\
    \ + 1, len - i - 1);\n            \n            string result = \"\";\n      \
    \      \n            for(int j = 0; j < s.length(); j++)\n            {\n    \
    \            if(s[j] == ' ')\n                {\n                    result +=\
    \ \"_\";\n                }\n                else\n                {\n       \
    \             result += s[j];\n                }\n            }\n            \n\
    \            result += t;\n            \n            text = result;\n        }\n\
    \    }\n    \n    return text;\n}", "{\n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp\
    \ = text;\n            temp = temp.replace(text[i], \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            ", "{\n    string\
    \ result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n\
    \        if(result[i] == ' ')\n        {\n            result[i] = '_';\n     \
    \   }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result[i] == ' ')\n        {\n            for(int j = i; j < result.length();\
    \ j++)\n            {\n                if(result[j] == ' ')\n                {\n\
    \                    result[j] = '-';\n                }\n            }\n    \
    \    }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            result += \"_\";\n        }\n        else\n        {\n\
    \            result += text[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            text[i] = '_';\n        }\n    }\n    \n    for(int i\
    \ = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           int j = i + 1;\n            while(j < text.size() && text[j] == '\
    \ ')\n            {\n                j++;\n            }\n            \n     \
    \       if(j - i > 1)\n            {\n                string temp = text[i];\n\
    \                text[i] = '_';\n                text[j] = '_';\n            \
    \    text[i] = temp;\n            }\n        }\n    }\n    \n    return text;\n\
    }", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n\
    \            while(j < result.length() && result[j] == ' ')\n            {\n \
    \               result[j] = '_';\n                j++;\n            }\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp\
    \ = text;\n            temp = temp.replace(text[i], \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            ", "{\n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            string temp = text;\n            temp = temp.replace(text[i], \"\
    _\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            ",
  "{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i =\
    \ 0; i < result.size() - 2; ++i)\n        {\n            result[i] = result[i]\
    \ + \"-\";\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n       \
    \ if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n \
    \   }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length()\
    \ - 2; i++)\n        {\n            if(result[i] == ' ' && result[i + 1] == '\
    \ ')\n            {\n                result[i] = '-';\n            }\n       \
    \ }\n    }\n    \n    return result;\n}", "{\n    size_t len = text.length();\n\
    \    size_t i;\n    string result = \"\";\n    \n    for (i = 0; i < len; ++i)\n\
    \    {\n        if (text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if (result.length() > 2)\n    {\n        result =\
    \ result.substr(0, result.length() - 2);\n    }\n    \n    return result;\n}",
  "{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i\
    \ = 0; i < result.length(); i++)\n        {\n            if(result[i] == ' ')\n\
    \            {\n                for(int j = i + 1; j < result.length(); j++)\n\
    \                {\n                    if(result[j] == ' ')\n               \
    \     {\n                        result[j] = '_';\n                    }\n   \
    \             }\n            }\n        }\n    }\n    \n    return result;\n}",
  "{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n  \
    \  {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n     \
    \   if(result[i] == ' ')\n        {\n            for(int j = i + 1; j < result.length();\
    \ j++)\n            {\n                if(result[j] == ' ')\n                {\n\
    \                    result[j] = '_';\n                }\n            }\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string,replace |>\n\
    <| c |>\nThis doesn't work if there are more than two consecutive spaces.\n<|/\
    \ c |>\n<| c |>\nIt does work, try it out. Try it out with more than two consecutive\
    \ spaces.\n<|/ c |>\n<| c |>\nIt doesn't work if there are more than two consecutive\
    \ spaces. Try it out with more than two consecutive spaces.\n<|/ c |>\n<| c |>\n\
    It does work, try it out. Try it out with more than two consecutive spaces.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are more than two consecutive spaces.\
    \ Try it out with more than two consecutive spaces.\n<|/ c |>\n<| a tags=c++,string,replace\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    size_t len = text.length();\n    string result = \"\";\n    \n    for (size_t\
    \ i = 0; i < len; ++i)\n    {\n        char c = text[i];\n        if (c == ' ')\n\
    \        {\n            if (i < len - 1 && text[i + 1] == ' ')\n             \
    \   result += '_';\n            else\n                result += c;\n        }\n\
    \        else\n            result += c;\n    }\n    \n    return result;\n}",
  "{\n    size_t len = text.length();\n    \n    for(size_t i = 0; i < len; ++i)\n\
    \    {\n        char c = text[i];\n        if(c == ' ')\n        {\n         \
    \   if(i + 1 < len && text[i + 1] == ' ')\n            {\n                text[i]\
    \ = '_';\n                ++i;\n            }\n            else\n            {\n\
    \                text[i] = '_';\n            }\n        }\n    }\n    \n    return\
    \ text;\n}", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n\
    \            while(j < result.length() && result[j] == ' ')\n            {\n \
    \               result[j] = '_';\n                j++;\n            }\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n   \
    \ \n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            result += text[i];\n        }\n        else\n        {\n\
    \            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            if(result.length()\
    \ - i > 1)\n            {\n                result[result.length() - i] = '-';\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    size_t\
    \ len = text.length();\n    size_t i = 0;\n    size_t j = 0;\n    \n    while(i\
    \ < len) {\n        char c = text[i];\n        \n        if(c == ' ') {\n    \
    \        while(j < len && text[j] == ' ') {\n                j++;\n          \
    \  }\n            \n            if(j > i) {\n                string s = text.substr(i,\
    \ j - i);\n                \n                while(j < len && text[j] == ' ')\
    \ {\n                    j++;\n                }\n                \n         \
    \       string t = text.substr(i, j - i);\n                \n                string\
    \ r = \"\";\n                \n                while(j < len) {\n            \
    \        r += text[j];\n                    j++;\n                }\n        \
    \        \n                string s = s + t;\n                \n             \
    \   text = s;\n            }\n        }\n        \n        i++;\n    }\n    \n\
    \    return text;\n}", "{\n    string result = text;\n    \n    for(int i = 0;\
    \ i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i <\
    \ result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n    \
    \        int j = i + 1;\n            while(j < result.length() && result[j] ==\
    \ ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = text;\n    size_t pos = 0;\n    size_t len = result.size();\n    \n\
    \    while (pos < len) \n    {\n        char c = result[pos];\n        \n    \
    \    if (c == ' ') \n        {\n            result[pos] = '_';\n            \n\
    \            if (pos == len - 1) \n            {\n                break;\n   \
    \         }\n            \n            char nextChar = result[pos + 1];\n    \
    \        \n            if (nextChar == ' ') \n            {\n                result[pos\
    \ + 1] = '-';\n            }\n        }\n        \n        pos++;\n    }\n   \
    \ \n    return result;\n}", "{\n    size_t len = text.length();\n    size_t i\
    \ = 0;\n    size_t j = 0;\n    string result = \"\";\n    \n    while (i < len)\
    \ {\n        if (text[i] == ' ') {\n            result += text[i];\n         \
    \   while (i < len && text[i] == ' ') {\n                result += text[i];\n\
    \                i++;\n            }\n        } else {\n            result +=\
    \ text[i];\n        }\n        i++;\n    }\n    \n    if (result.length() > 2)\
    \ {\n        while (j < result.length() - 1) {\n            if (result[j] == '\
    \ ' && result[j + 1] == ' ') {\n                result[j] = '_';\n           \
    \     result[j + 1] = '-';\n            }\n            j++;\n        }\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work. `fix_spaces(\"Example\")` returns `\"Example\"`.\n<|/ c |>\n<|\
    \ c |>\nIt does work. I've tested it before posting it. What are you using?\n\
    <|/ c |>\n<| c |>\nI tested it on `std.algorithm` on `std.string` on `std.conv`\
    \ and it didn't work. I'm using `std.algorithm` on `std.string` on `std.conv`\
    \ on `std.algorithm` on `std.string` on `std.algorithm` on `std.string` on `std.algorithm`\
    \ on `std.string` on `std.algorithm` on `std.string` on `std.algorithm` on `std.string`\
    \ on `std.algorithm` on `std.string` on `std.algorithm` on `std.string` on `std.algorithm`\
    \ on `std.string` on `std.algorithm` on `std.string` on `std.algorithm` on `std.string`\
    \ on `std.algorithm` on `std.string` on `std.algorithm` on `std.string` on `std.algorithm`\
    \ on `std.string` on `std.algorithm` on `std.string` on `std.algorithm` on `std.string`\
    \ on `std.algorithm` on `std.string` on `std.algorithm` on `std.string` on `std.algorithm`\
    \ on `std.string` on `std.algorithm` on `std.string` on `std.algorithm` on `std.string`\
    \ on `std.algorithm` on `std.string` on `std.algorithm` on `std.string` on `",
  "{\n    string result = text;\n    for(int i = 0; i < text.length(); i++)\n    {\n\
    \        if(text[i] == ' ')\n        {\n            result += text[i];\n     \
    \   }\n        else\n        {\n            result += text[i] + '_';\n       \
    \ }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i\
    \ < result.length() - 2; i++)\n        {\n            result[i] = result[i] +\
    \ '-';\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    \n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n \
    \   if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size(); i++)\n\
    \        {\n            if(result[i] == ' ')\n            {\n                result[i]\
    \ = '_';\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n \
    \   {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i =\
    \ 0; i < result.size() - 2; ++i)\n        {\n            result[i] = result[i]\
    \ + \"-\";\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = text;\n    for(int i = 0; i < result.size(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int\
    \ i = 0; i < result.size(); i++)\n    {\n        if(result[i] == ' ')\n      \
    \  {\n            int j = i + 1;\n            while(j < result.size() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         text.erase(i, 1);\n            text.insert(i, '_');\n        }\n   \
    \ }\n    \n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            text.erase(i, 1);\n            text.insert(i,\
    \ '-');\n        }\n    }\n    \n    return text;\n}", "{\n    string result =\
    \ \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + '_';\n        }\n    }\n    \n   \
    \ if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size() - 2;\
    \ ++i)\n        {\n            result[i] = result[i] + '-';\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    size_t len = text.length();\n    \n   \
    \ for(size_t i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n       \
    \ {\n            if(i + 1 < len && text[i + 1] == ' ')\n                text[i]\
    \ = '_';\n            else\n                text[i] = '_';\n        }\n    }\n\
    \    \n    return text;\n}", "{\n    for(int i = 0; i < text.size(); ++i)\n  \
    \  {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, 1, string(\"_\"));\n\
    \            temp = temp.replace(i, 1, string(\"_\"));\n            temp = temp.replace(i,\
    \ 1, string(\"_\"));\n            temp = temp.replace(i, ", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n \
    \   if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size(); i++)\n\
    \        {\n            if(result[i] == ' ')\n            {\n                result[i]\
    \ = '_';\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = text;\n    \n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + '_';\n  \
    \      }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n \
    \       if(result[i] == ' ')\n        {\n            result += result[i];\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    for(int i = 0; i < text.size();\
    \ ++i)\n    {\n        if(text[i] == ' ')\n        {\n            string temp\
    \ = text;\n            temp = temp.replace(text[i], \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            ", "{\n    string\
    \ result = text;\n    \n    for (int i = 0; i < text.length(); i++)\n    {\n \
    \       if (text[i] == ' ')\n        {\n            result += '_';\n        }\n\
    \        else if (text[i] == ' ')\n        {\n            result += '-';\n   \
    \     }\n    }\n    \n    return result;\n}", "{\n    string result = text;\n\
    \    \n    for (int i = 0; i < text.length(); i++)\n    {\n        if (text[i]\
    \ == ' ')\n        {\n            result += \"_\";\n        }\n        else if\
    \ (text[i] == ' ')\n        {\n            result += \"-\";\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i].toChar();\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = text;\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n       \
    \ for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i]\
    \ == ' ')\n            {\n                result[i] = '_';\n            }\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    \n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] ==\
    \ ' ')\n        {\n            result += text[i];\n        }\n        else\n \
    \       {\n            result += text[i] + '_';\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + '-';\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = text;\n    \n    for (int i = 0; i < result.length();\
    \ i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    \n    for (int i = 0; i < result.length(); i++)\n\
    \    {\n        if (result.length() > 2 && result[i] == ' ')\n        {\n    \
    \        result[i] = '-';\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n \
    \   {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n        else\n        {\n            result += text[i] + \"_\";\n\
    \        }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i =\
    \ 0; i < result.size() - 2; ++i)\n        {\n            result[i] = result[i]\
    \ + \"-\";\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n \
    \   if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length()\
    \ - 2; i++)\n        {\n            result[i] = result[i].toLower();\n       \
    \ }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    \n\
    \    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            result += text[i];\n        }\n        else\n        {\n\
    \            result += text[i] + '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         result += text[i];\n        }\n    }\n    \n    return result;\n}",
  "{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n  \
    \  {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n     \
    \   if(result[i] == ' ')\n        {\n            for(int j = i + 1; j < result.length();\
    \ j++)\n            {\n                if(result[j] == ' ')\n                {\n\
    \                    result[j] = '_';\n                }\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = text;\n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0; i <\
    \ result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n    \
    \        int j = i + 1;\n            while(j < result.length() && result[j] ==\
    \ ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n       \
    \ if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n \
    \   }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i]\
    \ == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length()\
    \ && result[j] == ' ')\n            {\n                result[j] = '_';\n    \
    \            j++;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    size_t len = text.length();\n    \n    for(int i = 0; i < len; ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            text.erase(i, 1);\n\
    \            text.insert(i, '_');\n        }\n    }\n    \n    if(text.find_first_not_of('\
    \ ') != string::npos)\n    {\n        text.erase(text.find_first_not_of(' '),\
    \ len);\n        text.insert(text.find_first_not_of(' '), '-');\n    }\n    \n\
    \    return text;\n}", "{\n    string result = text;\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n    }\n    for(int i = 0; i < result.length(); i++)\n   \
    \ {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n   \
    \         while(j < result.length() && result[j] == ' ')\n            {\n    \
    \            result[j] = '_';\n                j++;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            if(result.length() - i > 1)\n            {\n                string\
    \ sub = result.substr(i, result.length() - i - 1);\n                \n       \
    \         if(sub.find_first_not_of(' ') != string::npos)\n                {\n\
    \                    string sub2 = sub.substr(0, sub.find_first_not_of(' '));\n\
    \                    string sub3 = sub.substr(sub.find_first_not_of(' '), sub.length());\n\
    \                    \n                    result = sub2 + sub3;\n           \
    \     }\n            }\n        }\n    }\n    \n    return result;\n}", "{\n \
    \   string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n\
    \        if(result[i] == ' ')\n        {\n            int j = i + 1;\n       \
    \     while(j < result.length() && result[j] == ' ')\n            {\n        \
    \        result[j] = '_';\n                j++;\n            }\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    string result = text;\n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0; i <\
    \ result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n    \
    \        if(result.substr(i+1, 2) == \" \")\n            {\n                result[i+1]\
    \ = '-';\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    \n    for(int i = 0; i < text.size(); i++)\n    {\n    \
    \    if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n\
    \        else\n        {\n            result += text[i] + \"_\";\n        }\n\
    \    }\n    \n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    for(int i = 0; i <\
    \ text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n          \
    \  result += text[i];\n        }\n        else\n        {\n            result\
    \ += text[i] + \"_\";\n        }\n    }\n    if(result.size() > 2)\n    {\n  \
    \      for(int i = 0; i < result.size(); i++)\n        {\n            if(result[i]\
    \ == ' ')\n            {\n                result[i] = '_';\n            }\n  \
    \      }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<|\
    \ c |>\nThis doesn't work if there are more than two consecutive spaces.\n<|/\
    \ c |>\n<| c |>\nIt does. I tested it before posting.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if there are more than two consecutive spaces. Try it with `\" Example\
    \   3\"`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are more than two consecutive\
    \ spaces. Try it with `\" Example   3\"`.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if there are more than two consecutive spaces. Try it with `\" Example   3\"\
    `.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   \n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == '\
    \ ')\n        {\n            result += text[i];\n        }\n        else\n   \
    \     {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
