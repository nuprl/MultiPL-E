name: HumanEval_116_sort_array
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
  \ to sort an array of non-negative integers according to\n    number of ones in\
  \ their binary representation in ascending order.\n    For similar number of ones,\
  \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
  \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4,\
  \ -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
  \ 3, 4]\n    \n*/\nlong[] sort_array(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
  \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
  \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L,\
  \ 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
  \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
  \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
  \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
  \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
  \ 16L, 32L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[arr.length];\n    long ones = 0;\n\
    \    long zeros = 0;\n    long max = 0;\n    long min = 0;\n    long sum = 0;\n\
    \    long sum2 = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones++;\n        }\n        else\n        {\n\
    \            zeros++;\n        }\n        if(arr[i] > max)\n        {\n      \
    \      max = arr[i];\n        }\n        if(arr[i] < min)\n        {\n       \
    \     min = arr[i];\n        }\n        sum += arr[i];\n        sum2 += arr[i]\
    \ * arr[i];\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = ones;\n        }\n        else\n \
    \       {\n            result[i] = zeros;\n        }\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        result[i] = result[i] / sum;\n    }\n \
    \   for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = result[i]\
    \ * sum2 / sum;\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n     \
    \   result[i] = result[i] / max;\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        result[i] = result[i] * max / max;\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        result[i] = result[i] / min;\n    }\n \
    \   for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = result[i]\
    \ * min / min;\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| c |>\nThis is not the right answer, the question asks for ascending order\n\
    <|/ c |>\n<| c |>\nThe question asks for ascending order. `sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nThis is not the right answer,\
    \ the question asks for ascending order\n<|/ c |>\n<| c |>\nThis is not the right\
    \ answer, the question asks for ascending order\n<|/ c |>\n<| c |>\nThis is not\
    \ the right answer, the question asks for ascending order\n<|/ c |>\n<| a tags=algorithm,sorting,arrays\
    \ |>\n<code>\ndef sort_array(arr):\n    sorted_arr = []\n    sorted_arr.extend(arr)\n\
    \    sorted_arr.sort()\n    sorted_arr.reverse()\n    return sorted_arr\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis is not the right answer, the question asks for\
    \ ascending order\n<|/ c |>\n<| c |>\nThis is not the ", "{\n    long[] result\
    \ = new long[arr.length];\n    long[] ones = new long[arr.length];\n    long[]\
    \ zeros = new long[arr.length];\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones[i] = 1;\n       \
    \ }\n        else\n        {\n            ones[i] = 0;\n        }\n    }\n   \
    \ \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n\
    \        {\n            for(int j = i; j < arr.length; j++)\n            {\n \
    \               if(arr[j] == 1)\n                {\n                    ones[j]\
    \ = 0;\n                    break;\n                }\n            }\n       \
    \ }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i]\
    \ == 0)\n        {\n            for(int j = i; j < arr.length; j++)\n        \
    \    {\n                if(arr[j] == 0)\n                {\n                 \
    \   zeros[j] = 1;\n                    break;\n                }\n           \
    \ }\n        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(ones[i] == 1)\n        {\n            result[i] = ones[i];\n     \
    \   }\n        else\n        {\n            result[i] = zeros[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i]\
    \ == 0)\n        {\n            result[i] = zeros[i];\n        }\n        else\n\
    \        {\n            result[i] = ones[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n        {\n  \
    \          result[i] = ones[i];\n        }\n        else\n        {\n        \
    \    result[i] = zeros[i];\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(ones[i] == 0)\n        {\n            result[i] = zeros[i];\n\
    \        }\n        else\n        {\n            result[i] = ones[i];\n      \
    \  }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i]\
    \ == 1)\n        {\n            result[i] = ones[i];\n        }\n        else\n\
    \        {\n            result[i] = zeros[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 0)\n        {\n  \
    \          result[i] = zeros[i];\n        }\n        else\n        {\n       \
    \     result[i] = ones[i];\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(ones[i] == 1)\n        {\n            result[i] = ones[i];\n\
    \        }\n        else\n        {\n            result[i] = zeros[i];\n     \
    \   }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i]\
    \ == 0)\n        {\n            result[i] = zeros[i];\n        }\n        else\n\
    \        {\n            result[i] = ones[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)", "{\n    long[]\
    \ result = new long[arr.length];\n    long ones = 0;\n    long twos = 0;\n   \
    \ long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes =\
    \ 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long\
    \ tens = 0;\n    long elevens = 0;\n    long twelves = 0;\n    long thirteens\
    \ = 0;\n    long fourteens = 0;\n    long fifteens = 0;\n    long sixteens = 0;\n\
    \    long seventeens = 0;\n    long eighteens = 0;\n    long nineteens = 0;\n\
    \    long twentys = 0;\n    long thirtys = 0;\n    long fortys = 0;\n    long\
    \ fiftys = 0;\n    long sixtys = 0;\n    long seventys = 0;\n    long eightys\
    \ = 0;\n    long ninetys = 0;\n    long hundreds = 0;\n    long thousands = 0;\n\
    \    long tenthousands = 0;\n    long hundredthousands = 0;\n    long millions\
    \ = 0;\n    long billions = 0;\n    long trillions = 0;\n    long quadrillions\
    \ = 0;\n    long quintillions = 0;\n    long sextillions = 0;\n    long septillions\
    \ = 0;\n    long octillions = 0;\n    long nonillions = 0;\n    long decillions\
    \ = 0;\n    long undecillions = 0;\n    long duodecillions = 0;\n    long tredecillions\
    \ = 0;\n    long quattuordecillions = 0;\n    long quindecillions = 0;\n    long\
    \ sexdecillions = 0;\n    long septendecillions = 0;\n    long octodecillions\
    \ = 0;\n    long novemdecillions = 0;\n    long vigintillions = 0;\n    long unvigintillions\
    \ = 0;\n    long duovigintillions = 0;\n    long trevigintillions = 0;\n    long\
    \ quattuorvigintillions = 0;\n    long quinvigintillions = 0;\n    long sexvigintillions\
    \ = 0;\n    long septenvigintillions = 0;\n    long octovigintillions = 0;\n \
    \   long novemvigintillions = 0;\n    long vexillions = 0;\n    long unvexillions\
    \ = 0;\n    long duovexillions = 0;\n    long trevexillions = 0;\n    long quattuorvexillion",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    long[] count = new long[arr.length];\n\
    \    long sum = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        sum = 0;\n        for(int j = 0; j < arr.length;\
    \ j++)\n        {\n            if(arr[j] == 1)\n            {\n              \
    \  sum += 1;\n            }\n        }\n        \n        if(sum > max)\n    \
    \    {\n            max = sum;\n        }\n        \n        if(sum < min)\n \
    \       {\n            min = sum;\n        }\n        \n        for(int j = 0;\
    \ j < arr.length; j++)\n        {\n            if(arr[j] == 1)\n            {\n\
    \                ones[j] += 1;\n            }\n            else\n            {\n\
    \                zeros[j] += 1;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        for(int j = 0; j < arr.length; j++)\n\
    \        {\n            if(ones[j] > zeros[j])\n            {\n              \
    \  result[i] = j;\n                break;\n            }\n        }\n    }\n \
    \   \n    for(int i = 0; i < arr.length; i++)\n    {\n        for(int j = 0; j\
    \ < arr.length; j++)\n        {\n            if(ones[j] > zeros[j])\n        \
    \    {\n                result[i] = j;\n                break;\n            }\n\
    \        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    for(int j = 0; j < arr.length; j++)\n        {\n            if(ones[j] >\
    \ zeros[j])\n            {\n                result[i] = j;\n                break;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        for(int j = 0; j < arr.length; j++)\n        {\n            if(ones[j]\
    \ > zeros[j])\n            {\n                result[i] = j;\n               \
    \ break;\n            }\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis solution doesn't work\
    \ for negative numbers. Try it with `sort_array([1, 5, 2, 3, -4]) == [-4, -5,\
    \ 2, 3, 1]`\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. Try it with\
    \ `sort_array([1, 5, 2, 3, -4]) == [-4, -5, 2, 3, 1]`\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for negative numbers. Try it with `sort_array([1, 5, 2, 3, -4]) == [-4,\
    \ -5, 2, 3, 1]`\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. Try\
    \ it with `sort_array([1, 5, 2, 3, -4]) == [-4, -5, 2, 3, 1]`\n<|/", "{\n    long[]\
    \ result = new long[arr.length];\n    long ones = 0;\n    long twos = 0;\n   \
    \ long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes =\
    \ 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long\
    \ tens = 0;\n    long elevens = 0;\n    long twelves = 0;\n    long thirteens\
    \ = 0;\n    long fourteens = 0;\n    long fifteens = 0;\n    long sixteens = 0;\n\
    \    long seventeens = 0;\n    long eighteens = 0;\n    long nineteens = 0;\n\
    \    long twentys = 0;\n    long thirtys = 0;\n    long fortys = 0;\n    long\
    \ fiftys = 0;\n    long sixtys = 0;\n    long seventys = 0;\n    long eightys\
    \ = 0;\n    long ninetys = 0;\n    long hundreds = 0;\n    long thousands = 0;\n\
    \    long millions = 0;\n    long billions = 0;\n    long trillions = 0;\n   \
    \ long quadrillions = 0;\n    long quintillions = 0;\n    long sextillions = 0;\n\
    \    long septillions = 0;\n    long octillions = 0;\n    long nonillions = 0;\n\
    \    long decillions = 0;\n    long undecillions = 0;\n    long duodecillions\
    \ = 0;\n    long tredecillions = 0;\n    long quattuordecillions = 0;\n    long\
    \ quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septenvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long vexvigintillions = 0;\n    long unvexvigintillions = 0;\n    long duovexvigintillions\
    \ = 0;\n    long trevexvigintillions = 0;\n    long quattuorvexvigintillion",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n  \
    \  }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = count[arr[i]];\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]--;\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = count[arr[i]];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if there are duplicates in the array. For example, `sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]` returns `False`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works fine. Can you give me an example where it fails?\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine. Can you give me an example where it fails?\n\
    <|/ c |>\n<| c |>\nIt fails because `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3,\
    \ 4, 5]` returns `False`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can\
    \ you give me an example where it fails?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public static int[] sortArray(int[] arr) {\n    int[] result = new int[arr.length];\n\
    \    int[] count = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\
    \ {\n        count[arr[i]]++;\n    }\n    for (int i = 0; i < arr.length; i++)\
    \ {\n        result[i] = count[arr[i]];\n    }\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        count[arr[i]]--;\n    }\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        result[i] = count[arr[i]];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,java |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n   \
    \ long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        ones += arr[i];\n   \
    \     zeros += ~arr[i];\n        max = Math.max(max, ones);\n        min = Math.min(min,\
    \ zeros);\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = (arr[i] & ones) + (~arr[i] & zeros);\n    }\n    Arrays.sort(result);\n  \
    \  for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = (arr[i] & ones)\
    \ + (~arr[i] & zeros);\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| c |>\nThis solution is O(n^2) in the worst case. Sorting can be done\
    \ in O(nlogn) using radix sort or counting sort.\n<|/ c |>\n<| c |>\nYes, I know,\
    \ but I wanted to show that it is possible to do it in O(n) time. Radix sort is\
    \ O(n^2) in worst case, but O(n) in best case.\n<|/ c |>\n<| c |>\nYes, I know,\
    \ but I wanted to show that it is possible to do it in O(n) time. Radix sort is\
    \ O(n^2) in worst case, but O(n) in best case.\n<|/ c |>\n<| c |>\nThe solution\
    \ is O(n) in the worst case because of the `Arrays.sort()` call. Sorting can be\
    \ done in O(nlogn) using radix sort or counting sort.\n<|/ c |>\n<| c |>\nYes,\
    \ I know, but I wanted to show that it is possible to do it in O(n) time. Radix\
    \ sort is O(n^2) in worst case, but O(n) in best case.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long ones = 0;\n    long max\
    \ = 0;\n    long min = 0;\n    long sum = 0;\n    long count = 0;\n    long temp\
    \ = 0;\n    long[] result = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones++;\n     \
    \   }\n        else\n        {\n            temp = ones;\n            ones = max;\n\
    \            max = temp;\n            temp = min;\n            min = temp;\n \
    \           sum += ones;\n            count++;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = (count * sum + arr[i] - min) / (max - min);\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java |>\n<| c |>\n\
    This doesn't work if there are two or more 1's in the array. For example, sort_array([1,\
    \ 5, 2, 3, 4]) returns [1, 2, 3, 4, 5] instead of [1, 2, 3, 4, 5]\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. Can you give an example where it fails?\n\
    <|/ c |>\n<| c |>\nsort_array([1, 5, 2, 3, 4]) returns [1, 2, 3, 4, 5] instead\
    \ of [1, 2, 3, 4, 5]\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you\
    \ give an example where it fails?\n<|/ c |>\n<| c |>\nsort_array([1, 5, 2, 3,\
    \ 4]) returns [1, 2, 3, 4, 5] instead of [1, 2, 3, 4, 5]\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 5,\
    \ 2, 3, 4};\n    System.out.println(Arrays.toString(sort(arr)));\n}", "{\n   \
    \ long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros =\
    \ 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        ones += arr[i];\n\
    \        zeros += ~arr[i];\n    }\n    for(int i = 0; i < arr.length; i++)\n \
    \   {\n        result[i] = arr[i];\n        if(arr[i] == 1)\n        {\n     \
    \       result[i] = ones;\n            ones = 0;\n        }\n        else\n  \
    \      {\n            result[i] = zeros;\n            zeros = 0;\n        }\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not the best solution. `Arrays.sort` uses `mergesort` which\
    \ has worst case complexity of O(nlogn).\n<|/ c |>\n<| c |>\nYes, but this solution\
    \ has worst case complexity of O(n^2). Which is better than O(nlogn).\n<|/ c |>\n\
    <| c |>\nThe complexity is O(n^2) because you are sorting twice (once for counting\
    \ number of ones and once for counting number of zeros). Sorting twice is O(n^2)\
    \ in worst case and O(nlogn) in best case.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ But the complexity is O(n^2) because you are sorting twice (once for counting\
    \ number of ones and once for counting number of zeros). Sorting twice is O(n^2)\
    \ in worst case and O(nlogn) in best case.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ But the complexity is O(n^2) because you are sorting twice (once for counting\
    \ number of ones and once for counting number of zeros). Sorting twice is O(n^2)\
    \ in worst case and O(nlogn) in best case.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n\
    \    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) ones++;\n\
    \        else if(arr[i] == 0) zeros++;\n        else max = Math.max(max, arr[i]);\n\
    \        min = Math.min(min, arr[i]);\n    }\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] == 1) ones--;\n        else if(arr[i] == 0)\
    \ zeros--;\n        else max = Math.max(max, arr[i]);\n        min = Math.min(min,\
    \ arr[i]);\n    }\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ == 1) ones++;\n        else if(arr[i] == 0) zeros++;\n        else max = Math.max(max,\
    \ arr[i]);\n        min = Math.min(min, arr[i]);\n    }\n    for(int i = 0; i\
    \ < arr.length; i++) \n    {\n        if(arr[i] == 1) ones--;\n        else if(arr[i]\
    \ == 0) zeros--;\n        else max = Math.max(max, arr[i]);\n        min = Math.min(min,\
    \ arr[i]);\n    }\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ == 1) ones++;\n        else if(arr[i] == 0) zeros++;\n        else max = Math.max(max,\
    \ arr[i]);\n        min = Math.min(min, arr[i]);\n    }\n    for(int i = 0; i\
    \ < arr.length; i++) \n    {\n        if(arr[i] == 1) ones--;\n        else if(arr[i]\
    \ == 0) zeros--;\n        else max = Math.max(max, arr[i]);\n        min = Math.min(min,\
    \ arr[i]);\n    }\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ == 1) ones++;\n        else if(arr[i] == 0) zeros++;\n        else max = Math.max(max,\
    \ arr[i]);\n        min = Math.min(min, arr[i]);\n    }\n    for(int i = 0; i\
    \ < arr.length; i++) \n    {\n        if(arr[i] == 1) ones--;\n        else if(arr[i]\
    \ == 0) zeros--;\n        else max = Math.max(max, arr[i]);\n        min = Math.min(min,\
    \ arr[i]);\n    }\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ == 1) ones++;\n        else if(arr[i] == 0) zeros++;\n        else max = Math.max(max,\
    \ arr[i]);\n        min = Math.min(min, arr[i]);\n    }\n    for(int i = 0; i\
    \ < arr.length; i++) \n    {\n        if(arr[i] == 1) ones--;\n        else if(arr[i]\
    \ == 0) zeros--;\n        else max = Math.max(max, arr[i]);\n        min = Math.min(min,\
    \ arr[i]);\n    }\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ == 1) ones++;\n        else if(arr[i] == 0) zeros++;\n        else max = Math.max(max,\
    \ arr[i]);\n        min = Math.min(min, arr[i]);\n    }\n    for(int i = 0; i\
    \ < arr.length; i++", "{\n    long[] result = new long[arr.length];\n    int ones\
    \ = 0;\n    int zeros = 0;\n    int i = 0;\n    for(int j=0; j<arr.length; j++)\n\
    \    {\n        if(arr[j] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n    }\n    for(int j=0;\
    \ j<arr.length; j++)\n    {\n        if(arr[j] == 1)\n        {\n            result[i]\
    \ = ones;\n            ones++;\n        }\n        else\n        {\n         \
    \   result[i] = zeros;\n            zeros++;\n        }\n        i++;\n    }\n\
    \    for(int j=0; j<arr.length; j++)\n    {\n        if(arr[j] == 1)\n       \
    \ {\n            result[i] = ones;\n            ones++;\n        }\n        else\n\
    \        {\n            result[i] = zeros;\n            zeros++;\n        }\n\
    \        i++;\n    }\n    for(int j=0; j<arr.length; j++)\n    {\n        if(arr[j]\
    \ == 1)\n        {\n            result[i] = ones;\n            ones++;\n     \
    \   }\n        else\n        {\n            result[i] = zeros;\n            zeros++;\n\
    \        }\n        i++;\n    }\n    for(int j=0; j<arr.length; j++)\n    {\n\
    \        if(arr[j] == 1)\n        {\n            result[i] = ones;\n         \
    \   ones++;\n        }\n        else\n        {\n            result[i] = zeros;\n\
    \            zeros++;\n        }\n        i++;\n    }\n    for(int j=0; j<arr.length;\
    \ j++)\n    {\n        if(arr[j] == 1)\n        {\n            result[i] = ones;\n\
    \            ones++;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n            zeros++;\n        }\n        i++;\n    }\n    for(int\
    \ j=0; j<arr.length; j++)\n    {\n        if(arr[j] == 1)\n        {\n       \
    \     result[i] = ones;\n            ones++;\n        }\n        else\n      \
    \  {\n            result[i] = zeros;\n            zeros++;\n        }\n      \
    \  i++;\n    }\n    for(int j=0; j<arr.length; j++)\n    {\n        if(arr[j]\
    \ == 1)\n        {\n            result[i] = ones;\n            ones++;\n     \
    \   }\n        else\n        {\n            result[i] = zeros;\n            zeros++;\n\
    \        }\n        i++;\n    }\n    for(int j=0; j<arr.length; j++)\n    {\n\
    \        if(arr[j] == 1)\n        {\n            result[i] = ones;\n         \
    \   ones++;\n        }\n        else\n        {\n            result[i] = zeros;\n\
    \            zeros++;\n        }\n        i++;\n    }\n    for(int j=0; j<arr.length;\
    \ j++)\n    {\n        if(arr[j", "{\n    long[] result = new long[arr.length];\n\
    \    int[] count = new int[arr.length];\n    \n    for (int i = 0; i < arr.length;\
    \ ++i)\n    {\n        count[arr[i]]++;\n    }\n    \n    for (int i = 0; i <\
    \ arr.length; ++i)\n    {\n        result[i] = arr[i];\n    }\n    \n    for (int\
    \ i = 0; i < arr.length; ++i)\n    {\n        if (count[arr[i]] == 1)\n      \
    \  {\n            int pos = i;\n            while (pos > 0 && count[arr[pos-1]]\
    \ == 1)\n            {\n                --pos;\n            }\n            \n\
    \            int j = pos;\n            while (j > 0 && count[arr[j-1]] == 1)\n\
    \            {\n                --j;\n            }\n            \n          \
    \  if (j > pos)\n            {\n                long tmp = arr[pos];\n       \
    \         arr[pos] = arr[j];\n                arr[j] = tmp;\n            }\n \
    \       }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n    long result[] = new\
    \ long[arr.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    bool\
    \ swap = false;\n    \n    while (i < arr.length)\n    {\n        swap = false;\n\
    \        \n        while (j < arr.length)\n        {\n            if (arr[j] ==\
    \ 0)\n            {\n                swap = true;\n                break;\n  \
    \          }\n            j++;\n        }\n        \n        if (swap)\n     \
    \   {\n            swap = false;\n            \n            while (k < arr.length)\n\
    \            {\n                if (arr[k] == 0)\n                {\n        \
    \            swap = true;\n                    break;\n                }\n   \
    \             k++;\n            }\n        }\n        \n        if (swap)\n  \
    \      {\n            result[i] = arr[j];\n            j++;\n        }\n     \
    \   else\n        {\n            result[i] = arr[i];\n            i++;\n     \
    \   }\n    }\n    \n    while (j < arr.length)\n    {\n        result[i] = arr[j];\n\
    \        j++;\n        i++;\n    }\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI like your solution, it's very elegant. However I cannot\
    \ understand why you used the variable `swap` instead of `j` in the inner loop.\
    \ Could you please explain why you did that?\n<|/ c |>\n<| c |>\nI used `swap`\
    \ because I wanted to avoid the extra variable `j` in the inner loop. Since `j`\
    \ is used only to count the number of `1` in the binary representation of `arr[i]`,\
    \ I thought it would be better to avoid the extra variable `j` in the inner loop.\
    \ Since `j` is used only to count the number of `1` in the binary representation\
    \ of `arr[i]`, I thought it would be better to avoid the extra variable `j` in\
    \ the inner loop. Since `j` is used only to count the number of `1` in the binary\
    \ representation of `arr[i]`, I thought it would be better to avoid the extra\
    \ variable `j` in the inner loop. Since `j` is used only to count the number of\
    \ `1` in the binary representation of `arr[i]`, I thought it would be better to\
    \ avoid the extra variable `j` in the inner loop.\n<|/ c |>\n<| c |>\nI used `swap`\
    \ because I wanted to avoid the extra variable `j` in the inner loop. Since `j`\
    \ is used only to count the number of `1` in the binary representation of `arr[i]`,\
    \ I thought it would be better to avoid the extra variable `j` in the inner loop.\
    \ Since `j` is used only to count the number of `1` in the binary representation\
    \ of `arr[i]`, I thought it would be better to avoid the extra variable `j` in\
    \ the ", "{\n    long[] result = new long[arr.length];\n    long[] ones = new\
    \ long[arr.length];\n    long[] zeros = new long[arr.length];\n    long[] temp\
    \ = new long[arr.length];\n    long oneCount = 0;\n    long zeroCount = 0;\n \
    \   long maxOneCount = 0;\n    long maxZeroCount = 0;\n    long maxOne = 0;\n\
    \    long maxZero = 0;\n    long maxOneIndex = 0;\n    long maxZeroIndex = 0;\n\
    \    long maxOneValue = 0;\n    long maxZeroValue = 0;\n    long maxOneValueIndex\
    \ = 0;\n    long maxZeroValueIndex = 0;\n    long maxOneValueIndex2 = 0;\n   \
    \ long maxZeroValueIndex2 = 0;\n    long maxOneValueIndex3 = 0;\n    long maxZeroValueIndex3\
    \ = 0;\n    long maxOneValueIndex4 = 0;\n    long maxZeroValueIndex4 = 0;\n  \
    \  long maxOneValueIndex5 = 0;\n    long maxZeroValueIndex5 = 0;\n    long maxOneValueIndex6\
    \ = 0;\n    long maxZeroValueIndex6 = 0;\n    long maxOneValueIndex7 = 0;\n  \
    \  long maxZeroValueIndex7 = 0;\n    long maxOneValueIndex8 = 0;\n    long maxZeroValueIndex8\
    \ = 0;\n    long maxOneValueIndex9 = 0;\n    long maxZeroValueIndex9 = 0;\n  \
    \  long maxOneValueIndex10 = 0;\n    long maxZeroValueIndex10 = 0;\n    long maxOneValueIndex11\
    \ = 0;\n    long maxZeroValueIndex11 = 0;\n    long maxOneValueIndex12 = 0;\n\
    \    long maxZeroValueIndex12 = 0;\n    long maxOneValueIndex13 = 0;\n    long\
    \ maxZeroValueIndex13 = 0;\n    long maxOneValueIndex14 = 0;\n    long maxZeroValueIndex14\
    \ = 0;\n    long maxOneValueIndex15 = 0;\n    long maxZeroValueIndex15 = 0;\n\
    \    long maxOneValueIndex16 = 0;\n    long maxZeroValueIndex16 = 0;\n    long\
    \ maxOneValueIndex17 = 0;\n    long maxZeroValueIndex17 = 0;\n    long maxOneValueIndex18\
    \ = 0;\n    long maxZeroValueIndex18 = 0;\n    long maxOneValueIndex19 = 0;\n\
    \    long maxZeroValueIndex19 = 0;\n    long maxOneValueIndex20 = 0;\n    long\
    \ maxZeroValueIndex20 = 0;\n    long maxOneValueIndex21 = 0;\n    long maxZeroValueIndex21\
    \ = 0;\n    long maxOneValueIndex22 = 0;\n    long maxZeroValueIndex22 = 0;\n\
    \    long maxOneValueIndex23 = 0;\n    long maxZeroValue", "{\n    long[] result\
    \ = new long[arr.length];\n    int[] count = new int[arr.length];\n    for(int\
    \ i = 0; i < arr.length; i++) \n    {\n        count[arr[i]]++;\n    }\n    for(int\
    \ i = 0; i < arr.length; i++) \n    {\n        result[i] = arr[i];\n    }\n  \
    \  for(int i = 0; i < arr.length; i++) \n    {\n        if(count[arr[i]] > 1)\
    \ \n        {\n            int j = i;\n            while(j > 0 && count[arr[j-1]]\
    \ > 1) \n            {\n                result[j] = arr[j-1];\n              \
    \  count[arr[j-1]]--;\n                j--;\n            }\n            result[j]\
    \ = arr[i];\n            count[arr[i]]--;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[arr.length];\n\
    \    int[] count = new int[arr.length];\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        count[arr[i]]++;\n    }\n    \n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        result[i] = count[arr[i]];\n    }\n    \n \
    \   Arrays.sort(result);\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis solution is O(n^2) time complexity. Sorting algorithm is O(nlogn).\n\
    <|/ c |>\n<| c |>\nSorting algorithm is O(nlogn) because you sort an array with\
    \ n elements. Sorting algorithm is O(n^2) because you sort an array with n elements.\
    \ Sorting algorithm is O(n^2) because you sort an array with n elements. Sorting\
    \ algorithm is O(n^2) because you sort an array with n elements. Sorting algorithm\
    \ is O(n^2) because you sort an array with n elements. Sorting algorithm is O(n^2)\
    \ because you sort an array with n elements. Sorting algorithm is O(n^2) because\
    \ you sort an array with n elements. Sorting algorithm is O(n^2) because you sort\
    \ an array with n elements. Sorting algorithm is O(n^2) because you sort an array\
    \ with n elements. Sorting algorithm is O(n^2) because you sort an array with\
    \ n elements. Sorting algorithm is O(n^2) because you sort an array with n elements.\
    \ Sorting algorithm is O(n^2) because you sort an array with n elements. Sorting\
    \ algorithm is O(n^2) because you sort an array with n elements. Sorting algorithm\
    \ is O(n^2) because you sort an array with n elements. Sorting algorithm is O(n^2)\
    \ because you sort an array with n elements. Sorting algorithm is O(n^2) because\
    \ you sort an array with n elements. Sorting algorithm is O(n^2) because you sort\
    \ an array with n elements. Sorting algorithm is O(n^2) because you sort an array\
    \ with n elements. Sorting algorithm is O(n^2) because you sort an array with\
    \ n elements. Sorting algorithm is O(n^2) because you sort an array with n elements.\
    \ Sorting algorithm is O(n^2) because you sort an array with n elements. Sorting\
    \ algorithm is O(n^2) because you sort an array with n elements. Sorting algorithm\
    \ is O(n^2) because you sort an array with n elements. Sorting algorithm is O(n^2)\
    \ because you sort an array with n element", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    \n    for (int i = 0; i < arr.length; i++)\n    {\n        ones[i] = 1;\n\
    \        zeros[i] = 0;\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        int count = 0;\n        for (int j = 0; j < arr.length; j++)\n\
    \        {\n            if (arr[j] == ones[i])\n            {\n              \
    \  count++;\n            }\n        }\n        \n        if (count > 0)\n    \
    \    {\n            result[i] = count;\n        }\n        else\n        {\n \
    \           result[i] = arr[arr.length - 1 - i];\n        }\n    }\n    \n   \
    \ for (int i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n      \
    \  for (int j = 0; j < arr.length; j++)\n        {\n            if (arr[j] ==\
    \ ones[i])\n            {\n                count++;\n            }\n        }\n\
    \        \n        if (count > 0)\n        {\n            result[i] = arr[arr.length\
    \ - 1 - i];\n        }\n        else\n        {\n            result[i] = zeros[i];\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. Can you please explain how you got this\
    \ solution?\n<|/ c |>\n<| c |>\nI used the above solution and modified it a bit.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 5, 2, 3, 4};\n    int[] result = new int[arr.length];\n\
    \    \n    for (int i = 0; i < arr.length; i++) {\n        int count = 0;\n  \
    \      for (int j = 0; j < arr.length; j++) {\n            if (arr[j] == i) {\n\
    \                count++;\n            }\n        }\n        \n        if (count\
    \ > 0) {\n            result[i] = count;\n        } else {\n            result[i]\
    \ = arr[arr.length - 1 - i];\n        }\n    }\n    \n    for (int i = 0; i <\
    \ arr.length; i++) {\n        int count = 0;\n        for (int j = 0; j < arr.length;\
    \ j++) {\n            if (arr[j] == i) {\n                count++;\n         \
    \   }\n        }\n        \n        if (count > 0) {\n            result[i] =\
    \ arr[arr.length - 1 - i];\n        } else {\n            result[i] = 0;\n   \
    \     }\n    }\n    \n    System.out.println(Arrays.toString(result));\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,arrays |>\n<| a tags=sorting,algorithm,arrays |>\n\
    <code>\npublic class SortArray {", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \            ones[i] = 1;\n        else\n            ones[i] = 0;\n    }\n   \
    \ \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n\
    \            result[i] = i;\n        else\n            zeros[i] = 1;\n    }\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n\
    \            result[i] = arr[result[i]];\n        else\n            result[i]\
    \ = arr[zeros[i]];\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nI believe this would fail for `sort_array([1, 5, 2, 3, 4])` because\
    \ `ones` would be `[1, 0, 0, 0]` and the first `if` would fail.\n<|/ c |>\n<|\
    \ c |>\nYes, you are right. I missed that case. Thanks for pointing it out.\n\
    <|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result =\
    \ new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n    long max\
    \ = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            ones++;\n        }else{\n            zeros++;\n        }\n\
    \        if(ones > zeros){\n            max = ones;\n            min = zeros;\n\
    \        }else{\n            max = zeros;\n            min = ones;\n        }\n\
    \        result[i] = min + (max - min) * std.math.pow(std.math.abs(arr[i]), std.math.abs(max));\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\ndef sort_array(arr):\n    arr.sort()\n    arr.reverse()\n    return\
    \ arr\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers in the array\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers in the array\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndef sort_array(arr):\n\
    \    arr.sort()\n    arr.reverse()\n    return arr\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers in the array\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\ndef sort_array(arr):\n    arr.sort()\n    arr.reverse()\n\
    \    return arr\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\ndef sort_array(arr):\n    arr.sort()\n    arr.reverse()\n    return\
    \ arr\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef sort_array(arr):\n\
    \    arr.sort()\n    arr.reverse()\n    return arr\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\ndef sort_array(arr):\n  \
    \  arr.sort()\n    arr.reverse()\n    return arr\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=sorting,algorithm,arrays |>\n<code>\ndef sort_array(arr):\n    arr.sort()\n\
    \    arr.reverse()\n    return arr\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\ndef sort_array(arr):\n    arr.sort()\n", "{\n    long[] result =\
    \ new long[arr.length];\n    long ones = 0;\n    long twos = 0;\n    long threes\
    \ = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n    long\
    \ sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens = 0;\n\
    \    long hundreds = 0;\n    long thousands = 0;\n    long ten_thousands = 0;\n\
    \    long hundred_thousands = 0;\n    long thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_thousands = 0;\n    long hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        ones[i] = 1;\n        zeros[i] = 0;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n        for(int\
    \ j = 0; j < arr.length; j++)\n        {\n            if(arr[j] == i)\n      \
    \      {\n                count++;\n            }\n        }\n        \n     \
    \   if(count == 1)\n        {\n            result[i] = i;\n        }\n       \
    \ else if(count > 1)\n        {\n            int pos = 0;\n            for(int\
    \ j = 0; j < arr.length; j++)\n            {\n                if(arr[j] == i)\n\
    \                {\n                    if(pos < j)\n                    {\n \
    \                       int temp = arr[j];\n                        arr[j] = arr[pos];\n\
    \                        arr[pos] = temp;\n                    }\n           \
    \         pos++;\n                }\n            }\n            \n           \
    \ int temp = arr[pos];\n            arr[pos] = i;\n            result[i] = temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(result[i] != i)\n        {\n            int temp = result[i];\n      \
    \      result[i] = result[i];\n            result[temp] = i;\n        }\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n\
    <| a tags=algorithm,sorting,arrays |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 5, 2, 3, 4};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,sorting,arrays |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4};\n \
    \   Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;", "{\n    long[] result = new long[arr.length];\n   \
    \ long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        ones += arr[i];\n        zeros += (arr[i]\
    \ != 0);\n        max = Math.max(max, arr[i]);\n    }\n    for(int i = 0; i <\
    \ arr.length; i++)\n    {\n        result[i] = (arr[i] != 0) ? arr[i] : max;\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        ones = ones -\
    \ arr[i];\n        zeros = zeros - arr[i];\n        max = Math.max(max, ones);\n\
    \        max = Math.max(max, zeros);\n        result[i] = (arr[i] != 0) ? max\
    \ : max;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    int[] count = new int[arr.length];\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        int j = i;\n        while(j > 0 && count[j-1] > count[j])\n\
    \        {\n            result[j] = result[j-1];\n            j--;\n        }\n\
    \        result[j] = arr[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[arr.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int\
    \ count = 0;\n    \n    while (i < arr.length)\n    {\n        if (arr[i] == 1)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     result[k] = arr[i];\n            j++;\n        }\n        i++;\n       \
    \ k++;\n    }\n    \n    while (j < arr.length)\n    {\n        result[k] = arr[j];\n\
    \        j++;\n        k++;\n    }\n    \n    while (i < arr.length)\n    {\n\
    \        if (arr[i] == 1)\n        {\n            count--;\n        }\n      \
    \  else\n        {\n            result[k] = arr[i];\n            j++;\n      \
    \  }\n        i++;\n        k++;\n    }\n    \n    while (count > 0)\n    {\n\
    \        result[k] = arr[i];\n        j++;\n        k++;\n        \n        while\
    \ (count > 0)\n        {\n            if (arr[i] == 1)\n            {\n      \
    \          count--;\n            }\n            else\n            {\n        \
    \        result[k] = arr[i];\n                j++;\n            }\n          \
    \  i++;\n            k++;\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI see that you are using recursion. Can you please\
    \ explain how this works?\n<|/ c |>\n<| c |>\nI added some comments to my code.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(inputArray)\
    \ {\n    var sortedArray = [];\n    var tempArray = [];\n    var count = 0;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var count = 0;\n    var temp\
    \ = 0;\n    \n    while (i < inputArray.length) {\n        if (inputArray[i] ==\
    \ 1) {\n            count++;\n        } else {\n            tempArray[k] = inputArray[i];\n\
    \            j++;\n        }\n        i++;\n        k++;\n    }\n    \n    while\
    \ (j < inputArray.length) {\n        tempArray[k] = inputArray[j];\n        j++;\n\
    \        k++;\n    }\n    \n    while (count > 0) {\n        sortedArray[k] =\
    \ tempArray[i];\n        j++;\n        k++;\n        \n        while (count >\
    \ 0) {\n            if (inputArray[i] == 1) {\n                count--;\n    \
    \        } else {\n                tempArray[k] = inputArray[i];\n           \
    \     j++;\n            }\n            i++;\n            k++;\n        }\n   \
    \ }\n    \n    return sortedArray;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,javascript\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are ", "{\n    long[] result = new long[arr.length];\n \
    \   long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        ones += arr[i];\n        zeros += ~arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        result[i] = ones;\n        ones\
    \ = ~ones;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    result[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        result[i] = result[i] / zeros;\n    }\n    \n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        result[i] = result[i] * -1;\n    }\n  \
    \  \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = result[i]\
    \ + ones;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n     \
    \   result[i] = result[i] / ones;\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1, 5,\
    \ 2, 3, 4]) == [1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nIt does work. Try it with\
    \ `sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def sort_array(arr):\n    \n    ones = 0\n    zeros = 0\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones++;\n     \
    \   }\n        else\n        {\n            zeros++;\n        }\n        if(arr[i]\
    \ > max)\n        {\n            max = arr[i];\n        }\n        if(arr[i] <\
    \ min)\n        {\n            min = arr[i];\n        }\n    }\n    long onesMax\
    \ = ones * max;\n    long onesMin = ones * min;\n    long zerosMax = zeros * max;\n\
    \    long zerosMin = zeros * min;\n    long maxOnes = ones * max;\n    long maxZeros\
    \ = zeros * max;\n    long minOnes = ones * min;\n    long minZeros = zeros *\
    \ min;\n    long onesDiff = onesMax - onesMin;\n    long zerosDiff = zerosMax\
    \ - zerosMin;\n    long maxOnesDiff = onesMax - maxOnes;\n    long maxZerosDiff\
    \ = zerosMax - maxZeros;\n    long minOnesDiff = onesMin - minOnes;\n    long\
    \ minZerosDiff = zerosMin - minZeros;\n    long maxOnesDiffInv = maxOnesDiff /\
    \ onesDiff;\n    long maxZerosDiffInv = maxZerosDiff / zerosDiff;\n    long minOnesDiffInv\
    \ = minOnesDiff / onesDiff;\n    long minZerosDiffInv = minZerosDiff / zerosDiff;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \     {\n            result[i] = maxOnesDiffInv;\n        }\n        else\n  \
    \      {\n            result[i] = maxZerosDiffInv;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         result[i] = minOnesDiffInv;\n        }\n        else\n        {\n  \
    \          result[i] = minZerosDiffInv;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, although it does\
    \ require a lot of extra space and time for sorting.\n<|/ c |>\n<| c |>\nYes,\
    \ but this solution uses O(n) extra space and O(n) extra time. On the other hand,\
    \ if you use O(1) extra ", "{\n    int n = arr.length;\n    long[] result = new\
    \ long[n];\n    long[] count = new long[n];\n    long ones = 0;\n    long max\
    \ = 0;\n    long min = 0;\n    long sum = 0;\n    long sum2 = 0;\n    long sum3\
    \ = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7\
    \ = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long\
    \ sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n\
    \    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18\
    \ = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long\
    \ sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n\
    \    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29\
    \ = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long\
    \ sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n\
    \    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40\
    \ = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long\
    \ sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n\
    \    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51\
    \ = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long\
    \ sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n\
    \    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62\
    \ = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long\
    \ sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n\
    \    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73\
    \ = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long\
    \ sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum", "{\n  \
    \  long ones = 0;\n    long max = 0;\n    long min = 0;\n    long temp = 0;\n\
    \    long result = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] == 1)\n        {\n            ones++;\n        }\n        else\n\
    \        {\n            if(ones > max)\n            {\n                max = ones;\n\
    \            }\n            if(ones < min)\n            {\n                min\
    \ = ones;\n            }\n            ones = 0;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         ones++;\n        }\n        else\n        {\n            if(ones > max)\n\
    \            {\n                max = ones;\n            }\n            if(ones\
    \ < min)\n            {\n                min = ones;\n            }\n        \
    \    ones = 0;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n   \
    \     else\n        {\n            if(ones > max)\n            {\n           \
    \     max = ones;\n            }\n            if(ones < min)\n            {\n\
    \                min = ones;\n            }\n            ones = 0;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    if(ones > max)\n            {\n                max = ones;\n            }\n\
    \            if(ones < min)\n            {\n                min = ones;\n    \
    \        }\n            ones = 0;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones++;\n     \
    \   }\n        else\n        {\n            if(ones > max)\n            {\n  \
    \              max = ones;\n            }\n            if(ones < min)\n      \
    \      {\n                min = ones;\n            }\n            ones = 0;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones++;\n        }\n        else\n        {\n\
    \            if(ones > max)\n            {\n                max = ones;\n    \
    \        }\n            if(ones < min)\n            {\n                min = ones;\n\
    \            }\n            ones = 0;\n        }\n    }\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones++;\n\
    \        }\n        else\n        {\n            if(ones > max)\n            {\n\
    \                max = ones;\n            }\n            if(ones < min)\n    \
    \        {\n                min = ones;\n            }\n            ones = 0;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones++;\n        }\n        else\n        {\n\
    \            if(ones > max)\n            {\n                max = ones;\n    \
    \        }\n            if(ones < ", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n   \
    \         ones[i] = 1;\n        else\n            ones[i] = 0;\n    }\n    for(int\
    \ i = 0; i < arr.length; ++i)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = 0;\n    }\n    for(int i = 0;\
    \ i < arr.length; ++i)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            result[i] = zeros[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't downvote, but I suspect\
    \ it's because you didn't explain what was wrong with OP's code. Maybe you could\
    \ add some explanation about why you think this code is better than the OP's code?\n\
    <|/ c |>\n<| c |>\nI added some explanation about why I believe this code is better\
    \ than OP's code.\n<|/ c |>\n<| c |>\nI didn't downvote either, but your explanation\
    \ is still not very clear. Maybe you could add some explanation about why you\
    \ think this code is better than the OP's code?\n<|/ c |>\n<| c |>\nI added some\
    \ explanation about why I believe this code is better than OP's code.\n<|/ c |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    int ones = 0;\n    int dec =\
    \ 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] == 1)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    dec += arr[i];\n        }\n    }\n    Arrays.sort(arr);\n    for (int i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] == 1)\n        {\n      \
    \      result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = dec;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[arr.length];\n    long[] ones = new long[arr.length];\n    long[]\
    \ zeros = new long[arr.length];\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        ones[i] = 1;\n        zeros[i] = 0;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         zeros[i]++;\n        }\n        else\n        {\n            ones[i]++;\n\
    \        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(ones[i] > zeros[i])\n        {\n            result[i] = arr[i];\n    \
    \    }\n        else\n        {\n            result[i] = zeros[i];\n        }\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI see\
    \ no reason why this should be downvoted. Maybe the OP doesn't know what he is\
    \ doing, but this answer solves the problem and explains what he is doing. It's\
    \ not like he is asking for a solution to the problem, but a solution to the problem\
    \ he is having.\n<|/ c |>\n<| c |>\nI didn't downvote it, but I guess it's because\
    \ you didn't explain the problem and how you solved it.\n<|/ c |>\n<| c |>\nI\
    \ didn't downvote it, but I guess it's because you didn't explain the problem\
    \ and how you solved it.\n<|/ c |>\n<| c |>\nI didn't downvote it, but I guess\
    \ it's because you didn't explain the problem and how you solved it.\n<|/ c |>\n\
    <| c |>\nI didn't downvote it, but I guess it's because you didn't explain the\
    \ problem and how you solved it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n  \
    \      if(arr[i] == 1)\n        {\n            ones++;\n        }\n        else\n\
    \        {\n            zeros++;\n        }\n        if(arr[i] > max)\n      \
    \  {\n            max = arr[i];\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == max)\n\
    \        {\n            result[i] = max;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis doesn't\
    \ work. Try `sort_array([1, 5, 2, 3, 4])` - it returns `[1, 2, 3, 4, 5]` instead\
    \ of `[-6, -5, -4, -3, -2]`.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited\
    \ my answer to include a test case.\n<|/ c |>\n<| c |>\nIt doesn't work if you\
    \ try `sort_array([1, 0, 2, 3, 4])` - it returns `[0, 1, 2, 3, 4]` instead of\
    \ `[0, 1, 2, 3, 4]`.\n<|/ c |>\n<| c |>\nI edited my answer to include a test\
    \ case for that case.\n<|/ c |>\n<| c |>\nIt doesn't work if you try `sort_array([1,\
    \ 0, 2, 3, 4])` - it returns `[0, 1, 2, 3, 4]` instead of `[0, 1, 2, 3, 4]`.\n\
    <|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic static void\
    \ main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4};\n    System.out.println(Arrays.toString(sort_array(arr)));\n\
    }", "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long\
    \ zeros = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones++;\n     \
    \   }\n        else\n        {\n            zeros++;\n        }\n        if(arr[i]\
    \ > max)\n        {\n            max = arr[i];\n        }\n        if(arr[i] <\
    \ min)\n        {\n            min = arr[i];\n        }\n    }\n    long onesMax\
    \ = ones * max;\n    long onesMin = ones * min;\n    long zerosMax = zeros * max;\n\
    \    long zerosMin = zeros * min;\n    long maxOnesMax = onesMax * max;\n    long\
    \ maxOnesMin = onesMax * min;\n    long maxZerosMax = zerosMax * max;\n    long\
    \ maxZerosMin = zerosMax * min;\n    long minOnesMax = onesMin * max;\n    long\
    \ minOnesMin = onesMin * min;\n    long minZerosMax = zerosMin * max;\n    long\
    \ minZerosMin = zerosMin * min;\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] == 1)\n        {\n            result[i] = onesMax;\n  \
    \      }\n        else\n        {\n            result[i] = zerosMax;\n       \
    \ }\n        if(arr[i] > max)\n        {\n            result[i] = maxOnesMax;\n\
    \        }\n        if(arr[i] < min)\n        {\n            result[i] = minOnesMax;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = onesMin;\n        }\n        else\n\
    \        {\n            result[i] = zerosMin;\n        }\n        if(arr[i] >\
    \ max)\n        {\n            result[i] = maxZerosMax;\n        }\n        if(arr[i]\
    \ < min)\n        {\n            result[i] = minZerosMax;\n        }\n    }\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \     {\n            result[i] = onesMax;\n        }\n        else\n        {\n\
    \            result[i] = zerosMax;\n        }\n        if(arr[i] > max)\n    \
    \    {\n            result[i] = maxOnesMin;\n        }\n        if(arr[i] < min)\n\
    \        {\n            result[i] = minOnesMin;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         result[i] = onesMin;\n        }\n        else\n        {\n         \
    \   result[i] = zerosMin", "{\n    long[] result = new long[arr.length];\n   \
    \ long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    long ones_cnt = 0;\n    long zeros_cnt = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        ones[i] = 0;\n        zeros[i] = 0;\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         ones_cnt++;\n        }\n        else\n        {\n            zeros_cnt++;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones_cnt\
    \ > zeros_cnt)\n        {\n            result[i] = ones[i];\n        }\n     \
    \   else\n        {\n            result[i] = zeros[i];\n        }\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<|\
    \ c |>\nThis solution works well for small arrays, but it fails for large arrays.\
    \ I tested it on arrays of size 10^9 and it took about a minute to sort an array\
    \ of size 10^9. My solution took about a second for an array of size 10^9. Your\
    \ solution took about a minute for an array of size 10^9. My solution took about\
    \ a minute for an array of size 10^9. Your solution took about a minute for an\
    \ array of size 10^9. Your solution took about a minute for an array of size 10^9.\
    \ Your solution took about a minute for an array of size 10^9. Your solution took\
    \ about a minute for an array of size 10^9. Your solution took about a minute\
    \ for an array of size 10^9. Your solution took about a minute for an array of\
    \ size 10^9. Your solution took about a minute for an array of size 10^9. Your\
    \ solution took about a minute for an array of size 10^9. Your solution took about\
    \ a minute for an array of size 10^9. Your solution took about a minute for an\
    \ array of size 10^9. Your solution took about a minute for an array of size 10^9.\
    \ Your solution took about a minute for an array of size 10^9. Your solution took\
    \ about a minute for an array of size 10^9. Your solution took about a minute\
    \ for an array of size 10^9. Your solution took about a minute for an array of\
    \ size 10^9. Your solution took about a minute for an array of size 10^9. Your\
    \ solution took about a minute for an array of size 10^9. Your solution took about\
    \ a minute for an array of size 10^9. Your solution took about ", "{\n    long[]\
    \ result = new long[arr.length];\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        int count = 0;\n        for(int j = 0; j < arr.length; j++)\n  \
    \      {\n            if(arr[j] == 1)\n            {\n                count++;\n\
    \            }\n        }\n        result[i] = count;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n    \
    \    for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j] ==\
    \ 1)\n            {\n                count++;\n            }\n        }\n    \
    \    result[i] = count;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis is not\
    \ the most efficient solution. Sorting can be done in O(nlogn) time using radix\
    \ sort or counting sort or bucket sort. But the question was to sort an array\
    \ of non-negative integers according to number of ones in their binary representation\
    \ in ascending order. Your solution sorts them in descending order.\n<|/ c |>\n\
    <| c |>\nYes, you are right. I missed that part. Thanks for pointing it out. I've\
    \ updated my answer.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n   \
    \ long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(result[i] > result[i+1])\n        {\n            long temp = result[i];\n\
    \            result[i] = result[i+1];\n            result[i+1] = temp;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n\
    <| a tags=sorting,arrays,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours =\
    \ 0;\n    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long\
    \ eights = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n\
    \    long thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands\
    \ = 0;\n    long thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_thousands = 0;\n    long hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_thousands = 0;\n \
    \   long hundred_thousand_hundred_thousand_hundred_thousand_thousands = 0;\n \
    \   long thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_thous",
  "{\n    long[] result = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        int count = 0;\n        for(int j = 0; j < arr.length;\
    \ j++)\n        {\n            if(arr[j] == 1)\n            {\n              \
    \  count++;\n            }\n        }\n        result[i] = count;\n    }\n   \
    \ Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java\
    \ |>\n<| a |>\n<code>\npublic static void main(String[] args) {\n    int[] arr\
    \ = {1, 5, 2, 3, 4};\n    int[] arr2 = new int[arr.length];\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        arr2[i] = arr[i];\n    }\n    Arrays.sort(arr2);\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        arr[i] = arr2[i];\n \
    \   }\n    System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic class SortArray {", "{\n    long[]\
    \ result = new long[arr.length];\n    long[] ones = new long[arr.length];\n  \
    \  int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = arr.length;\n\
    \    \n    while (i < m) {\n        if (arr[i] == 1) {\n            ones[k] =\
    \ 1;\n            k++;\n        }\n        else {\n            if (ones[k] ==\
    \ 0) {\n                result[l] = arr[i];\n                l++;\n          \
    \  }\n            else {\n                ones[k] = 0;\n                k++;\n\
    \            }\n        }\n        i++;\n    }\n    while (j < k) {\n        if\
    \ (ones[j] == 1) {\n            result[l] = arr[j];\n            l++;\n      \
    \  }\n        j++;\n    }\n    while (j < m) {\n        if (arr[j] == 1) {\n \
    \           result[l] = arr[j];\n            l++;\n        }\n        j++;\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not\
    \ an answer to the question. He wants to sort an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ Your solution sorts them according to decimal value.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to make it more clear. Thanks for pointing out.\n<|/ c |>\n<| c |>\n\
    Thanks for your efforts. I appreciate your efforts. But I already solved this\
    \ problem in another way. I am posting my answer below.\n<|/ c |>\n<| a |>\nI\
    \ solved this problem in another way. I am posting my answer below.\n<code>\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.stdio;",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    long[] count = new long[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        ones[i] = 1;\n\
    \        zeros[i] = 0;\n        count[i] = 0;\n    }\n    \n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        for(int j = 0; j < arr.length; j++)\n \
    \       {\n            if(arr[i] == arr[j])\n            {\n                count[i]++;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        for(int j = 0; j < arr.length; j++)\n        {\n            if(count[j]\
    \ == 1)\n            {\n                ones[i] += ones[j];\n                zeros[i]\
    \ += zeros[j];\n                count[j] = 0;\n            }\n        }\n    }\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = ones[i];\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = result[i] * pow(10, count[i]);\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = result[i] / pow(10, arr.length - count[i]);\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = arr[i] + result[i];\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        result[i] = result[i] % 10;\n    }\n    \n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        result[i] = result[i] / 10;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = result[i]\
    \ * pow(10, arr.length - count[i]);\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = result[i] / pow(10, arr.length - count[i]);\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = result[i] + arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        result[i] = result[i] % 10;\n    }\n    \n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        result[i] = result[i] / 10;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = result[i]\
    \ * pow(10, arr.length - count[i]);\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = result[i] / pow(10, arr.length - count[i]);\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = result[i] + arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        result[i] = result[i] % 10;\n    }\n    \n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        result[i] = result", "{\n    long[] result\
    \ = new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         ones++;\n        }\n        else\n        {\n            zeros++;\n\
    \        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(arr[i] == 1)\n        {\n            result[i] = ones;\n        }\n  \
    \      else\n        {\n            result[i] = zeros;\n        }\n    }\n   \
    \ \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i] > result[i+1])\n\
    \        {\n            long temp = result[i];\n            result[i] = result[i+1];\n\
    \            result[i+1] = temp;\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,c# |>\n<| c |>\nI like this solution,\
    \ although it does require a lot of extra memory and time.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I believe that it is more efficient than sorting a list\
    \ with binary search and inserting elements in the right position. Of course,\
    \ this is only true if the array is small.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I believe that it is more efficient than sorting a list with binary search\
    \ and inserting elements in the right position. Of course, this is only true if\
    \ the array is small.\n<|/ c |>\n<| c |>\nI agree with you, but I believe that\
    \ it is more efficient than sorting a list with binary search and inserting elements\
    \ in the right position. Of course, this is only true if the array is small.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I believe that it is more efficient than\
    \ sorting a list with binary search and inserting elements in the right position.\
    \ Of course, this is only true if the array is small.\n<|/ c |>\n<| a |>\n<code>\n\
    public static void SortArray(int[] arr)\n{\n    Array.Sort(arr);\n    Array.Sort(arr,\
    \ (a, b) => Compare(arr[a], arr[b]));\n}", "{\n    long ones = 0;\n    long twos\
    \ = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long\
    \ sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n\
    \    long tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long\
    \ ten_thousands = 0;\n    long hundred_thousands = 0;\n    long thousand_thousands\
    \ = 0;\n    long millions = 0;\n    long billions = 0;\n    long trillions = 0;\n\
    \    long quadrillions = 0;\n    long quintillions = 0;\n    long sextillions\
    \ = 0;\n    long septillions = 0;\n    long octillions = 0;\n    long nonillions\
    \ = 0;\n    long decillions = 0;\n    long undecillions = 0;\n    long duodecillions\
    \ = 0;\n    long tredecillions = 0;\n    long quattuordecillions = 0;\n    long\
    \ quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septenvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long vintillions = 0;\n    long unvintillions = 0;\n    long duovintillions\
    \ = 0;\n    long trevintillions = 0;\n    long quattuorvintillions = 0;\n    long\
    \ quinvintillions = 0;\n    long sexvintillions = 0;\n    long septenvintillions\
    \ = 0;\n    long octovintillions = 0;\n    long novemvintillions = 0;\n    long\
    \ quadrillion = 0;\n    long quintillion = 0;\n    long sextillion = 0;\n    long\
    \ septillion = 0;\n    long octillion = 0;\n    long nonillion = 0;\n    long\
    \ decillion = 0;\n    long undecillion = 0;", "{\n    long ones = 0;\n    long\
    \ twos = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives = 0;\n\
    \    long sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines\
    \ = 0;\n    long tens = 0;\n    long elevens = 0;\n    long twelves = 0;\n   \
    \ long thirteens = 0;\n    long fourteens = 0;\n    long fifteens = 0;\n    long\
    \ sixteens = 0;\n    long seventeens = 0;\n    long eighteens = 0;\n    long nineteens\
    \ = 0;\n    long twentys = 0;\n    long thirtys = 0;\n    long fortys = 0;\n \
    \   long fiftys = 0;\n    long sixtys = 0;\n    long seventys = 0;\n    long eightys\
    \ = 0;\n    long ninetys = 0;\n    long hundreds = 0;\n    long thousands = 0;\n\
    \    long millions = 0;\n    long billions = 0;\n    long trillions = 0;\n   \
    \ long quadrillions = 0;\n    long quintillions = 0;\n    long sextillions = 0;\n\
    \    long septillions = 0;\n    long octillions = 0;\n    long nonillions = 0;\n\
    \    long decillions = 0;\n    long undecillions = 0;\n    long duodecillions\
    \ = 0;\n    long tredecillions = 0;\n    long quattuordecillions = 0;\n    long\
    \ quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septenvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long vexvigintillions = 0;\n    long unvexvigintillions = 0;\n    long duovexvigintillions\
    \ = 0;\n    long trevexvigintillions = 0;\n    long quattuorvexvigintillions =\
    \ 0;\n    long quinvexvigintil", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \     {\n            ones++;\n        }\n        else\n        {\n           \
    \ zeros++;\n        }\n        if(arr[i] > max)\n        {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min)\n        {\n            min = arr[i];\n\
    \        }\n    }\n    long ones_count = ones;\n    long zeros_count = zeros;\n\
    \    long max_count = max;\n    long min_count = min;\n    for(int i = 0; i <\
    \ arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones_count\
    \ -= 1;\n        }\n        else\n        {\n            zeros_count -= 1;\n \
    \       }\n        if(ones_count > zeros_count)\n        {\n            result[i]\
    \ = ones_count;\n        }\n        else\n        {\n            result[i] = zeros_count;\n\
    \        }\n        if(result[i] > max_count)\n        {\n            max_count\
    \ = result[i];\n        }\n        if(result[i] < min_count)\n        {\n    \
    \        min_count = result[i];\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones_count += 1;\n\
    \        }\n        else\n        {\n            zeros_count += 1;\n        }\n\
    \        if(ones_count > zeros_count)\n        {\n            result[i] = ones_count;\n\
    \        }\n        else\n        {\n            result[i] = zeros_count;\n  \
    \      }\n        if(result[i] > max_count)\n        {\n            max_count\
    \ = result[i];\n        }\n        if(result[i] < min_count)\n        {\n    \
    \        min_count = result[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4};\n    int[] result\
    \ = new int[arr.length];\n    int ones = 0;\n    int zeros = 0;\n    int max =\
    \ 0;\n    int min = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] == 1) {\n            ones++;\n        } else {\n            zeros++;\n\
    \        }\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n  \
    \  int ones_count = ones;\n    int zeros_count = zeros;\n    int max_count = max;\n\
    \    int min_count = min;\n    for (int i = 0; i < arr.length; i++) {\n      \
    \  if (arr[i] == 1) {\n            ones_count -= 1;\n        } else {\n      \
    \      zeros_count -= 1;\n        }", "{\n    int n = arr.length;\n    long[]\
    \ result = new long[n];\n    long[] ones = new long[n];\n    long[] zeros = new\
    \ long[n];\n    \n    for (int i = 0; i < n; i++) {\n        ones[i] = 1;\n  \
    \      zeros[i] = 0;\n    }\n    \n    for (int i = 0; i < n; i++) {\n       \
    \ int count = 0;\n        for (int j = 0; j < n; j++) {\n            if (arr[j]\
    \ == ones[i]) {\n                count++;\n            }\n        }\n        \n\
    \        if (count == 0) {\n            result[i] = arr[i];\n        } else {\n\
    \            int index = count - 1;\n            while (index >= 0) {\n      \
    \          if (arr[index] > arr[index + 1]) {\n                    swap(arr, index,\
    \ index + 1);\n                }\n                index--;\n            }\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \            ones[i] = 1;\n        else\n            ones[i] = 0;\n    }\n   \
    \ \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n\
    \            result[i] = arr[i];\n        else\n            result[i] = 0;\n \
    \   }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n            zeros[i] = 0;\n        else\n            zeros[i] = 1;\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i]\
    \ == 1)\n            result[i] = arr[i];\n        else\n            result[i]\
    \ = zeros[i];\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n \
    \       if(arr[i] == 1)\n            ones[i] = 0;\n        else\n            ones[i]\
    \ = 1;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i]\
    \ == 1)\n            result[i] = arr[i];\n        else\n            result[i]\
    \ = ones[i];\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder how it compares to other solutions\
    \ posted so far.\n<|/ c |>\n<| c |>\nI added my own solution, which is very similar\
    \ to yours. I believe it to be the fastest solution. I am not sure if there are\
    \ any better solutions.\n<|/ c |>\n<| c |>\nI added my own solution, which is\
    \ very similar to yours. I believe it to be the fastest solution. I am not sure\
    \ if there are any better solutions.\n<|/ c |>\n<| c |>\nI added my own solution,\
    \ which is very similar to yours. I believe it to be the fastest solution. I am\
    \ not sure if there are any better solutions.\n<|/ c |>\n<| c |>\nI added my own\
    \ solution, which is very similar to yours. I believe it to be the fastest solution.\
    \ I am not sure if there are any better solutions.\n<|/ c |>\n<| a dscore=2 |>\n\
    I wrote a solution in Java that uses Arrays.sort and uses binary search to find\
    \ the correct place to insert the new element. \n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = new int[]{1, 5, 2, 3, 4};\n    int[] arr2 = new int[]{-2,\
    \ -3, -4, -5, -6};\n    int[] arr3 = new int[]{1, 0, 2, 3, 4", "{\n    long[]\
    \ result = new long[arr.length];\n    int[] count = new int[arr.length];\n   \
    \ \n    for (int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = count[arr[i]];\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n  \
    \  {\n        count[arr[i]]--;\n    }\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = count[arr[i]];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n   \
    \ int[] count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        result[i] = count[arr[i]];\n    }\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        count[arr[i]]--;\n    }\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        result[i] = count[arr[i]];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| c |>\nThis is not the correct\
    \ solution. Try it on `sort_array([1, 5, 2, 3, 4])`.\n<|/ c |>\n<| c |>\n: I tested\
    \ it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\ndef sort_array(arr):\n    counts = [0] * len(arr)\n    for x in\
    \ arr:\n        counts[x] += 1\n    sorted_arr = [None] * len(arr)\n    sorted_arr[:]\
    \ = arr[:]\n    sorted_arr.sort(key=lambda x:counts[x])\n    return sorted_arr\n\
    </code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| a dscore=1 |>\n<code>\ndef\
    \ sort_array(arr):\n    counts = [0] * len(arr)\n    for x in arr:\n        counts[x]\
    \ += 1\n    sorted_arr = [None] * len(arr)\n    sorted_arr[:] = arr[:]\n    sorted_arr.sort(key=lambda\
    \ x:counts[x])\n    return sorted_arr\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\ndef sort_array(arr):\n    counts = [0] * len(arr)\n\
    \    for x in arr:\n        counts[x] += 1\n    sorted_arr = [None] * len(arr)\n\
    \    sorted_arr[:] = arr[:]\n    sorted_arr.sort(key=lambda x:counts[x])\n   \
    \ return sorted_arr\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| a dscore=0\
    \ |>\n<code>\ndef sort_array(arr):\n    counts = [0] * len(arr)\n    for x in\
    \ arr:\n        counts[x] += 1\n    sorted_arr = [None] * len(arr)\n    sorted_arr[:]\
    \ = arr[:]\n    sorted_arr.sort(key=lambda x:", "{\n    long[] result = new long[arr.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while\
    \ (i < arr.length) \n    {\n        if (arr[i] == 1) \n        {\n           \
    \ result[k] = arr[i];\n            count++;\n            i++;\n        }\n   \
    \     else \n        {\n            if (count > 0) \n            {\n         \
    \       result[k] = arr[i - 1];\n                count--;\n            }\n   \
    \         else\n            {\n                result[k] = arr[j];\n         \
    \       count--;\n                j++;\n            }\n        }\n        k++;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    long[] count = new long[arr.length];\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] == 1)\n        {\n            ones[i] = 1;\n\
    \            count[i] = 1;\n        }\n        else\n        {\n            ones[i]\
    \ = 0;\n            count[i] = 0;\n        }\n    }\n    \n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (ones[i] == 0)\n        {\n        \
    \    zeros[i] = 1;\n        }\n        else\n        {\n            zeros[i] =\
    \ 0;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n\
    \        result[i] = count[i] * arr[arr.length - 1 - i];\n    }\n    \n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        result[i] += zeros[i];\n  \
    \  }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ += ones[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n\
    \        result[i] = std.math.min(result[i], arr[arr.length - 1 - i]);\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\ndef sort(arr):\n    arr1 = []\n    arr2 = []\n    arr3 = []\n  \
    \  arr4 = []\n    arr5 = []\n    arr6 = []\n    arr7 = []\n    arr8 = []\n   \
    \ arr9 = []\n    arr10 = []\n    arr11 = []\n    arr12 = []\n    arr13 = []\n\
    \    arr14 = []\n    arr15 = []\n    arr16 = []\n    arr17 = []\n    arr18 = []\n\
    \    arr19 = []\n    arr20 = []\n    arr21 = []\n    arr22 = []\n    arr23 = []\n\
    \    arr24 = []\n    arr25 = []\n    arr26 = []\n    arr27 = []\n    arr28 = []\n\
    \    arr29 = []\n    arr30 = []\n    arr31 = []\n    arr32 = []\n    arr33 = []\n\
    \    arr34 = []\n    arr35 = []\n    arr36 = []\n    arr37 = []\n    arr38 = []\n\
    \    arr39 = []\n    arr40 = []\n    arr41 = []\n    arr42 = []\n    arr43 = []\n\
    \    arr44 = []\n    arr45 = []\n    arr46 = []\n    arr47 = []\n    arr48 = []\n\
    \    arr49 = []\n    arr50 = []\n    arr5", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    long[] ones_counter = new long[arr.length];\n    long[] zeros_counter = new\
    \ long[arr.length];\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n  \
    \      ones[i] = 1;\n        zeros[i] = 0;\n        ones_counter[i] = 0;\n   \
    \     zeros_counter[i] = 0;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones_counter[i]++;\n \
    \       }\n        else\n        {\n            zeros_counter[i]++;\n        }\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones_counter[i]\
    \ > zeros_counter[i])\n        {\n            result[i] = ones[i];\n        }\n\
    \        else\n        {\n            result[i] = zeros[i];\n        }\n    }\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        ones[i] = 0;\n\
    \        zeros[i] = 0;\n        ones_counter[i] = 0;\n        zeros_counter[i]\
    \ = 0;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones_counter[i]++;\n        }\n        else\n\
    \        {\n            zeros_counter[i]++;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones_counter[i] > zeros_counter[i])\n\
    \        {\n            result[i] = ones[i];\n        }\n        else\n      \
    \  {\n            result[i] = zeros[i];\n        }\n    }\n    \n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        ones[i] = 0;\n        zeros[i] = 0;\n\
    \        ones_counter[i] = 0;\n        zeros_counter[i] = 0;\n    }\n    \n  \
    \  for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n     \
    \   {\n            ones_counter[i]++;\n        }\n        else\n        {\n  \
    \          zeros_counter[i]++;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ arr.length; i++)\n    {\n        if(ones_counter[i] > zeros_counter[i])\n  \
    \      {\n            result[i] = ones[i];\n        }\n        else\n        {\n\
    \            result[i] = zeros[i];\n        }\n    }\n    \n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        ones[i] = 0;\n        zeros[i] = 0;\n \
    \       ones_counter[i] = 0;\n        zeros_counter[i] = 0;\n    }\n    \n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n      \
    \  {\n            ones_counter[i]++;\n        }\n        else\n        {\n   \
    \         zeros_counter[i]++;\n        }\n    }\n    \n    ", "{\n    long[] result\
    \ = new long[arr.length];\n    int[] count = new int[arr.length];\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        result[i] = count[arr[i]];\n   \
    \ }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays,java\
    \ |>\n<| c |>\nThis is not the right solution. Try this array `[1, 1, 2, 3, 3,\
    \ 3]`. It should return `[1, 1, 2, 3, 3, 3]`, but your code returns `[1, 1, 2,\
    \ 3, 3, 2]`.\n<|/ c |>\n<| c |>\nThis is not the right solution. Try this array\
    \ `[1, 1, 2, 3, 3, 3]`. It should return `[1, 1, 2, 3, 3, 3]`, but your code returns\
    \ `[1, 1, 2, 3, 3, 2]`.\n<|/ c |>\n<| c |>\nThis is not the right solution. Try\
    \ this array `[1, 1, 2, 3, 3, 3]`. It should return `[1, 1, 2, 3, 3, 3]`, but\
    \ your code returns `[1, 1, 2, 3, 3, 2]`.\n<|/ c |>\n<| c |>\nThis is not the\
    \ right solution. Try this array `[1, 1, 2, 3, 3, 3]`. It should return `[1, 1,\
    \ 2, 3, 3, 3]`, but your code returns `[1, 1, 2, 3, 3, 2]`.\n<|/ c |>\n<| c |>\n\
    This is not the right solution. Try this array `[1, 1, 2, 3, 3, 3]`. It should\
    \ return `[1, 1, 2, 3, 3, 3]`, but your code returns `[1, 1, 2, 3, 3, 2]`.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result\
    \ = new long[arr.length];\n    long ones = 0;\n    long twos = 0;\n    long threes\
    \ = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n    long\
    \ sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens = 0;\n\
    \    long hundreds = 0;\n    long thousands = 0;\n    long ten_thousands = 0;\n\
    \    long hundred_thousands = 0;\n    long thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_thousands = 0;\n    long hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_", "{\n    long[] result\
    \ = new long[arr.length];\n    int[] count = new int[arr.length];\n    \n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n \
    \   \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i] = arr[i];\n\
    \    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (count[arr[i]]\
    \ > 1)\n        {\n            int j;\n            for (j = i; j < arr.length;\
    \ j++)\n            {\n                if (count[arr[j]] > 1)\n              \
    \  {\n                    int temp = arr[i];\n                    arr[i] = arr[j];\n\
    \                    arr[j] = temp;\n                }\n            }\n      \
    \  }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I appreciate your efforts, but this doesn't solve the problem. Your solution sorts\
    \ the array in descending order, but I need the array to be sorted in ascending\
    \ order. Also, I need to use only `std.array`, `std.algorithm`, `std.algorithm::sort`,\
    \ `std.array::sort`, `std.algorithm::less`, `std.array::sort::less`, and `std.algorithm::greater`.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that sorts the array\
    \ in ascending order. Also, I added a solution that sorts the array in descending\
    \ order. Hope it helps.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this\
    \ doesn't solve the problem. Your solution sorts the array in descending order,\
    \ but I need the array to be sorted in ascending order. Also, I need to use only\
    \ `std.array`, `std.algorithm`, `std.algorithm::sort`, `std.array::sort`, `std.algorithm::less`,\
    \ `std.array::sort::less`, and `std.algorithm::greater`.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution that sorts the array in ascending order.\
    \ Also, I added a solution that sorts the array in descending order. Hope it helps.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't solve the problem.\
    \ Your solution sorts the array in descending order, but I need the array to be\
    \ sorted in ascending order. Also, I need to use only `std.array`, `std.algorithm`,\
    \ `std.algorithm::sort`, `std.array::sort`, `std.algorithm::less`, `std.array::sort::less`,\
    \ and `std.algorithm::greater`.", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(arr[i] == 1)\n            ++ones;\n        else\n         \
    \   ++zeros;\n    }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(arr[i]\
    \ == 1)\n            result[i] = ones;\n        else\n            result[i] =\
    \ zeros;\n    }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(result[i]\
    \ > result[i+1])\n        {\n            long temp = result[i];\n            result[i]\
    \ = result[i+1];\n            result[i+1] = temp;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[arr.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    \n    while\
    \ (i < arr.length) \n    {\n        if (arr[i] == 1) \n        {\n           \
    \ count++;\n        }\n        else \n        {\n            if (count > 0) \n\
    \            {\n                result[k] = count;\n                k++;\n   \
    \             count = 0;\n            }\n            result[j] = arr[i];\n   \
    \         j++;\n        }\n        i++;\n    }\n    if (count > 0) \n    {\n \
    \       result[k] = count;\n        k++;\n    }\n    result[j] = arr[arr.length\
    \ - 1];\n    j++;\n    \n    for (int i = 0; i < arr.length; i++) \n    {\n  \
    \      arr[i] = result[i];\n    }\n    \n    return result;\n}\n</code>\n<|/ a\
    \ tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis is not an answer to the\
    \ question. OP wants to sort an array of non-negative integers according to number\
    \ of ones in their binary representation in ascending order.\n<|/ c |>\n<| c |>\n\
    The question was \"How to sort an array of non-negative integers according to\
    \ number of ones in their binary representation in ascending order?\" The answer\
    \ was \"sort an array of non-negative integers according to number of ones in\
    \ their binary representation in ascending order\"\n<|/ c |>\n<| c |>\nThe question\
    \ was \"How to sort an array of non-negative integers according to number of ones\
    \ in their binary representation in ascending order?\" The answer was \"sort an\
    \ array of non-negative integers according to number of ones in their binary representation\
    \ in ascending order\"\n<|/ c |>\n<| c |>\nThe question was \"How to sort an array\
    \ of non-negative integers according to number of ones in their binary representation\
    \ in ascending order?\" The answer was \"sort an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order\"\
    \n<|/ c |>\n<| c |>\nThe question was \"How to sort an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order?\"\
    \ The answer was \"sort an array of non-negative integers according to number\
    \ of ones in their binary representation in ascending order\"\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new\
    \ long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n\
    \    long min = 0;\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n        if(arr[i] >\
    \ max)\n        {\n            max = arr[i];\n        }\n        if(arr[i] < min)\n\
    \        {\n            min = arr[i];\n        }\n        sum += arr[i];\n   \
    \ }\n    long ones_count = ones;\n    long zeros_count = zeros;\n    long sum2\
    \ = sum;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] ==\
    \ 1)\n        {\n            ones_count --;\n        }\n        else\n       \
    \ {\n            zeros_count --;\n        }\n    }\n    long ones_count_2 = ones_count;\n\
    \    long zeros_count_2 = zeros_count;\n    long sum3 = sum2;\n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n       \
    \     ones_count_2 --;\n        }\n        else\n        {\n            zeros_count_2\
    \ --;\n        }\n    }\n    long ones_count_3 = ones_count_2;\n    long zeros_count_3\
    \ = zeros_count_2;\n    long sum4 = sum3;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones_count_3 --;\n\
    \        }\n        else\n        {\n            zeros_count_3 --;\n        }\n\
    \    }\n    long ones_count_4 = ones_count_3;\n    long zeros_count_4 = zeros_count_3;\n\
    \    long sum5 = sum4;\n    for(int i = 0; i < arr.length; i++)\n    {\n     \
    \   if(arr[i] == 1)\n        {\n            ones_count_4 --;\n        }\n    \
    \    else\n        {\n            zeros_count_4 --;\n        }\n    }\n    long\
    \ ones_count_5 = ones_count_4;\n    long zeros_count_5 = zeros_count_4;\n    long\
    \ sum6 = sum5;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones_count_5 --;\n        }\n        else\n  \
    \      {\n            zeros_count_5 --;\n        }\n    }\n    long ones_count_6\
    \ = ones_count_5;\n    long zeros_count_6 = zeros_count_5;\n    long sum7 = sum6;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \     {\n            ones_count_6 --;\n        }\n        else\n        {\n  \
    \          zeros_count_6 --;\n        }\n    }\n", "{\n    long[] result = new\
    \ long[arr.length];\n    long ones = 0;\n    long twos = 0;\n    long threes =\
    \ 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n    long\
    \ sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens = 0;\n\
    \    long elevens = 0;\n    long twelves = 0;\n    long thirteens = 0;\n    long\
    \ fourteens = 0;\n    long fifteens = 0;\n    long sixteens = 0;\n    long seventeens\
    \ = 0;\n    long eighteens = 0;\n    long nineteens = 0;\n    long twentys = 0;\n\
    \    long thirtys = 0;\n    long fortys = 0;\n    long fiftys = 0;\n    long sixtys\
    \ = 0;\n    long seventys = 0;\n    long eightys = 0;\n    long ninetys = 0;\n\
    \    long hundreds = 0;\n    long thousands = 0;\n    long tenthousands = 0;\n\
    \    long hundredthousands = 0;\n    long millions = 0;\n    long billions = 0;\n\
    \    long trillions = 0;\n    long quadrillions = 0;\n    long quintillions =\
    \ 0;\n    long sextillions = 0;\n    long septillions = 0;\n    long octillions\
    \ = 0;\n    long nonillions = 0;\n    long decillions = 0;\n    long undecillions\
    \ = 0;\n    long duodecillions = 0;\n    long tredecillions = 0;\n    long quattuordecillions\
    \ = 0;\n    long quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septemvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long triginta = 0;\n    long untriginta = 0;\n    long duotriginta = 0;\n \
    \   long tretriginta = 0;\n    long quattuortriginta = 0;\n    ", "{\n    long[]\
    \ result = new long[arr.length];\n    long[] ones = new long[arr.length];\n  \
    \  long[] zeros = new long[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n            ones[i] = 1;\n        else\n\
    \            ones[i] = 0;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(ones[i] == 1)\n            result[i] = arr[i];\n        else\n\
    \            result[i] = 0;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n            zeros[i] = 0;\n        else\n   \
    \         zeros[i] = 1;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(ones[i] == 1)\n            result[i] = arr[i];\n        else\n\
    \            result[i] = zeros[i];\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,algorithm |>\n<| c |>\nThe first two loops could be\
    \ replaced with `result = arr;`\n<|/ c |>\n<| c |>\nYes, but then you lose the\
    \ original ordering.\n<|/ c |>\n<| c |>\nYes, but then you lose the original ordering.\n\
    <|/ c |>\n<| c |>\nYes, but then you lose the original ordering.\n<|/ c |>\n<|\
    \ c |>\nYes, but then you lose the original ordering.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\ndef sort_array(arr):\n    sorted_arr = []\n    ones = 0\n    zeros\
    \ = 0\n    \n    for i in range(len(arr)):\n        if arr[i] == 1:\n        \
    \    ones += 1\n        else:\n            zeros += 1\n    \n    sorted_arr.append(ones)\n\
    \    sorted_arr.append(zeros)\n    \n    for i in range(len(arr)):\n        if\
    \ arr[i] == 1:\n            sorted_arr.append(arr[i])\n        else:\n       \
    \     sorted_arr.append(zeros)\n    \n    sorted_arr.sort()\n    \n    return\
    \ sorted_arr\n</code>\n<|/ a tags=sorting,arrays,algorithm |>\n<| a dscore=1 |>\n\
    <code>\ndef sort_array(arr):\n    sorted_arr = []\n    ones = 0\n    zeros = 0\n\
    \    \n    for i in range(len(arr)):\n        if arr[i] == 1:\n            ones\
    \ += 1\n        else:\n            zeros += 1\n    \n    sorted_arr.append(ones)\n\
    \    sorted_arr.append(zeros)\n    \n    for i in range(len(arr)):\n        if\
    \ arr[i] == 1:\n            sorted_arr.append(arr[i])\n        else:\n       \
    \     sorted_arr.append(zeros)\n    \n    sorted_arr.sort()\n    \n    return\
    \ sorted_", "{\n    long[] result = new long[arr.length];\n    int pos = 0;\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 0)\n   \
    \     {\n            result[pos++] = i;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < arr.length; ++i)\n    {\n        int j = i;\n        while(j > 0 &&\
    \ arr[j-1] == 0)\n        {\n            result[pos++] = j--;\n        }\n   \
    \     \n        if(arr[j-1] != 0)\n        {\n            int k = j;\n       \
    \     while(k >= 0 && arr[k] == 0)\n            {\n                result[pos++]\
    \ = k--;\n            }\n            \n            int m = k;\n            while(m\
    \ >= 0 && arr[m-1] == 0)\n            {\n                result[pos++] = m--;\n\
    \            }\n            \n            int n = m;\n            while(n > 0\
    \ && arr[n-1] == 0)\n            {\n                result[pos++] = n--;\n   \
    \         }\n        }\n    }\n    \n    for(int i = 0; i < pos; ++i)\n    {\n\
    \        result[i] = arr[pos];\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI believe this fails for `sort_array([1, 0, 2, 3, 4])` which\
    \ should return `[0, 1, 2, 3, 4]`.\n<|/ c |>\n<| c |>\nYes, you are right. I've\
    \ fixed the code now. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI believe\
    \ this fails for `sort_array([1, 0, 2, 3, 4])` which should return `[0, 1, 2,\
    \ 3, 4]`.\n<|/ c |>\n<| c |>\nI believe this fails for `sort_array([1, 0, 2, 3,\
    \ 4])` which should return `[0, 1, 2, 3, 4]`.\n<|/ c |>\n<| c |>\nI believe this\
    \ fails for `sort_array([1, 0, 2, 3, 4])` which should return `[0, 1, 2, 3, 4]`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nfunction sortArray(inputArray) {\n    var\
    \ outputArray = [];\n    var counter = 0;\n    var counter2 = 0;\n    var counter3\
    \ = 0;\n    var counter4 = 0;\n    var counter5 = 0;\n    var counter6 = 0;\n\
    \    var counter7 = 0;\n    var counter8 = 0;\n    var counter9 = 0;\n    var\
    \ counter10 = 0;\n    var counter11 = 0;\n    var counter12 = 0;\n    var counter13\
    \ = 0;\n    var counter14 = 0;\n    var counter15 = 0;\n    var counter16 = 0;\n\
    \    var counter17 = 0;\n    var counter18 = 0;\n    var counter19 = 0;\n    var\
    \ counter20 = 0;\n    var counter21 = 0;\n    var counter22 = 0;\n    var counter23\
    \ = 0;\n    var counter24 = 0;\n    var counter25 = 0;\n    var counter26 = 0;\n\
    \    var counter", "{\n    long[] result = new long[arr.length];\n    int i =\
    \ 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int\
    \ n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n   \
    \ int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n\
    \    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n\
    \    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g", "{\n    long[] result\
    \ = new long[arr.length];\n    long[] ones = new long[arr.length];\n    long[]\
    \ zeros = new long[arr.length];\n    long[] tmp = new long[arr.length];\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        ones[i] = 1;\n      \
    \  zeros[i] = 0;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        tmp[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(tmp[i] > 0)\n        {\n            for(int j = i; j < arr.length;\
    \ j++)\n            {\n                if(tmp[j] > 0)\n                {\n   \
    \                 if(ones[j] == 1)\n                    {\n                  \
    \      ones[j] = 0;\n                        tmp[j] = 0;\n                   \
    \ }\n                    else\n                    {\n                       \
    \ ones[j] = 1;\n                        tmp[j] = tmp[j] - 1;\n               \
    \     }\n                }\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(tmp[i] > 0)\n        {\n    \
    \        for(int j = i; j < arr.length; j++)\n            {\n                if(tmp[j]\
    \ > 0)\n                {\n                    if(ones[j] == 1)\n            \
    \        {\n                        ones[j] = 0;\n                        tmp[j]\
    \ = 0;\n                    }\n                    else\n                    {\n\
    \                        ones[j] = 1;\n                        tmp[j] = tmp[j]\
    \ - 1;\n                    }\n                }\n            }\n        }\n \
    \   }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(tmp[i]\
    \ > 0)\n        {\n            for(int j = i; j < arr.length; j++)\n         \
    \   {\n                if(tmp[j] > 0)\n                {\n                   \
    \ if(ones[j] == 1)\n                    {\n                        ones[j] = 0;\n\
    \                        tmp[j] = 0;\n                    }\n                \
    \    else\n                    {\n                        ones[j] = 1;\n     \
    \                   tmp[j] = tmp[j] - 1;\n                    }\n            \
    \    }\n            }\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(tmp[i] > 0)\n        {\n            for(int j = i; j\
    \ < arr.length; j++)\n            {\n                if(tmp[j] > 0)\n        \
    \        {\n                    if(ones[j] == 1)\n                    {\n    \
    \                    ones[j] = 0;\n                        tmp[j] = 0;\n     \
    \               }\n                    else\n                    {\n         \
    \               ones[j] = 1;\n                        tmp[j] = tmp[j] - 1;\n \
    \                   }\n                }\n            }\n        }\n    }\n  \
    \  \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(tmp[i] > 0)\n\
    \        {\n            for(int j = i; j < arr.length; j++)\n            {\n \
    \               if(tmp[j] > 0)\n                {\n                    if(ones[j]\
    \ == 1)\n                    {\n                        ones[j] = 0;\n       \
    \                 tmp[j] = 0;\n                    }\n                    else\n\
    \                    {", "{\n    long[] result = new long[arr.length];\n    long\
    \ ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours = 0;\n \
    \   long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long eights\
    \ = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n    long\
    \ thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands = 0;\n\
    \    long thousand_thousands = 0;\n    long ones_thousands = 0;\n    long ones_hundreds\
    \ = 0;\n    long ones_tens = 0;\n    long ones_fives = 0;\n    long ones_twos\
    \ = 0;\n    long ones_ones = 0;\n    long ones_zeros = 0;\n    long twos_ones\
    \ = 0;\n    long twos_zeros = 0;\n    long threes_ones = 0;\n    long threes_zeros\
    \ = 0;\n    long fours_ones = 0;\n    long fours_zeros = 0;\n    long fives_ones\
    \ = 0;\n    long fives_zeros = 0;\n    long sixes_ones = 0;\n    long sixes_zeros\
    \ = 0;\n    long sevens_ones = 0;\n    long sevens_zeros = 0;\n    long eights_ones\
    \ = 0;\n    long eights_zeros = 0;\n    long nines_ones = 0;\n    long nines_zeros\
    \ = 0;\n    long tens_ones = 0;\n    long tens_zeros = 0;\n    long hundreds_ones\
    \ = 0;\n    long hundreds_zeros = 0;\n    long thousands_ones = 0;\n    long thousands_zeros\
    \ = 0;\n    long ten_thousands_ones = 0;\n    long ten_thousands_zeros = 0;\n\
    \    long hundred_thousands_ones = 0;\n    long hundred_thousands_zeros = 0;\n\
    \    long thousand_thousands_ones = 0;\n    long thousand_thousands_zeros = 0;\n\
    \    long ones_thousands_ones = 0;\n    long ones_thousands_zeros = 0;\n    long\
    \ ones_hundreds_ones = 0;\n    long ones_hundreds_zeros = 0;\n    long ones_tens_ones\
    \ = 0;\n    long ones_tens_zeros = 0;\n    long ones_fives_ones = 0;\n    long\
    \ ones_fives_zeros = 0;\n    long ones_twos_ones = 0;\n    long ones_twos_zeros\
    \ = 0;\n    long ones_ones_ones = 0;\n    long ones_ones_zeros = 0;\n    long\
    \ twos_ones_ones = 0;\n    long twos_ones_zero", "{\n    long[] result = new long[arr.length];\n\
    \    int[] count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        result[i] = count[arr[i]];\n    }\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        count[arr[i]]--;\n    }\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        result[i] = count[arr[i]];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,c# |>\n<| c |>\nI believe this\
    \ solution is O(n^2) in the worst case (when all elements are equal).\n<|/ c |>\n\
    <| c |>\nYes, it is. But it can be optimized a little bit. I'll add an optimized\
    \ version to my answer.\n<|/ c |>\n<| c |>\nI believe this solution is O(n^2)\
    \ in the worst case (when all elements are equal).\n<|/ c |>\n<| c |>\nYes, it\
    \ is. But it can be optimized a little bit. I'll add an optimized version to my\
    \ answer.\n<|/ c |>\n<| c |>\nI believe this solution is O(n^2) in the worst case\
    \ (when all elements are equal).\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static\
    \ void SortArray(int[] arr)\n{\n    int[] count = new int[arr.Length];\n    for\
    \ (int i = 0; i < arr.Length; i++)\n    {\n        count[arr[i]]++;\n    }", "{\n\
    \    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long maxOnes = 0;\n    long maxOnesIndex = 0;\n    long maxOnesValue = 0;\n\
    \    long maxOnesValueIndex = 0;\n    long maxOnesValueValue = 0;\n    long maxOnesValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;\n    long maxOnesValueValueValueValue = 0;\n    long maxOnesValueValueValueIndex\
    \ = 0;", "{\n    long[] result = new long[arr.length];\n    long[] ones = new\
    \ long[arr.length];\n    long[] zeros = new long[arr.length];\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n            ones[i]\
    \ = 1;\n        else\n            ones[i] = 0;\n    }\n    \n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(ones[i] == 0)\n            zeros[i]\
    \ = 1;\n        else\n            zeros[i] = 0;\n    }\n    \n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[arr.length - 1 - i];\n        else\n            result[i] = arr[arr.length\
    \ - 1 - i] - arr[arr.length - 1 - i] * ones[i];\n    }\n    \n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        if(zeros[i] == 1)\n            result[i]\
    \ = arr[arr.length - 1 - i];\n        else\n            result[i] = arr[arr.length\
    \ - 1 - i] - arr[arr.length - 1 - i] * ones[i];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| c |>\nThis doesn't work\
    \ if the array is all zeroes. You will get `[0,0,0,0,0]` as the result.\n<|/ c\
    \ |>\n<| c |>\nI didn't get your point. Can you please explain more?\n<|/ c |>\n\
    <| c |>\nThe OP wants to sort an array of non-negative integers according to number\
    \ of ones in their binary representation in ascending order. Your code doesn't\
    \ do that.\n<|/ c |>\n<| c |>\nI didn't get your point. Can you please explain\
    \ more?\n<|/ c |>\n<| c |>\nThe OP wants to sort an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ Your code doesn't do that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4};\n    Arrays.sort(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array is all zeroes. You will get `[0,0,0,0,0]`\
    \ as the result.\n<|/ c |>\n<| c |>\nThis doesn't work if the array is all zeroes.\
    \ You will get `[0,0,0,0,0]` as the result.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the array is all zeroes. You will get `[0,0,0,0,0]` as the result.\n", "{\n\
    \    long[] result = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        int count = 0;\n        for(int j = 0; j < arr.length;\
    \ ++j)\n        {\n            if(arr[j] == 1)\n            {\n              \
    \  ++count;\n            }\n        }\n        result[i] = count;\n    }\n   \
    \ for(int i = 0; i < arr.length; ++i)\n    {\n        int count = 0;\n       \
    \ for(int j = 0; j < arr.length; ++j)\n        {\n            if(arr[j] == 1)\n\
    \            {\n                ++count;\n            }\n        }\n        result[i]\
    \ = count;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on `sort_array([1, 5, 2,\
    \ 3, 4])`\n<|/ c |>\n<| c |>\nYes, it doesn't. Try it on `sort_array([-2, -3,\
    \ -4, -5, -6])`\n<|/ c |>\n<| c |>\nYes, it does. Try it on `sort_array([1, 0,\
    \ 2, 3, 4])`\n<|/ c |>\n<| c |>\nIt doesn't work for `sort_array([1, 5, 2, 3,\
    \ 4])` because `sort_array` returns `[1, 5, 2, 3, 4]` and not `[0, 1, 2, 3, 4]`\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it on `sort_array([1, 0, 2, 3, 4])`\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long result = 0;\n\
    \    long temp = 0;\n    long ones = 0;\n    long twos = 0;\n    long threes =\
    \ 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n    long\
    \ sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens = 0;\n\
    \    long elevens = 0;\n    long twelves = 0;\n    long thirteens = 0;\n    long\
    \ fourteens = 0;\n    long fifteens = 0;\n    long sixteens = 0;\n    long seventeens\
    \ = 0;\n    long eighteens = 0;\n    long nineteens = 0;\n    long twentys = 0;\n\
    \    long thirtys = 0;\n    long fortys = 0;\n    long fiftys = 0;\n    long sixtys\
    \ = 0;\n    long seventys = 0;\n    long eightys = 0;\n    long ninetys = 0;\n\
    \    long hundreds = 0;\n    long thousands = 0;\n    long tenthousands = 0;\n\
    \    long hundredthousands = 0;\n    long millions = 0;\n    long billions = 0;\n\
    \    long trillions = 0;\n    long quadrillions = 0;\n    long quintillions =\
    \ 0;\n    long sextillions = 0;\n    long septillions = 0;\n    long octillions\
    \ = 0;\n    long nonillions = 0;\n    long decillions = 0;\n    long undecillions\
    \ = 0;\n    long duodecillions = 0;\n    long tredecillions = 0;\n    long quattuordecillions\
    \ = 0;\n    long quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septenvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorv", "{\n    long[] result\
    \ = new long[arr.length];\n    long ones = 0;\n    long twos = 0;\n    long threes\
    \ = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n    long\
    \ sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens = 0;\n\
    \    long hundreds = 0;\n    long thousands = 0;\n    long ten_thousands = 0;\n\
    \    long hundred_thousands = 0;\n    long thousand_thousands = 0;\n    long ten_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousands = 0;\n    long thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousands = 0;\n    long ten_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousands = 0;\n    long\
    \ hundred_thousand_thousand_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousands =\
    \ 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n", "{\n    long[] result = new long[arr.length];\n    long[] ones = new\
    \ long[arr.length];\n    long[] zeros = new long[arr.length];\n    \n    for(int\
    \ i = 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n            ones[i]\
    \ = 1;\n        else\n            ones[i] = 0;\n    }\n    \n    for(int i = 0;\
    \ i < arr.length; ++i)\n    {\n        long sum = 0;\n        for(int j = 0; j\
    \ < ones.length; ++j)\n            sum += ones[j];\n        \n        if(sum >\
    \ 0)\n        {\n            result[i] = sum;\n        }\n        else\n     \
    \   {\n            long sum2 = 0;\n            for(int j = 0; j < ones.length;\
    \ ++j)\n                sum2 += ones[j] * ones[j];\n            \n           \
    \ if(sum2 > 0)\n            {\n                result[i] = (long)Math.sqrt(sum2);\n\
    \            }\n            else\n            {\n                long sum3 = 0;\n\
    \                for(int j = 0; j < ones.length; ++j)\n                    sum3\
    \ += ones[j] * ones[j] * ones[j];\n                \n                if(sum3 >\
    \ 0)\n                {\n                    result[i] = (long)Math.sqrt(sum3);\n\
    \                }\n                else\n                {\n                \
    \    result[i] = arr[i];\n                }\n            }\n        }\n    }\n\
    \    \n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(result[i] <\
    \ 0)\n        {\n            result[i] = -result[i];\n        }\n    }\n    \n\
    \    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer.\
    \ Your solution is very good, but I cannot use any external libraries. I should\
    \ implement it myself.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use\
    \ any external libraries.\n<|/ c |>\n<| a tags=sorting,algorithm,arrays |>\nI\
    \ believe this can be solved using two passes over the array. First pass is to\
    \ count the number of 1's in the array. Second pass is to sort the array based\
    \ on the number of 1's in the array.\n<code>\ndef sort_array(arr):\n    counts\
    \ = [0] * len(arr)\n    for num in arr:\n        counts[num] += 1\n    \n    sorted_arr\
    \ = []\n    \n    for num in arr:\n        sorted_arr.append(num)\n    \n    for\
    \ num in counts:\n        sorted_arr.sort(key=lambda x:counts[x])\n    \n    return\
    \ sorted_arr\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Your\
    \ solution is very good, but I cannot use any external libraries. I should implement\
    \ it myself.\n<|/ c |>\n<| a dscore=2 |>\n", "{\n    long[] result = new long[arr.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = arr.length;\n   \
    \ \n    while(i < n) {\n        while(j < n) {\n            if(arr[j] == 0) {\n\
    \                j++;\n            } else {\n                k++;\n          \
    \      result[k] = arr[j];\n                j++;\n            }\n        }\n \
    \       while(j < n) {\n            if(arr[j] == 1) {\n                j++;\n\
    \            } else {\n                k++;\n                result[k] = arr[j];\n\
    \                j++;\n            }\n        }\n        i++;\n        j = 0;\n\
    \        k = 0;\n    }\n    \n    for(int i = 0; i < result.length; i++) {\n \
    \       result[i] = result[i] ^ 0xffffffffffffffffL;\n    }\n    \n    return\
    \ result;\n}", "{\n    long[] result = new long[arr.length];\n    int[] count\
    \ = new int[arr.length];\n    for(int i = 0; i < arr.length; i++)\n    {\n   \
    \     count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(count[arr[i]] > 1)\n        {\n            int j = 0;\n   \
    \         while(j < i)\n            {\n                if(count[arr[j]] > 1)\n\
    \                {\n                    int temp = arr[i];\n                 \
    \   arr[i] = arr[j];\n                    arr[j] = temp;\n                   \
    \ i++;\n                    j++;\n                }\n                else\n  \
    \              {\n                    break;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if the array contains negative numbers. I believe it should, though.\n\
    <|/ c |>\n<| c |>\nIt works fine for me. Try it yourself. It sorts negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work for negative numbers.\
    \ Try it yourself. It sorts negative numbers as well.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it doesn't work for negative numbers. Try it yourself. It sorts negative\
    \ numbers as well.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work for negative\
    \ numbers. Try it yourself. It sorts negative numbers as well.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\npublic class Solution {\n    public static void main(String[]\
    \ args) {\n        int[] arr = {1, 5, 2, 3, 4};\n        System.out.println(Arrays.toString(sort(arr)));\n\
    \    }", "{\n    int n = arr.length;\n    long[] res = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        int count = 0;\n        for(int j = 0; j\
    \ < n; j++)\n        {\n            if(arr[j] == 1)\n            {\n         \
    \       count++;\n            }\n        }\n        res[i] = count;\n    }\n \
    \   Arrays.sort(res);\n    return res;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not the best solution. Sorting algorithm is O(nlogn) but\
    \ your solution has O(n^2) complexity. Sorting algorithm is O(nlogn) but your\
    \ solution has O(n^2) complexity.\n<|/ c |>\n<| c |>\nYes, you are right. Sorting\
    \ algorithm is O(nlogn) but your solution has O(n^2) complexity. Sorting algorithm\
    \ is O(nlogn) but your solution has O(n^2) complexity.\n<|/ c |>\n<| c |>\nSorting\
    \ algorithm is O(nlogn) but your solution has O(n^2) complexity. Sorting algorithm\
    \ is O(nlogn) but your solution has O(n^2) complexity.\n<|/ c |>\n<| c |>\nSorting\
    \ algorithm is O(nlogn) but your solution has O(n^2) complexity. Sorting algorithm\
    \ is O(nlogn) but your solution has O(n^2) complexity.\n<|/ c |>\n<| c |>\nSorting\
    \ algorithm is O(nlogn) but your solution has O(n^2) complexity. Sorting algorithm\
    \ is O(nlogn) but your solution has O(n^2) complexity.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 5,\
    \ 2, 3, 4};\n    System.out.println(Arrays.toString(sort(arr)));\n}", "{\n   \
    \ long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    long[] ones_counter = new long[arr.length];\n\
    \    long[] zeros_counter = new long[arr.length];\n    \n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        ones[i] = 0;\n        zeros[i] = 0;\n   \
    \     ones_counter[i] = 0;\n        zeros_counter[i] = 0;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         ones_counter[i]++;\n        }\n        else\n        {\n           \
    \ zeros_counter[i]++;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(ones_counter[i] > zeros_counter[i])\n        {\n   \
    \         result[i] = 1;\n            ones_counter[i] = 0;\n        }\n      \
    \  else\n        {\n            result[i] = 0;\n            zeros_counter[i] =\
    \ 0;\n        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(ones_counter[i] > zeros_counter[i])\n        {\n            result[i]\
    \ = 1;\n            ones_counter[i] = 0;\n        }\n        else\n        {\n\
    \            result[i] = 0;\n            zeros_counter[i] = 0;\n        }\n  \
    \  }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones_counter[i]\
    \ > zeros_counter[i])\n        {\n            result[i] = 1;\n            ones_counter[i]\
    \ = 0;\n        }\n        else\n        {\n            result[i] = 0;\n     \
    \       zeros_counter[i] = 0;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ arr.length; i++)\n    {\n        if(ones_counter[i] > zeros_counter[i])\n  \
    \      {\n            result[i] = 1;\n            ones_counter[i] = 0;\n     \
    \   }\n        else\n        {\n            result[i] = 0;\n            zeros_counter[i]\
    \ = 0;\n        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(ones_counter[i] > zeros_counter[i])\n        {\n            result[i]\
    \ = 1;\n            ones_counter[i] = 0;\n        }\n        else\n        {\n\
    \            result[i] = 0;\n            zeros_counter[i] = 0;\n        }\n  \
    \  }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones_counter[i]\
    \ > zeros_counter[i])\n        {\n            result[i] = 1;\n            ones_counter[i]\
    \ = 0;\n        }\n        else\n        {\n            result[i] = 0;\n     \
    \       zeros_counter[i] = 0;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ arr.length; i++)\n    {\n        if(ones_counter[i] > zeros_counter[i])\n  \
    \      {\n            result[i] = 1;\n            ones_counter[i] = 0;\n     \
    \   }", "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n  \
    \  long twos = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives =\
    \ 0;\n    long sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long\
    \ nines = 0;\n    long tens = 0;\n    long elevens = 0;\n    long twelves = 0;\n\
    \    long thirteens = 0;\n    long fourteens = 0;\n    long fifteens = 0;\n  \
    \  long sixteens = 0;\n    long seventeens = 0;\n    long eighteens = 0;\n   \
    \ long nineteens = 0;\n    long twentys = 0;\n    long thirtys = 0;\n    long\
    \ fortys = 0;\n    long fiftys = 0;\n    long sixtys = 0;\n    long seventys =\
    \ 0;\n    long eightys = 0;\n    long ninetys = 0;\n    long hundreds = 0;\n \
    \   long thousands = 0;\n    long millions = 0;\n    long billions = 0;\n    long\
    \ trillions = 0;\n    long quadrillions = 0;\n    long quintillions = 0;\n   \
    \ long sextillions = 0;\n    long septillions = 0;\n    long octillions = 0;\n\
    \    long nonillions = 0;\n    long decillions = 0;\n    long undecillions = 0;\n\
    \    long duodecillions = 0;\n    long tredecillions = 0;\n    long quattuordecillions\
    \ = 0;\n    long quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septenvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long triginta = 0;\n    long untriginta = 0;\n    long duotriginta = 0;\n \
    \   long tretriginta = 0;\n    long quattuortriginta = 0;\n    long quintriginta\
    \ = 0;\n    long sextriginta = 0;\n", "{\n    long[] result = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n    \
    \    for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j] ==\
    \ 1)\n            {\n                count++;\n            }\n        }\n    \
    \    result[i] = count;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,arrays,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long result[] = new long[arr.length];\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = 0;\n       \
    \ for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j] == 1)\n\
    \            {\n                result[i]++;\n                break;\n       \
    \     }\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n  \
    \      if(result[i] > 0)\n        {\n            int temp = result[i];\n     \
    \       result[i] = result[i] % 10;\n            result[temp] = i;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        arr[i] = arr[result[i]];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1, 5, 2, 3, 4])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([-2, -3, -4, -5, -6])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1, 0, 2, 3, 4])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1, 0, 2, 3, 4])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1, 5, 2, 3, 4])`.\n\
    <|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic static void\
    \ main(String[] args) {\n    int[] arr = new int[]{1, 5, 2, 3, 4};\n    int[]\
    \ result = new int[arr.length];\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        result[i] = 0;\n        for(int j = 0; j < arr.length; j++)\n   \
    \     {\n            if(arr[j] == 1)\n            {\n                result[i]++;\n\
    \                break;\n            }\n        }\n    }\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(result[i] > 0)\n        {\n          \
    \  int temp = result[i];\n            result[i] = result[i] % 10;\n          \
    \  result[temp] = i;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        arr[i] = arr[result[i]];\n    }\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1,\
    \ 5, 2, 3, 4])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([-2,\
    \ -3, -4, -5, -6])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1,\
    \ 0, 2, 3, 4])`.\n<|/ c |>\n<| c ", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    for(int i = 0;\
    \ i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  ones++;\n        }\n        else\n        {\n            zeros++;\n       \
    \ }\n        if(ones > zeros)\n        {\n            max = ones;\n        }\n\
    \        else\n        {\n            max = zeros;\n        }\n        result[i]\
    \ = max;\n    }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones--;\n        }\n        else\n        {\n\
    \            zeros--;\n        }\n        if(ones > zeros)\n        {\n      \
    \      max = ones;\n        }\n        else\n        {\n            max = zeros;\n\
    \        }\n        result[i] = max;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis solution does not work for negative numbers.\
    \ Try it with `sort_array([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9])`\n<|/ c |>\n<| c |>\nI didn't test it on negative numbers.\
    \ I tested it on positive numbers. I believe it works.\n<|/ c |>\n<| c |>\nI tested\
    \ it on negative numbers. I believe it works.\n<|/ c |>\n<| c |>\nI tested it\
    \ on negative numbers. I believe it works.\n<|/ c |>\n<| c |>\nI tested it on\
    \ negative numbers. I believe it works.\n<|/ c |>\n<| a tags=algorithm,sorting,arrays\
    \ |>\nI believe this can be solved using radix sort.\nRadix sort is basically\
    \ a sorting algorithm that sorts numbers in base 10 or base 2. \nThe idea is to\
    \ convert each number to a base 10 representation and sort them in base 10. \n\
    The base 10 representation is simply the binary representation of the number.\
    \ \nThe base 2 representation is simply the decimal representation of the number.\
    \ \nThe base 10 representation is simply the binary representation of the number\
    \ in base 10. \nThe base 2 representation is simply the decimal representation\
    \ of the number in base 10. \nThe base 10 representation is simply the binary\
    \ representation of the number in base 10. \nThe base 2 representation is simply\
    \ the decimal representation of the number in base 10. \nThe base 10 representation\
    \ is simply the binary representation of the number in base 10. \nThe base 2 representation\
    \ is simply the decimal representation of the number in base 10. \nThe base 10\
    \ representation is simply the binary representation of the number in base 10.\
    \ \n", "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n   \
    \ long twos = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives =\
    \ 0;\n    long sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long\
    \ nines = 0;\n    long tens = 0;\n    long elevens = 0;\n    long twelves = 0;\n\
    \    long thirteens = 0;\n    long fourteens = 0;\n    long fifteens = 0;\n  \
    \  long sixteens = 0;\n    long seventeens = 0;\n    long eighteens = 0;\n   \
    \ long nineteens = 0;\n    long twentys = 0;\n    long thirtys = 0;\n    long\
    \ fortys = 0;\n    long fiftys = 0;\n    long sixtys = 0;\n    long seventys =\
    \ 0;\n    long eightys = 0;\n    long ninetys = 0;\n    long hundreds = 0;\n \
    \   long thousands = 0;\n    long millions = 0;\n    long billions = 0;\n    long\
    \ trillions = 0;\n    long quadrillions = 0;\n    long quintillions = 0;\n   \
    \ long sextillions = 0;\n    long septillions = 0;\n    long octillions = 0;\n\
    \    long nonillions = 0;\n    long decillions = 0;\n    long undecillions = 0;\n\
    \    long duodecillions = 0;\n    long tredecillions = 0;\n    long quattuordecillions\
    \ = 0;\n    long quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septemvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long triginta = 0;\n    long untriginta = 0;\n    long duotriginta = 0;\n \
    \   long tretriginta = 0;\n    long quattuortriginta = 0;\n    long quintriginta\
    \ = 0;\n    long sextriginta = 0;", "{\n    int n = arr.length;\n    long[] result\
    \ = new long[n];\n    int[] count = new int[n];\n    \n    for (int i = 0; i <\
    \ n; i++) {\n        count[arr[i]]++;\n    }\n    \n    for (int i = 0; i < n;\
    \ i++) {\n        result[i] = 0;\n        for (int j = 0; j < count[i]; j++) {\n\
    \            result[i] += (long)j;\n        }\n    }\n    \n    for (int i = 0;\
    \ i < n; i++) {\n        result[i] /= count[i];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long twos\
    \ = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long\
    \ sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n\
    \    long tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long\
    \ ten_thousands = 0;\n    long hundred_thousands = 0;\n    long thousand_thousands\
    \ = 0;\n    long ten_thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousands = 0;\n    long ten_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousands = 0;\n    long\
    \ ten_thousand_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n  \
    \  long hundred_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long thousand_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n", "{\n    long ones = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ temp = 0;\n    long result = 0;\n    for(int i = 0; i < arr.length; i++){\n\
    \        ones += arr[i];\n        if(ones > max){\n            max = ones;\n \
    \       }\n        if(ones < min){\n            min = ones;\n        }\n    }\n\
    \    for(int i = 0; i < arr.length; i++){\n        temp = arr[i];\n        arr[i]\
    \ = 0;\n        for(int j = 0; j < arr.length; j++){\n            if(arr[j] ==\
    \ 0){\n                arr[j] = temp;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++){\n        result += arr[i];\n    }\n    for(int\
    \ i = 0; i < arr.length; i++){\n        arr[i] = result % 10;\n        result\
    \ /= 10;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ * -1;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ + min;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ / max;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ + min;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ / max;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ + min;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ / max;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ + min;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ / max;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ + min;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ / max;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ + min;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ / max;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ + min;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ / max;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ + min;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ / max;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ + min;\n    }\n    for(int i = 0; i < arr.length; i++){\n        arr[i] = arr[i]\
    \ / max;\n    }\n", "{\n    long[] result = new long[arr.length];\n    long ones\
    \ = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         ones++;\n        }\n        else\n        {\n            zeros++;\n\
    \        }\n        if(arr[i] > max)\n        {\n            max = arr[i];\n \
    \       }\n        if(arr[i] < min)\n        {\n            min = arr[i];\n  \
    \      }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = ones;\n        }\n        else\n \
    \       {\n            result[i] = zeros;\n        }\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  result[i] = max;\n        }\n        else\n        {\n            result[i]\
    \ = min;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer. Unfortunately I cannot use any external libraries.\
    \ I edited my question to make it more clear.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to include a solution that does not use any external libraries.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    int n = arr.Length;\n    long[] result = new long[n];\n    int[] count =\
    \ new int[n];\n    for(int i = 0; i < n; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = count[arr[i]];\n\
    \    }\n    Array.Sort(result);\n    return result;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThe question was about sorting an array of non-negative integers according\
    \ to number of ones in their binary representation in ascending order. Your code\
    \ sorts them according to number of ones in their decimal representation. Which\
    \ is wrong.\n<|/ c |>\n<| c |>\nThe question was about sorting an array of non-negative\
    \ integers according to number of ones in their binary representation in ascending\
    \ order. Your code sorts them according to number of ones in their decimal representation.\
    \ Which is wrong.\n<|/ c |>\n<| c |>\nThe question was about sorting an array\
    \ of non-negative integers according to number of ones in their binary representation\
    \ in ascending order. Your code sorts them according to number of ones in their\
    \ decimal representation. Which is wrong.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting an array of non-negative integers according to number of ones\
    \ in their binary representation in ascending order. Your code sorts them according\
    \ to number of ones in their decimal representation. Which is wrong.\n<|/ c |>\n\
    <| c |>\nThe question was about sorting an array of non-negative integers according\
    \ to number of ones in their binary representation in ascending order. Your code\
    \ sorts them according to number of ones in their decimal representation. Which\
    \ is wrong.\n<|/ c |>\n<| a tags=c#,sorting,arrays |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;", "{\n    long ones = 0;\n    long zeros = 0;\n    long\
    \ max = 0;\n    long min = 0;\n    long temp = 0;\n    long result = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         ones++;\n        }\n        else\n        {\n            zeros++;\n\
    \        }\n        if(arr[i] > max)\n        {\n            max = arr[i];\n \
    \       }\n        if(arr[i] < min)\n        {\n            min = arr[i];\n  \
    \      }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            temp = ones;\n            ones = zeros;\n    \
    \        zeros = temp;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            result += ones;\n    \
    \    }\n        else\n        {\n            result -= zeros;\n        }\n   \
    \ }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result += max;\n        }\n        else\n        {\n \
    \           result -= min;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nI like your solution, but\
    \ I believe it can be done more efficiently by just counting the number of ones\
    \ and zeros in the array. Then, just sort based on the number of ones and zeros.\
    \ No need to sort the array twice.\n<|/ c |>\n<| c |>\nYes, you are right. My\
    \ solution is more efficient. Thanks for your suggestion.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 5,\
    \ 2, 3, 4};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not answer the question. OP\
    \ wants to sort an array of non-negative integers according to number of ones\
    \ in their binary representation in ascending order.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(result[i] > result[i+1])\n        {\n            long temp = result[i];\n\
    \            result[i] = result[i+1];\n            result[i+1] = temp;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm\
    \ |>\n<| c |>\nThis is not the correct answer. Your code will give the wrong result\
    \ for input `[1, 1, 1]`\n<|/ c |>\n<| c |>\nThe question was about sorting an\
    \ array of non-negative integers according to number of ones in their binary representation\
    \ in ascending order. Your code will give the wrong result for input `[1, 1, 1]`.\n\
    <|/ c |>\n<| c |>\nI didn't say that your code is wrong. I said that your code\
    \ is wrong for input `[1, 1, 1]`\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ an array of non-negative integers according to number of ones in their binary\
    \ representation in ascending order. Your code will give the wrong result for\
    \ input `[1, 1, 1]`.\n<|/ c |>\n<| c |>\nI didn't say that your code is wrong.\
    \ I said that your code is wrong for input `[1, 1, 1]`\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long ones = 0;\n   \
    \ long twos = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives =\
    \ 0;\n    long sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long\
    \ nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n    long thousands =\
    \ 0;\n    long ten_thousands = 0;\n    long hundred_thousands = 0;\n    long millions\
    \ = 0;\n    long billions = 0;\n    long trillions = 0;\n    long quadrillions\
    \ = 0;\n    long quintillions = 0;\n    long sextillions = 0;\n    long septillions\
    \ = 0;\n    long octillions = 0;\n    long nonillions = 0;\n    long decillions\
    \ = 0;\n    long undecillions = 0;\n    long duodecillions = 0;\n    long tredecillions\
    \ = 0;\n    long quattuordecillions = 0;\n    long quindecillions = 0;\n    long\
    \ sexdecillions = 0;\n    long septendecillions = 0;\n    long octodecillions\
    \ = 0;\n    long novemdecillions = 0;\n    long vigintillions = 0;\n    long unvigintillions\
    \ = 0;\n    long duovigintillions = 0;\n    long trevigintillions = 0;\n    long\
    \ quattuorvigintillions = 0;\n    long quinvigintillions = 0;\n    long sexvigintillions\
    \ = 0;\n    long septenvigintillions = 0;\n    long octovigintillions = 0;\n \
    \   long novemvigintillions = 0;\n    long trigints = 0;\n    long untrigints\
    \ = 0;\n    long duotrigints = 0;\n    long tretrigints = 0;\n    long quattuortrigints\
    \ = 0;\n    long quinttrigints = 0;\n    long sextrigints = 0;\n    long septentrigints\
    \ = 0;\n    long octotrigints = 0;\n    long novemtrigints = 0;\n    long quadragints\
    \ = 0;\n    long unquadragints = 0;\n    long duoquadragints = 0;\n    long trequadragints\
    \ = 0;\n    long quattuorquadragints = 0;\n    long quinquadragints = 0;\n   \
    \ long sexquadragints = 0;\n    long septenquadragints = 0;\n    long octoquadragints\
    \ = 0;\n    long novemquadragints = 0;\n    ", "{\n    long[] result = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++) \n    {\n        int count = 0;\n   \
    \     for(int j = 0; j < arr.length; j++) \n        {\n            if(arr[j] ==\
    \ i) \n            {\n                count++;\n                break;\n     \
    \       }\n        }\n        result[i] = count;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[arr.length];\n\
    \    int j = 0;\n    int k = 0;\n    int n = arr.length;\n    long sum = 0;\n\
    \    long max = 0;\n    long min = 0;\n    long temp = 0;\n    long temp2 = 0;\n\
    \    long temp3 = 0;\n    \n    for(int i = 0; i < n; i++)\n    {\n        temp\
    \ = arr[i];\n        sum += temp;\n        if(temp == 1)\n        {\n        \
    \    result[j++] = arr[i];\n        }\n        else\n        {\n            max\
    \ = temp;\n            min = temp;\n            for(int j = i; j > 0; j--)\n \
    \           {\n                temp2 = arr[j];\n                temp3 = arr[j-1];\n\
    \                temp += temp2;\n                temp -= temp3;\n            \
    \    if(temp > max)\n                {\n                    max = temp;\n    \
    \            }\n                if(temp < min)\n                {\n          \
    \          min = temp;\n                }\n            }\n            result[k++]\
    \ = max;\n            result[k++] = min;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < k; i++)\n    {\n        result[i] = result[i] / sum;\n    }\n   \
    \ \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26825825)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to sort an\
    \ array of non-negative integers according to number of ones in their binary representation\
    \ in ascending order. For similar number of ones, sort based on decimal value.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/26825825)\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He wants to sort an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ For similar number of ones, sort based on decimal value.\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26825825)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.", "{\n\
    \    long ones = 0;\n    long max = 0;\n    long min = 0;\n    long max2 = 0;\n\
    \    long min2 = 0;\n    long max3 = 0;\n    long min3 = 0;\n    long max4 = 0;\n\
    \    long min4 = 0;\n    long max5 = 0;\n    long min5 = 0;\n    long max6 = 0;\n\
    \    long min6 = 0;\n    long max7 = 0;\n    long min7 = 0;\n    long max8 = 0;\n\
    \    long min8 = 0;\n    long max9 = 0;\n    long min9 = 0;\n    long max10 =\
    \ 0;\n    long min10 = 0;\n    long max11 = 0;\n    long min11 = 0;\n    long\
    \ max12 = 0;\n    long min12 = 0;\n    long max13 = 0;\n    long min13 = 0;\n\
    \    long max14 = 0;\n    long min14 = 0;\n    long max15 = 0;\n    long min15\
    \ = 0;\n    long max16 = 0;\n    long min16 = 0;\n    long max17 = 0;\n    long\
    \ min17 = 0;\n    long max18 = 0;\n    long min18 = 0;\n    long max19 = 0;\n\
    \    long min19 = 0;\n    long max20 = 0;\n    long min20 = 0;\n    long max21\
    \ = 0;\n    long min21 = 0;\n    long max22 = 0;\n    long min22 = 0;\n    long\
    \ max23 = 0;\n    long min23 = 0;\n    long max24 = 0;\n    long min24 = 0;\n\
    \    long max25 = 0;\n    long min25 = 0;\n    long max26 = 0;\n    long min26\
    \ = 0;\n    long max27 = 0;\n    long min27 = 0;\n    long max28 = 0;\n    long\
    \ min28 = 0;\n    long max29 = 0;\n    long min29 = 0;\n    long max30 = 0;\n\
    \    long min30 = 0;\n    long max31 = 0;\n    long min31 = 0;\n    long max32\
    \ = 0;\n    long min32 = 0;\n    long max33 = 0;\n    long min33 = 0;\n    long\
    \ max34 = 0;\n    long min34 = 0;\n    long max35 = 0;\n    long min35 = 0;\n\
    \    long max36 = 0;\n    long min36 = 0;\n    long max37 = 0;\n    long min37\
    \ = 0;\n    long max38 = 0;\n    long min38 = 0;\n    long max39 = 0;\n    long\
    \ min39 = 0;\n    long max40 = 0;\n    long min40 = 0;\n    long max41 = 0;\n\
    \    long min41 = 0;\n    long max42 = 0;\n    long min42 = 0;\n    long max43\
    \ = 0;\n    long min43 = 0;", "{\n    long ones = 0;\n    long twos = 0;\n   \
    \ long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes =\
    \ 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long\
    \ tens = 0;\n    long elevens = 0;\n    long twelves = 0;\n    long thirteens\
    \ = 0;\n    long fourteens = 0;\n    long fifteens = 0;\n    long sixteens = 0;\n\
    \    long seventeens = 0;\n    long eighteens = 0;\n    long nineteens = 0;\n\
    \    long twentys = 0;\n    long thirtys = 0;\n    long fortys = 0;\n    long\
    \ fiftys = 0;\n    long sixtys = 0;\n    long seventys = 0;\n    long eightys\
    \ = 0;\n    long ninetys = 0;\n    long hundreds = 0;\n    long thousands = 0;\n\
    \    long tenthousands = 0;\n    long hundredthousands = 0;\n    long millions\
    \ = 0;\n    long billions = 0;\n    long trillions = 0;\n    long quadrillions\
    \ = 0;\n    long quintillions = 0;\n    long sextillions = 0;\n    long septillions\
    \ = 0;\n    long octillions = 0;\n    long nonillions = 0;\n    long decillions\
    \ = 0;\n    long undecillions = 0;\n    long duodecillions = 0;\n    long tredecillions\
    \ = 0;\n    long quattuordecillions = 0;\n    long quindecillions = 0;\n    long\
    \ sexdecillions = 0;\n    long septendecillions = 0;\n    long octodecillions\
    \ = 0;\n    long novemdecillions = 0;\n    long vigintillions = 0;\n    long unvigintillions\
    \ = 0;\n    long duovigintillions = 0;\n    long trevigintillions = 0;\n    long\
    \ quattuorvigintillions = 0;\n    long quinvigintillions = 0;\n    long sexvigintillions\
    \ = 0;\n    long septemvigintillions = 0;\n    long octovigintillions = 0;\n \
    \   long novemvigintillions = 0;\n    long triginta = 0;\n    long untriginta\
    \ = 0;\n    long duotriginta = 0;\n    long tretriginta = 0;\n    long quattuortriginta\
    \ = 0;\n    long quintriginta = 0;\n    long sex", "{\n    long[] result = new\
    \ long[arr.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n\
    \ = arr.length;\n    \n    while (i < n) {\n        while (j < n) {\n        \
    \    if (arr[j] == 1) {\n                result[k] = arr[j];\n               \
    \ j++;\n                k++;\n            }\n            else if (arr[j] == 0)\
    \ {\n                j++;\n            }\n            else {\n               \
    \ j++;\n            }\n        }\n        while (j < n) {\n            if (arr[j]\
    \ == 1) {\n                result[k] = arr[j];\n                j++;\n       \
    \         k++;\n            }\n            else {\n                j++;\n    \
    \        }\n        }\n        while (j < n) {\n            if (arr[j] == 0) {\n\
    \                j++;\n            }\n            else {\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis is not an answer to the question. He is asking for\
    \ a solution in C#.\n<|/ c |>\n<| c |>\nI didn't say it wasn't an answer, I said\
    \ it wasn't a solution. He asked for a solution in C#, and I provided a solution\
    \ in C#. He didn't ask for a solution in C#.\n<|/ c |>\n<| c |>\nI didn't say\
    \ it wasn't an answer, I said it wasn't a solution. He asked for a solution in\
    \ C#, and I provided a solution in C#. He didn't ask for a solution in C#.\n<|/\
    \ c |>\n<| c |>\nI didn't say it wasn't an answer, I said it wasn't a solution.\
    \ He asked for a solution in C#, and I provided a solution in C#. He didn't ask\
    \ for a solution in C#.\n<|/ c |>\n<| c |>\nI didn't say it wasn't an answer,\
    \ I said it wasn't a solution. He asked for a solution in C#, and I provided a\
    \ solution in C#. He didn't ask for a solution in C#.\n<|/ c |>\n<| a tags=algorithm,sorting,c#\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;", "{\n    long[] result = new long[arr.length];\n    int[]\
    \ count = new int[arr.length];\n    \n    for (int i = 0; i < arr.length; ++i)\n\
    \    {\n        count[arr[i]]++;\n    }\n    \n    for (int i = 0; i < arr.length;\
    \ ++i)\n    {\n        result[i] = arr[i];\n    }\n    \n    for (int i = 0; i\
    \ < arr.length; ++i)\n    {\n        if (count[arr[i]] == 1)\n        {\n    \
    \        int j = i;\n            while (j > 0 && count[arr[j-1]] == 1)\n     \
    \       {\n                result[j] = arr[j-1];\n                j--;\n     \
    \       }\n            result[j] = arr[i];\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code doesn't work. Try\
    \ it with `sort_array([1, 5, 2, 3, 4])` - it returns `[1, 2, 3, 4, 5]` instead\
    \ of `[-6, -5, -4, -3, -2]`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nThis code doesn't work. Try it with `sort_array([1,\
    \ 5, 2, 3, 4])` - it returns `[1, 2, 3, 4, 5]` instead of `[-6, -5, -4, -3, -2]`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[arr.length];\n    int i = 0;\n    long ones = 0;\n    long twos = 0;\n\
    \    long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes\
    \ = 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long\
    \ tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long ten_thousands\
    \ = 0;\n    long hundred_thousands = 0;\n    long thousand_thousands = 0;\n  \
    \  long ten_thousand_thousands = 0;\n    long hundred_thousand_thousands = 0;\n\
    \    long thousand_thousand_thousands = 0;\n    long ten_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousands = 0;\n    long\
    \ ten_thousand_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n  \
    \  long hundred_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long thousand_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thous",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long twos\
    \ = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long\
    \ sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n\
    \    long tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long\
    \ ten_thousands = 0;\n    long hundred_thousands = 0;\n    long thousand_thousands\
    \ = 0;\n    long ones_thousands = 0;\n    long ones_hundreds = 0;\n    long ones_tens\
    \ = 0;\n    long ones_fives = 0;\n    long ones_twos = 0;\n    long ones_ones\
    \ = 0;\n    long ones_zeros = 0;\n    long twos_ones = 0;\n    long twos_zeros\
    \ = 0;\n    long threes_ones = 0;\n    long threes_zeros = 0;\n    long fours_ones\
    \ = 0;\n    long fours_zeros = 0;\n    long fives_ones = 0;\n    long fives_zeros\
    \ = 0;\n    long sixes_ones = 0;\n    long sixes_zeros = 0;\n    long sevens_ones\
    \ = 0;\n    long sevens_zeros = 0;\n    long eights_ones = 0;\n    long eights_zeros\
    \ = 0;\n    long nines_ones = 0;\n    long nines_zeros = 0;\n    long tens_ones\
    \ = 0;\n    long tens_zeros = 0;\n    long hundreds_ones = 0;\n    long hundreds_zeros\
    \ = 0;\n    long thousands_ones = 0;\n    long thousands_zeros = 0;\n    long\
    \ ten_thousands_ones = 0;\n    long ten_thousands_zeros = 0;\n    long hundred_thousands_ones\
    \ = 0;\n    long hundred_thousands_zeros = 0;\n    long thousand_thousands_ones\
    \ = 0;\n    long thousand_thousands_zeros = 0;\n    long ones_thousands_ones =\
    \ 0;\n    long ones_thousands_zeros = 0;\n    long ones_hundreds_ones = 0;\n \
    \   long ones_hundreds_zeros = 0;\n    long ones_tens_ones = 0;\n    long ones_tens_zeros\
    \ = 0;\n    long ones_fives_ones = 0;\n    long ones_fives_zeros = 0;\n    long\
    \ ones_twos_ones = 0;\n    long ones_twos_zeros = 0;\n    long ones_ones_ones\
    \ = 0;\n    long ones_ones_zeros = 0;\n    long twos_ones_ones = 0;\n    long\
    \ twos_ones_zero", "{\n    long[] result = new long[arr.length];\n    long[] ones\
    \ = new long[arr.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n  \
    \  \n    while (i < arr.length) \n    {\n        if (arr[i] == 1) \n        {\n\
    \            ones[k] = arr[i];\n            k++;\n        }\n        else \n \
    \       {\n            result[j] = ones[k];\n            j++;\n            k =\
    \ j;\n        }\n        i++;\n    }\n    result[j] = ones[k];\n    j++;\n   \
    \ k = j;\n    while (j < arr.length) \n    {\n        result[k] = arr[j];\n  \
    \      k++;\n        j++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThe OP wants to sort an array of non-negative integers according\
    \ to number of ones in their binary representation in ascending order. Your solution\
    \ sorts them in descending order. Also, you don't need to use two arrays, you\
    \ can just use a single array and keep track of the number of ones in each position.\
    \ Also, you don't need to use recursion, just use a loop.\n<|/ c |>\n<| c |>\n\
    Yes, I missed that. Thanks for pointing it out. I'll update my answer.\n<|/ c\
    \ |>\n<| c |>\nI updated my answer to include a solution that sorts them in ascending\
    \ order.\n<|/ c |>\n<| c |>\nYour solution sorts them in descending order. Also,\
    \ you don't need to use two arrays, you can just use a single array and keep track\
    \ of the number of ones in each position. Also, you don't need to use recursion,\
    \ just use a loop.\n<|/ c |>\n<| c |>\nYes, I missed that. Thanks for pointing\
    \ it out. I'll update my answer.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    zeros++;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n     \
    \   }\n        else\n        {\n            result[i] = zeros;\n        }\n  \
    \  }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nI tested it and it works. I used the code\
    \ from your question. Maybe you used a different array or used a different version\
    \ of Java.\n<|/ c |>\n<| c |>\nI tested it on Java 8 and it works. I used the\
    \ code from your question. Maybe you used a different array or used a different\
    \ version of Java.\n<|/ c |>\n<| c |>\nI tested it on Java 8 and it works. I used\
    \ the code from your question. Maybe you used a different array or used a different\
    \ version of Java.\n<|/ c |>\n<| c |>\nI tested it on Java 8 and it works. I used\
    \ the code from your question. Maybe you used a different array or used a different\
    \ version of Java.\n<|/ c |>\n<| a tags=java,sorting |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n  \
    \  }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = count[arr[i]];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\nimport java.util.Arrays;",
  "{\n    int n = arr.length;\n    long[] result = new long[n];\n    int[] count =\
    \ new int[n];\n    for(int i = 0; i < n; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = arr[i];\n \
    \   }\n    for(int i = 0; i < n; i++)\n    {\n        if(count[i] > 1)\n     \
    \   {\n            int j = i;\n            while(count[j] > 1)\n            {\n\
    \                j++;\n                count[j]--;\n            }\n          \
    \  int k = j;\n            while(count[k] > 1)\n            {\n              \
    \  k--;\n                count[k]--;\n            }\n            int temp;\n \
    \           if(count[j] > count[k])\n            {\n                temp = count[j];\n\
    \                count[j] = count[k];\n                count[k] = temp;\n    \
    \        }\n            else\n            {\n                temp = count[k];\n\
    \                count[k] = count[j];\n                count[j] = temp;\n    \
    \        }\n            for(int j = i; j < k; j++)\n            {\n          \
    \      result[j] = result[j+1];\n            }\n            for(int k = j; k <\
    \ n; k++)\n            {\n                result[k] = result[k-1];\n         \
    \   }\n            for(int j = k; j < n; j++)\n            {\n               \
    \ result[j] = result[j-1];\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis is not\
    \ an optimal solution. Sorting algorithms usually have O(nlogn) complexity and\
    \ yours is O(n^2). Also the complexity of your solution is O(n^2) which is not\
    \ optimal.\n<|/ c |>\n<| c |>\nThe complexity is O(n^2) because you sort each\
    \ element of the array twice. First you sort it by number of ones and then by\
    \ decimal value. The complexity is O(n^2) because you sort each element of the\
    \ array twice. First you sort it by number of ones and then by decimal value.\
    \ The complexity is O(n^2) because you sort each element of the array twice. First\
    \ you sort it by number of ones and then by decimal value. The complexity is O(n^2)\
    \ because you sort each element of the array twice. First you sort it by number\
    \ of ones and then by decimal value. The complexity is O(n^2) because you sort\
    \ each element of the array twice. First you sort it by number of ones and then\
    \ by decimal value. The complexity is O(n^2) because you sort each element of\
    \ the array twice. First you sort it by number of ones and then by decimal value.\
    \ The complexity is O(n", "{\n    long[] result = new long[arr.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    int n = arr.length;\n    long sum\
    \ = 0;\n    long sum2 = 0;\n    \n    while (i < n) {\n        sum = 0;\n    \
    \    sum2 = 0;\n        \n        while (j < n) {\n            sum += arr[j];\n\
    \            sum2 += arr[j] * arr[j];\n            j++;\n        }\n        \n\
    \        if (sum == sum2) {\n            result[k] = arr[i];\n            i++;\n\
    \            k++;\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this doesn't solve the\
    \ problem. Your solution sorts the array in descending order, which is not what\
    \ the OP wants. He wants to sort the array in ascending order according to the\
    \ number of ones in the binary representation. Your solution sorts the array in\
    \ descending order according to the number of ones in the decimal representation.\
    \ He wants to sort the array in ascending order according to the number of ones\
    \ in the binary representation. Your solution sorts the array in descending order\
    \ according to the number of ones in the decimal representation.\n<|/ c |>\n<|\
    \ c |>\nI see what you mean. My solution sorts the array in ascending order according\
    \ to the number of ones in the binary representation. He wants to sort the array\
    \ in ascending order according to the number of ones in the decimal representation.\
    \ My solution sorts the array in descending order according to the number of ones\
    \ in the binary representation. He wants to sort the array in ascending order\
    \ according to the number of ones in the decimal representation. My solution sorts\
    \ the array in descending order according to the number of ones in the binary\
    \ representation. He wants to sort the array in ascending order according to the\
    \ number of ones in the decimal representation.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. My solution sorts the array in ascending order according to the number\
    \ of ones in the binary representation. He wants to sort the array in ascending\
    \ order according to the number of ones in the decimal representation. My solution\
    \ sorts the array in descending order according to the number of ones in the binary\
    \ representation. He wants to sort the array in ascending order according to the\
    \ number of ones in the decimal representation. My solution sorts the array in\
    \ descending order according to the number of ones in the binary representation.\
    \ He wants to sort the array in ascending order according to the number of ones\
    \ in the decimal representation.\n<|/ c |>\n<| c |>\nI see what you mean. My solution\
    \ sorts the array in ascending order according to the number of ones in the binary\
    \ representation. He wants to sort the array in ascending order according to the\
    \ number of ones in the decimal representation. My solution sorts the array ",
  "{\n    long ones = 0;\n    long max = 0;\n    long min = 0;\n    long sum = 0;\n\
    \    long temp = 0;\n    long result = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        temp = arr[i];\n        ones = temp;\n        sum += ones;\n\
    \        if(sum > max)\n        {\n            max = sum;\n        }\n       \
    \ if(sum < min)\n        {\n            min = sum;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        temp = arr[i];\n        ones = temp;\n\
    \        sum += ones;\n        if(sum > max)\n        {\n            max = sum;\n\
    \        }\n        if(sum < min)\n        {\n            min = sum;\n       \
    \ }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        temp = arr[i];\n\
    \        ones = temp;\n        sum += ones;\n        if(sum > max)\n        {\n\
    \            max = sum;\n        }\n        if(sum < min)\n        {\n       \
    \     min = sum;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        temp = arr[i];\n        ones = temp;\n        sum += ones;\n \
    \       if(sum > max)\n        {\n            max = sum;\n        }\n        if(sum\
    \ < min)\n        {\n            min = sum;\n        }\n    }\n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        temp = arr[i];\n        ones = temp;\n\
    \        sum += ones;\n        if(sum > max)\n        {\n            max = sum;\n\
    \        }\n        if(sum < min)\n        {\n            min = sum;\n       \
    \ }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        temp = arr[i];\n\
    \        ones = temp;\n        sum += ones;\n        if(sum > max)\n        {\n\
    \            max = sum;\n        }\n        if(sum < min)\n        {\n       \
    \     min = sum;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        temp = arr[i];\n        ones = temp;\n        sum += ones;\n \
    \       if(sum > max)\n        {\n            max = sum;\n        }\n        if(sum\
    \ < min)\n        {\n            min = sum;\n        }\n    }\n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        temp = arr[i];\n        ones = temp;\n\
    \        sum += ones;\n        if(sum > max)\n        {\n            max = sum;\n\
    \        }\n        if(sum < min)\n        {\n            min = sum;\n       \
    \ }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        temp = arr[i];\n\
    \        ones = temp;\n        sum += ones;\n        if(sum > max)\n        {\n\
    \            max = sum;\n        }\n        if(", "{\n    long[] result = new\
    \ long[arr.length];\n    int[] count = new int[arr.length];\n    int i, j, k;\n\
    \    \n    for (i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    \n    for (i = 0; i < arr.length; i++)\n    {\n        for (j = 0;\
    \ j < count[arr[i]]; j++)\n        {\n            result[count[arr[i]] - j - 1]\
    \ = arr[i];\n        }\n    }\n    \n    for (i = 0; i < arr.length; i++)\n  \
    \  {\n        for (j = 0; j < count[arr[i]]; j++)\n        {\n            count[arr[i]]\
    \ -= j;\n        }\n    }\n    \n    for (i = 0; i < arr.length; i++)\n    {\n\
    \        for (j = 0; j < count[arr[i]]; j++)\n        {\n            count[arr[i]]--;\n\
    \        }\n    }\n    \n    for (i = 0; i < arr.length; i++)\n    {\n       \
    \ for (j = 0; j < count[arr[i]]; j++)\n        {\n            result[count[arr[i]]\
    \ - j - 1] = arr[i];\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,algorithm |>\n<| a tags=sorting,arrays,algorithm |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++)\
    \ \n    {\n        if(arr[i] == 1) ones++;\n        else zeros++;\n    }\n   \
    \ long ones_count = ones;\n    long zeros_count = zeros;\n    long ones_sum =\
    \ 0;\n    long zeros_sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n\
    \        if(arr[i] == 1) ones_sum += ones_count;\n        else zeros_sum += zeros_count;\n\
    \    }\n    long ones_diff = ones_sum - ones;\n    long zeros_diff = zeros_sum\
    \ - zeros;\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ == 1) ones_count -= 1;\n        else zeros_count -= 1;\n    }\n    for(int i\
    \ = 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) ones_sum += ones_count;\n\
    \        else zeros_sum += zeros_count;\n    }\n    long ones_sum2 = ones_sum;\n\
    \    long zeros_sum2 = zeros_sum;\n    for(int i = 0; i < arr.length; i++) \n\
    \    {\n        if(arr[i] == 1) ones_sum2 += ones_count;\n        else zeros_sum2\
    \ += zeros_count;\n    }\n    long ones_diff2 = ones_sum2 - ones;\n    long zeros_diff2\
    \ = zeros_sum2 - zeros;\n    for(int i = 0; i < arr.length; i++) \n    {\n   \
    \     if(arr[i] == 1) ones_count += 1;\n        else zeros_count += 1;\n    }\n\
    \    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) ones_sum\
    \ += ones_count;\n        else zeros_sum += zeros_count;\n    }\n    long ones_sum3\
    \ = ones_sum;\n    long zeros_sum3 = zeros_sum;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] == 1) ones_sum3 += ones_count;\n        else\
    \ zeros_sum3 += zeros_count;\n    }\n    long ones_diff3 = ones_sum3 - ones;\n\
    \    long zeros_diff3 = zeros_sum3 - zeros;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] == 1) ones_count -= 1;\n        else zeros_count\
    \ -= 1;\n    }\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ == 1) ones_sum += ones_count;\n        else zeros_sum += zeros_count;\n    }\n\
    \    long ones_sum4 = ones_sum;\n    long zeros_sum4 = zeros_sum;\n    for(int\
    \ i = 0; i < arr.length; i++) \n    {\n        if(arr", "{\n    long[] result\
    \ = new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n    long max\
    \ = 0;\n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n\
    \            ones++;\n        else\n            zeros++;\n        if(ones > zeros)\n\
    \        {\n            max = ones;\n            ones = 0;\n        }\n      \
    \  else\n        {\n            max = zeros;\n            zeros = 0;\n       \
    \ }\n        result[i] = max;\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(arr[i] == 1)\n            ones++;\n        else\n         \
    \   zeros++;\n        result[i] = result[i] * 10 + ones - zeros;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI didn't downvote, but I suspect\
    \ it's because you didn't explain what was wrong with OP's code, and how you fixed\
    \ it.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n\
    <| c |>\nI didn't downvote, but I suspect it's because you didn't explain what\
    \ was wrong with OP's code, and how you fixed it.\n<|/ c |>\n<| c |>\nI added\
    \ some explanation to the answer.\n<|/ c |>\n<| c |>\nI didn't downvote, but I\
    \ suspect it's because you didn't explain what was wrong with OP's code, and how\
    \ you fixed it.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[arr.length];\n    int[]\
    \ count = new int[arr.length];\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(count[arr[i]] > 1)\n        {\n            int j = 0;\n   \
    \         while(j < i)\n            {\n                if(count[arr[j]] > 1)\n\
    \                {\n                    int temp = arr[i];\n                 \
    \   arr[i] = arr[j];\n                    arr[j] = temp;\n                   \
    \ i++;\n                    j++;\n                }\n                else\n  \
    \              {\n                    break;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I believe this would work, but I believe it would be much more efficient to sort\
    \ the array in place and count the number of ones in each position. Then, just\
    \ iterate through the array and swap positions where the number of ones is greater\
    \ than 1.\n<|/ c |>\n<| c |>\nYes, I agree. But the question was about sorting\
    \ in place. Anyway, I added a solution with counting number of ones in each position\
    \ and swapping positions where the number of ones is greater than 1.\n<|/ c |>\n\
    <| c |>\nI believe this would work, but I believe it would be much more efficient\
    \ to sort the array in place and count the number of ones in each position. Then,\
    \ just iterate through the array and swap positions where the number of ones is\
    \ greater than 1.\n<|/ c |>\n<| c |>\nI added a solution with counting number\
    \ of ones in each position and swapping positions where the number of ones is\
    \ greater than 1.\n<|/ c |>\n<| c |>\nI believe this would work, but I believe\
    \ it would be much more efficient to sort the array in place and count the number\
    \ of ones in each position. Then, just iterate through the array and swap positions\
    \ where the number of ones is greater than 1.\n<|/ c |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while\
    \ (i < arr.length) {\n        if (arr[i] == 1) {\n            count++;\n     \
    \   } else {\n            result[k] = arr[i];\n            k++;\n        }\n \
    \       i++;\n    }\n    while (j < count) {\n        result[k] = arr[j];\n  \
    \      k++;\n        j++;\n    }\n    while (i < arr.length) {\n        result[k]\
    \ = arr[i];\n        k++;\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,arrays,java |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[arr.length];\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n        for(int\
    \ j = 0; j < arr.length; j++)\n        {\n            if(arr[j] == 1)\n      \
    \      {\n                count++;\n            }\n        }\n        result[i]\
    \ = count;\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        int\
    \ count = 0;\n        for(int j = 0; j < arr.length; j++)\n        {\n       \
    \     if(arr[j] == 1)\n            {\n                count++;\n            }\n\
    \        }\n        result[i] = count;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\n\
    This solution doesn't work. Try it with `sort_array([1, 0, 2, 3, 4])`.\n<|/ c\
    \ |>\n<| c |>\nYes, I missed that case. Thanks for pointing out.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new\
    \ long[arr.length];\n    long[] ones = new long[arr.length];\n    long[] zeros\
    \ = new long[arr.length];\n    int i, j, k;\n    \n    for (i = 0; i < arr.length;\
    \ i++)\n    {\n        ones[i] = 0;\n        zeros[i] = 0;\n        for (j = 0;\
    \ j < arr.length; j++)\n        {\n            if (arr[j] == 1)\n            {\n\
    \                ones[i]++;\n            }\n            else\n            {\n\
    \                zeros[i]++;\n            }\n        }\n    }\n    \n    for (i\
    \ = 0; i < arr.length; i++)\n    {\n        for (j = 0; j < arr.length; j++)\n\
    \        {\n            if (ones[j] > ones[i])\n            {\n              \
    \  k = j;\n            }\n            else\n            {\n                k =\
    \ i;\n            }\n            \n            if (ones[k] > ones[i])\n      \
    \      {\n                swap(arr, j, k);\n            }\n        }\n    }\n\
    \    \n    for (i = 0; i < arr.length; i++)\n    {\n        result[i] = arr[i];\n\
    \    }\n    \n    return result;\n}", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours\
    \ = 0;\n    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long\
    \ eights = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n\
    \    long thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands\
    \ = 0;\n    long thousand_thousands = 0;\n    long ten_thousand_thousands = 0;\n\
    \    long hundred_thousand_thousands = 0;\n    long thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousands = 0;\n    long ten_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousands = 0;\n    long\
    \ hundred_thousand_thousand_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousands =\
    \ 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n", "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n\
    \    long zeros = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        ones += arr[i];\n        zeros -= arr[i];\n\
    \        max = Math.max(max, ones);\n        min = Math.min(min, zeros);\n   \
    \     result[i] = ones;\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        ones = result[i];\n        zeros = max - ones;\n        max = Math.max(max,\
    \ ones);\n        min = Math.min(min, zeros);\n        result[i] = zeros;\n  \
    \  }\n    for(int i = 0; i < arr.length; i++)\n    {\n        ones = result[i];\n\
    \        zeros = max - ones;\n        max = Math.max(max, ones);\n        min\
    \ = Math.min(min, zeros);\n        result[i] = ones;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| c |>\nThe first two loops\
    \ could be replaced with `std::max_element` and `std::min_element`.\n<|/ c |>\n\
    <| c |>\nYes, but that would require to rewrite this algorithm from scratch. Also,\
    \ `std::max_element` and `std::min_element` are not std algorithms. And `std::max_element`\
    \ would not sort ascending, but descending. `std::min_element` would not sort\
    \ descending, but ascending. `std::max_element` would not sort ascending, but\
    \ descending. `std::min_element` would not sort descending, but ascending. `std::max_element`\
    \ would not sort ascending, but descending. `std::min_element` would not sort\
    \ descending, but ascending. `std::max_element` would not sort ascending, but\
    \ descending. `std::min_element` would not sort descending, but ascending. `std::max_element`\
    \ would not sort ascending, but descending. `std::min_element` would not sort\
    \ descending, but ascending. `std::max_element` would not sort ascending, but\
    \ descending. `std::min_element` would not sort descending, but ascending. `std::max_element`\
    \ would not sort ascending, but descending. `std::min_element` would not sort\
    \ descending, but ascending. `std::max_element` would not sort ascending, but\
    \ descending. `std::min_element` would not sort descending, but ascending. `std::max_element`\
    \ would not sort ascending, but descending. `std::min_element` would not sort\
    \ descending, but ascending. `std::max_element` would not sort ascending, but\
    \ descending. ", "{\n    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n\
    \    long min = 0;\n    long sum = 0;\n    long count = 0;\n    long maxCount\
    \ = 0;\n    long minCount = 0;\n    long sumCount = 0;\n    long maxSum = 0;\n\
    \    long minSum = 0;\n    long sumSum = 0;\n    long maxSumCount = 0;\n    long\
    \ minSumCount = 0;\n    long sumSumCount = 0;\n    long maxSumSum = 0;\n    long\
    \ minSumSum = 0;\n    long sumSumSum = 0;\n    long maxSumSumCount = 0;\n    long\
    \ minSumSumCount = 0;\n    long sumSumSumCount = 0;\n    long maxSumSumSum = 0;\n\
    \    long minSumSumSum = 0;\n    long sumSumSumSum = 0;\n    long maxSumSumSumCount\
    \ = 0;\n    long minSumSumSumCount = 0;\n    long sumSumSumSumCount = 0;\n   \
    \ long maxSumSumSumSum = 0;\n    long minSumSumSumSum = 0;\n    long sumSumSumSumSum\
    \ = 0;\n    long maxSumSumSumSumCount = 0;\n    long minSumSumSumSumCount = 0;\n\
    \    long sumSumSumSumSumCount = 0;\n    long maxSumSumSumSumSum = 0;\n    long\
    \ minSumSumSumSumSum = 0;\n    long sumSumSumSumSumSum = 0;\n    long maxSumSumSumSumSumCount\
    \ = 0;\n    long minSumSumSumSumCount = 0;\n    long sumSumSumSumSumCount = 0;\n\
    \    long maxSumSumSumSumSumSum = 0;\n    long minSumSumSumSumSum = 0;\n    long\
    \ sumSumSumSumSumSum = 0;\n    long maxSumSumSumSumSumCount = 0;\n    long minSumSumSumSumCount\
    \ = 0;\n    long sumSumSumSumSumCount = 0;\n    long maxSumSumSumSumSum = 0;\n\
    \    long minSumSumSumSum = 0;\n    long sumSumSumSumSumSum = 0;\n    long maxSumSumSumSumSumCount\
    \ = 0;\n    long minSumSumSumSumCount = 0;\n    long sumSumSumSumSumCount = 0;\n\
    \    long maxSumSumSumSumSum = 0;\n    long minSumSumSumSum = 0;\n    long sumSumSumSumSum\
    \ = 0;\n    long maxSumSumSumSumCount = 0;\n    long minSumSumSumCount = 0;\n\
    \    long sumSumSumSumCount = 0;\n    long maxSumSumSumSum = 0;\n    long minSumSumSum\
    \ = 0;\n    long sumSumSumSum = 0;\n    long maxSumSumSumCount", "{\n    long\
    \ ones = 0;\n    long result = 0;\n    for(int i = 0; i < arr.length; i++)\n \
    \   {\n        if(arr[i] == 1)\n            ones++;\n        else\n        {\n\
    \            result += (ones * pow(10, arr.length - i - 1));\n            ones\
    \ = 0;\n        }\n    }\n    result += (ones * pow(10, arr.length - i - 1));\n\
    \    \n    long[] result = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n            result[i] = 1;\n        else\n\
    \            result[i] = result;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=algorithm,sorting,arrays |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1,\
    \ 0, 2, 3, 4])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1,\
    \ 0, 2, 3, 4])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1,\
    \ 0, 2, 3, 4])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1,\
    \ 0, 2, 3, 4])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1,\
    \ 0, 2, 3, 4])`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = new int[]{1, 5, 2, 3, 4};\n    int[] result = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \         result[i] = 1;\n        else\n            result[i] = 0;\n    }\n  \
    \  Arrays.sort(result);\n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(arr[i] == 1)\n            System.out.print(result[i] + \" \");\n     \
    \   else\n            System.out.print(result[i] + \" \");\n    }\n}\n</code>\n\
    <|/ a tags=algorithm,sorting,arrays |>\n<| c |>\nThis doesn't work. Try it with\
    \ `sort_array([1, 0, 2, 3, 4])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with\
    \ `sort_array([1, 0, 2, 3, 4])`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = new int[]{1, 5, 2, 3, 4};\n    int[]\
    \ result = new int[arr.length];\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] == 1)\n            result[i] = 1;\n        else\n     \
    \       result[i] = 0;\n    }\n    Arrays.sort(result);\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(arr[i] == 1)\n            System.out.print(result[i]\
    \ + \" \");\n        else\n            System.out.", "{\n    long[] result = new\
    \ long[arr.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    long\
    \ temp;\n    \n    while (i < arr.length) {\n        temp = arr[i];\n        while\
    \ (temp != 0) {\n            if (temp % 2 == 1) {\n                result[k] =\
    \ temp;\n                k++;\n            }\n            temp /= 2;\n       \
    \ }\n        i++;\n    }\n    while (j < arr.length) {\n        temp = arr[j];\n\
    \        while (temp != 0) {\n            if (temp % 2 == 0) {\n             \
    \   result[k] = temp;\n                k++;\n            }\n            temp /=\
    \ 2;\n        }\n        j++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    \n    for (int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = count[arr[i]];\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n  \
    \  {\n        count[arr[i]]--;\n    }\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = count[arr[i]];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I was able to\
    \ solve the problem using your solution. I am posting my solution as an answer\
    \ below.\n<|/ c |>\n<| a tags=sorting,algorithm,arrays,java |>\nI solved the problem\
    \ using your solution. I am posting my solution as an answer below.\n<code>\n\
    public class SortArray {", "{\n    long[] result = new long[arr.length];\n   \
    \ long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    int pos = 0;\n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(arr[i]\
    \ == 1)\n            ones[pos++] = i;\n        else\n            zeros[pos++]\
    \ = i;\n    }\n    Arrays.sort(ones);\n    Arrays.sort(zeros);\n    for(int i\
    \ = 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n            result[pos++]\
    \ = ones[i];\n        else\n            result[pos++] = zeros[i];\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\npublic class SortArray {", "{\n    long[] result = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        long count = 0;\n   \
    \     for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j] ==\
    \ 1)\n            {\n                count++;\n            }\n        }\n    \
    \    result[i] = count;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    zeros++;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n     \
    \   }\n        else\n        {\n            result[i] = zeros;\n        }\n  \
    \  }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i] > result[i+1])\n\
    \        {\n            int temp = result[i];\n            result[i] = result[i+1];\n\
    \            result[i+1] = temp;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1, 5,\
    \ 2, 3, 4])` - it returns `[1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that and fixed it\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1,\
    \ 5, 2, 3, 4])` - it returns `[1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that and fixed it\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n    int[]\
    \ count = new int[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        count[arr[i]]++;\n    }\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = arr[i];\n    }\n    \n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (count[arr[i]] > 1)\n        {\n     \
    \       int j = 0;\n            while (j < i)\n            {\n               \
    \ if (count[arr[j]] > 1)\n                {\n                    count[arr[j]]--;\n\
    \                    result[j] = arr[j];\n                    j++;\n         \
    \       }\n                else\n                {\n                    break;\n\
    \                }\n            }\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long ones = 0;\n    long max = 0;\n    long\
    \ min = 0;\n    long temp = 0;\n    long result = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        ones = arr[i] & 1;\n        max = arr[i] > max ? arr[i]\
    \ : max;\n        min = arr[i] < min ? arr[i] : min;\n        temp = ones + max;\n\
    \        result = result > temp ? result : temp;\n    }\n    long[] result = new\
    \ long[arr.length];\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = arr[i] > result ? arr[i] : result;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=algorithm,sorting,arrays |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4};\n    Arrays.sort(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to sort by number of\
    \ ones in binary representation in ascending order.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to sort by number of ones in binary representation\
    \ in ascending order.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. He\
    \ wants to sort by number of ones in binary representation in ascending order.\n\
    <|/ c |>\n<| a tags=algorithm,sorting,arrays |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        count[arr[i]]++;\n  \
    \  }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        result[i] = count[arr[i]];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI did try this but for some reason it didn't work. Thanks for your\
    \ help though!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones++;\n     \
    \   }\n        else\n        {\n            zeros++;\n        }\n        if(arr[i]\
    \ > max)\n        {\n            max = arr[i];\n        }\n        if(arr[i] <\
    \ min)\n        {\n            min = arr[i];\n        }\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(arr[i] == 1)\n        {\n            result[i] = max;\n        }\n\
    \        else\n        {\n            result[i] = min;\n        }\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for your answer! I\
    \ tried to implement your solution, but I got an error: Exception in thread \"\
    main\" java.lang.ArrayIndexOutOfBoundsException: -1\n at sort_array.sort_array(sort_array.java:25)\n\
    \ at sort_array.main(sort_array.java:14)\n<|/ c |>\n<| c |>\nI edited my answer,\
    \ I forgot to add `arr.length` when initializing `result`.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer! I tried to implement your solution, but I got an error:\
    \ Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: -1\n\
    \ at sort_array.sort_array(sort_array.java:25)\n at sort_array.main(sort_array.java:14)\n\
    <|/ c |>\n<| c |>\nI edited my answer, I forgot to add `arr.length` when initializing\
    \ `result`.\n<|/ c |>\n<| c |>\nThank you for your answer! I tried to implement\
    \ your solution, but I got an error: Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ -1\n at sort_array.sort_array(sort_array.java:25)\n at sort_array.main(sort_array.java:14)\n\
    <|/ c |>\n<| a tags=sorting,java,arrays |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    int j = 0;\n    int k = 0;\n\
    \    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        sum\
    \ = 0;\n        for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j]\
    \ == 1)\n            {\n                sum += 1;\n            }\n        }\n\
    \        if(sum > 0)\n        {\n            result[k] = sum;\n            k++;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        sum\
    \ = 0;\n        for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j]\
    \ == 1)\n            {\n                sum += 1;\n            }\n        }\n\
    \        if(sum < 0)\n        {\n            result[k] = sum;\n            k++;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        sum\
    \ = 0;\n        for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j]\
    \ == 1)\n            {\n                sum += 1;\n            }\n        }\n\
    \        if(sum == 0)\n        {\n            result[k] = sum;\n            k++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `sort_array([1, 5,\
    \ 2, 3, -4]) == [-4, 1, 2, 3, 5]`\n<|/ c |>\n<| c |>\nI see your point. I've edited\
    \ the answer to include a solution for negative numbers. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args)\
    \ {\n    int[] arr = {1, 5, 2, 3, 4};\n    System.out.println(Arrays.toString(sort_array(arr)));\n\
    }", "{\n    long result = 0;\n    long ones = 0;\n    long twos = 0;\n    long\
    \ threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n\
    \    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens\
    \ = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long ten_thousands\
    \ = 0;\n    long hundred_thousands = 0;\n    long millions = 0;\n    long billions\
    \ = 0;\n    long trillions = 0;\n    long quadrillions = 0;\n    long quintillions\
    \ = 0;\n    long sextillions = 0;\n    long septillions = 0;\n    long octillions\
    \ = 0;\n    long nonillions = 0;\n    long decillions = 0;\n    long undecillions\
    \ = 0;\n    long duodecillions = 0;\n    long tredecillions = 0;\n    long quattuordecillions\
    \ = 0;\n    long quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septenvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long vexillions = 0;\n    long unvexillions = 0;\n    long duovexillions =\
    \ 0;\n    long trevexillions = 0;\n    long quattuorvexillions = 0;\n    long\
    \ quinvexillions = 0;\n    long sexvexillions = 0;\n    long septenvexillions\
    \ = 0;\n    long octovexillions = 0;\n    long novemvexillions = 0;\n    long\
    \ vexillion = 0;\n    long unvexillion = 0;\n    long duovexillion = 0;\n    long\
    \ trevexillion = 0;\n    long quattuorvexillion = 0;\n    long quinvexillion =\
    \ 0;\n    long sexvexillion = 0;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours\
    \ = 0;\n    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long\
    \ eights = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n\
    \    long thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands\
    \ = 0;\n    long thousand_thousands = 0;\n    long ones_hundreds = 0;\n    long\
    \ ones_thousands = 0;\n    long ones_ten_thousands = 0;\n    long ones_hundred_thousands\
    \ = 0;\n    long ones_thousand_thousands = 0;\n    long ones_hundreds_thousands\
    \ = 0;\n    long ones_thousands_thousands = 0;\n    long ones_hundreds_thousands_thousands\
    \ = 0;\n    long ones_thousands_hundreds_thousands = 0;\n    long ones_hundreds_thousands_hundreds_thousands\
    \ = 0;\n    long ones_thousands_hundreds_thousands_hundreds_thousands = 0;\n \
    \   long ones_hundreds_thousands_hundreds_thousands_hundreds_thousands = 0;\n\
    \    long ones_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands\
    \ = 0;\n    long ones_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands\
    \ = 0;\n    long ones_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands\
    \ = 0;\n    long ones_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands\
    \ = 0;\n    long ones_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands\
    \ = 0;\n    long ones_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands\
    \ = 0;\n    long ones_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands_hundreds_thousands\
    \ = 0;\n    long ones_hundreds_", "{\n    long ones = 0;\n    long max = 0;\n\
    \    long min = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones++;\n            if(ones > max)\n        \
    \        max = ones;\n            if(ones < min)\n                min = ones;\n\
    \        }\n        else\n        {\n            ones = 0;\n        }\n    }\n\
    \    \n    long onesDecimal = 0;\n    long maxDecimal = 0;\n    long minDecimal\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            onesDecimal++;\n            if(onesDecimal > maxDecimal)\n\
    \                maxDecimal = onesDecimal;\n            if(onesDecimal < minDecimal)\n\
    \                minDecimal = onesDecimal;\n        }\n        else\n        {\n\
    \            onesDecimal = 0;\n        }\n    }\n    \n    long onesDecimalDecimal\
    \ = 0;\n    long maxDecimalDecimal = 0;\n    long minDecimalDecimal = 0;\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n      \
    \  {\n            onesDecimalDecimal++;\n            if(onesDecimalDecimal > maxDecimalDecimal)\n\
    \                maxDecimalDecimal = onesDecimalDecimal;\n            if(onesDecimalDecimal\
    \ < minDecimalDecimal)\n                minDecimalDecimal = onesDecimalDecimal;\n\
    \        }\n        else\n        {\n            onesDecimalDecimal = 0;\n   \
    \     }\n    }\n    \n    long onesDecimalDecimalDecimal = 0;\n    long maxDecimalDecimalDecimal\
    \ = 0;\n    long minDecimalDecimalDecimal = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            onesDecimalDecimalDecimal++;\n\
    \            if(onesDecimalDecimalDecimal > maxDecimalDecimalDecimal)\n      \
    \          maxDecimalDecimalDecimal = onesDecimalDecimalDecimal;\n           \
    \ if(onesDecimalDecimalDecimal < minDecimalDecimalDecimal)\n                minDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal;\n        }\n        else\n        {\n         \
    \   onesDecimalDecimalDecimal = 0;\n        }\n    }\n    \n    long onesDecimalDecimalDecimalDecimal\
    \ = 0;\n    long maxDecimalDecimalDecimalDecimal = 0;\n    long minDecimalDecimalDecimalDecimal\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            onesDecimalDecimalDecimalDecimal++;\n            if(onesDecimalDecimalDecimalDecimal\
    \ > maxDecimalDecimalDecimalDecimal)\n                maxDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal;\n            if(onesDecimalDecimalDecimalDecimal ",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long twos\
    \ = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long\
    \ sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n\
    \    long tens = 0;\n    long elevens = 0;\n    long twelves = 0;\n    long thirteens\
    \ = 0;\n    long fourteens = 0;\n    long fifteens = 0;\n    long sixteens = 0;\n\
    \    long seventeens = 0;\n    long eighteens = 0;\n    long nineteens = 0;\n\
    \    long twentys = 0;\n    long thirtys = 0;\n    long fortys = 0;\n    long\
    \ fiftys = 0;\n    long sixtys = 0;\n    long seventys = 0;\n    long eightys\
    \ = 0;\n    long ninetys = 0;\n    long hundreds = 0;\n    long thousands = 0;\n\
    \    long tenthousands = 0;\n    long hundredthousands = 0;\n    long millions\
    \ = 0;\n    long billions = 0;\n    long trillions = 0;\n    long quadrillions\
    \ = 0;\n    long quintillions = 0;\n    long sextillions = 0;\n    long septillions\
    \ = 0;\n    long octillions = 0;\n    long nonillions = 0;\n    long decillions\
    \ = 0;\n    long undecillions = 0;\n    long duodecillions = 0;\n    long tredecillions\
    \ = 0;\n    long quattuordecillions = 0;\n    long quindecillions = 0;\n    long\
    \ sexdecillions = 0;\n    long septendecillions = 0;\n    long octodecillions\
    \ = 0;\n    long novemdecillions = 0;\n    long vigintillions = 0;\n    long unvigintillions\
    \ = 0;\n    long duovigintillions = 0;\n    long trevigintillions = 0;\n    long\
    \ quattuorvigintillions = 0;\n    long quinvigintillions = 0;\n    long sexvigintillions\
    \ = 0;\n    long septemvigintillions = 0;\n    long octovigintillions = 0;\n \
    \   long novemvigintillions = 0;\n    long vigintillion = 0;\n    long unvigintillion\
    \ = 0;\n    long duovigintillion = 0;\n    long trevigintillion = 0;\n    long\
    \ quat", "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n \
    \   long zeros = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  ones++;\n        }\n        else\n        {\n            zeros++;\n       \
    \ }\n        if(arr[i] > max)\n        {\n            max = arr[i];\n        }\n\
    \        if(arr[i] < min)\n        {\n            min = arr[i];\n        }\n \
    \   }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = max;\n\
    \        }\n        else\n        {\n            result[i] = min;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    int n = arr.length;\n    long[]\
    \ result = new long[n];\n    \n    for(int i = 0; i < n; i++)\n    {\n       \
    \ int count = 0;\n        for(int j = 0; j < n; j++)\n        {\n            if(arr[j]\
    \ == 1)\n            {\n                count++;\n            }\n        }\n \
    \       \n        result[i] = count;\n    }\n    \n    for(int i = 0; i < n; i++)\n\
    \    {\n        int count = 0;\n        for(int j = 0; j < n; j++)\n        {\n\
    \            if(arr[j] == 1)\n            {\n                count++;\n      \
    \      }\n        }\n        \n        result[i] = count * 10 + result[i];\n \
    \   }\n    \n    for(int i = 0; i < n; i++)\n    {\n        int count = 0;\n \
    \       for(int j = 0; j < n; j++)\n        {\n            if(arr[j] == 1)\n \
    \           {\n                count++;\n            }\n        }\n        \n\
    \        result[i] = count * 100 + result[i];\n    }\n    \n    for(int i = 0;\
    \ i < n; i++)\n    {\n        int count = 0;\n        for(int j = 0; j < n; j++)\n\
    \        {\n            if(arr[j] == 1)\n            {\n                count++;\n\
    \            }\n        }\n        \n        result[i] = count * 1000 + result[i];\n\
    \    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        int count = 0;\n\
    \        for(int j = 0; j < n; j++)\n        {\n            if(arr[j] == 1)\n\
    \            {\n                count++;\n            }\n        }\n        \n\
    \        result[i] = count * 10000 + result[i];\n    }\n    \n    for(int i =\
    \ 0; i < n; i++)\n    {\n        int count = 0;\n        for(int j = 0; j < n;\
    \ j++)\n        {\n            if(arr[j] == 1)\n            {\n              \
    \  count++;\n            }\n        }\n        \n        result[i] = count * 100000\
    \ + result[i];\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        int\
    \ count = 0;\n        for(int j = 0; j < n; j++)\n        {\n            if(arr[j]\
    \ == 1)\n            {\n                count++;\n            }\n        }\n \
    \       \n        result[i] = count * 1000000 + result[i];\n    }\n    \n    for(int\
    \ i = 0; i < n; i++)\n    {\n        int count = 0;\n        for(int j = 0; j\
    \ < n; j++)\n        {\n            if(arr[j] == 1)\n            {\n         \
    \       count++;\n            }\n        }\n        \n        result[i] = count\
    \ * 10000000 + result[i];\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        int count = 0;\n        for(int j = 0; j < n; j++)\n        {\n     \
    \       if(arr[j] == 1)\n            {\n                count++;\n           \
    \ }\n        }\n        \n        result[i] = count * 100000000 + result[i];\n\
    \    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        int count = 0;\n\
    \        for(int j = 0; j < n; j++)\n        {\n            if(arr[j] == 1)\n\
    \            {\n                count++;\n            }\n        }\n        \n",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    for(int i = 0; i < arr.length; ++i)\n    {\n  \
    \      if(arr[i] == 1)\n            ones++;\n        else\n            zeros++;\n\
    \        if(ones > zeros)\n        {\n            max = ones;\n            ones\
    \ = 0;\n        }\n        else\n        {\n            max = zeros;\n       \
    \     zeros = 0;\n        }\n        result[i] = max;\n    }\n    for(int i =\
    \ 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n            ones++;\n\
    \        else\n            zeros++;\n        if(ones > zeros)\n        {\n   \
    \         max = ones;\n            ones = 0;\n        }\n        else\n      \
    \  {\n            max = zeros;\n            zeros = 0;\n        }\n        result[i]\
    \ = max;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours\
    \ = 0;\n    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long\
    \ eights = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n\
    \    long thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands\
    \ = 0;\n    long thousand_thousands = 0;\n    long ones_hundreds = 0;\n    long\
    \ ones_thousands = 0;\n    long ones_ten_thousands = 0;\n    long ones_hundred_thousands\
    \ = 0;\n    long ones_thousand_thousands = 0;\n    long ones_hundred_thousands_thousands\
    \ = 0;\n    long ones_thousand_thousands_thousands = 0;\n    long ones_hundred_thousands_thousands_thousands\
    \ = 0;\n    long ones_thousand_thousands_thousands_thousands = 0;\n    long ones_hundred_thousands_thousands_thousands_thousands\
    \ = 0;\n    long ones_thousand_thousands_thousands_thousands_thousands = 0;\n\
    \    long ones_hundred_thousands_thousands_thousands_thousands_thousands = 0;\n\
    \    long ones_thousand_thousands_thousands_thousands_thousands_thousands = 0;\n\
    \    long ones_hundred_thousands_thousands_thousands_thousands_thousands_thousands\
    \ = 0;\n    long ones_thousand_thousands_thousands_thousands_thousands_thousands_thousands\
    \ = 0;\n    long ones_hundred_thousands_thousands_thousands_thousands_thousands_thousands_thousands\
    \ = 0;\n    long ones_thousand_thousands_thousands_thousands_thousands_thousands_thousands_thousands\
    \ = 0;\n    long ones_hundred_thousands_thousands_thousands_thousands_thousands_thousands_thousands_thousands\
    \ = 0;\n    long ones_thousand_thousands_thousands_thousands_thousands_thousands_thousands_thousands_thousands\
    \ = 0;\n    long ones_hundred_thousands_thousands_thousands_thousands_thousands_thousands_thousands_thousands_thousands\
    \ = 0;\n    long ones_thousand_thousands_thousands_thousands_thousands_thousand",
  "{\n    long ones = 0;\n    long max = 0;\n    long min = 0;\n    long sum = 0;\n\
    \    long temp = 0;\n    long result = 0;\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones++;\n     \
    \   }\n        else\n        {\n            temp = ones;\n            ones = max;\n\
    \            max = temp;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            sum += ones;\n\
    \        }\n        else\n        {\n            temp = sum;\n            sum\
    \ = min;\n            min = temp;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  result += sum;\n        }\n        else\n        {\n            temp = result;\n\
    \            result = max;\n            max = temp;\n        }\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \     {\n            result += min;\n        }\n        else\n        {\n    \
    \        temp = result;\n            result = sum;\n            sum = temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(arr[i] == 1)\n        {\n            result += ones;\n        }\n    \
    \    else\n        {\n            temp = result;\n            result = ones;\n\
    \            ones = temp;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result += sum;\n\
    \        }\n        else\n        {\n            temp = result;\n            result\
    \ = sum;\n            sum = temp;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  result += min;\n        }\n        else\n        {\n            temp = result;\n\
    \            result = min;\n            min = temp;\n        }\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \     {\n            result += max;\n        }\n        else\n        {\n    \
    \        temp = result;\n            result = max;\n            max = temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(arr[i] == 1)\n        {\n            result += ones;\n        }\n    \
    \    else\n        {\n            temp = result;\n            result = ones;\n\
    \            ones = temp;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result += sum;\n\
    \        }\n        else\n        {\n            temp = result;\n            result\
    \ = sum;\n            sum = temp;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(arr", "{\n    long[] result = new long[arr.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    long temp = 0;\n    while(i\
    \ < arr.length)\n    {\n        temp = arr[i];\n        while(temp != 0)\n   \
    \     {\n            int count = 0;\n            while(temp != 0 && temp % 2 ==\
    \ 0)\n            {\n                temp = temp / 2;\n                count++;\n\
    \            }\n            if(count > 0)\n            {\n                for(int\
    \ j = 0; j < count; j++)\n                {\n                    result[k] = arr[i];\n\
    \                    i++;\n                }\n                k++;\n         \
    \   }\n            else\n            {\n                for(int j = 0; j < count;\
    \ j++)\n                {\n                    result[k] = arr[i];\n         \
    \           i++;\n                }\n                k++;\n            }\n   \
    \     }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[k]\
    \ = arr[i];\n        k++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c#\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n<|/ c |>\n<| c |>\nI fixed it by adding\
    \ an if statement to check if arr[i] is negative.\n<|/ c |>\n<| a tags=sorting,arrays,c#\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long[] result = new\
    \ long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \     {\n            ones++;\n        }\n        else\n        {\n           \
    \ zeros++;\n        }\n        if(ones > zeros)\n        {\n            max =\
    \ ones;\n        }\n        else\n        {\n            max = zeros;\n      \
    \  }\n        result[i] = max;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| c |>\nThis solution doesn't\
    \ work for negative numbers. Try `sort_array([-10, -9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])` which should return `[-10, -9, -8, -7,\
    \ -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`.\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a solution for negative numbers. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nI believe this solution is wrong. Try `sort_array([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])` which should\
    \ return `[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]`.\n<|/ c |>\n<| c |>\nI updated my answer to include a solution for negative\
    \ numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI believe this solution\
    \ is wrong. Try `sort_array([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9])` which should return `[-10, -9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`.\n<|/ c |>\n<| a tags=algorithm,sorting,arrays\
    \ |>\nI believe this solution is wrong. Try sort_array([-10, -9, -8, -7, -6, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) which should return [-10, -9,\
    \ -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]. \u2013 James\
    \ McCulloch Jun 23 at 21:37", "{\n    long[] result = new long[arr.length];\n\
    \    int[] count = new int[arr.length];\n    for(int i = 0; i < arr.length; i++)\
    \ \n    {\n        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(count[arr[i]] > 1) \n        {\n            int j =\
    \ i;\n            while(j > 0 && count[arr[j-1]] == 1) \n            {\n     \
    \           result[j] = arr[j-1];\n                count[arr[j-1]]--;\n      \
    \          j--;\n            }\n            result[j] = arr[i];\n            count[arr[i]]--;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This solution is O(n^2) complexity. Sorting can be done in O(nlogn) complexity\
    \ using radix sort or counting sort or bucket sort or quicksort or mergesort or\
    \ quickselect or heapsort. But the complexity is still O(n^2)\n<|/ c |>\n<| c\
    \ |>\nYes, you are right. But the complexity is still O(n^2). Because the complexity\
    \ of sorting is O(nlogn) in the worst case. But the complexity of radix sort is\
    \ O(n). And counting sort is O(n). And bucket sort is O(n). And quicksort is O(nlogn).\
    \ And heapsort is O(nlogn). And quickselect is O(n). And mergesort is O(nlogn).\n\
    <|/ c |>\n<| c |>\nThe complexity of radix sort is O(n). But the complexity of\
    \ counting sort is O(n). And bucket sort is O(n). And quicksort is O(nlogn). And\
    \ heapsort is O(nlogn). And quickselect is O(n). And mergesort is O(nlogn).\n\
    <|/ c |>\n<| c |>\nYes, you are right. But the complexity of radix sort is O(n).\
    \ But the complexity of counting sort is O(n). And bucket sort is O(n). And quicksort\
    \ is O(nlogn). And heapsort is O(nlogn). And quickselect is O(n). And mergesort\
    \ is O(nlogn).\n<|/ c |>\n<| c |>\nI guess you meant O(nlogn) instead of O(n^2)\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.", "{\n    long[] result = new\
    \ long[arr.length];\n    long ones = 0;\n    long twos = 0;\n    long threes =\
    \ 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n    long\
    \ sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens = 0;\n\
    \    long elevens = 0;\n    long twelves = 0;\n    long thirteens = 0;\n    long\
    \ fourteens = 0;\n    long fifteens = 0;\n    long sixteens = 0;\n    long seventeens\
    \ = 0;\n    long eighteens = 0;\n    long nineteens = 0;\n    long twentys = 0;\n\
    \    long thirtys = 0;\n    long fortys = 0;\n    long fiftys = 0;\n    long sixtys\
    \ = 0;\n    long seventys = 0;\n    long eightys = 0;\n    long ninetys = 0;\n\
    \    long hundreds = 0;\n    long thousands = 0;\n    long millions = 0;\n   \
    \ long billions = 0;\n    long trillions = 0;\n    long quadrillions = 0;\n  \
    \  long quintillions = 0;\n    long sextillions = 0;\n    long septillions = 0;\n\
    \    long octillions = 0;\n    long nonillions = 0;\n    long decillions = 0;\n\
    \    long undecillions = 0;\n    long duodecillions = 0;\n    long tredecillions\
    \ = 0;\n    long quattuordecillions = 0;\n    long quindecillions = 0;\n    long\
    \ sexdecillions = 0;\n    long septendecillions = 0;\n    long octodecillions\
    \ = 0;\n    long novemdecillions = 0;\n    long vigintillions = 0;\n    long unvigintillions\
    \ = 0;\n    long duovigintillions = 0;\n    long trevigintillions = 0;\n    long\
    \ quattuorvigintillions = 0;\n    long quinvigintillions = 0;\n    long sexvigintillions\
    \ = 0;\n    long septemvigintillions = 0;\n    long octovigintillions = 0;\n \
    \   long novemvigintillions = 0;\n    long triginta = 0;\n    long untriginta\
    \ = 0;\n    long duotriginta = 0;\n    long tretriginta = 0;\n    long quattuortriginta\
    \ = 0;\n    long quintriginta = 0;\n    long sextriginta = 0;", "{\n    long[]\
    \ result = new long[arr.length];\n    int[] count = new int[arr.length];\n   \
    \ \n    for (int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = count[arr[i]];\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n  \
    \  {\n        count[arr[i]]--;\n    }\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = count[arr[i]];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\n\
    def sort_array(arr):\n    arr.sort()\n    arr.reverse()\n    return arr\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_array(arr):\n\
    \    arr.sort()\n    arr.reverse()\n    return arr\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\ndef sort_array(arr):\n\
    \    arr.sort()\n    arr.reverse()\n    return arr\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\ndef sort_array(arr):\n    arr.sort()\n    arr.reverse()\n\
    \    return arr\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding why\
    \ and/or how this code answers the question improves its long-term value.\n<|/\
    \ c |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\ndef sort_array(arr):\n\
    \    arr.sort()\n    arr.reverse()\n    return arr\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,algorithm,arrays |>\n<code>\ndef sort_array(arr):\n    arr.sort()\n\
    \    arr.reverse()\n    return arr\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef sort_array(arr):\n    arr.sort()\n    arr.reverse()\n    return\
    \ arr\n</code>\n<|/", "{\n    long[] result = new long[arr.length];\n    long\
    \ ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours = 0;\n \
    \   long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long eights\
    \ = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n    long\
    \ thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands = 0;\n\
    \    long thousand_thousands = 0;\n    long millions = 0;\n    long billions =\
    \ 0;\n    long trillions = 0;\n    long quadrillions = 0;\n    long quintillions\
    \ = 0;\n    long sextillions = 0;\n    long septillions = 0;\n    long octillions\
    \ = 0;\n    long nonillions = 0;\n    long decillions = 0;\n    long undecillions\
    \ = 0;\n    long duodecillions = 0;\n    long tredecillions = 0;\n    long quattuordecillions\
    \ = 0;\n    long quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septenvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long trigints = 0;\n    long untrigints = 0;\n    long duotrigints = 0;\n \
    \   long tretrigints = 0;\n    long quattuortrigints = 0;\n    long quinttrigints\
    \ = 0;\n    long sextrigints = 0;\n    long septentrigints = 0;\n    long octotrigints\
    \ = 0;\n    long novemtrigints = 0;\n    long quadragints = 0;\n    long unquadragints\
    \ = 0;\n    long duoquadragints = 0;\n    long trequadragints = 0;\n    long quattuorquadragints\
    \ = 0;\n    long quinquadragints = 0;\n    long sexquadragints = 0;\n    long\
    \ septenquadragints = 0;\n", "{\n    long[] result = new long[arr.length];\n \
    \   int i = 0;\n    long ones = 0;\n    long twos = 0;\n    long threes = 0;\n\
    \    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n    long sevens\
    \ = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens = 0;\n    long\
    \ hundreds = 0;\n    long thousands = 0;\n    long ten_thousands = 0;\n    long\
    \ hundred_thousands = 0;\n    long thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_thousands = 0;\n    long hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thous", "{\n    long[] result = new\
    \ long[arr.length];\n    int[] count = new int[arr.length];\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        result[i] = count[arr[i]];\n    }\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]--;\n  \
    \  }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = count[arr[i]];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not the right\
    \ solution. Try it with `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]`\n<|/\
    \ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out. :)\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long[] result = new long[arr.length];\n\
    \    int n = arr.length;\n    long[] ones = new long[n];\n    long[] zeros = new\
    \ long[n];\n    for(int i = 0; i < n; i++)\n    {\n        ones[i] = 1;\n    \
    \    zeros[i] = 0;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = 0; j < n; j++)\n        {\n            if(arr[i] > arr[j])\n           \
    \ {\n                int temp = arr[i];\n                arr[i] = arr[j];\n  \
    \              arr[j] = temp;\n            }\n        }\n    }\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n        {\n   \
    \         if(ones[i] > ones[j])\n            {\n                int temp = ones[i];\n\
    \                ones[i] = ones[j];\n                ones[j] = temp;\n       \
    \     }\n        }\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = 0; j < n; j++)\n        {\n            if(zeros[i] > zeros[j])\n       \
    \     {\n                int temp = zeros[i];\n                zeros[i] = zeros[j];\n\
    \                zeros[j] = temp;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n        {\n \
    \           if(ones[i] > ones[j])\n            {\n                int temp = ones[i];\n\
    \                ones[i] = ones[j];\n                ones[j] = temp;\n       \
    \     }\n        }\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = 0; j < n; j++)\n        {\n            if(zeros[i] > zeros[j])\n       \
    \     {\n                int temp = zeros[i];\n                zeros[i] = zeros[j];\n\
    \                zeros[j] = temp;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n        {\n \
    \           if(ones[i] > ones[j])\n            {\n                int temp = ones[i];\n\
    \                ones[i] = ones[j];\n                ones[j] = temp;\n       \
    \     }\n        }\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = 0; j < n; j++)\n        {\n            if(zeros[i] > zeros[j])\n       \
    \     {\n                int temp = zeros[i];\n                zeros[i] = zeros[j];\n\
    \                zeros[j] = temp;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n        {\n \
    \           if(ones[i] > ones[j])\n            {\n                int temp = ones[i];\n\
    \                ones[i] = ones[j];\n                ones[j] = temp;\n       \
    \     }\n        }\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = 0; j < n; j++)\n        {\n            if(zeros[i] > zeros[j])\n       \
    \     {\n                int temp = zeros[i];\n                zeros[i] = zeros[j];\n\
    \                zeros[j", "{\n    long[] result = new long[arr.length];\n   \
    \ long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours = 0;\n\
    \    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long eights\
    \ = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n    long\
    \ thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands = 0;\n\
    \    long thousand_thousands = 0;\n    long ten_thousand_thousands = 0;\n    long\
    \ hundred_thousand_thousands = 0;\n    long thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousands = 0;\n    long ten_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousands = 0;\n    long\
    \ hundred_thousand_thousand_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousands =\
    \ 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n", "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n\
    \    long zeros = 0;\n    for(int i = 0; i < arr.length; ++i)\n    {\n       \
    \ if(arr[i] == 1)\n            ones++;\n        else\n            zeros++;\n \
    \   }\n    long maxOnes = ones;\n    long maxZeros = zeros;\n    for(int i = 0;\
    \ i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  if(maxOnes == ones)\n            {\n                maxOnes++;\n          \
    \      maxZeros = 0;\n            }\n            else\n            {\n       \
    \         maxOnes++;\n                maxZeros = 0;\n                result[i]\
    \ = maxOnes - ones;\n            }\n        }\n        else\n        {\n     \
    \       if(maxZeros == zeros)\n            {\n                maxOnes--;\n   \
    \             maxZeros = 0;\n            }\n            else\n            {\n\
    \                maxOnes--;\n                maxZeros = 0;\n                result[i]\
    \ = maxZeros - zeros;\n            }\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| c |>\nI like the idea of using\
    \ bitwise operators to count the number of ones and zeros in a number. Thanks!\n\
    <|/ c |>\n<| a dscore=2 |>\nI believe that this is an interesting problem and\
    \ I believe that there are some interesting solutions. \nThe idea is to count\
    \ the number of ones and zeros in a number using bitwise operators. \nThe first\
    \ step is to count the number of ones and zeros in a number. \n<code>", "{\n \
    \   long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ == 1){\n            ones++;\n        }else{\n            zeros++;\n        }\n\
    \        if(ones > zeros){\n            max = ones;\n        }else{\n        \
    \    max = zeros;\n        }\n        result[i] = max;\n    }\n    for(int i =\
    \ 0; i < arr.length; i++){\n        result[i] = arr[i];\n    }\n    for(int i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] == 1){\n            arr[i] = 0;\n\
    \        }else{\n            arr[i] = 1;\n        }\n    }\n    for(int i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] == 0){\n            arr[i] = 1;\n \
    \       }else{\n            arr[i] = 0;\n        }\n    }\n    for(int i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] == 1){\n            ones--;\n     \
    \   }else{\n            zeros--;\n        }\n        if(ones > zeros){\n     \
    \       max = ones;\n        }else{\n            max = zeros;\n        }\n   \
    \     result[i] = max;\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| a tags=algorithm,sorting,arrays |>\n<code>\nimport java.util.Arrays;",
  "{\n    int n = arr.length;\n    long[] result = new long[n];\n    int[] count =\
    \ new int[n];\n    for(int i = 0; i < n; ++i)\n    {\n        count[arr[i]]++;\n\
    \    }\n    for(int i = 0; i < n; ++i)\n    {\n        result[i] = 0;\n      \
    \  for(int j = 0; j < count[i]; ++j)\n        {\n            result[i] += j;\n\
    \        }\n    }\n    for(int i = 0; i < n; ++i)\n    {\n        result[i] /=\
    \ count[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not correct. `sort_array` returns `[0, 1, 2, 3, 4]` but\
    \ `sort_array([1, 0, 2, 3, 4])` returns `[0, 1, 2, 3, 4]`.\n<|/ c |>\n<| c |>\n\
    I believe that `sort_array([1, 0, 2, 3, 4])` returns `[0, 1, 2, 3, 4]` because\
    \ `sort_array` returns `[0, 1, 2, 3, 4]` because `sort_array([-2, -3, -4, -5,\
    \ -6])` returns `[-6, -5, -4, -3, -2]`.\n<|/ c |>\n<| c |>\nYes, I see that now.\
    \ My mistake.\n<|/ c |>\n<| c |>\nThis doesn't work. `sort_array([1, 0, 2, 3,\
    \ 4])` returns `[0, 1, 2, 3, 4]` but `sort_array([-2, -3, -4, -5, -6])` returns\
    \ `[-6, -5, -4, -3, -2]`.\n<|/ c |>\n<| c |>\nI believe that `sort_array([1, 0,\
    \ 2, 3, 4])` returns `[0, 1, 2, 3, 4]` because `sort_array` returns `[0, 1, 2,\
    \ 3, 4]` because `sort_array([-2, -3, -4, -5, -6])` returns `[-6, -5, -4, -3,\
    \ -2]`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] a = {1, 5, 2, 3, 4};\n    int[] b = {-2, -3, -4, -5, -6};\n\
    \    int[] c = sort_array(a);\n    int[] d = sort_array(b);\n    System.out.println(Arrays.toString(c));\n\
    \    System.out.println(Arrays.toString(d));\n}", "{\n    long[] result = new\
    \ long[arr.length];\n    for(int i = 0; i < arr.length; i++)\n    {\n        int\
    \ count = 0;\n        for(int j = 0; j < arr.length; j++)\n        {\n       \
    \     if(arr[j] == 1)\n            {\n                count++;\n            }\n\
    \        }\n        result[i] = count;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on\
    \ `sort_array([1, 5, 2, 3, 4])`\n<|/ c |>\n<| c |>\nIt does work, try it on `sort_array([-2,\
    \ -3, -4, -5, -6])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it on `sort_array([1,\
    \ 0, 2, 3, 4])`\n<|/ c |>\n<| c |>\nIt does work, try it on `sort_array([1, 0,\
    \ 2, 3, 4])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it on `sort_array([1, 0,\
    \ 2, 3, 4])`\n<|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long twos\
    \ = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long\
    \ sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n\
    \    long tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long\
    \ ten_thousands = 0;\n    long hundred_thousands = 0;\n    long thousand_thousands\
    \ = 0;\n    long ten_thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousands = 0;\n    long ten_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousands = 0;\n    long\
    \ ten_thousand_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n  \
    \  long hundred_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long thousand_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n", "{\n    long[] result = new long[arr.length];\n    int i = 0;\n   \
    \ int j = 0;\n    int k = 0;\n    long sum = 0;\n    long count = 0;\n    long\
    \ max = 0;\n    long min = 0;\n    long temp = 0;\n    while(i < arr.length)\n\
    \    {\n        temp = arr[i];\n        sum = 0;\n        count = 0;\n       \
    \ while(temp != 0)\n        {\n            sum += (temp % 2);\n            temp\
    \ = temp / 2;\n            count++;\n        }\n        if(count > max)\n    \
    \    {\n            max = count;\n            k = i;\n        }\n        if(count\
    \ < min)\n        {\n            min = count;\n            j = i;\n        }\n\
    \        i++;\n    }\n    while(j < arr.length)\n    {\n        temp = arr[j];\n\
    \        sum = 0;\n        count = 0;\n        while(temp != 0)\n        {\n \
    \           sum += (temp % 2);\n            temp = temp / 2;\n            count++;\n\
    \        }\n        if(count > max)\n        {\n            max = count;\n   \
    \         k = j;\n        }\n        if(count < min)\n        {\n            min\
    \ = count;\n            j = j;\n        }\n        j++;\n    }\n    while(i <\
    \ arr.length)\n    {\n        temp = arr[i];\n        sum = 0;\n        count\
    \ = 0;\n        while(temp != 0)\n        {\n            sum += (temp % 2);\n\
    \            temp = temp / 2;\n            count++;\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            k = i;\n        }\n\
    \        if(count < min)\n        {\n            min = count;\n            j =\
    \ i;\n        }\n        i++;\n    }\n    while(j < arr.length)\n    {\n     \
    \   temp = arr[j];\n        sum = 0;\n        count = 0;\n        while(temp !=\
    \ 0)\n        {\n            sum += (temp % 2);\n            temp = temp / 2;\n\
    \            count++;\n        }\n        if(count > max)\n        {\n       \
    \     max = count;\n            k = j;\n        }\n        if(count < min)\n \
    \       {\n            min = count;\n            j = j;\n        }\n        j++;\n\
    \    }\n    result[k] = arr[k];\n    for(int i = k + 1; i < arr.length; i++)\n\
    \    {\n        temp = arr[i];\n        sum = 0;\n        count = 0;\n       \
    \ while(temp != 0)\n        {\n            sum += (temp % 2);\n            temp\
    \ = temp / 2;\n            count++;\n        }\n        if(count > max)\n    \
    \    {\n            max = count;\n            k = i;\n        }\n        if(count\
    \ < min)\n        {\n            min = count;\n            j = i;\n        }\n\
    \        result[i] = arr[k];\n    }\n    for(int i = k + 1; i < arr.length; i++)\n\
    \    {\n        ", "{\n    long[] result = new long[arr.length];\n    long ones\
    \ = 0;\n    long tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n\
    \    long count = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n       \
    \ if(arr[i] == 1)\n        {\n            ones++;\n        }\n        else if(arr[i]\
    \ == 10)\n        {\n            tens++;\n        }\n        else if(arr[i] ==\
    \ 100)\n        {\n            hundreds++;\n        }\n        else if(arr[i]\
    \ == 1000)\n        {\n            thousands++;\n        }\n        else\n   \
    \     {\n            count++;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else if(arr[i] == 10)\n        {\n            result[i] =\
    \ tens;\n        }\n        else if(arr[i] == 100)\n        {\n            result[i]\
    \ = hundreds;\n        }\n        else if(arr[i] == 1000)\n        {\n       \
    \     result[i] = thousands;\n        }\n        else\n        {\n           \
    \ result[i] = count;\n        }\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis is not\
    \ the correct solution. Try this test case: `sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nI believe this solution is correct. Can you\
    \ please explain why you think it isn't?\n<|/ c |>\n<| c |>\nI believe this solution\
    \ is correct. Can you please explain why you think it isn't?\n<|/ c |>\n<| c |>\n\
    The solution does not work. Try this test case: `sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nI believe this solution is correct. Can\
    \ you please explain why you think it isn't?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n   \
    \ long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours = 0;\n\
    \    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long eights\
    \ = 0;\n    long nines = 0;\n    long tens = 0;\n    long elevens = 0;\n    long\
    \ twelves = 0;\n    long thirteens = 0;\n    long fourteens = 0;\n    long fifteens\
    \ = 0;\n    long sixteens = 0;\n    long seventeens = 0;\n    long eighteens =\
    \ 0;\n    long nineteens = 0;\n    long twentys = 0;\n    long thirtys = 0;\n\
    \    long fortys = 0;\n    long fiftys = 0;\n    long sixtys = 0;\n    long seventys\
    \ = 0;\n    long eightys = 0;\n    long ninetys = 0;\n    long hundreds = 0;\n\
    \    long thousands = 0;\n    long tenthousands = 0;\n    long hundredthousands\
    \ = 0;\n    long millions = 0;\n    long billions = 0;\n    long trillions = 0;\n\
    \    long quadrillions = 0;\n    long quintillions = 0;\n    long sextillions\
    \ = 0;\n    long septillions = 0;\n    long octillions = 0;\n    long nonillions\
    \ = 0;\n    long decillions = 0;\n    long undecillions = 0;\n    long duodecillions\
    \ = 0;\n    long tredecillions = 0;\n    long quattuordecillions = 0;\n    long\
    \ quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septemvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long vexillions = 0;\n    long unvexillions = 0;\n    long duovexillions =\
    \ 0;\n    long trevexillions = 0;\n    long quattuorvexilli", "{\n    long[] result\
    \ = new long[arr.length];\n    long ones = 0;\n    long twos = 0;\n    long threes\
    \ = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n    long\
    \ sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens = 0;\n\
    \    long hundreds = 0;\n    long thousands = 0;\n    long ten_thousands = 0;\n\
    \    long hundred_thousands = 0;\n    long thousand_thousands = 0;\n    long ones_thousands\
    \ = 0;\n    long ones_hundreds = 0;\n    long ones_tens = 0;\n    long ones_fives\
    \ = 0;\n    long ones_twos = 0;\n    long ones_ones = 0;\n    long ones_zeros\
    \ = 0;\n    long twos_ones = 0;\n    long twos_zeros = 0;\n    long threes_ones\
    \ = 0;\n    long threes_zeros = 0;\n    long fours_ones = 0;\n    long fours_zeros\
    \ = 0;\n    long fives_ones = 0;\n    long fives_zeros = 0;\n    long sixes_ones\
    \ = 0;\n    long sixes_zeros = 0;\n    long sevens_ones = 0;\n    long sevens_zeros\
    \ = 0;\n    long eights_ones = 0;\n    long eights_zeros = 0;\n    long nines_ones\
    \ = 0;\n    long nines_zeros = 0;\n    long tens_ones = 0;\n    long tens_zeros\
    \ = 0;\n    long hundreds_ones = 0;\n    long hundreds_zeros = 0;\n    long thousands_ones\
    \ = 0;\n    long thousands_zeros = 0;\n    long ten_thousands_ones = 0;\n    long\
    \ ten_thousands_zeros = 0;\n    long hundred_thousands_ones = 0;\n    long hundred_thousands_zeros\
    \ = 0;\n    long thousand_thousands_ones = 0;\n    long thousand_thousands_zeros\
    \ = 0;\n    long ones_thousands_ones = 0;\n    long ones_thousands_zeros = 0;\n\
    \    long ones_hundreds_ones = 0;\n    long ones_hundreds_zeros = 0;\n    long\
    \ ones_tens_ones = 0;\n    long ones_tens_zeros = 0;\n    long ones_fives_ones\
    \ = 0;\n    long ones_fives_zeros = 0;\n    long ones_twos_ones = 0;\n    long\
    \ ones_twos_zeros = 0;\n    long ones_ones_ones = 0;\n    long ones_ones_zeros\
    \ = 0;\n    long twos_ones_ones = 0;\n    long twos_ones_zero", "{\n    long[]\
    \ result = new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n  \
    \  long max = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n        if(arr[i] >\
    \ max)\n        {\n            max = arr[i];\n        }\n        if(arr[i] < min)\n\
    \        {\n            min = arr[i];\n        }\n    }\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i]\
    \ = ones;\n        }\n        else\n        {\n            result[i] = zeros;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = ones;\n        }\n        else\n \
    \       {\n            result[i] = zeros;\n        }\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(arr[i] == 1)\n        {\n            result[i] = ones;\n        }\n\
    \        else\n        {\n            result[i] = zeros;\n        }\n    }\n \
    \   for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n    \
    \    {\n            result[i] = ones;\n        }\n        else\n        {\n  \
    \          result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n  \
    \  }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = arr[i];\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]]\
    \ == 1)\n        {\n            int j;\n            for(j = i; j < arr.length;\
    \ j++)\n            {\n                if(arr[j] == arr[i])\n                {\n\
    \                    break;\n                }\n            }\n            int\
    \ temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    Arrays.sort(result);\n    return result;\n}\n\
    </code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\nThanks so much for this!\
    \ I really appreciate it!\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long result =\
    \ 0;\n    long ones = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long len = arr.length;\n    \n    for(i = 0; i < len; i++)\n    {\n     \
    \   ones = arr[i];\n        for(j = 0; j < len; j++)\n        {\n            if(arr[j]\
    \ == ones)\n            {\n                temp = arr[j];\n                arr[j]\
    \ = arr[i];\n                arr[i] = temp;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < len; i++)\n    {\n        ones = arr[i];\n        for(j\
    \ = 0; j < len; j++)\n        {\n            if(arr[j] == ones)\n            {\n\
    \                temp = arr[j];\n                arr[j] = arr[i];\n          \
    \      arr[i] = temp;\n            }\n        }\n    }\n    \n    for(i = 0; i\
    \ < len; i++)\n    {\n        ones = arr[i];\n        for(j = 0; j < len; j++)\n\
    \        {\n            if(arr[j] == ones)\n            {\n                temp\
    \ = arr[j];\n                arr[j] = arr[i];\n                arr[i] = temp;\n\
    \            }\n        }\n    }\n    \n    for(i = 0; i < len; i++)\n    {\n\
    \        ones = arr[i];\n        for(j = 0; j < len; j++)\n        {\n       \
    \     if(arr[j] == ones)\n            {\n                temp = arr[j];\n    \
    \            arr[j] = arr[i];\n                arr[i] = temp;\n            }\n\
    \        }\n    }\n    \n    for(i = 0; i < len; i++)\n    {\n        ones = arr[i];\n\
    \        for(j = 0; j < len; j++)\n        {\n            if(arr[j] == ones)\n\
    \            {\n                temp = arr[j];\n                arr[j] = arr[i];\n\
    \                arr[i] = temp;\n            }\n        }\n    }\n    \n    for(i\
    \ = 0; i < len; i++)\n    {\n        ones = arr[i];\n        for(j = 0; j < len;\
    \ j++)\n        {\n            if(arr[j] == ones)\n            {\n           \
    \     temp = arr[j];\n                arr[j] = arr[i];\n                arr[i]\
    \ = temp;\n            }\n        }\n    }\n    \n    for(i = 0; i < len; i++)\n\
    \    {\n        ones = arr[i];\n        for(j = 0; j < len; j++)\n        {\n\
    \            if(arr[j] == ones)\n            {\n                temp = arr[j];\n\
    \                arr[j] = arr[i];\n                arr[i] = temp;\n          \
    \  }\n        }\n    }\n    \n    for(i = 0; i < len; i++)\n    {\n        ones\
    \ = arr[i];\n        for(j = 0; j < len; j++)\n        {\n            if(arr[j]\
    \ == ones)\n            {\n                temp = arr[j];\n                arr[j]\
    \ = arr[i];\n                arr[i] = temp;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < len; i++)\n    {\n        ones = arr[i];\n", "{\n  \
    \  long[] result = new long[arr.length];\n    int i = 0;\n    long sum = 0;\n\
    \    \n    for(int j=0; j<arr.length; j++)\n    {\n        sum += arr[j];\n  \
    \      result[i] = sum;\n        i++;\n    }\n    \n    for(int j=0; j<arr.length;\
    \ j++)\n    {\n        sum -= arr[j];\n        result[i] = sum;\n        i++;\n\
    \    }\n    \n    for(int j=0; j<arr.length; j++)\n    {\n        sum += arr[j];\n\
    \        result[i] = sum;\n        i++;\n    }\n    \n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long result = 0;\n    long ones = 0;\n    long\
    \ tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long total =\
    \ 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            ones++;\n        }\n        else if(arr[i] == 10)\n  \
    \      {\n            tens++;\n        }\n        else if(arr[i] == 100)\n   \
    \     {\n            hundreds++;\n        }\n        else if(arr[i] == 1000)\n\
    \        {\n            thousands++;\n        }\n        else\n        {\n   \
    \         total++;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result += (ones\
    \ * pow(10, arr.length - i - 1));\n        }\n        else if(arr[i] == 10)\n\
    \        {\n            result += (tens * pow(10, arr.length - i - 1));\n    \
    \    }\n        else if(arr[i] == 100)\n        {\n            result += (hundreds\
    \ * pow(10, arr.length - i - 1));\n        }\n        else if(arr[i] == 1000)\n\
    \        {\n            result += (thousands * pow(10, arr.length - i - 1));\n\
    \        }\n        else\n        {\n            result += (total * pow(10, arr.length\
    \ - i - 1));\n        }\n    }\n    \n    long temp = 0;\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n            temp\
    \ += ones;\n        }\n        else if(arr[i] == 10)\n        {\n            temp\
    \ += tens;\n        }\n        else if(arr[i] == 100)\n        {\n           \
    \ temp += hundreds;\n        }\n        else if(arr[i] == 1000)\n        {\n \
    \           temp += thousands;\n        }\n        else\n        {\n         \
    \   temp += total;\n        }\n    }\n    \n    result += (temp * pow(10, arr.length\
    \ - 1));\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work if you have negative numbers. Try `sort_array([-2, -3, -4, -5,\
    \ -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ with negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that works with negative numbers. I tested it and it works.\n<|/\
    \ c |>\n<| a dscore=1 |>\nI wrote a solution that works with negative numbers.\
    \ I tested it and it works.\n<code>\nimport std.stdio;\nimport std.array;\nimport\
    \ std.conv;\nimport std.algorithm;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours\
    \ = 0;\n    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long\
    \ eights = 0;\n    long nines = 0;\n    long tens = 0;\n    long elevens = 0;\n\
    \    long twelves = 0;\n    long thirteens = 0;\n    long fourteens = 0;\n   \
    \ long fifteens = 0;\n    long sixteens = 0;\n    long seventeens = 0;\n    long\
    \ eighteens = 0;\n    long nineteens = 0;\n    long twentys = 0;\n    long thirtys\
    \ = 0;\n    long fortys = 0;\n    long fiftys = 0;\n    long sixtys = 0;\n   \
    \ long seventys = 0;\n    long eightys = 0;\n    long ninetys = 0;\n    long hundreds\
    \ = 0;\n    long thousands = 0;\n    long tenthousands = 0;\n    long hundredthousands\
    \ = 0;\n    long millions = 0;\n    long billions = 0;\n    long trillions = 0;\n\
    \    long quadrillions = 0;\n    long quintillions = 0;\n    long sextillions\
    \ = 0;\n    long septillions = 0;\n    long octillions = 0;\n    long nonillions\
    \ = 0;\n    long decillions = 0;\n    long undecillions = 0;\n    long duodecillions\
    \ = 0;\n    long tredecillions = 0;\n    long quattuordecillions = 0;\n    long\
    \ quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septenvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long triginta = 0;\n    long untriginta = 0;\n    long duotriginta = 0;\n \
    \   long tretriginta = 0;\n    long quattuortriginta = 0;\n    long ", "{\n  \
    \  long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    int i, j, k;\n    \n    for (i = 0; i < arr.length; ++i)\n        count[arr[i]]++;\n\
    \    \n    for (i = 0; i < arr.length; ++i)\n        result[i] = 0;\n    \n  \
    \  for (j = 0; j < arr.length; ++j)\n    {\n        for (k = 0; k < count[arr[j]];\
    \ ++k)\n        {\n            result[j] += k;\n        }\n    }\n    \n    Arrays.sort(result);\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your\
    \ solution, but I believe it would be more efficient to sort the array in place\
    \ rather than creating a new array and copying all the elements. Also, `Arrays.sort`\
    \ sorts in-place, so you don't need to copy the array first.\n<|/ c |>\n<| c |>\n\
    Yes, you are right. I just wanted to show that it is possible to do it in place.\
    \ Also I didn't know that Arrays.sort sorts in-place. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nI believe that your solution is O(n^2) in worst case.\
    \ Your solution is O(n*logn) in best case. Your solution is O(n*logn) in average\
    \ case. Your solution is O(n^2) in best case and O(n) in worst case. Your solution\
    \ is O(n) in best case and O(n) in worst case. Your solution is O(n) in best case\
    \ and O(n) in average case. Your solution is O(n) in best case and O(n) in worst\
    \ case. Your solution is O(n) in best case and O(n) in average case. Your solution\
    \ is O(n) in best case and O(n) in worst case. Your solution is O(n) in best case\
    \ and O(n) in average case. Your solution is O(n) in best case and O(n) in worst\
    \ case. Your solution is O(n) in best case and O(n) in average case. Your solution\
    \ is O(n) in best case and O(n) in worst case. Your solution is O(n) in best case\
    \ and O(n) in average case. Your solution is O(n) in best case and O(n) in worst\
    \ case. Your solution is O(n) in best case and O(n) in average case. Your solution\
    \ is O(n) in best case and O(n) in worst case. Your solution is O(n) in best case\
    \ and O(n) in average case. Your solution is O(n) in best case and O(n) in worst\
    \ case. Your solution is ", "{\n    long[] result = new long[arr.length];\n  \
    \  int j = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 0)\n            continue;\n        \n        int count = 0;\n        for(int\
    \ k = i; k < arr.length; k++)\n        {\n            if(arr[k] == 1)\n      \
    \      {\n                count++;\n            }\n        }\n        \n     \
    \   if(count == 0)\n        {\n            result[j] = arr[i];\n            j++;\n\
    \        }\n        else if(count == 1)\n        {\n            int temp = arr[i];\n\
    \            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = arr[i];\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n    \
    \    for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j] ==\
    \ 1)\n            {\n                count++;\n            }\n        }\n    \
    \    result[i] = count;\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        for(int j = 0; j < arr.length; j++)\n        {\n            if(result[j]\
    \ < result[i])\n            {\n                int temp = result[i];\n       \
    \         result[i] = result[j];\n                result[j] = temp;\n        \
    \    }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis is not the correct solution. Your code will sort `[1, 1, 2, 2, 3]`\
    \ as `[1, 2, 3, 1]` instead of `[1, 2, 3]`.\n<|/ c |>\n<| c |>\nI didn't see that\
    \ requirement in the question. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    I added a solution that sorts correctly according to number of ones in their binary\
    \ representation in ascending order.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ sorts correctly according to decimal value.\n<|/ c |>\n<| a |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[arr.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n    int m = 0;\n   \
    \ long sum = 0;\n    \n    while(i < arr.length)\n    {\n        sum = 0;\n  \
    \      \n        while(j < arr.length)\n        {\n            if(arr[j] == 1)\n\
    \            {\n                sum += 1;\n                j++;\n            }\n\
    \            else\n            {\n                sum = 0;\n                j++;\n\
    \            }\n        }\n        \n        if(sum > n)\n        {\n        \
    \    result[k] = arr[i];\n            k = k + 1;\n            n = sum;\n     \
    \   }\n        \n        i++;\n    }\n    \n    while(j < arr.length)\n    {\n\
    \        sum = 0;\n        \n        while(j < arr.length)\n        {\n      \
    \      if(arr[j] == 1)\n            {\n                sum += 1;\n           \
    \     j++;\n            }\n            else\n            {\n                sum\
    \ = 0;\n                j++;\n            }\n        }\n        \n        if(sum\
    \ > m)\n        {\n            result[k] = arr[i];\n            k = k + 1;\n \
    \           m = sum;\n        }\n        \n        j++;\n    }\n    \n    while(j\
    \ < arr.length)\n    {\n        sum = 0;\n        \n        while(j < arr.length)\n\
    \        {\n            if(arr[j] == 1)\n            {\n                sum +=\
    \ 1;\n                j++;\n            }\n            else\n            {\n \
    \               sum = 0;\n                j++;\n            }\n        }\n   \
    \     \n        if(sum > n)\n        {\n            result[k] = arr[i];\n    \
    \        k = k + 1;\n            n = sum;\n        }\n        \n        j++;\n\
    \    }\n    \n    while(j < arr.length)\n    {\n        sum = 0;\n        \n \
    \       while(j < arr.length)\n        {\n            if(arr[j] == 1)\n      \
    \      {\n                sum += 1;\n                j++;\n            }\n   \
    \         else\n            {\n                sum = 0;\n                j++;\n\
    \            }\n        }\n        \n        if(sum > m)\n        {\n        \
    \    result[k] = arr[i];\n            k = k + 1;\n            m = sum;\n     \
    \   }\n        \n        j++;\n    }\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nI appreciate your effort, but this does not answer the\
    \ question. I am not asking for a solution, I am asking for a hint on how to solve\
    \ the problem. Thank you anyway.\n<|/ c |>\n<| c |>\nI appreciate your effort,\
    \ but this does not answer the question. I am not asking for a solution, I am\
    \ asking for a hint on how to solve the problem. Thank you anyway.\n<|/ c ", "{\n\
    \    long[] result = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        int count = 0;\n        for(int j = 0; j < arr.length;\
    \ j++)\n        {\n            if(arr[j] == 1)\n            {\n              \
    \  count++;\n            }\n        }\n        result[i] = count;\n    }\n   \
    \ Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not the correct solution. `Arrays.sort` sorts the array\
    \ in place. Hence the return statement is useless.\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. I just wanted to show that you can sort an array in place without\
    \ returning a new array.\n<|/ c |>\n<| c |>\nThe return statement is useless.\
    \ You don't need to return anything. Just call `Arrays.sort(arr)`.\n<|/ c |>\n\
    <| c |>\nYes, you are right. I just wanted to show that you can sort an array\
    \ in place without returning a new array.\n<|/ c |>\n<| a |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4};\n    Arrays.sort(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a dscore=2 tags=sorting,arrays,algorithm,java\
    \ |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 5, 2, 3, 4};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4};\n \
    \   Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n    int[]\
    \ count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n    {\n\
    \        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n  \
    \  {\n        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        for(int j = 0; j < count[arr[i]]; ++j)\n        {\n          \
    \  int temp = result[i];\n            result[i] = result[j];\n            result[j]\
    \ = temp;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis solution doesn't work for negative numbers. `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. The code I posted is tested and works.\n<|/ c\
    \ |>\n<| c |>\nI tested it again and it doesn't work for negative numbers. `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it doesn't work for negative numbers. `sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nI tested it again and it doesn't\
    \ work for negative numbers. `sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4,\
    \ -3, -2]`\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n    long\
    \ ones = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         ones++;\n        }\n        else\n        {\n            zeros++;\n\
    \        }\n        if(arr[i] > max)\n        {\n            max = arr[i];\n \
    \       }\n        if(arr[i] < min)\n        {\n            min = arr[i];\n  \
    \      }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = ones;\n        }\n        else\n \
    \       {\n            result[i] = zeros;\n        }\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(arr[i] == 1)\n        {\n            result[i] = ones;\n        }\n\
    \        else\n        {\n            result[i] = zeros;\n        }\n    }\n \
    \   for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n    \
    \    {\n            result[i] = ones;\n        }\n        else\n        {\n  \
    \          result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ", "{\n    long[] result = new long[arr.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = arr.length;\n   \
    \ bool swapped;\n    \n    while (i < n) {\n        swapped = false;\n       \
    \ \n        while (j < n) {\n            if (arr[j] == 0) {\n                swap(arr,\
    \ j, k);\n                swapped = true;\n            }\n            j++;\n \
    \       }\n        \n        if (swapped == false) {\n            result[i] =\
    \ arr[i];\n            i++;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    long[] ones_counter = new long[arr.length];\n\
    \    long[] zeros_counter = new long[arr.length];\n    long[] ones_counter2 =\
    \ new long[arr.length];\n    long[] zeros_counter2 = new long[arr.length];\n \
    \   long[] ones_counter3 = new long[arr.length];\n    long[] zeros_counter3 =\
    \ new long[arr.length];\n    long[] ones_counter4 = new long[arr.length];\n  \
    \  long[] zeros_counter4 = new long[arr.length];\n    long[] ones_counter5 = new\
    \ long[arr.length];\n    long[] zeros_counter5 = new long[arr.length];\n    long[]\
    \ ones_counter6 = new long[arr.length];\n    long[] zeros_counter6 = new long[arr.length];\n\
    \    long[] ones_counter7 = new long[arr.length];\n    long[] zeros_counter7 =\
    \ new long[arr.length];\n    long[] ones_counter8 = new long[arr.length];\n  \
    \  long[] zeros_counter8 = new long[arr.length];\n    long[] ones_counter9 = new\
    \ long[arr.length];\n    long[] zeros_counter9 = new long[arr.length];\n    long[]\
    \ ones_counter10 = new long[arr.length];\n    long[] zeros_counter10 = new long[arr.length];\n\
    \    long[] ones_counter11 = new long[arr.length];\n    long[] zeros_counter11\
    \ = new long[arr.length];\n    long[] ones_counter12 = new long[arr.length];\n\
    \    long[] zeros_counter12 = new long[arr.length];\n    long[] ones_counter13\
    \ = new long[arr.length];\n    long[] zeros_counter13 = new long[arr.length];\n\
    \    long[] ones_counter14 = new long[arr.length];\n    long[] zeros_counter14\
    \ = new long[arr.length];\n    long[] ones_counter15 = new long[arr.length];\n\
    \    long[] zeros_counter15 = new long[arr.length];\n    long[] ones_counter16\
    \ = new long[arr.length];\n    long[] zeros_counter16 = new long[arr.length];\n\
    \    long[] ones_counter17 = new long[arr.length];\n    long[] zeros_counter17\
    \ = new long[arr.length];\n    long[] ", "{\n    long ones = 0;\n    long twos\
    \ = 0;\n    long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long\
    \ sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n\
    \    long tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long\
    \ ten_thousands = 0;\n    long hundred_thousands = 0;\n    long thousand_thousands\
    \ = 0;\n    long ten_thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousands = 0;\n    long ten_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousands = 0;\n    long\
    \ ten_thousand_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n  \
    \  long hundred_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long thousand_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten", "{\n    long[] result = new long[arr.length];\n    int[]\
    \ count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n    {\n\
    \        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n  \
    \  {\n        result[i] = count[arr[i]];\n    }\n    Arrays.sort(result);\n  \
    \  return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<|\
    \ c |>\nI like this solution, but I wonder if it will work for negative numbers.\
    \ I believe it would, but I haven't tested it.\n<|/ c |>\n<| c |>\nIt will work\
    \ for negative numbers. Just change the `count[arr[i]]++;` to `count[arr[i]] +=\
    \ (arr[i] < 0);`\n<|/ c |>\n<| c |>\nI tested it and it works. I tested it on\
    \ negative numbers as well. `sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4,\
    \ -3, -2]`\n<|/ c |>\n<| c |>\nI tested it on negative numbers as well. `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nI tested it on\
    \ negative numbers as well. `sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4,\
    \ -3, -2]`\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic\
    \ static void main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4};\n    System.out.println(Arrays.toString(sort_array(arr)));\n\
    }", "{\n    long result = 0;\n    long ones = 0;\n    long twos = 0;\n    long\
    \ threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n\
    \    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens\
    \ = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long ten_thousands\
    \ = 0;\n    long hundred_thousands = 0;\n    long millions = 0;\n    long billions\
    \ = 0;\n    long trillions = 0;\n    long quadrillions = 0;\n    long quintillions\
    \ = 0;\n    long sextillions = 0;\n    long septillions = 0;\n    long octillions\
    \ = 0;\n    long nonillions = 0;\n    long decillions = 0;\n    long undecillions\
    \ = 0;\n    long duodecillions = 0;\n    long tredecillions = 0;\n    long quattuordecillions\
    \ = 0;\n    long quindecillions = 0;\n    long sexdecillions = 0;\n    long septendecillions\
    \ = 0;\n    long octodecillions = 0;\n    long novemdecillions = 0;\n    long\
    \ vigintillions = 0;\n    long unvigintillions = 0;\n    long duovigintillions\
    \ = 0;\n    long trevigintillions = 0;\n    long quattuorvigintillions = 0;\n\
    \    long quinvigintillions = 0;\n    long sexvigintillions = 0;\n    long septenvigintillions\
    \ = 0;\n    long octovigintillions = 0;\n    long novemvigintillions = 0;\n  \
    \  long trigints = 0;\n    long untrigints = 0;\n    long duotrigints = 0;\n \
    \   long tretrigints = 0;\n    long quattuortrigints = 0;\n    long quinttrigints\
    \ = 0;\n    long sextrigints = 0;\n    long septentrigints = 0;\n    long octotrigints\
    \ = 0;\n    long novemtrigints = 0;\n    long quadragints = 0;\n    long unquadragints\
    \ = 0;\n    long duoquadragints = 0;\n    long trequadragints = 0;\n    long quattuorquadragints\
    \ = 0;\n    long quinquadragints = 0;\n    long sexquadragints = 0;\n    long\
    \ septenquadragints = 0;\n    long octoquadragints = 0;\n    long novemquad",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    \n    for (int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n  \
    \      if (count[arr[i]] == 1)\n        {\n            int j = i;\n          \
    \  while (j > 0 && count[arr[j-1]] == 1)\n            {\n                result[j]\
    \ = arr[j-1];\n                j--;\n            }\n            result[j] = arr[i];\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI\
    \ like your solution, however it fails for `sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nIt fails for `sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nI fixed the bug, thank you for\
    \ pointing it out. Now it works for both cases.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that doesn't use any extra space\n<|/ c |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\nThe idea is to count the number of 1's in each position and then sort based\
    \ on that count. \n<code>\ndef sort_array(arr):\n    counts = [0] * len(arr)\n\
    \    for idx, val in enumerate(arr):\n        counts[val] += 1\n    sorted_arr\
    \ = [arr[idx] for idx, val in enumerate(arr) if counts[val] == 1]\n    sorted_arr.sort(key=lambda\
    \ x:arr.index(x))\n    return sorted_arr\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This fails for `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]`\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug, thank you for pointing it out. Now it works for both\
    \ cases.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndef sort_array(arr):\n    counts\
    \ = [0] * len(arr)\n    for idx, val in enumerate(arr):\n        counts[val] +=\
    \ 1\n    sorted_arr = [arr[idx] for idx, val in enumerate(arr) if counts[val]\
    \ == 1]\n    sorted_arr.sort(key=lambda x:arr.index(x))\n    return sorted_arr\n\
    </code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| a |>\n<code>\ndef sort_array(arr):\n\
    \    counts = [0] * len(arr)\n    for idx, val in enumerate(arr):\n", "{\n   \
    \ long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    long ones_cnt = 0;\n    long zeros_cnt\
    \ = 0;\n    long cnt = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n  \
    \      if(arr[i] == 1)\n        {\n            ones[cnt] = arr[i];\n         \
    \   ones_cnt += 1;\n        }\n        else\n        {\n            zeros[cnt]\
    \ = arr[i];\n            zeros_cnt += 1;\n        }\n        cnt += 1;\n    }\n\
    \    long ones_cnt = ones_cnt + zeros_cnt;\n    long zeros_cnt = ones_cnt - ones_cnt;\n\
    \    long ones_sum = 0;\n    long zeros_sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones_sum += ones[i];\n\
    \        }\n        else\n        {\n            zeros_sum += zeros[i];\n    \
    \    }\n    }\n    long ones_sum = ones_sum + zeros_sum;\n    long ones_sum2 =\
    \ ones_sum * ones_sum;\n    long zeros_sum2 = zeros_sum * zeros_sum;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         long ones_sum3 = ones_sum2 - ones[i] * ones_sum;\n            long zeros_sum3\
    \ = zeros_sum2 - zeros[i] * zeros_sum;\n            long ones_sum4 = ones_sum3\
    \ - ones_sum;\n            long zeros_sum4 = zeros_sum3 - zeros_sum;\n       \
    \     long ones_sum5 = ones_sum4 - ones_sum2;\n            long zeros_sum5 = zeros_sum4\
    \ - zeros_sum2;\n            long ones_sum6 = ones_sum5 + ones_sum3;\n       \
    \     long zeros_sum6 = zeros_sum5 + zeros_sum3;\n            result[i] = ones_sum6\
    \ / ones_sum;\n            result[arr.length - 1 - i] = zeros_sum6 / zeros_sum;\n\
    \        }\n        else\n        {\n            long ones_sum3 = ones_sum2 -\
    \ ones[i] * ones_sum;\n            long zeros_sum3 = zeros_sum2 - zeros[i] * zeros_sum;\n\
    \            long ones_sum4 = ones_sum3 - ones_sum;\n            long zeros_sum4\
    \ = zeros_sum3 - zeros_sum;\n            long ones_sum5 = ones_sum4 - ones_sum2;\n\
    \            long zeros_sum5 = zeros_sum4 - ", "{\n    int len = arr.length;\n\
    \    long[] result = new long[len];\n    long[] ones = new long[len];\n    long[]\
    \ zeros = new long[len];\n    for(int i = 0; i < len; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones[i] = 1;\n        }\n        else\n      \
    \  {\n            ones[i] = 0;\n        }\n    }\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        if(ones[i] == 1)\n        {\n            result[i] = arr[i];\n\
    \        }\n        else\n        {\n            zeros[i] = 0;\n        }\n  \
    \  }\n    for(int i = 0; i < len; i++)\n    {\n        if(ones[i] == 1)\n    \
    \    {\n            result[i] = arr[i];\n        }\n        else\n        {\n\
    \            zeros[i] = 0;\n        }\n    }\n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(ones[i] == 1)\n        {\n            result[i] = arr[i];\n\
    \        }\n        else\n        {\n            zeros[i] = 0;\n        }\n  \
    \  }\n    for(int i = 0; i < len; i++)\n    {\n        if(ones[i] == 1)\n    \
    \    {\n            result[i] = arr[i];\n        }\n        else\n        {\n\
    \            zeros[i] = 0;\n        }\n    }\n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(ones[i] == 1)\n        {\n            result[i] = arr[i];\n\
    \        }\n        else\n        {\n            zeros[i] = 0;\n        }\n  \
    \  }\n    for(int i = 0; i < len; i++)\n    {\n        if(ones[i] == 1)\n    \
    \    {\n            result[i] = arr[i];\n        }\n        else\n        {\n\
    \            zeros[i] = 0;\n        }\n    }\n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(ones[i] == 1)\n        {\n            result[i] = arr[i];\n\
    \        }\n        else\n        {\n            zeros[i] = 0;\n        }\n  \
    \  }\n    for(int i = 0; i < len; i++)\n    {\n        if(ones[i] == 1)\n    \
    \    {\n            result[i] = arr[i];\n        }\n        else\n        {\n\
    \            zeros[i] = 0;\n        }\n    }\n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(ones[i] == 1)\n        {\n            result[i] = arr[i];\n\
    \        }\n        else\n        {\n            zeros[i] = 0;\n        }\n  \
    \  }\n    for(int i = 0; i < len; i++)\n    {\n        if(ones[i] == 1)\n    \
    \    {\n            result[i] = arr[i];\n        }\n        else\n        {\n\
    \            zeros[i] = 0;\n        }\n    }\n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(ones[i] == 1)\n        {\n            result[i] = arr[i];\n\
    \        }\n        else\n        {\n            zeros[i] = 0;\n        }\n  \
    \  }\n    for(int i = 0; i < len; i++)\n    {\n        if(ones[i] == 1)\n    \
    \    {\n            result[i] = arr[i];\n        }\n        else\n        {\n\
    \            zeros[i] = 0;\n        }\n    }\n    for(int i = 0; i < len; i++)\n\
    \    {\n", "{\n    long[] result = new long[arr.length];\n    long[] ones = new\
    \ long[arr.length];\n    long[] zeros = new long[arr.length];\n    long[] ones_counter\
    \ = new long[arr.length];\n    long[] zeros_counter = new long[arr.length];\n\
    \    \n    for (int i = 0; i < arr.length; i++)\n    {\n        ones[i] = 1;\n\
    \        zeros[i] = 0;\n        ones_counter[i] = 0;\n        zeros_counter[i]\
    \ = 0;\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] == 1)\n        {\n            ones_counter[i]++;\n        }\n   \
    \     else\n        {\n            zeros_counter[i]++;\n        }\n    }\n   \
    \ \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (ones_counter[i]\
    \ > zeros_counter[i])\n        {\n            result[i] = ones[i];\n        }\n\
    \        else\n        {\n            result[i] = zeros[i];\n        }\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `sort_array([1, 0, 2, 3, 4]) == [-2, -3, -4, -5, -6]`.\n<|/\
    \ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1, 0, 2, 3, 4]) ==\
    \ [-2, -3, -4, -5, -6]`.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. I\
    \ tested it before posting. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it with `sort_array([1, 0, 2, 3, 4]) == [-2, -3, -4, -5, -6]`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        count[arr[i]]++;\n  \
    \  }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        result[i] = arr[i];\n\
    \    }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        for(int j = 0;\
    \ j < count[arr[i]]; ++j)\n        {\n            int temp = result[i];\n    \
    \        result[i] = result[j];\n            result[j] = temp;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[arr.length];\n    long[]\
    \ ones = new long[arr.length];\n    long ones_cnt = 0;\n    long max_cnt = 0;\n\
    \    long max_val = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n     \
    \   ones[ones_cnt] = arr[i];\n        ones_cnt++;\n        if(ones_cnt == arr.length)\n\
    \        {\n            ones_cnt = 0;\n            long cnt = 0;\n           \
    \ for(int j = 0; j < ones.length; j++)\n            {\n                cnt +=\
    \ ones[j];\n                if(cnt > max_cnt)\n                {\n           \
    \         max_cnt = cnt;\n                    max_val = j;\n                }\n\
    \            }\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        result[i] = arr[max_val];\n        arr[max_val] = arr[i];\n    \
    \    arr[i] = max_val;\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThanks for your answer! But I still don't understand how this works. Can\
    \ you explain it a little bit more?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! But\
    \ I still don't understand how this works. Can you explain it a little bit more?\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! But I still don't understand how this works.\
    \ Can you explain it a little bit more?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4};\n \
    \   int[] result = new int[arr.length];\n    int[] ones = new int[arr.length];\n\
    \    int ones_cnt = 0;\n    int max_cnt = 0;\n    int max_val = 0;\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        ones[ones_cnt] = arr[i];\n        ones_cnt++;\n\
    \        if (ones_cnt == arr.length) {\n            ones_cnt = 0;\n          \
    \  int cnt = 0;\n            for (int j = 0; j < ones.length; j++) {\n       \
    \         cnt += ones[j];\n                if (cnt > max_cnt) {\n            \
    \        max_cnt = cnt;\n                    max_val = j;\n                }\n\
    \            }\n        }\n    }\n    for (int i = 0; i < arr.length; i++) {\n\
    \        result[i] = arr[max_val];\n        arr[max_val] = arr[i];\n        arr[i]\
    \ = max_val;\n    }\n    for (int i = 0; i < result.length; i++) {\n        System.out.",
  "{\n    long ones = 0;\n    long max = 0;\n    long min = 0;\n    long sum = 0;\n\
    \    long count = 0;\n    long temp = 0;\n    long temp2 = 0;\n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        temp = arr[i];\n        ones = temp;\n\
    \        sum += ones;\n        count += 1;\n        if(count > max)\n        {\n\
    \            max = count;\n        }\n        if(count < min)\n        {\n   \
    \         min = count;\n        }\n    }\n    long onesSum = 0;\n    long onesCount\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        temp = arr[i];\n\
    \        ones = temp;\n        onesSum += ones;\n        onesCount += 1;\n   \
    \ }\n    long onesSum2 = onesSum * onesSum;\n    long onesSum3 = onesSum2 * onesSum;\n\
    \    long onesSum4 = onesSum3 * onesSum;\n    long onesSum5 = onesSum4 * onesSum;\n\
    \    long onesSum6 = onesSum5 * onesSum;\n    long onesSum7 = onesSum6 * onesSum;\n\
    \    long onesSum8 = onesSum7 * onesSum;\n    long onesSum9 = onesSum8 * onesSum;\n\
    \    long onesSum10 = onesSum9 * onesSum;\n    long onesSum11 = onesSum10 * onesSum;\n\
    \    long onesSum12 = onesSum11 * onesSum;\n    long onesSum13 = onesSum12 * onesSum;\n\
    \    long onesSum14 = onesSum13 * onesSum;\n    long onesSum15 = onesSum14 * onesSum;\n\
    \    long onesSum16 = onesSum15 * onesSum;\n    long onesSum17 = onesSum16 * onesSum;\n\
    \    long onesSum18 = onesSum17 * onesSum;\n    long onesSum19 = onesSum18 * onesSum;\n\
    \    long onesSum20 = onesSum19 * onesSum;\n    long onesSum21 = onesSum20 * onesSum;\n\
    \    long onesSum22 = onesSum21 * onesSum;\n    long onesSum23 = onesSum22 * onesSum;\n\
    \    long onesSum24 = onesSum", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n            ones++;\n        else\n         \
    \   zeros++;\n    }\n    long maxOnes = ones;\n    long maxZeros = zeros;\n  \
    \  for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n     \
    \   {\n            ones--;\n            if(ones > maxOnes)\n                maxOnes\
    \ = ones;\n        }\n        else\n        {\n            zeros--;\n        \
    \    if(zeros > maxZeros)\n                maxZeros = zeros;\n        }\n    }\n\
    \    long maxOnesDecimal = maxOnes / 10;\n    long maxZerosDecimal = maxZeros\
    \ / 10;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] ==\
    \ 1)\n        {\n            ones--;\n            zeros--;\n        }\n      \
    \  else\n        {\n            ones++;\n            zeros++;\n        }\n   \
    \ }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            ones--;\n            zeros--;\n        }\n        else\n\
    \        {\n            ones++;\n            zeros++;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         ones--;\n            zeros--;\n        }\n        else\n        {\n\
    \            ones++;\n            zeros++;\n        }\n    }\n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n       \
    \     ones--;\n            zeros--;\n        }\n        else\n        {\n    \
    \        ones++;\n            zeros++;\n        }\n    }\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones--;\n\
    \            zeros--;\n        }\n        else\n        {\n            ones++;\n\
    \            zeros++;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones--;\n            zeros--;\n\
    \        }\n        else\n        {\n            ones++;\n            zeros++;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones--;\n            zeros--;\n        }\n   \
    \     else\n        {\n            ones++;\n            zeros++;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            ones--;\n            zeros--;\n        }\n        else\n\
    \        {\n            ones++;\n            zeros++;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)", "{\n    long ones = 0;\n    long twos = 0;\n \
    \   long threes = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes\
    \ = 0;\n    long sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long\
    \ tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long ten_thousands\
    \ = 0;\n    long hundred_thousands = 0;\n    long thousand_thousands = 0;\n  \
    \  long ones_thousands = 0;\n    long ones_hundreds = 0;\n    long ones_tens =\
    \ 0;\n    long ones_fives = 0;\n    long ones_twos = 0;\n    long ones_ones =\
    \ 0;\n    long ones_zeros = 0;\n    long twos_ones = 0;\n    long twos_zeros =\
    \ 0;\n    long threes_ones = 0;\n    long threes_zeros = 0;\n    long fours_ones\
    \ = 0;\n    long fours_zeros = 0;\n    long fives_ones = 0;\n    long fives_zeros\
    \ = 0;\n    long sixes_ones = 0;\n    long sixes_zeros = 0;\n    long sevens_ones\
    \ = 0;\n    long sevens_zeros = 0;\n    long eights_ones = 0;\n    long eights_zeros\
    \ = 0;\n    long nines_ones = 0;\n    long nines_zeros = 0;\n    long tens_ones\
    \ = 0;\n    long tens_zeros = 0;\n    long hundreds_ones = 0;\n    long hundreds_zeros\
    \ = 0;\n    long thousands_ones = 0;\n    long thousands_zeros = 0;\n    long\
    \ ten_thousands_ones = 0;\n    long ten_thousands_zeros = 0;\n    long hundred_thousands_ones\
    \ = 0;\n    long hundred_thousands_zeros = 0;\n    long thousand_thousands_ones\
    \ = 0;\n    long thousand_thousands_zeros = 0;\n    long ones_thousands_ones =\
    \ 0;\n    long ones_thousands_zeros = 0;\n    long ones_hundreds_ones = 0;\n \
    \   long ones_hundreds_zeros = 0;\n    long ones_tens_ones = 0;\n    long ones_tens_zeros\
    \ = 0;\n    long ones_fives_ones = 0;\n    long ones_fives_zeros = 0;\n    long\
    \ ones_twos_ones = 0;\n    long ones_twos_zeros = 0;\n    long ones_ones_ones\
    \ = 0;\n    long ones_ones_zeros = 0;\n    long twos_ones_ones = 0;\n    long\
    \ twos_ones_zeros = 0;\n    long twos_zeros_ones = 0;\n", "{\n    long[] result\
    \ = new long[arr.length];\n    long[] ones = new long[arr.length];\n    long[]\
    \ zeros = new long[arr.length];\n    long[] temp = new long[arr.length];\n   \
    \ \n    for (int i = 0; i < arr.length; ++i)\n    {\n        ones[i] = 1;\n  \
    \      zeros[i] = 0;\n    }\n    \n    for (int i = 0; i < arr.length; ++i)\n\
    \    {\n        for (int j = 0; j < arr.length; ++j)\n        {\n            if\
    \ (arr[j] == 0)\n            {\n                zeros[j] += ones[j];\n       \
    \         arr[j] = 0;\n            }\n            else\n            {\n      \
    \          ones[j] += arr[j];\n                arr[j] = 0;\n            }\n  \
    \      }\n    }\n    \n    for (int i = 0; i < arr.length; ++i)\n    {\n     \
    \   for (int j = 0; j < arr.length; ++j)\n        {\n            if (arr[j] ==\
    \ 0)\n            {\n                zeros[j] += ones[j];\n                arr[j]\
    \ = 0;\n            }\n            else\n            {\n                ones[j]\
    \ += arr[j];\n                arr[j] = 0;\n            }\n        }\n    }\n \
    \   \n    for (int i = 0; i < arr.length; ++i)\n    {\n        for (int j = 0;\
    \ j < arr.length; ++j)\n        {\n            if (arr[j] == 0)\n            {\n\
    \                zeros[j] += ones[j];\n                arr[j] = 0;\n         \
    \   }\n            else\n            {\n                ones[j] += arr[j];\n \
    \               arr[j] = 0;\n            }\n        }\n    }\n    \n    for (int\
    \ i = 0; i < arr.length; ++i)\n    {\n        for (int j = 0; j < arr.length;\
    \ ++j)\n        {\n            if (arr[j] == 0)\n            {\n             \
    \   zeros[j] += ones[j];\n                arr[j] = 0;\n            }\n       \
    \     else\n            {\n                ones[j] += arr[j];\n              \
    \  arr[j] = 0;\n            }\n        }\n    }\n    \n    for (int i = 0; i <\
    \ arr.length; ++i)\n    {\n        for (int j = 0; j < arr.length; ++j)\n    \
    \    {\n            if (arr[j] == 0)\n            {\n                zeros[j]\
    \ += ones[j];\n                arr[j] = 0;\n            }\n            else\n\
    \            {\n                ones[j] += arr[j];\n                arr[j] = 0;\n\
    \            }\n        }\n    }\n    \n    for (int i = 0; i < arr.length; ++i)\n\
    \    {\n        for (int j = 0; j < arr.length; ++j)\n        {\n            if\
    \ (arr[j] == 0)\n            {\n                zeros[j] += ones[j];\n       \
    \         arr[j] = 0;\n            }\n            else\n            {\n      \
    \          ones[j] += arr[j];\n                arr[j] = 0;\n            }\n  \
    \      }\n    }\n    \n    for (int i = 0; i < arr.length; ++i)\n    {\n     \
    \   for (int j = 0; j < arr.length; ++j)\n        {\n            if (arr[j] ==\
    \ 0)\n            {\n                zeros[j] += ones[j", "{\n    long[] result\
    \ = new long[arr.length];\n    int[] count = new int[arr.length];\n    int j =\
    \ 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]]\
    \ > 1)\n        {\n            result[j] = arr[i];\n            j++;\n       \
    \     count[arr[i]]--;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(count[arr[i]] == 1)\n        {\n            result[j] = arr[i];\n\
    \            j++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    int n = arr.length;\n    long[] result\
    \ = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n        int count = 0;\n\
    \        for(int j = 0; j < n; j++)\n        {\n            if(arr[j] == 1)\n\
    \            {\n                count++;\n            }\n        }\n        result[i]\
    \ = count;\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        int count\
    \ = 0;\n        for(int j = 0; j < n; j++)\n        {\n            if(arr[j] ==\
    \ 1)\n            {\n                count++;\n            }\n        }\n    \
    \    result[i] = count;\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        int count = 0;\n        for(int j = 0; j < n; j++)\n        {\n     \
    \       if(arr[j] == 1)\n            {\n                count++;\n           \
    \ }\n        }\n        result[i] = count;\n    }\n    \n    for(int i = 0; i\
    \ < n; i++)\n    {\n        int count = 0;\n        for(int j = 0; j < n; j++)\n\
    \        {\n            if(arr[j] == 1)\n            {\n                count++;\n\
    \            }\n        }\n        result[i] = count;\n    }\n    \n    for(int\
    \ i = 0; i < n; i++)\n    {\n        int count = 0;\n        for(int j = 0; j\
    \ < n; j++)\n        {\n            if(arr[j] == 1)\n            {\n         \
    \       count++;\n            }\n        }\n        result[i] = count;\n    }\n\
    \    \n    for(int i = 0; i < n; i++)\n    {\n        int count = 0;\n       \
    \ for(int j = 0; j < n; j++)\n        {\n            if(arr[j] == 1)\n       \
    \     {\n                count++;\n            }\n        }\n        result[i]\
    \ = count;\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        int count\
    \ = 0;\n        for(int j = 0; j < n; j++)\n        {\n            if(arr[j] ==\
    \ 1)\n            {\n                count++;\n            }\n        }\n    \
    \    result[i] = count;\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        int count = 0;\n        for(int j = 0; j < n; j++)\n        {\n     \
    \       if(arr[j] == 1)\n            {\n                count++;\n           \
    \ }\n        }\n        result[i] = count;\n    }\n    \n    for(int i = 0; i\
    \ < n; i++)\n    {\n        int count = 0;\n        for(int j = 0; j < n; j++)\n\
    \        {\n            if(arr[j] == 1)\n            {\n                count++;\n\
    \            }\n        }\n        result[i] = count;\n    }\n    \n    for(int\
    \ i = 0; i < n; i++)\n    {\n        int count = 0;\n        for(int j = 0; j\
    \ < n; j++)\n        {\n            if(arr[j] == 1)\n            {\n         \
    \       count++;\n            }\n        }\n        result[i] = count;\n    }\n\
    \    \n    for(int i = 0; i < n; i++)\n    {\n        int count = 0;\n       \
    \ for(int j = 0; j < n; j++)\n        {\n            if(arr[j] == 1)\n       \
    \     {\n                count++;\n            }\n        }\n        result[i]\
    \ = count;\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        int count\
    \ = 0;\n        ", "{\n    long[] result = new long[arr.length];\n    long ones\
    \ = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n    for(int\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] == 1){\n            ones++;\n\
    \        }\n        else{\n            zeros++;\n        }\n        if(arr[i]\
    \ > max){\n            max = arr[i];\n        }\n        if(arr[i] < min){\n \
    \           min = arr[i];\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] == 1){\n            result[i] = ones;\n        }\n\
    \        else{\n            result[i] = zeros;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] == 1){\n            result[i]\
    \ = max;\n        }\n        else{\n            result[i] = min;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThe question was about sorting an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ Your solution sorts them according to decimal value.\n<|/ c |>\n<| c |>\nThe\
    \ question was about sorting an array of non-negative integers according to number\
    \ of ones in their binary representation in ascending order. Your solution sorts\
    \ them according to decimal value.\n<|/ c |>\n<| c |>\nThe question was about\
    \ sorting an array of non-negative integers according to number of ones in their\
    \ binary representation in ascending order. Your solution sorts them according\
    \ to decimal value.\n<|/ c |>\n<| c |>\nThe question was about sorting an array\
    \ of non-negative integers according to number of ones in their binary representation\
    \ in ascending order. Your solution sorts them according to decimal value.\n<|/\
    \ c |>\n<| c |>\nThe question was about sorting an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ Your solution sorts them according to decimal value.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[arr.length];\n    long[]\
    \ ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n   \
    \ \n    for(int i = 0; i < arr.length; i++)\n    {\n        ones[i] = 1;\n   \
    \     zeros[i] = 0;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        ones[i] = 0;\n        zeros[i] = 1;\n    }\n    \n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        ones[arr[i]]++;\n        zeros[arr[i]]--;\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n   \
    \     if(ones[i] != 0)\n        {\n            int index = i;\n            while(ones[index]\
    \ == 0)\n            {\n                index--;\n            }\n            \n\
    \            int temp = result[index];\n            result[index] = result[i];\n\
    \            result[i] = temp;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ arr.length; i++)\n    {\n        if(zeros[i] != 0)\n        {\n            int\
    \ index = i;\n            while(zeros[index] == 0)\n            {\n          \
    \      index--;\n            }\n            \n            int temp = result[index];\n\
    \            result[index] = result[i];\n            result[i] = temp;\n     \
    \   }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis solution does not work if there are duplicates in the array.\n\
    <|/ c |>\n<| c |>\nIt does work, try it yourself. It sorts the array in ascending\
    \ order based on the number of ones in their binary representation in ascending\
    \ order.\n<|/ c |>\n<| c |>\nIt does work, but it's slower than the other solutions.\
    \ I tested it on [this array](http://pastebin.com/raw.php?i=LX9Zj7jf) and it took\
    \ about a minute to sort it.\n<|/ c |>\n<| c |>\nI tested it on [this array](http://pastebin.com/raw.php?i=LX9Zj7jf)\
    \ and it took about a minute to sort it.\n<|/ c |>\n<| c |>\nI tested it on [this\
    \ array](http://pastebin.com/raw.php?i=LX9Zj7jf) and it took about a minute to\
    \ sort it.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n    long\
    \ ones = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones++;\n        }\n        else\n        {\n\
    \            zeros++;\n        }\n        if(arr[i] > max)\n        {\n      \
    \      max = arr[i];\n        }\n        if(arr[i] < min)\n        {\n       \
    \     min = arr[i];\n        }\n        sum += arr[i];\n    }\n    long ones_count\
    \ = ones;\n    long zeros_count = zeros;\n    long sum2 = sum;\n    long sum3\
    \ = sum2;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] ==\
    \ 1)\n        {\n            ones_count -= 1;\n        }\n        else\n     \
    \   {\n            zeros_count -= 1;\n        }\n        sum3 += arr[i];\n   \
    \ }\n    long ones_count_2 = ones_count;\n    long zeros_count_2 = zeros_count;\n\
    \    long sum4 = sum3;\n    for(int i = 0; i < arr.length; i++)\n    {\n     \
    \   if(arr[i] == 1)\n        {\n            ones_count_2 -= 1;\n        }\n  \
    \      else\n        {\n            zeros_count_2 -= 1;\n        }\n        sum4\
    \ += arr[i];\n    }\n    long ones_count_3 = ones_count_2;\n    long zeros_count_3\
    \ = zeros_count_2;\n    long sum5 = sum4;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones_count_3 -=\
    \ 1;\n        }\n        else\n        {\n            zeros_count_3 -= 1;\n  \
    \      }\n        sum5 += arr[i];\n    }\n    long ones_count_4 = ones_count_3;\n\
    \    long zeros_count_4 = zeros_count_3;\n    long sum6 = sum5;\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       ones_count_4 -= 1;\n        }\n        else\n        {\n            zeros_count_4\
    \ -= 1;\n        }\n        sum6 += arr[i];\n    }\n    long ones_count_5 = ones_count_4;\n\
    \    long zeros_count_5 = zeros_count_4;\n    long sum7 = sum6;\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       ones_count_5 -= 1;\n        }\n        else\n        {\n            zeros_count_5\
    \ -= 1;\n        }\n        sum7 += arr[i];\n    }\n    long ones_count_6 = ones_count_5;\n\
    \    long zeros_count_6 = ", "{\n    long[] result = new long[arr.length];\n \
    \   int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = arr.length;\n    while\
    \ (i < n) {\n        int count = 0;\n        while (j < n) {\n            if (arr[j]\
    \ == 1) {\n                count++;\n            }\n            j++;\n       \
    \ }\n        if (count == 0) {\n            result[k] = arr[i];\n            i++;\n\
    \        }\n        else {\n            int count = 0;\n            while (j <\
    \ n) {\n                if (arr[j] == 0) {\n                    count++;\n   \
    \             }\n                j++;\n            }\n            if (count ==\
    \ 0) {\n                result[k] = arr[i];\n                i++;\n          \
    \  }\n            else {\n                long temp = 0;\n                while\
    \ (j < n) {\n                    temp = temp * 2 + arr[j];\n                 \
    \   j++;\n                }\n                if (temp > 0) {\n               \
    \     result[k] = temp;\n                }\n                else {\n         \
    \           result[k] = arr[i];\n                    i++;\n                }\n\
    \            }\n        }\n        k++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,sorting,algorithm,java |>\n<| c |>\nThis doesn't work. Try it\
    \ with `sort_array([1, 5, 2, 3, 4])`\n<|/ c |>\n<| c |>\nIt works. I tested it\
    \ before posting. Try it yourself. It works.\n<|/ c |>\n<| c |>\nI tested it myself\
    \ and it doesn't work. Try it with `sort_array([1, 5, 2, 3, 4])`\n<|/ c |>\n<|\
    \ c |>\nI tested it myself and it works. Try it yourself. It works.\n<|/ c |>\n\
    <| c |>\nI tested it myself and it works. Try it yourself. It works.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  ones++;\n        }\n        else\n        {\n            zeros++;\n       \
    \ }\n        if(ones > zeros)\n        {\n            max = ones;\n        }\n\
    \        else\n        {\n            max = zeros;\n        }\n        result[i]\
    \ = max;\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = arr[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| c |>\nThanks for the answer. Can you please explain me the code you wrote?\
    \ I mean what does it do?\n<|/ c |>\n<| c |>\nI added some comments to the code.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the explanation. Can you please\
    \ explain me the code you wrote? I mean what does it do?\n<|/ c |>\n<| c |>\n\
    I added some comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ the explanation. Can you please explain me the code you wrote? I mean what does\
    \ it do?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    \n    for (int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n  \
    \      if (count[arr[i]] > 1)\n        {\n            int j = i;\n           \
    \ while (j > 0 && count[arr[j - 1]] == 1)\n            {\n                j--;\n\
    \            }\n            \n            int k = j;\n            while (k < arr.length\
    \ && count[arr[k]] == 1)\n            {\n                k++;\n            }\n\
    \            \n            int temp;\n            temp = arr[j];\n           \
    \ arr[j] = arr[k];\n            arr[k] = temp;\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis solution does not work\
    \ for negative numbers. Try it with `sort_array([1, 5, 2, 3, -4]) == [-4, 1, 2,\
    \ 3, 5]`.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to include\
    \ a solution for negative numbers.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ edited my answer to include a solution for negative numbers.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new\
    \ long[arr.length];\n    int[] count = new int[arr.length];\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        result[i] = count[arr[i]];\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    <|/ c |>\n<| c |>\nIt does work. Try it yourself. It sorts your array in ascending\
    \ order according to number of ones in their binary representation in ascending\
    \ order.\n<|/ c |>\n<| c |>\nIt doesn't work. Try sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It sorts\
    \ your array in ascending order according to number of ones in their binary representation\
    \ in ascending order.\n<|/ c |>\n<| c |>\nIt doesn't work. Try sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \     {\n            ones++;\n        }\n        else\n        {\n           \
    \ zeros++;\n        }\n        if(arr[i] > max)\n        {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min)\n        {\n            min = arr[i];\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = ones;\n        }\n        else\n \
    \       {\n            result[i] = zeros;\n        }\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n          \
    \  result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(arr[i] == 1)\n        {\n            result[i] = ones;\n        }\n\
    \        else\n        {\n            result[i] = zeros;\n        }\n    }\n \
    \   for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n    \
    \    {\n            result[i] = ones;\n        }\n        else\n        {\n  \
    \          result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ones;\n        }\n        else\n        {\n\
    \            result[i] = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            result[i] = ", "{\n    long[] result = new long[arr.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    long sum = 0;\n    long ones\
    \ = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours = 0;\n    long\
    \ fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long eights = 0;\n\
    \    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n    long thousands\
    \ = 0;\n    long ten_thousands = 0;\n    long hundred_thousands = 0;\n    long\
    \ thousand_thousands = 0;\n    long ten_thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousands = 0;\n    long ten_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousands = 0;\n    long\
    \ ten_thousand_thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n  \
    \  long hundred_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long thousand_thousand_thousand_thousand_thousand_thousand_thousands = 0;\n\
    \    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n\
    \    for(int i = 0; i < arr.length; i++){\n        if(arr[i] == 1){\n        \
    \    ones++;\n        }\n        else{\n            zeros++;\n        }\n    \
    \    if(arr[i] > max){\n            max = arr[i];\n        }\n        if(arr[i]\
    \ < min){\n            min = arr[i];\n        }\n    }\n    long onesMax = ones\
    \ * max;\n    long zerosMax = zeros * max;\n    long onesMin = ones * min;\n \
    \   long zerosMin = zeros * min;\n    long onesSum = ones * ones;\n    long zerosSum\
    \ = zeros * ones;\n    long onesAvg = onesSum / arr.length;\n    long zerosAvg\
    \ = zerosSum / arr.length;\n    long onesDev = onesSum / onesMax;\n    long zerosDev\
    \ = zerosSum / zerosMax;\n    long onesDeviation = onesDev / onesMin;\n    long\
    \ zerosDeviation = zerosDev / zerosMin;\n    for(int i = 0; i < arr.length; i++){\n\
    \        if(arr[i] == 1){\n            result[i] = onesAvg;\n        }\n     \
    \   else{\n            result[i] = zerosAvg;\n        }\n    }\n    for(int i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] == 1){\n            result[i]\
    \ = onesDeviation;\n        }\n        else{\n            result[i] = zerosDeviation;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ == 1){\n            result[i] = onesMin;\n        }\n        else{\n       \
    \     result[i] = zerosMin;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] == 1){\n            result[i] = onesMax;\n        }\n\
    \        else{\n            result[i] = zerosMax;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| c |>\nI like\
    \ your solution, but I wonder why you used `long onesSum = ones * ones;` instead\
    \ of `long onesSum = ones * onesMax;`\n<|/ c |>\n<| c |>\nI used `long onesSum\
    \ = ones * onesMax;` because I wanted to avoid division when calculating averages\
    \ and deviations. I wanted to avoid division when calculating minimums and maximums.\
    \ I wanted to avoid division when calculating averages and deviations. I wanted\
    \ to avoid division", "{\n    long ones = 0;\n    long twos = 0;\n    long threes\
    \ = 0;\n    long fours = 0;\n    long fives = 0;\n    long sixes = 0;\n    long\
    \ sevens = 0;\n    long eights = 0;\n    long nines = 0;\n    long tens = 0;\n\
    \    long hundreds = 0;\n    long thousands = 0;\n    long ten_thousands = 0;\n\
    \    long hundred_thousands = 0;\n    long thousand_thousands = 0;\n    long ones_thousands\
    \ = 0;\n    long ones_hundreds = 0;\n    long ones_tens = 0;\n    long ones_fives\
    \ = 0;\n    long ones_twos = 0;\n    long ones_ones = 0;\n    long ones_zeros\
    \ = 0;\n    long twos_ones = 0;\n    long twos_zeros = 0;\n    long threes_ones\
    \ = 0;\n    long threes_zeros = 0;\n    long fours_ones = 0;\n    long fours_zeros\
    \ = 0;\n    long fives_ones = 0;\n    long fives_zeros = 0;\n    long sixes_ones\
    \ = 0;\n    long sixes_zeros = 0;\n    long sevens_ones = 0;\n    long sevens_zeros\
    \ = 0;\n    long eights_ones = 0;\n    long eights_zeros = 0;\n    long nines_ones\
    \ = 0;\n    long nines_zeros = 0;\n    long tens_ones = 0;\n    long tens_zeros\
    \ = 0;\n    long hundreds_ones = 0;\n    long hundreds_zeros = 0;\n    long thousands_ones\
    \ = 0;\n    long thousands_zeros = 0;\n    long ten_thousands_ones = 0;\n    long\
    \ ten_thousands_zeros = 0;\n    long hundred_thousands_ones = 0;\n    long hundred_thousands_zeros\
    \ = 0;\n    long thousand_thousands_ones = 0;\n    long thousand_thousands_zeros\
    \ = 0;\n    long ones_thousands_ones = 0;\n    long ones_thousands_zeros = 0;\n\
    \    long ones_hundreds_ones = 0;\n    long ones_hundreds_zeros = 0;\n    long\
    \ ones_tens_ones = 0;\n    long ones_tens_zeros = 0;\n    long ones_fives_ones\
    \ = 0;\n    long ones_fives_zeros = 0;\n    long ones_twos_ones = 0;\n    long\
    \ ones_twos_zeros = 0;\n    long ones_ones_ones = 0;\n    long ones_ones_zeros\
    \ = 0;\n    long twos_ones_ones = 0;\n    long twos_ones_zeros = 0;\n    long\
    \ twos_zeros_ones = 0;\n", "{\n    long[] result = new long[arr.length];\n   \
    \ long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours = 0;\n\
    \    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long eights\
    \ = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n    long\
    \ thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands = 0;\n\
    \    long thousand_thousands = 0;\n    long hundred_thousand_thousands = 0;\n\
    \    long thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_thousands = 0;\n    long hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_", "{\n    long[] result\
    \ = new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n    for(int\
    \ i = 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         ones++;\n        }\n        else\n        {\n            zeros++;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = ones;\n        }\n        else\n \
    \       {\n            result[i] = zeros;\n        }\n    }\n    for(int i = 0;\
    \ i < arr.length; ++i)\n    {\n        if(result[i] > result[i + 1])\n       \
    \ {\n            long temp = result[i];\n            result[i] = result[i + 1];\n\
    \            result[i + 1] = temp;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nI guess this would\
    \ work, but I guess it would be more efficient to sort the array in place and\
    \ just keep track of the number of ones and zeros instead of creating a new array\
    \ and copying all the elements. I guess this would also require less memory and\
    \ be faster.\n<|/ c |>\n<| c |>\nYes, you are right. Sorting in place is more\
    \ efficient. But in this case I wanted to show you the algorithm and how it works.\
    \ I thought it would be more understandable for beginners.\n<|/ c |>\n<| c |>\n\
    I guess I misunderstood your solution. Your solution sorts the array in place,\
    \ but you also keep track of the number of ones and zeros in the array. My solution\
    \ sorts the array in place and just keeps track of the number of ones and zeros.\
    \ So I guess your solution is more efficient, but I guess it would be more understandable\
    \ for beginners.\n<|/ c |>\n<| c |>\nYes, you are right. My solution is more efficient.\
    \ But in this case I wanted to show you the algorithm and how it works. I thought\
    \ it would be more understandable for beginners.\n<|/ c |>\n<| c |>\nI guess I\
    \ misunderstood your solution. Your solution sorts the array in place, but you\
    \ also keep track of the number of ones and zeros in the array. My solution sorts\
    \ the array in place and just keeps track of the number of ones and zeros. So\
    \ I guess your solution is more efficient, but I guess it would be more understandable\
    \ for beginners.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n            ones[i] = 1;\n        else\n\
    \            ones[i] = 0;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(ones[i] == 1)\n            result[i] = arr[i];\n        else\n\
    \            zeros[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(ones[i] == 1)\n            result[i] = arr[i];\n   \
    \     else\n            zeros[i] = arr[i];\n    }\n    \n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i] =\
    \ arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = arr[i];\n        else\n            zeros[i] = arr[i];\n    }", "{\n    long[]\
    \ result = new long[arr.length];\n    int i = 0;\n    int j = 0;\n    int k =\
    \ 0;\n    long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours\
    \ = 0;\n    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long\
    \ eights = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n\
    \    long thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands\
    \ = 0;\n    long thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousands = 0;\n    long hundred_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousands = 0;\n    long\
    \ hundred_thousand_thousand_thousand_thousand_thousands = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n    long hundred_thousand_thousand_thousand_thousand_thousand_thousand_thous",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        if(arr[i] == 1)\n        {\n            ones++;\n     \
    \   }\n        else\n        {\n            zeros++;\n        }\n        if(arr[i]\
    \ > max)\n        {\n            max = arr[i];\n        }\n        if(arr[i] <\
    \ min)\n        {\n            min = arr[i];\n        }\n    }\n    for(int i\
    \ = 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length; ++i)\n    {\n\
    \        if(arr[i] == 1)\n        {\n            result[i] = max;\n        }\n\
    \        else\n        {\n            result[i] = min;\n        }\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| a tags=algorithm,sorting,arrays\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    long[] ones_counter = new long[arr.length];\n    long[] zeros_counter = new\
    \ long[arr.length];\n    \n    for (int i = 0; i < arr.length; ++i)\n    {\n \
    \       ones[i] = 0;\n        zeros[i] = 0;\n        ones_counter[i] = 0;\n  \
    \      zeros_counter[i] = 0;\n        \n        for (int j = 0; j < arr.length;\
    \ ++j)\n        {\n            if (arr[i] == 1)\n            {\n             \
    \   ones_counter[i]++;\n            }\n            else\n            {\n     \
    \           zeros_counter[i]++;\n            }\n        }\n        \n        if\
    \ (ones_counter[i] > zeros_counter[i])\n        {\n            result[i] = ones[i];\n\
    \        }\n        else\n        {\n            result[i] = zeros[i];\n     \
    \   }\n    }\n    \n    for (int i = 0; i < arr.length; ++i)\n    {\n        ones[i]\
    \ = 0;\n        zeros[i] = 0;\n        ones_counter[i] = 0;\n        zeros_counter[i]\
    \ = 0;\n        \n        for (int j = 0; j < arr.length; ++j)\n        {\n  \
    \          if (arr[i] == 1)\n            {\n                ones_counter[i]++;\n\
    \            }\n            else\n            {\n                zeros_counter[i]++;\n\
    \            }\n        }\n        \n        if (ones_counter[i] > zeros_counter[i])\n\
    \        {\n            result[i] = ones[i];\n        }\n        else\n      \
    \  {\n            result[i] = zeros[i];\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        if(arr[i] == 1)\n            ones[i] = 1;\n        else\n\
    \            ones[i] = 0;\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(ones[i] == 0)\n            zeros[i] = 1;\n        else\n  \
    \          zeros[i] = 0;\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(ones[i] != zeros[i])\n            result[i] = arr[i];\n   \
    \ }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(ones[i]\
    \ != zeros[i])\n            result[i] = arr[i];\n    }\n    \n    for(int i =\
    \ 0; i < arr.length; ++i)\n    {\n        if(ones[i] == zeros[i])\n          \
    \  result[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(ones[i] == zeros[i])\n            result[i] = arr[i];\n   \
    \ }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(ones[i]\
    \ == zeros[i])\n            result[i] = arr[i];\n    }\n    \n    for(int i =\
    \ 0; i < arr.length; ++i)\n    {\n        if(ones[i] == zeros[i])\n          \
    \  result[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(ones[i] == zeros[i])\n            result[i] = arr[i];\n   \
    \ }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(ones[i]\
    \ == zeros[i])\n            result[i] = arr[i];\n    }\n    \n    for(int i =\
    \ 0; i < arr.length; ++i)\n    {\n        if(ones[i] == zeros[i])\n          \
    \  result[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(ones[i] == zeros[i])\n            result[i] = arr[i];\n   \
    \ }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(ones[i]\
    \ == zeros[i])\n            result[i] = arr[i];\n    }\n    \n    for(int i =\
    \ 0; i < arr.length; ++i)\n    {\n        if(ones[i] == zeros[i])\n          \
    \  result[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(ones[i] == zeros[i])\n            result[i] = arr[i];\n   \
    \ }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n        if(ones[i]\
    \ == zeros[i])\n            result[i] = arr[i];\n    }\n    \n    for(int i =\
    \ 0; i < arr.length; ++i)\n    {\n        if(ones[i] == zeros[i])\n          \
    \  result[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(ones[i] == zeros[i])\n            result[i] = arr[i];\n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
