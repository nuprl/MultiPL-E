name: HumanEval_30_get_positive
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp42lftm1p.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp42lftm1p.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp42lftm1p.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x7230e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    int i\
    \ = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\n/*\nReturn\
    \ only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n\
    \    [-1, -2, -4, -5, -6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, -3, -2, -3, 9, 0, 123, 1, -10]\n    \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    int i = 0;\n    for(; i <\
    \ l.length; ++i)\n    {\n        if(l[i] < 0)\n        {\n            res[i] =\
    \ l[i];\n        }\n    }\n    return res;\n}\n/*\nReturn only numbers in the\
    \ list that are divisible by 3.\n    >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n\
    \    [-1, 2, -4, 5]\n    >>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, 3, -5, 2, -3, 3, 9, 0, 123]\n    \n*/\nlong[] get_divisible_by_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    int i = 0;\n    for(; i <\
    \ l.length; ++i)\n    {\n        if(l[i] % 3 == 0)\n        {\n            res[i]\
    \ = l[i];\n        }\n    }\n    return res;\n}\n/*\nReturn only numbers in the\
    \ list that are divisible by 5.\n    >>> get_divisible_by_5([-1, 2, -4, 5, 6])\n\
    \    [-1, 2, -4, 5]\n    >>> get_divisible_by_5([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, 3, -5, 2, -3, 3, 9, 0, 123]\n    \n*/\nlong[] get_divisible_by_5(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    int i = 0;\n    for(; i <\
    \ l.length; ++i)\n    {\n        if(l[i] % 5 == 0)\n        {\n            res[i]\
    \ = l[i];\n        }\n    }\n    return res;\n}\n/*\nReturn only numbers in the\
    \ list that are divisible by 7.\n    >>> get_divisible_by_7([-1, 2, -4, 5, 6])\n\
    \    [-1, 2, -4, 5]\n    >>> get_divisible_by_7([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, 3, -5, 2, -3, 3, 9, 0, 123]\n    \n*/\nlong[] get_di\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3rd1jx6y.d(95): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rd1jx6y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n\tlong[] res = new long[l.length];\n\tfor (int i\
    \ = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tres[i] = l[i];\n\t}\n\
    \treturn res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpctee85lx.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpctee85lx.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpctee85lx.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x3c9ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n        else\n            break;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpst5nlakf.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpst5nlakf.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmpst5nlakf.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xc8b2b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm1nn3yah.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpm1nn3yah.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpm1nn3yah.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x59443554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tresult[i] = l[i];\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv095v3et.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpv095v3et.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpv095v3et.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xf0b95554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwr7774er.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpwr7774er.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpwr7774er.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x4ac73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp05_2hd78.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp05_2hd78.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp05_2hd78.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xf3417554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjcpiczzb.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpjcpiczzb.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpjcpiczzb.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xa7e11554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpueqazq9q.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpueqazq9q.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpueqazq9q.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x5197554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpke0wdheg.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpke0wdheg.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpke0wdheg.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x80609554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpue_s0kwa.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpue_s0kwa.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpue_s0kwa.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x1d74b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnk5s0wfq.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpnk5s0wfq.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpnk5s0wfq.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x419e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_sbw3tmj.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp_sbw3tmj.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmp_sbw3tmj.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x525f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n        else\n            break;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0qn6ptza.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp0qn6ptza.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmp0qn6ptza.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x3aadc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq5x_daen.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpq5x_daen.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpq5x_daen.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x7429c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            r[i] =\
    \ l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_irp2_ck.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp_irp2_ck.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp_irp2_ck.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x6790d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9s8766tq.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp9s8766tq.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp9s8766tq.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x5ee1e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-2, -4, -6, 6]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3,\
    \ -3, 9, 0, 123, 1, -10]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        if(l[i] < 0) \n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only zeros in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n \
    \   [0, 0, 0, 0, 0]\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    [0, 0, 0, 0, 0]\n    \n*/\nlong[] get_zero(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n     \
    \   if(l[i] == 0) \n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only numbers in the list that are divisible by 3.\n    >>> get_divisible_by_three([-1,\
    \ 2, -4, 5, 6])\n    [-1, 2, -4, 5]\n    >>> get_divisible_by_three([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, -3, 9, 0, 123, 1, -10]\n\
    \    \n*/\nlong[] get_divisible_by_three(long[] l) \n{\n    long[] result = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ % 3 == 0) \n            result[i] = l[i];\n    }\n    return result;\n}\n/*\n\
    Return only numbers in the list that are divisible by 5.\n    >>> get_divisible_by_five([-1,\
    \ 2, -4, 5, 6])\n    [-1, 2, -4, 5]\n    >>> get_divisible_by_five([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, -3, 9, 0, 123, 1, -10]\n\
    \    \n*/\nlong[] get_divisible_by_five(long[] l) \n{\n    long[] result = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ % 5 == 0) \n            result[i] = l[i];\n    }\n    return result;\n}\n/*\n\
    Return only numbers in the list that are \nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpio9idtzf.d(92): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpio9idtzf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqvhqu1kr.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpqvhqu1kr.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpqvhqu1kr.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xf06a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxo28p82x.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpxo28p82x.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpxo28p82x.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x9a81d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0efteykp.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp0efteykp.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp0efteykp.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xabfd6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n        else\n        {\n            res[i] =\
    \ 0;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpekxtcm4r.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428505]\\n??:? void tmpekxtcm4r.__unittest_L26_C1()\
    \ [0x427fe5]\\n??:? void tmpekxtcm4r.__modtest() [0x428284]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b476]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b44d]\\n??:? runModuleUnitTests [0x42c3b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42894f]\\n??:? _d_run_main [0x4288ba]\\n??:? main [0x428297]\\\
    n??:? __libc_start_main [0x9d8e3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgof8pst4.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpgof8pst4.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpgof8pst4.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xdb772554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n        else\n            break;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp06ly3r2z.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp06ly3r2z.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmp06ly3r2z.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xdd7c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsgndn9jb.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpsgndn9jb.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpsgndn9jb.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xe503554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsv0gr_yp.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpsv0gr_yp.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpsv0gr_yp.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x33f80554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    int i;\n\
    \    for(i = 0; i < l.length; i++) \n        r[i] = l[i] > 0 ? l[i] : 0;\n   \
    \ return r;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the\
    \ list is empty. Try it with `get_positive([])`.\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ about that. Thanks for pointing it out. I've fixed it.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\npublic static int[] getPositive(int[] arr) {\n    int[] result =\
    \ new int[arr.length];\n    int i = 0;\n    while (i < arr.length) {\n       \
    \ if (arr[i] > 0) {\n            result[i] = arr[i];\n            i++;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a\
    \ tags=arrays,java |>\n<code>\npublic static int[] getPositive(int[] arr) {\n\
    \    int[] result = new int[arr.length];\n    int i = 0;\n    while (i < arr.length)\
    \ {\n        if (arr[i] > 0) {\n            result[i] = arr[i];\n            i++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,java\
    \ |>\n<code>\npublic static int[] getPositive(int[] arr) {\n    int[] result =\
    \ new int[arr.length];\n    int i = 0;\n    while (i < arr.length) {\n       \
    \ if (arr[i] > 0) {\n            result[i] = arr[i];\n            i++;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\npublic static int[] getPositive(int[] arr) {\n    int[] result =\
    \ new int[arr.length];\n    int i = 0;\n    while (i < arr.length) {\n       \
    \ if (arr[i] > 0) {\n            result[i] = arr[i];\n            i++;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a\
    \ dscore=2 |>\n<code>\npublic static int[] getPositive(int[] arr) {\n    int[]\
    \ result = new int[arr.length];\n    int i = 0;\n    while (i < arr.length) {\n\
    \        if (arr[i] > 0) {\n            result[i] = arr[i];\n            i++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java |>\n\
    <| a tags=arrays,java |>\n<code>\npublic static int[] getPositive(int[] arr) {\n\
    \    int[] result = new int[arr.length];\n    int i = 0;\n    while (i < arr.length)\
    \ {\n        if (arr[i] > 0) {\n            result[i] = arr[i];\nunittest\n{\n\
    \    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb47l_izb.d(18): Error: declaration expected, not `<`\\n/tmp/tmpb47l_izb.d(21):\
    \ Error: unterminated character constant\\n/tmp/tmpb47l_izb.d(24): Error: unterminated\
    \ character constant\\n/tmp/tmpb47l_izb.d(31): Error: declaration expected, not\
    \ `while`\\n/tmp/tmpb47l_izb.d(34): Error: no identifier for declarator `i`\\\
    n/tmp/tmpb47l_izb.d(34): Error: declaration expected, not `++`\\n/tmp/tmpb47l_izb.d(35):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpb47l_izb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n        {\n\
    \            result[i] = l[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,list,arrays |>\n<| a tags=c#,list,arrays |>\n<code>\npublic static\
    \ int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n        {\n           \
    \ result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,list,arrays |>\n<| a tags=c#,list,arrays |>\n<code>\npublic static\
    \ int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n        {\n           \
    \ result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,list,arrays |>\n<| a dscore=2 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n        {\n           \
    \ result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,list,arrays |>\n<| a tags=c#,list,arrays |>\n<code>\npublic static\
    \ int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprnwt9cvr.d(22): Error: declaration expected, not `<`\\n/tmp/tmprnwt9cvr.d(29):\
    \ Error: declaration expected, not `for`\\n/tmp/tmprnwt9cvr.d(29): Error: no identifier\
    \ for declarator `i`\\n/tmp/tmprnwt9cvr.d(29): Error: declaration expected, not\
    \ `<`\\n/tmp/tmprnwt9cvr.d(29): Error: no identifier for declarator `i`\\n/tmp/tmprnwt9cvr.d(29):\
    \ Error: declaration expected, not `++`\\n/tmp/tmprnwt9cvr.d(34): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnwt9cvr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6s3gfkna.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp6s3gfkna.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmp6s3gfkna.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x5afc6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; ++i)\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n        else\n            break;\n    return result.slice(0, i);\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfwue2w5n.d(19): Error: no property `slice` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwue2w5n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    int i =\
    \ 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i]\
    \ = l[i];\n        else\n            break;\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi8vhm4in.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpi8vhm4in.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmpi8vhm4in.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xa3bb8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw2ir53j4.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpw2ir53j4.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpw2ir53j4.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x97d2e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyo89mn9b.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpyo89mn9b.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpyo89mn9b.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xfc896554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpscgt277u.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpscgt277u.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpscgt277u.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x6d61f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n       \
    \     res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpudhfk75p.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpudhfk75p.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpudhfk75p.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x75c9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    int i =\
    \ 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i]\
    \ = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpihzpsu95.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpihzpsu95.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpihzpsu95.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xcd325554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzg0weyd8.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpzg0weyd8.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpzg0weyd8.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x9fba2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_gkzyvox.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp_gkzyvox.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmp_gkzyvox.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x53dea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -2, -4, 5, 6]\n   \
    \ >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2,\
    \ -3, -3, 9, 0, 123, -1, -10]\n    \n*/\nlong[] get_negative(long[] l) \n{\n \
    \   long[] result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}\n/*\nReturn only numbers in the list that are divisible by 3.\n \
    \   >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5]\n    >>> get_divisible_by_3([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, -3, 9, 0, 123]\n\
    \    \n*/\nlong[] get_divisible_by_3(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] % 3 == 0)\n   \
    \         result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only numbers\
    \ in the list that are divisible by 5.\n    >>> get_divisible_by_5([-1, 2, -4,\
    \ 5, 6])\n    [-1, 2, -4, 5]\n    >>> get_divisible_by_5([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, -3, 9, 0, 123]\n    \n*/\nlong[]\
    \ get_divisible_by_5(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] % 5 == 0)\n   \
    \         result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only numbers\
    \ in the list that are divisible by 7.\n    >>> get_divisible_by_7([-1, 2, -4,\
    \ 5, 6])\n    [-1, 2, -4, 5]\n    >>> get_divisible_by_7([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, -3, 9, 0, 123]\n    \n*/\nlong[]\
    \ get_divisible_by_7(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] % \nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqujh4ujp.d(88): Error: expression expected, not `unittest`\\\
    n/tmp/tmpqujh4ujp.d(89): Error: found `{` when expecting `)`\\n/tmp/tmpqujh4ujp.d(97):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqujh4ujp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgisg38c_.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpgisg38c_.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpgisg38c_.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xed1c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqa615i5v.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpqa615i5v.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpqa615i5v.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x9c4f6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphm022p3c.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmphm022p3c.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmphm022p3c.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x40b29554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Your code works fine for positive numbers. But for negative numbers it returns\
    \ only the first negative number in the list. For example, if I have the list\
    \ [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], the code returns only -5. How can I\
    \ fix it?\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I tried your code, but it returns only the first negative number in the list.\
    \ For example, if I have the list [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], the\
    \ code returns only -5. How can I fix it?\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution for negative numbers. I tested it and it works.\n<|/ c\
    \ |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. Your code works fine for positive numbers. But for negative numbers\
    \ it returns only the first negative number in the list. For example, if I have\
    \ the list [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], the code returns only -5. How\
    \ can I fix it?\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for\
    \ negative numbers. I tested it and it works.\n<|/ c |>\n<| a tags=c#,arrays |>\n\
    <code>\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp61wsqfut.d(20): Error: declaration expected, not `<`\\n/tmp/tmp61wsqfut.d(39):\
    \ Error: declaration expected, not `for`\\n/tmp/tmp61wsqfut.d(39): Error: no identifier\
    \ for declarator `i`\\n/tmp/tmp61wsqfut.d(39): Error: declaration expected, not\
    \ `<`\\n/tmp/tmp61wsqfut.d(39): Error: no identifier for declarator `i`\\n/tmp/tmp61wsqfut.d(39):\
    \ Error: declaration expected, not `++`\\n/tmp/tmp61wsqfut.d(43): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp61wsqfut.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0)\
    \ \n        {\n            result[j] = l[i];\n            j++;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6frox7lc.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284cd]\\n??:? void tmp6frox7lc.__unittest_L24_C1()\
    \ [0x427fb1]\\n??:? void tmp6frox7lc.__modtest() [0x428250]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430655]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b415]\\n??:? runModuleUnitTests [0x42c381]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428990]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428917]\\n??:? _d_run_main [0x428882]\\n??:? main [0x428263]\\\
    n??:? __libc_start_main [0xfbfa6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph19csmx9.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmph19csmx9.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmph19csmx9.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xd1f66554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n        if(l[i] > 0)\n            res[i] = l[i];\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7m8e4x4v.d(22): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp7m8e4x4v.__unittest_L18_C1()\
    \ [0x427fb5]\\n??:? void tmp7m8e4x4v.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x3cbb8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n       \
    \     result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfw9dd6vl.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpfw9dd6vl.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpfw9dd6vl.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x61a43554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            r[i] =\
    \ l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfzzg4ama.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpfzzg4ama.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpfzzg4ama.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xfc11d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n        else\n            break;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr0so0_iq.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpr0so0_iq.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmpr0so0_iq.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x50859554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp4_zovid.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpp4_zovid.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpp4_zovid.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xff750554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    foreach(long x, l)\n    {\n        if (x > 0)\n        {\n     \
    \       result[i++] = x;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuq_ge0hw.d(14): Error: no identifier for declarator `l`\\n/tmp/tmpuq_ge0hw.d(14):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpuq_ge0hw.d(21): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq_ge0hw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; i++) \n    {\n        if (l[i] > 0) \n    \
    \    {\n            result[i] = l[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg41pc0kc.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpg41pc0kc.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmpg41pc0kc.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xec9ef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n\
    \        {\n            result[j++] = l[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdqcg3b2s.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284cd]\\n??:? void tmpdqcg3b2s.__unittest_L23_C1()\
    \ [0x427fb1]\\n??:? void tmpdqcg3b2s.__modtest() [0x428250]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430655]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b415]\\n??:? runModuleUnitTests [0x42c381]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428990]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428917]\\n??:? _d_run_main [0x428882]\\n??:? main [0x428263]\\\
    n??:? __libc_start_main [0xc17df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp09uhtcwn.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp09uhtcwn.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp09uhtcwn.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x523b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    int i =\
    \ 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i]\
    \ = l[i];\n        else\n            break;\n    }\n    return r;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a negative number in\
    \ the list as it will return an empty array.\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that and fixed it by adding an if statement to check if `i` is less than `l.length`\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't require an if statement\n<|/\
    \ c |>\n<| c |>\nI added a version that doesn't require an if statement\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static int[] getPositive(int[] arr) {\n\
    \    int[] result = new int[arr.length];\n    int i = 0;\n    for(int j : arr)\
    \ {\n        if(j > 0) {\n            result[i++] = j;\n        }\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis doesn't\
    \ work if you have a negative number in the list as it will return an empty array.\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't require an if statement\n<|/\
    \ c |>\n<| a tags=java,arrays |>\n<code>\npublic static int[] getPositive(int[]\
    \ arr) {\n    int[] result = new int[arr.length];\n    int i = 0;\n    for(int\
    \ j : arr) {\n        if(j > 0) {\n            result[i++] = j;\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if you have a negative number in the list as it will return an empty array.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\npublic static int[] getPositive(int[] arr)\
    \ {\n    int[] result = new int[arr.length];\n    int i = 0;\n    for(int j :\
    \ arr) {\n        if(j > 0) {\n            result[i++] = j;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static int[] getPositive(int[] arr) {\n    int[] result =\
    \ new int[arr.length];\n    int i = 0;\n    for(int j : arr) {\n        if(j >\
    \ 0) {\n            result[i++] = j;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a \nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnd8x8jes.d(23): Error: declaration expected, not `<`\\n/tmp/tmpnd8x8jes.d(26):\
    \ Error: unterminated character constant\\n/tmp/tmpnd8x8jes.d(32): Error: unterminated\
    \ character constant\\n/tmp/tmpnd8x8jes.d(35): Error: unterminated character constant\\\
    n/tmp/tmpnd8x8jes.d(42): Error: declaration expected, not `for`\\n/tmp/tmpnd8x8jes.d(45):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpnd8x8jes.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n       \
    \     result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp98nkftnd.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp98nkftnd.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmp98nkftnd.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xd2bc2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\tfor(int\
    \ i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] > 0)\n\t\t\tresult[i] = l[i];\n\t\
    }\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpezrmvd5k.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpezrmvd5k.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpezrmvd5k.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x4af18554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq060np4e.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpq060np4e.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpq060np4e.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xa17f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwrdbx0o8.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpwrdbx0o8.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpwrdbx0o8.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x87965554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<|\
    \ a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n   \
    \ int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n \
    \           result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n  \
    \  int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > \nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4d79p5tg.d(20): Error: declaration expected, not `<`\\n/tmp/tmp4d79p5tg.d(27):\
    \ Error: declaration expected, not `for`\\n/tmp/tmp4d79p5tg.d(27): Error: no identifier\
    \ for declarator `i`\\n/tmp/tmp4d79p5tg.d(27): Error: declaration expected, not\
    \ `<`\\n/tmp/tmp4d79p5tg.d(27): Error: no identifier for declarator `i`\\n/tmp/tmp4d79p5tg.d(27):\
    \ Error: declaration expected, not `++`\\n/tmp/tmp4d79p5tg.d(31): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d79p5tg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptxego17c.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmptxego17c.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmptxego17c.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xed656554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n       \
    \     result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9b7xf8fb.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp9b7xf8fb.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmp9b7xf8fb.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xd0d99554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5y0yc7e3.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp5y0yc7e3.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp5y0yc7e3.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x388b8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-2, -4, -6, 6]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -3,\
    \ 9, 123, 1]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ < 0)\n            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn\
    \ only numbers in the list that are divisible by 3.\n    >>> get_divisible_by_3([-1,\
    \ 2, -4, 5, 6])\n    [-1, 2, -4, 6]\n    >>> get_divisible_by_3([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_3(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] % 3 == 0)\n            result[i] = l[i];\n    }\n\
    \    return result;\n}\n/*\nReturn only numbers in the list that are divisible\
    \ by 5.\n    >>> get_divisible_by_5([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 6]\n \
    \   >>> get_divisible_by_5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3,\
    \ 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_5(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n      \
    \  if(l[i] % 5 == 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only numbers in the list that are divisible by 7.\n    >>> get_divisible_by_7([-1,\
    \ 2, -4, 5, 6])\n    [-1, 2, -4, 6]\n    >>> get_divisible_by_7([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_7(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] % 7 == 0)\n            result[i] = l[i];\n    }\n\
    \    return result;\n}\n/*\nReturn only numbers in the list that are di\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwruupo1z.d(92): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwruupo1z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to know how to do it\
    \ in C#, not Java.\n<|/ c |>\n<| c |>\nThe question was tagged C#, so I assumed\
    \ he was looking for C#. He also asked for help with his code. He didn't ask for\
    \ an algorithm to solve the problem. He asked for help with his code. He also\
    \ asked for help with his code. He didn't ask for an algorithm to solve the problem.\
    \ He asked for help with his code. He also asked for help with his code. He didn't\
    \ ask for an algorithm to solve the problem. He asked for help with his code.\
    \ He also asked for help with his code. He didn't ask for an algorithm to solve\
    \ the problem. He asked for help with his code. He also asked for help with his\
    \ code. He didn't ask for an algorithm to solve the problem. He asked for help\
    \ with his code. He also asked for help with his code. He didn't ask for an algorithm\
    \ to solve the problem. He asked for help with his code. He also asked for help\
    \ with his code. He didn't ask for an algorithm to solve the problem. He asked\
    \ for help with his code. He also asked for help with his code. He didn't ask\
    \ for an algorithm to solve the problem. He asked for help with his code. He also\
    \ asked for help with his code. He didn't ask for an algorithm to solve the problem.\n\
    <|/ c |>\n<| c |>\nHe also asked for help with his code. He didn't ask for an\
    \ algorithm to solve the problem. He asked for help with his code. He also asked\
    \ for help with his code. He didn't ask for an algorithm to solve the problem.\
    \ He asked for help with his code. He also asked for help with his code. He didn't\
    \ ask for an algorithm to solve the problem. He asked for help with his code.\
    \ He also asked for help with his code\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp87379mb_.d(21): Error: declaration expected, not `<`\\n/tmp/tmp87379mb_.d(24):\
    \ Error: unterminated character constant\\n/tmp/tmp87379mb_.d(27): Error: unterminated\
    \ character constant\\n/tmp/tmp87379mb_.d(27): Error: unterminated character constant\\\
    n/tmp/tmp87379mb_.d(27): Error: unterminated character constant\\n/tmp/tmp87379mb_.d(27):\
    \ Error: unterminated character constant\\n/tmp/tmp87379mb_.d(27): Error: unterminated\
    \ character constant\\n/tmp/tmp87379mb_.d(27): Error: unterminated character constant\\\
    n/tmp/tmp87379mb_.d(27): Error: unterminated character constant\\n/tmp/tmp87379mb_.d(27):\
    \ Error: unterminated character constant\\n/tmp/tmp87379mb_.d(27): Error: unterminated\
    \ character constant\\n/tmp/tmp87379mb_.d(30): Error: unterminated character constant\\\
    n/tmp/tmp87379mb_.d(30): Error: unterminated character constant\\n/tmp/tmp87379mb_.d(30):\
    \ Error: unterminated character constant\\n/tmp/tmp87379mb_.d(35): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp87379mb_.d(36): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp87379mb_.d(37): Error: declaration expected, not `assert`\\\
    n/tmp/tmp87379mb_.d(38): Error: declaration expected, not `assert`\\n/tmp/tmp87379mb_.d(39):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp87379mb_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzxiop6jt.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpzxiop6jt.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpzxiop6jt.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xc8c85554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] > 0) \n\t\t{\n\t\t\tresult[i]\
    \ = l[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4ea4qtes.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp4ea4qtes.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmp4ea4qtes.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xe3206554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tresult[i] = l[i];\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl1qq7fmz.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpl1qq7fmz.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpl1qq7fmz.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x31115554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdy_ozo6i.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpdy_ozo6i.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpdy_ozo6i.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x4836f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n        else\n        {\n            res[i] =\
    \ 0;\n        }\n    }\n    return res;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| c |>\nThis doesn't work if you have a negative number in the array. Try it\
    \ with `get_positive(new long[] { -1, 2, -4, 5, 6 })`.\n<|/ c |>\n<| c |>\n: I\
    \ added a version that works with negative numbers as well.\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have a negative number in the array. Try it with `get_positive(new\
    \ long[] { -1, 2, -4, 5, 6 })`.\n<|/ c |>\n<| c |>\n: I added a version that works\
    \ with negative numbers as well.\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have a negative number in the array. Try it with `get_positive(new long[] {\
    \ -1, 2, -4, 5, 6 })`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static int[]\
    \ GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n  \
    \  for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\npublic static\
    \ int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n        {\n        \
    \    result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| a |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n        {\n        \
    \    result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a \nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcaxuv0zv.d(26): Error: declaration expected, not `<`\\n/tmp/tmpcaxuv0zv.d(29):\
    \ Error: unterminated character constant\\n/tmp/tmpcaxuv0zv.d(35): Error: unterminated\
    \ character constant\\n/tmp/tmpcaxuv0zv.d(41): Error: unterminated character constant\\\
    n/tmp/tmpcaxuv0zv.d(48): Error: declaration expected, not `for`\\n/tmp/tmpcaxuv0zv.d(48):\
    \ Error: no identifier for declarator `i`\\n/tmp/tmpcaxuv0zv.d(48): Error: declaration\
    \ expected, not `<`\\n/tmp/tmpcaxuv0zv.d(48): Error: no identifier for declarator\
    \ `i`\\n/tmp/tmpcaxuv0zv.d(48): Error: declaration expected, not `++`\\n/tmp/tmpcaxuv0zv.d(53):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpcaxuv0zv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0)\
    \ \n        {\n            result[j] = l[i];\n            j++;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuiqx4wrz.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284cd]\\n??:? void tmpuiqx4wrz.__unittest_L24_C1()\
    \ [0x427fb1]\\n??:? void tmpuiqx4wrz.__modtest() [0x428250]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430655]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b415]\\n??:? runModuleUnitTests [0x42c381]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428990]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428917]\\n??:? _d_run_main [0x428882]\\n??:? main [0x428263]\\\
    n??:? __libc_start_main [0xaa325554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tresult[i] = l[i];\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq3g6o9kj.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpq3g6o9kj.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpq3g6o9kj.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xad807554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_8tnxrcy.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp_8tnxrcy.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmp_8tnxrcy.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x1d715554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n           \
    \ result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu0rxybg5.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpu0rxybg5.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpu0rxybg5.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x950e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpseljddi8.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpseljddi8.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpseljddi8.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xd9664554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfs9ek6j0.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpfs9ek6j0.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpfs9ek6j0.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xe2d66554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaou4liha.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpaou4liha.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpaou4liha.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x4828d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_glbogvb.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp_glbogvb.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmp_glbogvb.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xbca6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5p_vw9uy.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp5p_vw9uy.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp5p_vw9uy.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x10b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for(int i = 0; i < array.Length; i++)\n    {\n\
    \        if(array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays |>\n<code>\npublic\
    \ static int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n            result[i] =\
    \ array[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n \
    \   int[] result = new int[array.Length];\n    for(int i = 0; i < array.Length;\
    \ i++)\n    {\n        if(array[i] > 0)\n            result[i] = array[i];\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for(int i = 0; i < array.Length; i++)\n    {\n\
    \        if(array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,arrays |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprixwoofa.d(20): Error: declaration expected, not `<`\\n/tmp/tmprixwoofa.d(27):\
    \ Error: declaration expected, not `for`\\n/tmp/tmprixwoofa.d(27): Error: no identifier\
    \ for declarator `i`\\n/tmp/tmprixwoofa.d(27): Error: declaration expected, not\
    \ `<`\\n/tmp/tmprixwoofa.d(27): Error: no identifier for declarator `i`\\n/tmp/tmprixwoofa.d(27):\
    \ Error: declaration expected, not `++`\\n/tmp/tmprixwoofa.d(31): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprixwoofa.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp78gzxx35.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp78gzxx35.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp78gzxx35.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xe5767554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2jv3ced1.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp2jv3ced1.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmp2jv3ced1.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xfa79d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsr93fs1b.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpsr93fs1b.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpsr93fs1b.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xd75e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp30gbghhq.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp30gbghhq.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp30gbghhq.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x5eaf5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \            result[j++] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int j = 0;\n    for\
    \ (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n     \
    \       result[j++] = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=c#,arrays |>\n<code>\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplshgl9t6.d(21): Error: declaration expected, not `<`\\n/tmp/tmplshgl9t6.d(29):\
    \ Error: declaration expected, not `for`\\n/tmp/tmplshgl9t6.d(29): Error: no identifier\
    \ for declarator `i`\\n/tmp/tmplshgl9t6.d(29): Error: declaration expected, not\
    \ `<`\\n/tmp/tmplshgl9t6.d(29): Error: no identifier for declarator `i`\\n/tmp/tmplshgl9t6.d(29):\
    \ Error: declaration expected, not `++`\\n/tmp/tmplshgl9t6.d(33): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplshgl9t6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; i++) \n    {\n        if (l[i] > 0) \n    \
    \    {\n            result[i] = l[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkiu3re9l.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpkiu3re9l.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmpkiu3re9l.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x92cfa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsqnvdtu1.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpsqnvdtu1.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpsqnvdtu1.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x1cf85554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprrzbv914.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmprrzbv914.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmprrzbv914.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x6699b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7uepljbb.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp7uepljbb.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmp7uepljbb.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xb6c61554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjgugoqpw.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpjgugoqpw.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpjgugoqpw.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xecfa5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr4049f4e.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpr4049f4e.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpr4049f4e.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xb99ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9gwqz1tp.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp9gwqz1tp.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp9gwqz1tp.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x3901c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe3hlmv81.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpe3hlmv81.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpe3hlmv81.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xc9f91554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc_73xo36.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpc_73xo36.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpc_73xo36.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xea011554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n        {\n     \
    \       r[i] = l[i];\n        }\n    }\n    return r;\n}\n/*\nReturn only negative\
    \ numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4,\
    \ -6, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5,\
    \ -3, -3, -9, 0, 123, 1]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[]\
    \ r = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n  \
    \      if (l[i] < 0) \n        {\n            r[i] = l[i];\n        }\n    }\n\
    \    return r;\n}\n/*\nReturn only numbers in the list that are divisible by 3.\n\
    \    >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 6]\n    >>> get_divisible_by_3([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_divisible_by_3(long[] l) \n{\n    long[] r = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++) \n    {\n        if (l[i] % 3 == 0) \n      \
    \  {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}\n/*\nReturn\
    \ only numbers in the list that are divisible by 5.\n    >>> get_divisible_by_5([-1,\
    \ 2, -4, 5, 6])\n    [-1, 2, -4, 6]\n    >>> get_divisible_by_5([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_5(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        if (l[i] % 5 == 0) \n        {\n            r[i] = l[i];\n\
    \        }\n    }\n    return r;\n}\n/*\nReturn only numbers in the list that\
    \ are divisible by 7.\n    >>> get_divisible_by_7([-1, 2, -4, 5, 6])\n    [-1,\
    \ 2, -4, 6]\n    >>> get_divisible_by_7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_7(long[] l) \n{\n  \
    \  long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n \
    \   {\n        if (l[i] % 7 == 0) \n        {\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwozs4xuh.d(97): Error: found `unittest` instead of statement\\\
    n/tmp/tmpwozs4xuh.d(106): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpwozs4xuh.d(106): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwozs4xuh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9h4qa5u6.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp9h4qa5u6.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp9h4qa5u6.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x8ea16554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprk71402i.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmprk71402i.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmprk71402i.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xbce17554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n        {\n\
    \            result[i] = l[i];\n        }\n    }\n    return result;\n}\n/*\n\
    Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5,\
    \ 6])\n    [-1, -4, -6, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [-5, -3, -3, -3, 9, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, \nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk6d3qrml.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6d3qrml.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n     \
    \       result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI do not understand how this works. Can you please explain it a\
    \ little more?\n<|/ c |>\n<| c |>\nI added some comments. Hope it helps.\n<|/\
    \ c |>\n<| a tags=arrays,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa4d8nj3k.d(21): Error: declaration expected, not `<`\\n/tmp/tmpa4d8nj3k.d(32):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpa4d8nj3k.d(32): Error: no identifier\
    \ for declarator `.Collections.Generic`\\n/tmp/tmpa4d8nj3k.d(33): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpa4d8nj3k.d(33): Error: no identifier for declarator\
    \ `.Linq`\\n/tmp/tmpa4d8nj3k.d(34): Error: semicolon expected, not `.`\\n/tmp/tmpa4d8nj3k.d(34):\
    \ Error: no identifier for declarator `.Text`\\n/tmp/tmpa4d8nj3k.d(35): Error:\
    \ semicolon expected, not `.`\\n/tmp/tmpa4d8nj3k.d(35): Error: no identifier for\
    \ declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpa4d8nj3k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n        r[i] = l[i] > 0 ? l[i] : 0;\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5sw7fj3h.d(21): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp5sw7fj3h.__unittest_L17_C1()\
    \ [0x427fb9]\\n??:? void tmp5sw7fj3h.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x93e3c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb0xyt6xp.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpb0xyt6xp.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpb0xyt6xp.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x1bd38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n        r[i] = l[i] > 0 ? l[i] : 0;\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjw_mmm7a.d(21): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpjw_mmm7a.__unittest_L17_C1()\
    \ [0x427fb9]\\n??:? void tmpjw_mmm7a.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xe5948554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw0o8t367.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpw0o8t367.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpw0o8t367.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x69fb9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnl5i2f_5.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpnl5i2f_5.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpnl5i2f_5.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xf7135554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n        r[i] = l[i] > 0 ? l[i] : 0;\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz1q0es2n.d(21): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpz1q0es2n.__unittest_L17_C1()\
    \ [0x427fb9]\\n??:? void tmpz1q0es2n.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x33e0c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<|\
    \ c |>\nThis code doesn't work. `get_positive` returns a `long[]` but `l` is a\
    \ `long[][]`\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing out.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static long[] GetPositive(long[][]\
    \ l)\n{\n    long[] result = new long[l.Length];\n    for (int i = 0; i < l.Length;\
    \ i++)\n    {\n        if (l[i] > 0)\n            result[i] = l[i];\n    }\n \
    \   return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=0 |>\n<code>\n\
    public static long[] GetPositive(long[][] l)\n{\n    long[] result = new long[l.Length];\n\
    \    for (int i = 0; i < l.Length; i++)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static long[] GetPositive(long[][] l)\n\
    {\n    long[] result = new long[l.Length];\n    for (int i = 0; i < l.Length;\
    \ i++)\n    {\n        if (l[i] > 0)\n            result[i] = l[i];\n    }\n \
    \   return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n\
    <code>\npublic static long[] GetPositive(long[][] l)\n{\n    long[] result = new\
    \ long[l.Length];\n    for (int i = 0; i < l.Length; i++)\n    {\n        if (l[i]\
    \ > 0)\n            result[i] = l[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ long[] GetPositive(long[][] l)\n{\n    long[] result = new long[l.Length];\n\
    \    for (int i = 0; i < l.Length; i++)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a tags=c#,arrays |>\n<code>\npublic static long[] GetPositive(long[][]\
    \ l)\n{\n    long[] result = new long[l.\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo8abivwq.d(20): Error: declaration expected, not `<`\\n/tmp/tmpo8abivwq.d(23):\
    \ Error: unterminated character constant\\n/tmp/tmpo8abivwq.d(33): Error: declaration\
    \ expected, not `for`\\n/tmp/tmpo8abivwq.d(33): Error: no identifier for declarator\
    \ `i`\\n/tmp/tmpo8abivwq.d(33): Error: declaration expected, not `<`\\n/tmp/tmpo8abivwq.d(33):\
    \ Error: no identifier for declarator `i`\\n/tmp/tmpo8abivwq.d(33): Error: declaration\
    \ expected, not `++`\\n/tmp/tmpo8abivwq.d(37): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo8abivwq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n        else\n            break;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk87nensg.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpk87nensg.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmpk87nensg.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x7318e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n        else\n        {\n            res[i] =\
    \ 0;\n        }\n    }\n    return res;\n}\n/*\nReturn only negative numbers in\
    \ the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-2, -4, -6, 0]\n  \
    \  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3,\
    \ -9, 0, 123, -1, -10]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      if(l[i] < 0)\n        {\n            res[i] = l[i];\n        }\n      \
    \  else\n        {\n            res[i] = 0;\n        }\n    }\n    return res;\n\
    }\n/*\nReturn only numbers in the list that are even numbers.\n    >>> get_even([-1,\
    \ 2, -4, 5, 6])\n    [2, 4, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_even(long[] l) \n{\n \
    \   long[] res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] % 2 == 0)\n        {\n            res[i] = l[i];\n   \
    \     }\n        else\n        {\n            res[i] = 0;\n        }\n    }\n\
    \    return res;\n}\n/*\nReturn only numbers in the list that are odd numbers.\n\
    \    >>> get_odd([-1, 2, -4, 5, 6])\n    [1, 3, 5]\n    >>> get_odd([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_odd(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] % 2 != 0)\n        {\n            res[i] = l[i];\n\
    \        }\n        else\n        {\n            res[i] = 0;\n        }\n    }\n\
    \    return res;\n}\n/*\nReturn only numbers in the list that are divisible by\
    \ 3.\n    >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n    [1, 3, 5]\n    >>> get_divisible_by_3([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_divisible_by_3(long[] l) \n{\n\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl614ls5d.d(109): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl614ls5d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpakxnedu7.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpakxnedu7.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpakxnedu7.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x4679f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8k5fi4vu.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp8k5fi4vu.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp8k5fi4vu.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x8f7d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4h9u2gcp.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp4h9u2gcp.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp4h9u2gcp.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xa7923554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            res[i] =\
    \ l[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu92gww6o.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpu92gww6o.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpu92gww6o.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xc538d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    int i\
    \ = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n        \
    \    break;\n    }\n    for (int j = i; j < l.length; ++j)\n    {\n        if\
    \ (l[j] < 0)\n        {\n            res[i] = l[j];\n            ++i;\n      \
    \  }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphmrm7xbf.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42851d]\\n??:? void tmphmrm7xbf.__unittest_L29_C1()\
    \ [0x428001]\\n??:? void tmphmrm7xbf.__modtest() [0x4282a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5fb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b48e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430719]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b465]\\n??:? runModuleUnitTests [0x42c3d1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428967]\\n??:? _d_run_main [0x4288d2]\\n??:? main [0x4282b3]\\\
    n??:? __libc_start_main [0x2d962554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<|\
    \ c |>\nThis is not the best solution. `l.Where(x => x > 0).ToArray()` is much\
    \ more efficient.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to show how\
    \ to do it with loops.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to show\
    \ how to do it with loops.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted\
    \ to show how to do it with loops.\n<|/ c |>\n<| c |>\nI agree with you, but I\
    \ wanted to show how to do it with loops.\n<|/ c |>\n<| a tags=c#,arrays |>\n\
    <code>\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7370ke39.d(20): Error: declaration expected, not `<`\\n/tmp/tmp7370ke39.d(43):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp7370ke39.d(44): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp7370ke39.d(45): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp7370ke39.d(46): Error: declaration expected, not `assert`\\\
    n/tmp/tmp7370ke39.d(47): Error: unrecognized declaration\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp7370ke39.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd8ji9sxf.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpd8ji9sxf.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpd8ji9sxf.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xa64b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_25vauy9.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp_25vauy9.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp_25vauy9.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x1daa7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi6j4avqo.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpi6j4avqo.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpi6j4avqo.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x2a180554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; ++i)\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n        else\n            break;\n    return result;\n}\n/*\nReturn\
    \ only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n\
    \    [-1, -4, -6, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    [5, 3, -5, -3, 3, 9, 0, 123, -1, -10]\n    \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (;\
    \ i < l.length; ++i)\n        if (l[i] < 0)\n            result[i] = l[i];\n \
    \       else\n            break;\n    return result;\n}\n/*\nReturn only numbers\
    \ in the list that are divisible by 3.\n    >>> get_divisible_by_3([-1, 2, -4,\
    \ 5, 6])\n    [-1, -4, -6, 6]\n    >>> get_divisible_by_3([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    [5, 3, -5, -3, 3, 9, 0, 123, -1, -10]\n    \n*/\nlong[]\
    \ get_divisible_by_3(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n        if (l[i] % 3 == 0)\n \
    \           result[i] = l[i];\n        else\n            break;\n    return result;\n\
    }\n/*\nReturn only numbers in the list that are divisible by 5.\n    >>> get_divisible_by_5([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4, -6, 6]\n    >>> get_divisible_by_5([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, -3, 3, 9, 0, 123, -1, -10]\n    \n\
    */\nlong[] get_divisible_by_5(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n        if (l[i] % 5 == 0)\n \
    \           result[i] = l[i];\n        else\n            break;\n    return result;\n\
    }\n/*\nReturn only numbers in the list that are divisible by 7.\n    >>> get_divisible_by_7([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4, -6, 6]\n    >>> get_divisible_by_7([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, -3, 3, 9, 0, 123, -1, -10]\n    \n\
    */\nlong[] get_divisible_by_7(long[] l) \n{\n    long[] result = new long[l.\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkn4q23il.d(89): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmpkn4q23il.d(90): Error: found `{` when expecting `]`\\n/tmp/tmpkn4q23il.d(91):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpkn4q23il.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    int i\
    \ = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n          \
    \  break;\n    }\n    for(; i < l.length; ++i)\n    {\n        if(l[i] < 0)\n\
    \        {\n            res[i] = -l[i];\n            break;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwkg13znq.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428515]\\n??:? void tmpwkg13znq.__unittest_L29_C1()\
    \ [0x427ff9]\\n??:? void tmpwkg13znq.__modtest() [0x428298]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b486]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430711]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43069d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b45d]\\n??:? runModuleUnitTests [0x42c3c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42895f]\\n??:? _d_run_main [0x4288ca]\\n??:? main [0x4282ab]\\\
    n??:? __libc_start_main [0xac8e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiwba0vba.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpiwba0vba.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpiwba0vba.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x6e7a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe2bn4qnd.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpe2bn4qnd.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpe2bn4qnd.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x2e3f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmf8zk0qq.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpmf8zk0qq.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpmf8zk0qq.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x1b2ad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    int i;\n\
    \    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            r[i]\
    \ = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7303fhma.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp7303fhma.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmp7303fhma.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x85c1d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwo3qzqwm.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpwo3qzqwm.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpwo3qzqwm.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x2cbfe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n        if(l[i] > 0)\n            res[i] = l[i];\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp04tgqp3v.d(22): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp04tgqp3v.__unittest_L18_C1()\
    \ [0x427fb5]\\n??:? void tmp04tgqp3v.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xb0313554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv7io5mdb.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpv7io5mdb.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpv7io5mdb.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xa3593554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzmt6g503.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpzmt6g503.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpzmt6g503.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xbe4e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa57479dm.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpa57479dm.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpa57479dm.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xeebf8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkkzhiyi8.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpkkzhiyi8.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpkkzhiyi8.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xab566554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_b7d495k.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp_b7d495k.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp_b7d495k.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xf11a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp08ciovyo.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp08ciovyo.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp08ciovyo.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x99810554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n        else\n            break;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7mo6lt85.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp7mo6lt85.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmp7mo6lt85.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x53bac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpns8gnook.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpns8gnook.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpns8gnook.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x4f011554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -2, -3,\
    \ -9, 0, 123, -1, -10]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        if(l[i] < 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only numbers in the list that are divisible by 3.\n    >>> get_divisible_by_3([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>> get_divisible_by_3([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_3(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] % 3 == 0)\n            result[i] = l[i];\n    }\n\
    \    return result;\n}\n/*\nReturn only numbers in the list that are divisible\
    \ by 5.\n    >>> get_divisible_by_5([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n\
    \    >>> get_divisible_by_5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5,\
    \ 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_5(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        if(l[i] % 5 == 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only numbers in the list that are divisible by 7.\n    >>> get_divisible_by_7([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>> get_divisible_by_7([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_7(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] % 7 == 0)\n            result[i] = l[i];\n    }\n\
    \    return result;\n\nunittest\n{\n    alias candidate = get_positive;\n\n  \
    \  assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmdbmxmyb.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmdbmxmyb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -9,\
    \ 0, 123, 1]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ < 0)\n            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn\
    \ only numbers in the list that are divisible by 3.\n    >>> get_divisible_by_three([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>> get_divisible_by_three([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_three(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] % 3 == 0)\n            result[i] = l[i];\n    }\n\
    \    return result;\n}\n/*\nReturn only numbers in the list that are divisible\
    \ by 5.\n    >>> get_divisible_by_five([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n\
    \    >>> get_divisible_by_five([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5,\
    \ 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_five(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        if(l[i] % 5 == 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only numbers in the list that are divisible by 7.\n    >>> get_divisible_by_seven([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>> get_divisible_by_seven([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_seven(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] % 7 == 0)\n            result[i] = l[i];\n    }\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcyt946xa.d(90): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyt946xa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3y05l8tp.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp3y05l8tp.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmp3y05l8tp.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x15637554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmwk5v24a.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpmwk5v24a.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpmwk5v24a.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x2734a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            res[i] =\
    \ l[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphwd2zgty.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmphwd2zgty.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmphwd2zgty.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x1553a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy7w1uw0m.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpy7w1uw0m.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpy7w1uw0m.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xc038e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt8caufzy.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpt8caufzy.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpt8caufzy.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x87df1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp58cf36e8.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp58cf36e8.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp58cf36e8.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xe8dad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqjodusop.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpqjodusop.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpqjodusop.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xa3cda554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpugvf1evu.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpugvf1evu.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpugvf1evu.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xe5d98554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpni87d0jm.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpni87d0jm.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpni87d0jm.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xdaba7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph0wh1ts8.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmph0wh1ts8.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmph0wh1ts8.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x68c7c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\n/*\nReturn only negative\
    \ numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -2,\
    \ -4, -5, -6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    [5, 3, -5, 2, -3, -3, 9, 0, 123, -1, -10]\n    \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < 0)\n        {\n            res[i] = l[i];\n \
    \       }\n    }\n    return res;\n}\n/*\nReturn only numbers in the list that\
    \ are even or odd.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 4, 6]\n    >>>\
    \ get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n \
    \   \n*/\nlong[] get_even(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] % 2 == 0)\n   \
    \     {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n/*\n\
    Return only numbers in the list that are even or odd.\n    >>> get_odd([-1, 2,\
    \ -4, 5, 6])\n    [1, 3, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    [5, 3, 9, 123, -1]\n    \n*/\nlong[] get_odd(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      if(l[i] % 2 != 0)\n        {\n            res[i] = l[i];\n        }\n \
    \   }\n    return res;\n}\n/*\nReturn only numbers in the list that are divisible\
    \ by 3.\n    >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5]\n \
    \   >>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3,\
    \ -5, 2, -3, -3, 9, 0, 123, -1]\n    \n*/\nlong[] get_divisible_by_3(long[] l)\
    \ \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] % 3 == 0)\n\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqjjotrig.d(97): Error: found `unittest` instead of statement\\\
    n/tmp/tmpqjjotrig.d(106): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjjotrig.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn8sf5m8m.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpn8sf5m8m.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpn8sf5m8m.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xbed5e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n\
    \            result[i] = l[i];\n        }\n        else\n        {\n         \
    \   break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3zajewtw.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp3zajewtw.__unittest_L27_C1()\
    \ [0x427fb5]\\n??:? void tmp3zajewtw.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x7bedb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4_uu7s6i.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp4_uu7s6i.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmp4_uu7s6i.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x63a42554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n        else\n            break;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp06sspoxa.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp06sspoxa.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmp06sspoxa.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xc2a2d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkdz09suo.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpkdz09suo.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpkdz09suo.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x67008554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n        {\n\
    \            result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprl9rn99g.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmprl9rn99g.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmprl9rn99g.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xa7ca1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpee9sl3vp.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpee9sl3vp.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpee9sl3vp.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x540e9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmuz9w_02.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpmuz9w_02.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpmuz9w_02.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x3e2e3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    int i\
    \ = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n          \
    \  break;\n    }\n    for(; i < l.length; ++i)\n    {\n        if(l[i] < 0)\n\
    \        {\n            res[i] = -l[i];\n        }\n        else\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw9v9xjzg.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42856d]\\n??:? void tmpw9v9xjzg.__unittest_L32_C1()\
    \ [0x42804d]\\n??:? void tmpw9v9xjzg.__modtest() [0x4282ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c64b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430769]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4b5]\\n??:? runModuleUnitTests [0x42c421]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a30]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289b7]\\n??:? _d_run_main [0x428922]\\n??:? main [0x4282ff]\\\
    n??:? __libc_start_main [0x50dea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8leb_fqt.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp8leb_fqt.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmp8leb_fqt.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xd1ea2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n       \
    \     res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8dk8yqu1.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp8dk8yqu1.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmp8dk8yqu1.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xcc85a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf83briev.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpf83briev.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpf83briev.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x60a41554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsyjz_npc.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpsyjz_npc.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpsyjz_npc.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x86904554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpud3jncaz.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpud3jncaz.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpud3jncaz.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xb683b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsf4q4x5j.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpsf4q4x5j.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpsf4q4x5j.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x25ef5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \        else\n            r[i] = 0;\n    }\n    return r;\n}\n/*\nReturn only\
    \ negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n   \
    \ [-2, -4, -6, 0]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    [-5, -3, -3, -9, 0, 123, 1]\n    \n*/\nlong[] get_negative(long[] l) \n{\n\
    \    long[] r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n \
    \   {\n        if(l[i] < 0)\n            r[i] = l[i];\n        else\n        \
    \    r[i] = 0;\n    }\n    return r;\n}\n/*\nReturn only numbers in the list that\
    \ are even numbers.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 4, 6]\n    >>>\
    \ get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 9, 123, 1]\n    \n\
    */\nlong[] get_even(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] % 2 == 0)\n            r[i]\
    \ = l[i];\n        else\n            r[i] = 0;\n    }\n    return r;\n}\n/*\n\
    Return only numbers in the list that are odd numbers.\n    >>> get_odd([-1, 2,\
    \ -4, 5, 6])\n    [1, 3, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_odd(long[] l) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n    \
    \    if(l[i] % 2 != 0)\n            r[i] = l[i];\n        else\n            r[i]\
    \ = 0;\n    }\n    return r;\n}\n/*\nReturn only numbers in the list that are\
    \ divisible by 3.\n    >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n    [1, 3, 5]\n\
    \    >>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5,\
    \ 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_3(long[] l) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n    \
    \    if(l[i] % 3 == 0)\n            r[i] = l[i];\n        else\n            r[i]\
    \ = 0;\n    }\n    return r;\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp450koyos.d(101): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp450koyos.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n        r[i] = l[i] > 0 ? l[i] : 0;\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsj0wcvx2.d(21): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpsj0wcvx2.__unittest_L17_C1()\
    \ [0x427fb9]\\n??:? void tmpsj0wcvx2.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x369cb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprvpep5yg.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmprvpep5yg.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmprvpep5yg.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x83fd3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4iaq_frf.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp4iaq_frf.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp4iaq_frf.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x3704e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpebil6vb_.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpebil6vb_.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpebil6vb_.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x744d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpekntg2wu.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpekntg2wu.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpekntg2wu.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xdcfb9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -9, -10,\
    \ -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3,\
    \ -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10,\
    \ -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3,\
    \ -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10,\
    \ -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3,\
    \ -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10,\
    \ -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3,\
    \ -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10,\
    \ -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3,\
    \ -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10,\
    \ -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3,\
    \ -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10,\
    \ -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3, -9, -10, -5, -3,\
    \ -9, -10, -5, -3, -9, -\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwqdw6rdh.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqdw6rdh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, -3, -5, 2, -3,\
    \ -3, 9, 0, 123, 1, -10]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n\
    \        if (l[i] < 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only numbers in the list that are even.\n    >>> get_even([-1, 2,\
    \ -4, 5, 6])\n    [2, 4]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_even(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n\
    \        if (l[i] % 2 == 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}\n/*\nReturn only numbers in the list that are odd.\n    >>> get_odd([-1,\
    \ 2, -4, 5, 6])\n    [1, 3, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_odd(long[] l) \n{\n  \
    \  long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] % 2 != 0)\n            result[i] = l[i];\n    }\n   \
    \ return result;\n}\n/*\nReturn only numbers in the list that are divisible by\
    \ 3.\n    >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 6]\n    >>>\
    \ get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123,\
    \ 1]\n    \n*/\nlong[] get_divisible_by_3(long[] l) \n{\n    long[] result = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ % 3 == 0)\n            result[i] = l[i];\n    }\n    return result;\n}\n/*\n\
    Return only numbers in the list that are divisible by 5.\n    >>> get_divisible_by_5([-1,\
    \ 2, -4, 5, 6])\n    [-1, 2, -4, 6, 8]\n    >>> \nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpezv1tjrd.d(92): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezv1tjrd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the list is empty. `get_positive([])` returns\
    \ `[]` instead of `null`.\n<|/ c |>\n<| c |>\nYes, I know. That's why I wrote\
    \ \"Return only positive numbers in the list.\"\n<|/ c |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static int[] getPositives(int[] arr) {\n    int[] res = new\
    \ int[arr.length];\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i]\
    \ > 0) {\n            res[i] = arr[i];\n        }\n    }\n    return res;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the list is empty. `getPositives([])`\
    \ returns `null` instead of `[]`.\n<|/ c |>\n<| c |>\nThis code doesn't return\
    \ `null` if the list is empty. `res` will be `null` if the list is empty.\n<|/\
    \ c |>\n<| c |>\nThis code doesn't return `null` if the list is empty. `res` will\
    \ be `null` if the list is empty.\n<|/ c |>\n<| c |>\nThis code doesn't return\
    \ `null` if the list is empty. `res` will be `null` if the list is empty.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\npublic static int[] getPositives(int[] arr)\
    \ {\n    int[] res = new int[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++) {\n        if(arr[i] > 0) {\n            res[i] = arr[i];\n        }\n\
    \    }\n    return res;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis\
    \ doesn't work if the list is empty. `getPositives([])` returns `null` instead\
    \ of `[]`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int[] getPositives(int[]\
    \ arr) {\n    int[] res = new int[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++) {\n        if(arr[i] > 0) {\n            res[i] = arr[i];\n        }\n\
    \    }\n    return res;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis\
    \ doesn't work if the list is empty. `getPositives([])` returns `null` instead\
    \ of `[]`.\n<|/ \nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp557rt0ct.d(22): Error: declaration expected, not `<`\\n/tmp/tmp557rt0ct.d(25):\
    \ Error: unterminated character constant\\n/tmp/tmp557rt0ct.d(28): Error: unterminated\
    \ character constant\\n/tmp/tmp557rt0ct.d(34): Error: declaration expected, not\
    \ `for`\\n/tmp/tmp557rt0ct.d(34): Error: no identifier for declarator `i`\\n/tmp/tmp557rt0ct.d(34):\
    \ Error: declaration expected, not `<`\\n/tmp/tmp557rt0ct.d(34): Error: no identifier\
    \ for declarator `i`\\n/tmp/tmp557rt0ct.d(34): Error: declaration expected, not\
    \ `++`\\n/tmp/tmp557rt0ct.d(37): Error: unrecognized declaration\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp557rt0ct.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5, 6]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3,\
    \ -3, 9, 0, 123, 1, -10]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        if(l[i] < 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only numbers in the list that are divisible by 3.\n    >>> get_divisible_by_3([-1,\
    \ 2, -4, 5, 6])\n    [-1, 2, -4, 5, 6]\n    >>> get_divisible_by_3([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, -3, 9, 0, 123, 1, -10]\n\
    \    \n*/\nlong[] get_divisible_by_3(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] % 3 == 0)\n   \
    \         result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only numbers\
    \ in the list that are divisible by 5.\n    >>> get_divisible_by_5([-1, 2, -4,\
    \ 5, 6])\n    [-1, 2, -4, 5, 6]\n    >>> get_divisible_by_5([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, -3, 9, 0, 123, 1, -10]\n    \n\
    */\nlong[] get_divisible_by_5(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] % 5 == 0)\n   \
    \         result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only numbers\
    \ in the list that are divisible by 7.\n    >>> get_divisible_by_7([-1, 2, -4,\
    \ 5, 6])\n    [-1, 2, -4, 5, 6]\n    >>> get_divisible_by_7([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, -3, 9, 0, 123, 1, -10]\n    \n\
    */\nlong[] get_divisible_by_7(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] % \nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcrd2ndyj.d(88): Error: expression expected, not `unittest`\\\
    n/tmp/tmpcrd2ndyj.d(89): Error: found `{` when expecting `)`\\n/tmp/tmpcrd2ndyj.d(97):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrd2ndyj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    int i =\
    \ 0;\n    foreach(long x, l) \n    {\n        if(x>0) \n        {\n          \
    \  r[i++] = x;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpic697g4h.d(14): Error: no identifier for declarator `l`\\n/tmp/tmpic697g4h.d(14):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpic697g4h.d(21): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic697g4h.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    int i =\
    \ 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i]\
    \ = l[i];\n        else\n            break;\n    }\n    return r;\n}\n/*\nReturn\
    \ only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n\
    \    [-2, -4, -6, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    [-5, -3, 3, 9, 0, 123, 1]\n    \n*/\nlong[] get_negative(long[] l)\
    \ \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < 0)\n            r[i] = l[i];\n        else\n\
    \            break;\n    }\n    return r;\n}\n/*\nReturn only numbers in the list\
    \ that are even numbers.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 4, 6]\n\
    \    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123,\
    \ 1]\n    \n*/\nlong[] get_even(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] % 2 == 0)\n\
    \            r[i] = l[i];\n        else\n            break;\n    }\n    return\
    \ r;\n}\n/*\nReturn only numbers in the list that are odd numbers.\n    >>> get_odd([-1,\
    \ 2, -4, 5, 6])\n    [1, 3, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_odd(long[] l) \n{\n  \
    \  long[] r = new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n\
    \    {\n        if(l[i] % 2 != 0)\n            r[i] = l[i];\n        else\n  \
    \          break;\n    }\n    return r;\n}\n/*\nReturn only numbers in the list\
    \ that are multiples of 3.\n    >>> get_multiple([-1, 2, -4, 5, 6])\n    [1, 3,\
    \ 5]\n    >>> get_multiple([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3,\
    \ 9, 123, 1]\n    \n*/\nlong[] get_multiple(long[] l) \n{\n    long[] r = new\
    \ long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n     \
    \   if(l[i] % 3 == 0)\n            r[i] = l[i];\n        else\n            break;\n\
    \    }\n    return r;\n}\n/*\n\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp661g_2si.d(107): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp661g_2si.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7l_qc870.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp7l_qc870.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmp7l_qc870.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x972f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    int i =\
    \ 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n \
    \           r[i] = l[i];\n        }\n        else\n        {\n            break;\n\
    \        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprfs2ygw_.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmprfs2ygw_.__unittest_L27_C1()\
    \ [0x427fb5]\\n??:? void tmprfs2ygw_.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x3296e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk6s436wu.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpk6s436wu.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpk6s436wu.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xd94dc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj_wvpfym.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpj_wvpfym.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpj_wvpfym.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x320fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvejoooli.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpvejoooli.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpvejoooli.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xfb7fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzmw8dz7g.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpzmw8dz7g.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpzmw8dz7g.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xdfca1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvso1dsu6.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpvso1dsu6.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpvso1dsu6.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x5ad9e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    int i =\
    \ 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i]\
    \ = l[i];\n        else\n            break;\n    }\n    return r;\n}\n/*\nReturn\
    \ only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n\
    \    [-1, -4, -6, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    [5, -3, -3, 9, 123, -1, -10]\n    \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < 0)\n            r[i] = l[i];\n        else\n\
    \            break;\n    }\n    return r;\n}\n/*\nReturn only numbers in the list\
    \ that are divisible by 3.\n    >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n  \
    \  [-1, -4, -6, 6]\n    >>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, -3, -3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_3(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] % 3 == 0)\n            r[i] = l[i];\n        else\n\
    \            break;\n    }\n    return r;\n}\n/*\nReturn only numbers in the list\
    \ that are divisible by 5.\n    >>> get_divisible_by_5([-1, 2, -4, 5, 6])\n  \
    \  [-1, -4, -6, 6]\n    >>> get_divisible_by_5([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, -3, -3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_5(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] % 5 == 0)\n            r[i] = l[i];\n        else\n\
    \            break;\n    }\n    return r;\n}\n/*\nReturn only numbers in the list\
    \ that are divisible by 7.\n    >>> get_divisible_by_7([-1, 2, -4, 5, 6])\n  \
    \  [-1, -4, -6, 6]\n    >>> get_divisible_by_7([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    [5, -3, -3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_7(long[]\
    \ l) \n{\n    long[] r = new long\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn69jsu0m.d(97): Error: semicolon expected, not `unittest`\\n/tmp/tmpn69jsu0m.d(97):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpn69jsu0m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn7cpfs6x.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpn7cpfs6x.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpn7cpfs6x.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xd3bc1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative\
    \ numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4,\
    \ -6, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5,\
    \ -3, 3, 9, 0, 123, 1]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n\
    \    {\n        if(l[i] < 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}\n/*\nReturn only numbers in the list that are divisible by 3.\n \
    \   >>> get_divisible_by_3([-1, 2, -4, 5, 6])\n    [-1, -4, -6, 6]\n    >>> get_divisible_by_3([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_divisible_by_3(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] % 3 == 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only\
    \ numbers in the list that are divisible by 5.\n    >>> get_divisible_by_5([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4, -6, 6]\n    >>> get_divisible_by_5([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_5(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i\
    \ < l.length; ++i)\n    {\n        if(l[i] % 5 == 0)\n            result[i] =\
    \ l[i];\n    }\n    return result;\n}\n/*\nReturn only numbers in the list that\
    \ are divisible by 7.\n    >>> get_divisible_by_7([-1, 2, -4, 5, 6])\n    [-1,\
    \ -4, -6, 6]\n    >>> get_divisible_by_7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    [5, 3, 9, 123, 1]\n    \n*/\nlong[] get_divisible_by_7(long[] l) \n{\n  \
    \  long[] result = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] % 7\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprskt0k2x.d(93): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmprskt0k2x.d(102): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmprskt0k2x.d(102): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprskt0k2x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk5dw6o8b.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpk5dw6o8b.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpk5dw6o8b.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x2dee2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx5kx542r.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpx5kx542r.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpx5kx542r.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x93085554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw3iqco9d.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpw3iqco9d.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpw3iqco9d.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x150ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; ++i)\n        if (l[i] > 0)\n            break;\n\
    \    for (; i < l.length; ++i)\n        result[i] = l[i];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1w4blfrm.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284dd]\\n??:? void tmp1w4blfrm.__unittest_L21_C1()\
    \ [0x427fbd]\\n??:? void tmp1w4blfrm.__modtest() [0x42825c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5bb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b88]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430665]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b425]\\n??:? runModuleUnitTests [0x42c391]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428927]\\n??:? _d_run_main [0x428892]\\n??:? main [0x42826f]\\\
    n??:? __libc_start_main [0x576c9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<|\
    \ c |>\nThanks for your answer. I am not allowed to use any built in functions.\
    \ I should also not use any loops.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't use any loops.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\npublic static\
    \ int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int index = 0;\n    foreach (int i in array)\n    {\n        if (i > 0)\n\
    \        {\n            result[index++] = i;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any built in functions. I should also not use any loops.\n<|/ c |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int index = 0;\n    foreach\
    \ (int i in array)\n    {\n        if (i > 0)\n        {\n            result[index++]\
    \ = i;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any built in functions.\
    \ I should also not use any loops.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\n\
    public static int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int index = 0;\n    foreach (int i in array)\n    {\n        if (i > 0)\n\
    \        {\n            result[index++] = i;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any built in functions. I should also not use any loops.\n<|/ c |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int index = 0;\n    foreach\
    \ (int i in array)\n    {\n        if (i > 0)\n        {\n            result[index++]\
    \ = i;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c \nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp47m17ec.d(20): Error: declaration expected, not `<`\\n/tmp/tmpp47m17ec.d(26):\
    \ Error: unterminated character constant\\n/tmp/tmpp47m17ec.d(34): Error: declaration\
    \ expected, not `foreach`\\n/tmp/tmpp47m17ec.d(39): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp47m17ec.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            r[i] =\
    \ l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpksno6irv.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpksno6irv.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmpksno6irv.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xb71ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n      \
    \      result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj0wmfbdq.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpj0wmfbdq.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpj0wmfbdq.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xa2aea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqw5ugt_b.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpqw5ugt_b.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpqw5ugt_b.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x36ca5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpou9qfaqh.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpou9qfaqh.__unittest_L21_C1()\
    \ [0x427fb5]\\n??:? void tmpou9qfaqh.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xf1f9a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n\
    \            result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8xhal57j.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp8xhal57j.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmp8xhal57j.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x90839554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n        else\n            break;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpska1l2gb.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpska1l2gb.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmpska1l2gb.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x87952554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -9,\
    \ 0, 123, 1]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < 0)\n            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn\
    \ only zeros in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    [0, 0, 0,\
    \ 0, 0]\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0, 0,\
    \ 0, 0, 0]\n    \n*/\nlong[] get_zero(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] == 0)\n       \
    \     result[i] = 0;\n    }\n    return result;\n}\n/*\nReturn only numbers in\
    \ the list that are divisible by 3.\n    >>> get_divisible_by_3([-1, 2, -4, 5,\
    \ 6])\n    [-1, 2, -4, 5]\n    >>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n    \n*/\nlong[] get_divisible_by_3(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] % 3 == 0)\n            result[i] = l[i];\n    }\n\
    \    return result;\n}\n/*\nReturn only numbers in the list that are divisible\
    \ by 5.\n    >>> get_divisible_by_5([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5]\n \
    \   >>> get_divisible_by_5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1]\n    \n*/\nlong[] get_divisible_by_5(long[] l) \n\
    {\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] % 5 == 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}\n/*\nReturn only numbers in the list that are divisible by 7.\n \
    \   >>> get_\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_e6eu58r.d(92): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_e6eu58r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1yyzjcie.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp1yyzjcie.__unittest_L20_C1()\
    \ [0x427fb5]\\n??:? void tmp1yyzjcie.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xe6ecf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    int i;\n\
    \    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n<|/\
    \ a tags=c#,arrays |>\n<| c |>\nThis doesn't work if you have a negative number\
    \ in the array. Try it with `get_positive([-1, 2, -4, 5, 6])`.\n<|/ c |>\n<| c\
    \ |>\nYes, I forgot about that case. Thanks for pointing it out. I've updated\
    \ my answer.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] positive = new int[array.Length];\n    int i = 0;\n   \
    \ foreach (int item in array)\n    {\n        if (item > 0)\n        {\n     \
    \       positive[i] = item;\n            i++;\n        }\n    }\n    return positive;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] positive = new int[array.Length];\n    int i = 0;\n   \
    \ foreach (int item in array)\n    {\n        if (item > 0)\n        {\n     \
    \       positive[i] = item;\n            i++;\n        }\n    }\n    return positive;\n\
    }\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] positive = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \        {\n            positive[i] = item;\n            i++;\n        }\n   \
    \ }\n    return positive;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] positive\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n        {\n            positive[i] = item;\n  \
    \          i++;\n        }\n    }\n    return positive;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[]\
    \ positive = new int[array.Length];\n    int i = 0;\n    foreach (int item in\
    \ array)\n    {\n        if (item > 0)\n        {\n            positive[i] = item;\n\
    \            i++;\n        }\n    }\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxpc2m4vd.d(23): Error: declaration expected, not `<`\\n/tmp/tmpxpc2m4vd.d(26):\
    \ Error: unterminated character constant\\n/tmp/tmpxpc2m4vd.d(29): Error: unterminated\
    \ character constant\\n/tmp/tmpxpc2m4vd.d(37): Error: declaration expected, not\
    \ `foreach`\\n/tmp/tmpxpc2m4vd.d(42): Error: no identifier for declarator `i`\\\
    n/tmp/tmpxpc2m4vd.d(42): Error: declaration expected, not `++`\\n/tmp/tmpxpc2m4vd.d(43):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpxpc2m4vd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n        else\n            break;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsdcgbp7m.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpsdcgbp7m.__unittest_L23_C1()\
    \ [0x427fb5]\\n??:? void tmpsdcgbp7m.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0x257ef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n        {\n\
    \            result[i] = l[i];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzd30v93b.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpzd30v93b.__unittest_L22_C1()\
    \ [0x427fb5]\\n??:? void tmpzd30v93b.__modtest() [0x428254]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b446]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43065d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b41d]\\n??:? runModuleUnitTests [0x42c389]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x428267]\\\
    n??:? __libc_start_main [0xd9037554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
