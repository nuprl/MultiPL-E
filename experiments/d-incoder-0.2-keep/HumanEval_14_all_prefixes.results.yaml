name: HumanEval_14_all_prefixes
language: humaneval_to_dlang.py
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsq14jalo.d(11): Error: `string` is used as a type\\n/tmp/tmpsq14jalo.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpsq14jalo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpur6zbb98.d(11): Error: `string` is used as a type\\n/tmp/tmpur6zbb98.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpur6zbb98.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprrw8r_6v.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrw8r_6v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substring\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmt_544z6.d(94): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmt_544z6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', '\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp78tlwcrl.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78tlwcrl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzi68sbbn.d(105): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpzi68sbbn.d(113): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpzi68sbbn.d(113): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzi68sbbn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    int len = string.length();\n    \n    string[] result = new string[len];\n\
    \    \n    for (int i = 0; i < len; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo2fseuck.d(11): Error: no property `length` for type `string`\\\
    n/tmp/tmpo2fseuck.d(13): Error: `string` is used as a type\\n/tmp/tmpo2fseuck.d(13):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpo2fseuck.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9hgv980h.d(11): Error: `string` is used as a type\\n/tmp/tmp9hgv980h.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9hgv980h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1kde86lo.d(11): Error: `string` is used as a type\\n/tmp/tmp1kde86lo.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp1kde86lo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substring\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt3nz9psm.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3nz9psm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj2teoj9h.d(11): Error: `string` is used as a type\\n/tmp/tmpj2teoj9h.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpj2teoj9h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', '\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0938_rq1.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0938_rq1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpusu9ui30.d(11): Error: `string` is used as a type\\n/tmp/tmpusu9ui30.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpusu9ui30.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcv8086_0.d(11): Error: `string` is used as a type\\n/tmp/tmpcv8086_0.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpcv8086_0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step) \n{\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpux_6l1jv.d(102): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpux_6l1jv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0x6o8y9s.d(11): Error: `string` is used as a type\\n/tmp/tmp0x6o8y9s.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp0x6o8y9s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int startIndex)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(startIndex,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int startIndex,\
    \ int endIndex) \n{\n    string[] result = new string[string.length];\n    int\
    \ i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(startIndex,\
    \ endIndex);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(startIndex,\
    \ endIndex, step);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp24xu6m49.d(11): Error: `string` is used as a type\\n/tmp/tmp24xu6m49.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmp24xu6m49.d(27): Error: `string`\
    \ is used as a type\\n/tmp/tmp24xu6m49.d(27): Error: `string` is used as a type\\\
    n/tmp/tmp24xu6m49.d(43): Error: `string` is used as a type\\n/tmp/tmp24xu6m49.d(43):\
    \ Error: `string` is used as a type\\n/tmp/tmp24xu6m49.d(59): Error: `string`\
    \ is used as a type\\n/tmp/tmp24xu6m49.d(59): Error: `string` is used as a type\\\
    n/tmp/tmp24xu6m49.d(75): Error: `string` is used as a type\\n/tmp/tmp24xu6m49.d(75):\
    \ Error: `string` is used as a type\\n/tmp/tmp24xu6m49.d(91): Error: `string`\
    \ is used as a type\\n/tmp/tmp24xu6m49.d(91): Error: `string` is used as a type\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24xu6m49.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnunaw4gs.d(106): Error: found `unittest` instead of statement\\\
    n/tmp/tmpnunaw4gs.d(114): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnunaw4gs.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwsdmh8qs.d(106): Error: found `unittest` instead of statement\\\
    n/tmp/tmpwsdmh8qs.d(114): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwsdmh8qs.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = \nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp75z88a4_.d(102): Error: expression expected, not `unittest`\\\
    n/tmp/tmp75z88a4_.d(103): Error: semicolon expected, not `{`\\n/tmp/tmp75z88a4_.d(110):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75z88a4_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'ab', 'ac', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(start, i - start);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ ++i)\n        result[i] = string.Substring(start, i - start);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n        result[i] = string.Substring(start, i - start);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'ab', 'ac', 'abc']\n    \n*/\nstring[] \nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu6xba152.d(88): Error: no identifier for declarator `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6xba152.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptupjgfmc.d(11): Error: `string` is used as a type\\n/tmp/tmptupjgfmc.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmptupjgfmc.d(12): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptupjgfmc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6zhdlrsm.d(11): Error: `string` is used as a type\\n/tmp/tmp6zhdlrsm.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmp6zhdlrsm.d(12): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6zhdlrsm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', '\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptvl7qttz.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvl7qttz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int length) \n{\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmputd_oskd.d(102): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmputd_oskd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ckhx1q5.d(11): Error: `string` is used as a type\\n/tmp/tmp1ckhx1q5.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmp1ckhx1q5.d(12): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1ckhx1q5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i,string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', '\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1yttdy2r.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yttdy2r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgzv3j6nt.d(102): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpgzv3j6nt.d(110): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpgzv3j6nt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', '\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mt7uyr9.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mt7uyr9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < string.length; i++)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvjj7ou9.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjvjj7ou9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length) \n    {\n        result[i] = string.substr(0, i);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\
    \ \n    {\n        result[i] = string.substr(i, string.length);\n        i +=\
    \ 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwy8yesyo.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwy8yesyo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphhgx1sz0.d(11): Error: `string` is used as a type\\n/tmp/tmphhgx1sz0.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphhgx1sz0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgw6e2921.d(94): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgw6e2921.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[string.Length - 1 - i] = string.Substring(i);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgp8tvsss.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgp8tvsss.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[string.Length - 1 - i] = string.Substring(i);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppu6ti817.d(112): Error: no identifier for declarator `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu6ti817.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab',\
    \ 'abc', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc', 'bc', 'c', 'abc']\n    \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6nxuwmds.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6nxuwmds.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqq3y0qdx.d(11): Error: `string` is used as a type\\n/tmp/tmpqq3y0qdx.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqq3y0qdx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp63vrjbp9.d(11): Error: `string` is used as a type\\n/tmp/tmp63vrjbp9.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp63vrjbp9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps9izzz46.d(11): Error: `string` is used as a type\\n/tmp/tmps9izzz46.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmps9izzz46.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvn_kg871.d(112): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn_kg871.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsj3cxu9c.d(11): Error: `string` is used as a type\\n/tmp/tmpsj3cxu9c.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpsj3cxu9c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8dscfejo.d(110): Error: expression expected, not `unittest`\\\
    n/tmp/tmp8dscfejo.d(111): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dscfejo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', '\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9hqv3g8l.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hqv3g8l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + length - start);\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + length - start);\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph1w29i1y.d(100): Error: basic type expected, not `unittest`\\\
    n/tmp/tmph1w29i1y.d(100): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1w29i1y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b',\
    \ 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    for(; i <\
    \ string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', '\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqt6hrn_6.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqt6hrn_6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm42smnk4.d(11): Error: `string` is used as a type\\n/tmp/tmpm42smnk4.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpm42smnk4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4cedcgm.d(110): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmpt4cedcgm.d(111): Error: found `{` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4cedcgm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp34vacy_k.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34vacy_k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf7e66g2x.d(11): Error: `string` is used as a type\\n/tmp/tmpf7e66g2x.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpf7e66g2x.d(12): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpf7e66g2x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwx2o8lua.d(11): Error: `string` is used as a type\\n/tmp/tmpwx2o8lua.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpwx2o8lua.d(13): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwx2o8lua.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqg5e4706.d(11): Error: `string` is used as a type\\n/tmp/tmpqg5e4706.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqg5e4706.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp8wnj1_n.d(11): Error: `string` is used as a type\\n/tmp/tmpp8wnj1_n.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpp8wnj1_n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substring\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcdtrnq3f.d(94): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdtrnq3f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length) \n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9odkrg2h.d(11): Error: `string` is used as a type\\n/tmp/tmp9odkrg2h.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9odkrg2h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6_318ftg.d(100): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_318ftg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substring\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbn531opp.d(112): Error: semicolon expected, not `unittest`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn531opp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1q2t9_d.d(11): Error: `string` is used as a type\\n/tmp/tmpc1q2t9_d.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpc1q2t9_d.d(12): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpc1q2t9_d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9gfd7c43.d(102): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmp9gfd7c43.d(102): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gfd7c43.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsvq_ybw9.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvq_ybw9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    int len = string.length();\n    string[] result = new string[len];\n    for(int\
    \ i = 0; i < len; ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3vrbp3y3.d(11): Error: no property `length` for type `string`\\\
    n/tmp/tmp3vrbp3y3.d(12): Error: `string` is used as a type\\n/tmp/tmp3vrbp3y3.d(12):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp3vrbp3y3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfkyl7aod.d(11): Error: `string` is used as a type\\n/tmp/tmpfkyl7aod.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfkyl7aod.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0gk4ge3p.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gk4ge3p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd7qkqwf1.d(11): Error: `string` is used as a type\\n/tmp/tmpd7qkqwf1.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpd7qkqwf1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeym9x2sf.d(91): Error: expression expected, not `unittest`\\\
    n/tmp/tmpeym9x2sf.d(92): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeym9x2sf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    for(int\
    \ i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = \nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph5o3wdre.d(102): Error: expression expected, not `unittest`\\\
    n/tmp/tmph5o3wdre.d(103): Error: semicolon expected, not `{`\\n/tmp/tmph5o3wdre.d(110):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph5o3wdre.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpivdyk9_9.d(11): Error: `string` is used as a type\\n/tmp/tmpivdyk9_9.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpivdyk9_9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', '\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjzjq6528.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzjq6528.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_7g_ppn.d(11): Error: `string` is used as a type\\n/tmp/tmpp_7g_ppn.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpp_7g_ppn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg1st93v2.d(101): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1st93v2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length) \n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4bp16qe8.d(11): Error: `string` is used as a type\\n/tmp/tmp4bp16qe8.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4bp16qe8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substring\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfpfyavmm.d(112): Error: semicolon expected, not `unittest`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpfyavmm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6g7g29bb.d(11): Error: `string` is used as a type\\n/tmp/tmp6g7g29bb.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6g7g29bb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwocdpqq9.d(11): Error: `string` is used as a type\\n/tmp/tmpwocdpqq9.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpwocdpqq9.d(13): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwocdpqq9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwpmmjm15.d(11): Error: `string` is used as a type\\n/tmp/tmpwpmmjm15.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpwpmmjm15.d(12): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwpmmjm15.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp67__zytn.d(94): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp67__zytn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpujk1ur4o.d(11): Error: `string` is used as a type\\n/tmp/tmpujk1ur4o.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpujk1ur4o.d(12): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpujk1ur4o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpod79fc85.d(106): Error: found `unittest` instead of statement\\\
    n/tmp/tmpod79fc85.d(114): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpod79fc85.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i + 1);\n        i += 1;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', '\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvti5c148.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvti5c148.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2, 3)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2, 3)\n\
    \    ['', 'a', 'ab', '\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz5fj_yq8.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5fj_yq8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplr88kor5.d(11): Error: `string` is used as a type\\n/tmp/tmplr88kor5.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmplr88kor5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc4bg2ax7.d(11): Error: `string` is used as a type\\n/tmp/tmpc4bg2ax7.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpc4bg2ax7.d(12): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpc4bg2ax7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < start + length; ++i)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int end2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstmzv7wq.d(91): Error: expression expected, not `unittest`\\\
    n/tmp/tmpstmzv7wq.d(92): Error: semicolon expected, not `{`\\n/tmp/tmpstmzv7wq.d(99):\
    \ Error: found `void` when expecting `;` following `for` condition\\n/tmp/tmpstmzv7wq.d(99):\
    \ Error: found `{` when expecting `)`\\n/tmp/tmpstmzv7wq.d(99): Error: found `}`\
    \ instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpstmzv7wq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int length\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6qppa1_.d(100): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6qppa1_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr3w4tkxv.d(11): Error: `string` is used as a type\\n/tmp/tmpr3w4tkxv.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpr3w4tkxv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp734fiaeq.d(92): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmp734fiaeq.d(93): Error: found `{` when expecting `;` following\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp734fiaeq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length) \n    {\n        result[i] = string.Substring(0, i);\n    \
    \    i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpudivqd_p.d(11): Error: `string` is used as a type\\n/tmp/tmpudivqd_p.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpudivqd_p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnw441egd.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnw441egd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsl4e5dq6.d(11): Error: `string` is used as a type\\n/tmp/tmpsl4e5dq6.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpsl4e5dq6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 3)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 3)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 3)\n\
    \    ['', 'a', 'ab', 'abc', 'b', '\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv93i4rif.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv93i4rif.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(start, length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7a_m1t8m.d(92): Error: expression expected, not `unittest`\\\
    n/tmp/tmp7a_m1t8m.d(93): Error: found `{` when expecting `,`\\n/tmp/tmp7a_m1t8m.d(94):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp7a_m1t8m.d(94): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp7a_m1t8m.d(94): Error: expression expected,\
    \ not `=`\\n/tmp/tmp7a_m1t8m.d(94): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmp7a_m1t8m.d(94): Error: expression expected, not `;`\\n/tmp/tmp7a_m1t8m.d(96):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp7a_m1t8m.d(96): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp7a_m1t8m.d(97): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp7a_m1t8m.d(98): Error: found `;` when expecting `,`\\n/tmp/tmp7a_m1t8m.d(99):\
    \ Error: expression expected, not `}`\\n/tmp/tmp7a_m1t8m.d(100): Error: found\
    \ `void` when expecting `,`\\n/tmp/tmp7a_m1t8m.d(100): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmp7a_m1t8m.d(100): Error: expression expected, not `}`\\n/tmp/tmp7a_m1t8m.d(100):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmp7a_m1t8m.d(100): Error:\
    \ found `End of File` when expecting `)`\\n/tmp/tmp7a_m1t8m.d(100): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmp7a_m1t8m.d(100):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a_m1t8m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substring\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2db02u_o.d(112): Error: semicolon expected, not `unittest`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2db02u_o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpua23z228.d(11): Error: `string` is used as a type\\n/tmp/tmpua23z228.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpua23z228.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n{\n    string\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb9qgwujd.d(102): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpb9qgwujd.d(110): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpb9qgwujd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxb9hgwbn.d(11): Error: `string` is used as a type\\n/tmp/tmpxb9hgwbn.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxb9hgwbn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdk9rj7zj.d(94): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdk9rj7zj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprtim9q8q.d(11): Error: `string` is used as a type\\n/tmp/tmprtim9q8q.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmprtim9q8q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string prefix) \n{\nunittest\n{\n    alias candidate = all_prefixes;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\",\
    \ \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5odrikqn.d(101): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5odrikqn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_gl9p5fn.d(100): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gl9p5fn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all prefixes and suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes_prefixes('abc')\n    ['', 'a', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes_prefixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i);\n        result[i] +=\
    \ string.substr(i, string.length);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all prefixes and suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes_prefixes('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\n\
    string[] all_suffixes_prefixes_reverse(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n        result[i]\
    \ += string.substr(0, i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ prefixes and suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes_prefixes_reverse('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\n\
    string[] all_suffixes_prefixes_reverse_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(i, string.length);\n        result[i]\
    \ += string.substr(0, i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ prefixes and suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes_prefixes_reverse('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\n\
    string[] all_suffixes_prefixes_reverse_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbh_gow0k.d(97): Error: expression expected, not `unittest`\\\
    n/tmp/tmpbh_gow0k.d(98): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmpbh_gow0k.d(99): Error: expression expected, not `alias`\\n/tmp/tmpbh_gow0k.d(99):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmpbh_gow0k.d(99): Error:\
    \ found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpbh_gow0k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiddguwx6.d(100): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiddguwx6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpziucgco_.d(112): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpziucgco_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi1w8iz60.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1w8iz60.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp37im60u8.d(11): Error: `string` is used as a type\\n/tmp/tmp37im60u8.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp37im60u8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int end2) \n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw6fnvaz7.d(101): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw6fnvaz7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe5pvivd1.d(11): Error: `string` is used as a type\\n/tmp/tmpe5pvivd1.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpe5pvivd1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp41uy6l3n.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp41uy6l3n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi0jy84ij.d(102): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi0jy84ij.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpavwbghqp.d(105): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmpavwbghqp.d(106): Error: found `{` when expecting `;` following\
    \ statement\\n/tmp/tmpavwbghqp.d(113): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpavwbghqp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_1672hy.d(11): Error: `string` is used as a type\\n/tmp/tmpf_1672hy.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpf_1672hy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpot63ivpc.d(11): Error: `string` is used as a type\\n/tmp/tmpot63ivpc.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpot63ivpc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk9avmk6c.d(11): Error: `string` is used as a type\\n/tmp/tmpk9avmk6c.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpk9avmk6c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaqrpw_u8.d(11): Error: `string` is used as a type\\n/tmp/tmpaqrpw_u8.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpaqrpw_u8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw84ann66.d(113): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw84ann66.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxbbulnjf.d(106): Error: found `unittest` instead of statement\\\
    n/tmp/tmpxbbulnjf.d(114): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbbulnjf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpca13m9ai.d(107): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca13m9ai.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfdrgthyc.d(107): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfdrgthyc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substring\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqrgv3e_n.d(100): Error: semicolon expected, not `unittest`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqrgv3e_n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ end - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ end - start, step);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp14sfxr_m.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp14sfxr_m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpizar4azg.d(91): Error: expression expected, not `unittest`\\\
    n/tmp/tmpizar4azg.d(92): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizar4azg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6m4x31kk.d(11): Error: `string` is used as a type\\n/tmp/tmp6m4x31kk.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6m4x31kk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqvn_mjqz.d(11): Error: `string` is used as a type\\n/tmp/tmpqvn_mjqz.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqvn_mjqz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(0, i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfv7urjnu.d(108): Error: found `unittest` when expecting `]`\\\
    n/tmp/tmpfv7urjnu.d(109): Error: semicolon expected, not `{`\\n/tmp/tmpfv7urjnu.d(116):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfv7urjnu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu32sfi6g.d(94): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu32sfi6g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf5jdck8n.d(109): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf5jdck8n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp55qzn98u.d(11): Error: `string` is used as a type\\n/tmp/tmp55qzn98u.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp55qzn98u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa_3k17qg.d(11): Error: `string` is used as a type\\n/tmp/tmpa_3k17qg.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpa_3k17qg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length) \n    {\n        result[i] = string.substr(0, i);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\
    \ \n    {\n        result[i] = string.substr(i, string.length - i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(i, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(i, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(i, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(i, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp08agxzex.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp08agxzex.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.Length - i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n\
    */\nstring[] all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, i);\n        i += 1;\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab',\
    \ 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int start, int length, int end) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe_p6w6i5.d(99): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe_p6w6i5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqbydvw1o.d(100): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpqbydvw1o.d(100): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqbydvw1o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfca97zrl.d(11): Error: `string` is used as a type\\n/tmp/tmpfca97zrl.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfca97zrl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjqcd63x.d(11): Error: `string` is used as a type\\n/tmp/tmprjqcd63x.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmprjqcd63x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5dxauqvf.d(94): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dxauqvf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgi79rddr.d(11): Error: `string` is used as a type\\n/tmp/tmpgi79rddr.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgi79rddr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int length) \n{\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6tchgysu.d(102): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tchgysu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz8zytsf_.d(11): Error: `string` is used as a type\\n/tmp/tmpz8zytsf_.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpz8zytsf_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    int len = string.length();\n    \n    string[] result = new string[len];\n\
    \    \n    for (int i = 0; i < len; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xckusjr.d(11): Error: no property `length` for type `string`\\\
    n/tmp/tmp1xckusjr.d(13): Error: `string` is used as a type\\n/tmp/tmp1xckusjr.d(13):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp1xckusjr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi9rtbu92.d(11): Error: `string` is used as a type\\n/tmp/tmpi9rtbu92.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpi9rtbu92.d(13): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpi9rtbu92.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n \nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe45buvn0.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe45buvn0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \        result[i] = string.substr(start, length);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2, 3)\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(start, length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2, 3)\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end, int step) \n{\n\
    \    string[] result = new string\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx9ifbh7j.d(96): Error: semicolon expected, not `unittest`\\n/tmp/tmpx9ifbh7j.d(96):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx9ifbh7j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i,string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', '\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_zbkk9se.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zbkk9se.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48j_28hg.d(11): Error: `string` is used as a type\\n/tmp/tmp48j_28hg.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp48j_28hg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpygd30biy.d(11): Error: `string` is used as a type\\n/tmp/tmpygd30biy.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpygd30biy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiixs65hs.d(113): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiixs65hs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Sub\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpac1z0ayh.d(105): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpac1z0ayh.d(113): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpac1z0ayh.d(113): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpac1z0ayh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxwd11z2d.d(11): Error: `string` is used as a type\\n/tmp/tmpxwd11z2d.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxwd11z2d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpncb_nz__.d(11): Error: `string` is used as a type\\n/tmp/tmpncb_nz__.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpncb_nz__.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbka33mp_.d(11): Error: `string` is used as a type\\n/tmp/tmpbka33mp_.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpbka33mp_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp85uo1342.d(11): Error: `string` is used as a type\\n/tmp/tmp85uo1342.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmp85uo1342.d(13): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp85uo1342.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6__scdxi.d(11): Error: `string` is used as a type\\n/tmp/tmp6__scdxi.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6__scdxi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; ++i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ start + length; ++i)\n        result[i] = string.Substring(i - start, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < start + length; i += step)\n        result[i] = string.Substring(i - start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length, int step, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa4wadb69.d(91): Error: expression expected, not `unittest`\\\
    n/tmp/tmpa4wadb69.d(92): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmpa4wadb69.d(93): Error: expression expected, not `alias`\\n/tmp/tmpa4wadb69.d(93):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmpa4wadb69.d(93): Error:\
    \ found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpa4wadb69.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length) \n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i++] =\
    \ string.substr(i, string.length);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i++] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i++] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\
    \ \n    {\n        result[i++] = string.substr(i, string.length);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length) \n   \
    \ {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa5vp0fwm.d(108): Error: found `unittest` when expecting `]`\\\
    n/tmp/tmpa5vp0fwm.d(109): Error: semicolon expected, not `{`\\n/tmp/tmpa5vp0fwm.d(116):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5vp0fwm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2, 3)\n\
    \    ['', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2, 3)\n\
    \    ['', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaz9wvtsh.d(102): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpaz9wvtsh.d(102): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaz9wvtsh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxya0tlgt.d(11): Error: `string` is used as a type\\n/tmp/tmpxya0tlgt.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxya0tlgt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length, int end) \n{\n    string[] result = new string[string.length];\n   \
    \ for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length, int end, int step) \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplinpkv1k.d(100): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplinpkv1k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzgluzfdd.d(103): Error: found `unittest` instead of statement\\\
    n/tmp/tmpzgluzfdd.d(111): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgluzfdd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0gmaug9d.d(113): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gmaug9d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ end - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ end - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu1_2anga.d(100): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpu1_2anga.d(100): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu1_2anga.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8qhdvurl.d(11): Error: `string` is used as a type\\n/tmp/tmp8qhdvurl.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8qhdvurl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohxg_0hl.d(106): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpohxg_0hl.d(106): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohxg_0hl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i, string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all prefixes and suffixes from shortest to longest of the\
    \ input string\n    >>> all_prefixes_suffixes('abc')\n    ['a', 'ab', 'abc', 'ab',\
    \ 'ac', 'abc', 'ac', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'bc', 'abc', 'abc']\n\
    \    \n*/\nstring[] all_prefixes_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0, i);\n        result[i++] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ and suffixes from shortest to longest of the input string\n    >>> all_prefixes_suffixes('abc')\n\
    \    ['a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'bc', 'abc', 'bc', 'c', 'abc',\
    \ 'c', 'bc', 'abc', 'abc']\n    \n*/\nstring[] all_prefixes_suffixes_2(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n\
    \        result[i++] = string.substr(i, string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all prefixes and suffixes from shortest to longest of the\
    \ input string\n    >>> all_prefixes_suffixes_2('abc')\n    ['a', 'ab', 'abc',\
    \ 'ab', 'ac', 'abc', 'ac', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'bc', 'abc', 'abc']\n\
    \    \n*/\nstring[] all_prefixes_suffixes_3(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0, i);\n        result[i++] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpci75hbn_.d(86): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpci75hbn_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphr_8b11r.d(106): Error: found `unittest` instead of statement\\\
    n/tmp/tmphr_8b11r.d(114): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphr_8b11r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzy77lgf0.d(101): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzy77lgf0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuoo3b58v.d(11): Error: `string` is used as a type\\n/tmp/tmpuoo3b58v.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpuoo3b58v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdpw4r0yj.d(11): Error: `string` is used as a type\\n/tmp/tmpdpw4r0yj.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpdpw4r0yj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpicjlahj3.d(11): Error: `string` is used as a type\\n/tmp/tmpicjlahj3.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpicjlahj3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphpa9uhj_.d(11): Error: `string` is used as a type\\n/tmp/tmphpa9uhj_.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphpa9uhj_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(0, length);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'ab', 'abc\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoo_ubc23.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoo_ubc23.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw83gpzwl.d(11): Error: `string` is used as a type\\n/tmp/tmpw83gpzwl.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpw83gpzwl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp189t18a6.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp189t18a6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqu2hqpn3.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqu2hqpn3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfhejw_ul.d(107): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfhejw_ul.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbpa92el_.d(11): Error: `string` is used as a type\\n/tmp/tmpbpa92el_.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpbpa92el_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    int len = string.length();\n    string[] result = new string[len];\n    for(int\
    \ i = 0; i < len; ++i)\n        result[i] = string.substr(0, i);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4h56kv9t.d(11): Error: no property `length` for type `string`\\\
    n/tmp/tmp4h56kv9t.d(12): Error: `string` is used as a type\\n/tmp/tmp4h56kv9t.d(12):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4h56kv9t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[string.Length - 1 - i] = string.Substring(i);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdp93xqr8.d(11): Error: `string` is used as a type\\n/tmp/tmpdp93xqr8.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpdp93xqr8.d(13): Error: no property\
    \ `Length` for type `string`\\n/tmp/tmpdp93xqr8.d(28): Error: `string` is used\
    \ as a type\\n/tmp/tmpdp93xqr8.d(28): Error: `string` is used as a type\\n/tmp/tmpdp93xqr8.d(30):\
    \ Error: no property `Length` for type `string`\\n/tmp/tmpdp93xqr8.d(45): Error:\
    \ `string` is used as a type\\n/tmp/tmpdp93xqr8.d(45): Error: `string` is used\
    \ as a type\\n/tmp/tmpdp93xqr8.d(47): Error: no property `Length` for type `string`\\\
    n/tmp/tmpdp93xqr8.d(62): Error: `string` is used as a type\\n/tmp/tmpdp93xqr8.d(62):\
    \ Error: `string` is used as a type\\n/tmp/tmpdp93xqr8.d(64): Error: no property\
    \ `Length` for type `string`\\n/tmp/tmpdp93xqr8.d(79): Error: `string` is used\
    \ as a type\\n/tmp/tmpdp93xqr8.d(79): Error: `string` is used as a type\\n/tmp/tmpdp93xqr8.d(81):\
    \ Error: no property `Length` for type `string`\\n/tmp/tmpdp93xqr8.d(96): Error:\
    \ `string` is used as a type\\n/tmp/tmpdp93xqr8.d(96): Error: `string` is used\
    \ as a type\\n/tmp/tmpdp93xqr8.d(98): Error: no property `Length` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdp93xqr8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq3t_mbzg.d(11): Error: `string` is used as a type\\n/tmp/tmpq3t_mbzg.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpq3t_mbzg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpespabn97.d(11): Error: `string` is used as a type\\n/tmp/tmpespabn97.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpespabn97.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfoguqjj1.d(11): Error: `string` is used as a type\\n/tmp/tmpfoguqjj1.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfoguqjj1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp89cv7sdd.d(94): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89cv7sdd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; ++i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i += step)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step, ++length)\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp12n4ou3w.d(91): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp12n4ou3w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe50cey_t.d(11): Error: `string` is used as a type\\n/tmp/tmpe50cey_t.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpe50cey_t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv0p2t97h.d(11): Error: `string` is used as a type\\n/tmp/tmpv0p2t97h.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpv0p2t97h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz2q1mexs.d(11): Error: `string` is used as a type\\n/tmp/tmpz2q1mexs.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpz2q1mexs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp31ernoxb.d(105): Error: expression expected, not `unittest`\\\
    n/tmp/tmp31ernoxb.d(106): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmp31ernoxb.d(113): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31ernoxb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgq5jw4dv.d(11): Error: `string` is used as a type\\n/tmp/tmpgq5jw4dv.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgq5jw4dv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphy0vdust.d(11): Error: `string` is used as a type\\n/tmp/tmphy0vdust.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphy0vdust.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ne6s7tc.d(108): Error: found `unittest` when expecting `]`\\\
    n/tmp/tmp9ne6s7tc.d(109): Error: semicolon expected, not `{`\\n/tmp/tmp9ne6s7tc.d(116):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ne6s7tc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg6jvoi_l.d(11): Error: `string` is used as a type\\n/tmp/tmpg6jvoi_l.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpg6jvoi_l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyc_z1ven.d(11): Error: `string` is used as a type\\n/tmp/tmpyc_z1ven.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpyc_z1ven.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all \nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkenx9bs7.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkenx9bs7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', '\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg63ulz8m.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg63ulz8m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvbjbq9_f.d(11): Error: `string` is used as a type\\n/tmp/tmpvbjbq9_f.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpvbjbq9_f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Sub\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo_cywgtg.d(105): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpo_cywgtg.d(113): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpo_cywgtg.d(113): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_cywgtg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2lovt9_4.d(11): Error: `string` is used as a type\\n/tmp/tmp2lovt9_4.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2lovt9_4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyga39t_3.d(107): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyga39t_3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwkk5pgw6.d(11): Error: `string` is used as a type\\n/tmp/tmpwkk5pgw6.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwkk5pgw6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnxv734tp.d(11): Error: `string` is used as a type\\n/tmp/tmpnxv734tp.d(11):\
    \ Error: `string` is used as a type\\n/tmp/tmpnxv734tp.d(12): Error: no property\
    \ `Length` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpnxv734tp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b',\
    \ 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    for(; i <\
    \ string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', '\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmt1eom6u.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmt1eom6u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqbsrb8w0.d(11): Error: `string` is used as a type\\n/tmp/tmpqbsrb8w0.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqbsrb8w0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa3hpwkya.d(102): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpa3hpwkya.d(110): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpa3hpwkya.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp61hqsc8u.d(11): Error: `string` is used as a type\\n/tmp/tmp61hqsc8u.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp61hqsc8u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
