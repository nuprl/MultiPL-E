name: HumanEval_44_change_base
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
  \ number x to base.\n    return string representation after the conversion.\n  \
  \  base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>>\
  \ change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \n*/\n\
  string change_base(long x, long base) \n"
tests: "unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
  \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
  \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
  \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
  \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
  \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
  \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    long temp;\n    \n    while (x !=\
    \ 0) {\n        temp = x % base;\n        result += to_string(temp);\n       \
    \ x /= base;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit = temp %\
    \ base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n     \
    \       result += digit;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long d = 1;\n    while (n > 0)\n    {\n        long r = n % base;\n\
    \        result += char(r + 48);\n        n = n / base;\n    }\n    result +=\
    \ char(n + 48);\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        if (temp %\
    \ base == 0) {\n            result += to_string(temp / base);\n        }\n   \
    \     temp = temp / base;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while\
    \ (temp > 0)\n    {\n        result = to_string(temp % base) + result;\n     \
    \   temp = temp / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \n*/\nstring change_base(long x, int base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base\
    \ of input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \n*/\nstring change_base(long x, short base) \n{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\n  \
    \  {\n        result = to_string(temp % base) + result;\n        temp = temp /\
    \ base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \n*/\nstring change_base(long x, ushort base) \n{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\n  \
    \  {\n        result = to_string(temp % base) + result;\n        temp = temp /\
    \ base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \n*/\nstring change_base(long x, int base) \n{\n    string result = \"\";\n\
    \    long temp;\n    \n    temp = x / base;\n    \n    while (", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        if (temp % base == 0) {\n            result += to_string(temp\
    \ / base);\n        }\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0)\n    {\n        long r = temp % base;\n        temp = temp\
    \ / base;\n        result = to_string(r) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0)\n    {\n        temp = temp / base;\n        result += to_string(temp);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp = x;\n    while (temp\
    \ > 0) {\n        int digit = temp % base;\n        temp = temp / base;\n    \
    \    result = digits[digit] + result;\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    long n = x;\n    long d = 1;\n    \n    while (n\
    \ != 0)\n    {\n        long r = n % base;\n        result += (char)(r + '0');\n\
    \        n = n / base;\n        d++;\n    }\n    \n    while (d > 0)\n    {\n\
    \        result += (char)('0' + d);\n        d--;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        if (temp % base == 0) {\n        \
    \    result += to_string(temp / base);\n        }\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    long temp;\n    string result = \"\";\n    \n    temp =\
    \ x;\n    \n    while (temp != 0) {\n        long rem = temp % base;\n       \
    \ temp = temp / base;\n        result = to_string(base) + result;\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n  \
    \  \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n\tstring result = \"\";\n\t\n\twhile(x > 0)\n\t{\n\t\tlong temp = x %\
    \ base;\n\t\tresult += to_string(temp);\n\t\tx = x / base;\n\t}\n\t\n\treturn\
    \ result;\n}", "{\n    string result = \"\";\n    long temp = x;\n    while(temp\
    \ > 0)\n    {\n        long mod = temp % base;\n        temp = temp / base;\n\
    \        if(mod != 0)\n            result += char(mod);\n    }\n    return result;\n\
    }\n/*\n    Convert string to integer.\n    \n    input string must be in base\
    \ 10.\n    \n    output integer in base 10.\n    \n    returns 0 if string is\
    \ not in base 10.\n    \n    returns -1 if string is not in base 10.\n    \n \
    \   returns 1 if string is in base 10.\n    \n    returns -1 if string is in base\
    \ 10.\n    \n    returns 0 if string is in base 10.\n    \n    returns -1 if string\
    \ is in base 10.\n    \n    returns 1 if string is in base 10.\n    \n    returns\
    \ -1 if string is in base 10.\n    \n    returns 0 if string is in base 10.\n\
    \    \n    returns -1 if string is in base 10.\n    \n    returns 1 if string\
    \ is in base 10.\n    \n    returns -1 if string is in base 10.\n    \n    returns\
    \ 1 if string is in base 10.\n    \n    returns -1 if string is in base 10.\n\
    \    \n    returns 1 if string is in base 10.\n    \n    returns -1 if string\
    \ is in base 10.\n    \n    returns 1 if string is in base 10.\n    \n    returns\
    \ -1 if string is in base 10.\n    \n    returns 1 if string is in base 10.\n\
    \    \n    returns -1 if string is in base 10.\n    \n    returns 1 if string\
    \ is in base 10.\n    \n    returns -1 if string is in base 10.\n    \n    returns\
    \ 1 if string is in base 10.\n    \n    returns -1 if string is in base 10.\n\
    \    \n    returns 1 if string is in base 10.\n    \n    returns -1 if string\
    \ is in base 10.\n    \n    returns 1 if string is in base 10.\n    \n    returns\
    \ -1 if string is in base 10.\n    \n    returns 1 if string is in base 10.\n\
    \    \n    returns -1 if string is in base 10.\n    \n    returns 1 if string\
    \ is in base 10.\n    \n    returns -1 if string is in base 10.\n    \n    returns\
    \ 1 if string is in base 10.\n    \n    returns -1 if string is in base 10.\n\
    \    \n    returns 1 if string is in base 10.\n    \n    returns -1 if string\
    \ is in base 10.\n    \n    returns 1 if string is in base 10.\n    \n    returns\
    \ -1 if string is in base 10.\n    \n    returns 1 if string is in base 10.\n\
    \    \n    returns -1 if string is in base 10.\n    \n    returns 1 if string\
    \ is in base 10.\n    \n", "{\n\tstring result = \"\";\n\t\n\tlong temp = x;\n\
    \t\n\twhile (temp > 0) {\n\t\tlong mod = temp % base;\n\t\t\n\t\tif (mod > 9)\
    \ {\n\t\t\tresult += (char)('0' + mod);\n\t\t} else {\n\t\t\tresult += (char)('0'\
    \ + mod);\n\t\t\tresult += (char)('0' + base - mod);\n\t\t}\n\t\t\n\t\ttemp /=\
    \ base;\n\t}\n\t\n\treturn result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\
    \t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\ttemp = temp / base;\n\t\tresult\
    \ = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x\
    \ % base;\n        result += to_string(temp);\n        x /= base;\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long temp = x;\n\
    \    while(temp > 0)\n    {\n        int digit = temp % base;\n        temp =\
    \ temp / base;\n        if(digit > 0)\n        {\n            result += digit;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n       \
    \ temp = temp / base;\n        result = to_string(temp) + result;\n    }\n   \
    \ \n    return result;\n}", "{\n    long temp;\n    string result = \"\";\n  \
    \  \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp / base;\n\
    \        result += to_string(temp);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n     \
    \   temp = x % base;\n        result += to_string(temp);\n        x = x / base;\n\
    \    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\
    \t\n\twhile(base > 0)\n\t{\n\t\ttemp = x % base;\n\t\tresult = to_string(temp)\
    \ + result;\n\t\tx = x / base;\n\t\tbase = base-1;\n\t}\n\t\n\twhile(x < base)\n\
    \t{\n\t\tresult = to_string(base) + result;\n\t\tx = x + 1;\n\t\tbase = base-1;\n\
    \t}\n\t\n\treturn result;\n}", "{\n\tstring result = \"\";\n\tlong temp = x;\n\
    \twhile (temp > 0) {\n\t\tlong mod = temp % base;\n\t\ttemp = temp / base;\n\t\
    \tresult = to_string(mod) + result;\n\t}\n\treturn result;\n}", "{\n    long temp\
    \ = x;\n    string result = \"\";\n    while(temp > 0)\n    {\n        int digit\
    \ = temp % base;\n        result += digit;\n        temp /= base;\n    }\n   \
    \ return result;\n}\n/*\n    Convert binary number to decimal number.\n    \n\
    \    Input binary number is a string containing only '1' and '0'.\n    \n    Output\
    \ decimal number is a string containing only '1' and '0'.\n    \n    Input binary\
    \ number is a string containing only '1' and '0'.\n    \n    Output decimal number\
    \ is a string containing only '1' and '0'.\n    \n    Input binary number is a\
    \ string containing only '1' and '0'.\n    \n    Output decimal number is a string\
    \ containing only '1' and '0'.\n    \n    Input binary number is a string containing\
    \ only '1' and '0'.\n    \n    Output decimal number is a string containing only\
    \ '1' and '0'.\n    \n    Input binary number is a string containing only '1'\
    \ and '0'.\n    \n    Output decimal number is a string containing only '1' and\
    \ '0'.\n    \n    Input binary number is a string containing only '1' and '0'.\n\
    \    \n    Output decimal number is a string containing only '1' and '0'.\n  \
    \  \n    Input binary number is a string containing only '1' and '0'.\n    \n\
    \    Output decimal number is a string containing only '1' and '0'.\n    \n  \
    \  Input binary number is a string containing only '1' and '0'.\n    \n    Output\
    \ decimal number is a string containing only '1' and '0'.\n    \n    Input binary\
    \ number is a string containing only '1' and '0'.\n    \n    Output decimal number\
    \ is a string containing only '1' and '0'.\n    \n    Input binary number is a\
    \ string containing only '1' and '0'.\n    \n    Output decimal number is a string\
    \ containing only '1' and '0'.\n    \n    Input binary number is a string containing\
    \ only '1' and '0'.\n    \n    Output decimal number is a string containing only\
    \ '1' and '0'.\n    \n    Input binary number is a string containing only '1'\
    \ and '0'.\n    \n    Output decimal number is a string containing only '1' and\
    \ '0'.\n    \n    Input binary number is a string containing only '1' and '0'.\n\
    \    \n    Output decimal number is a string containing only '1' and '0'.\n  \
    \  \n    Input binary number is a string containing only '1' and '0'.\n    \n\
    \    Output decimal number is a string containing only '1' and '0'.\n    \n  \
    \  Input binary number is a string containing only ", "{\n    string result =\
    \ \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n       \
    \ temp = temp / base;\n        result = to_string(temp) + result;\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long tmp = x;\n\
    \    \n    while (base > 0)\n    {\n        tmp = tmp / base;\n        result\
    \ += to_string(tmp);\n        base--;\n    }\n    \n    while (base < 0)\n   \
    \ {\n        tmp = tmp * base;\n        result += to_string(tmp);\n        base++;\n\
    \    }\n    \n    return result;\n}\n/*\n    Convert a string to integer.\n  \
    \  \n    Input string can contain negative numbers and decimal numbers. \n   \
    \ \n    Output integer is returned in decimal format.\n    \n    Input string\
    \ can contain only numbers, decimal point and negative sign.\n    \n    Output\
    \ integer is returned in decimal format.\n    \n    Input string can contain only\
    \ numbers, decimal point and negative sign.\n    \n    Output integer is returned\
    \ in decimal format.\n    \n    Input string can contain only numbers, decimal\
    \ point and negative sign.\n    \n    Output integer is returned in decimal format.\n\
    \    \n    Input string can contain only numbers, decimal point and negative sign.\n\
    \    \n    Output integer is returned in decimal format.\n    \n    Input string\
    \ can contain only numbers, decimal point and negative sign.\n    \n    Output\
    \ integer is returned in decimal format.\n    \n    Input string can contain only\
    \ numbers, decimal point and negative sign.\n    \n    Output integer is returned\
    \ in decimal format.\n    \n    Input string can contain only numbers, decimal\
    \ point and negative sign.\n    \n    Output integer is returned in decimal format.\n\
    \    \n    Input string can contain only numbers, decimal point and negative sign.\n\
    \    \n    Output integer is returned in decimal format.\n    \n    Input string\
    \ can contain only numbers, decimal point and negative sign.\n    \n    Output\
    \ integer is returned in decimal format.\n    \n    Input string can contain only\
    \ numbers, decimal point and negative sign.\n    \n    Output integer is returned\
    \ in decimal format.\n    \n    Input string can contain only numbers, decimal\
    \ point and negative sign.\n    \n    Output integer is returned in decimal format.\n\
    \    \n    Input string can contain only numbers, decimal point and negative sign.\n\
    \    \n    Output integer is returned in decimal format.\n    \n    Input string\
    \ can contain only numbers, decimal point and negative sign.\n    \n    Output\
    \ integer is returned in decimal format.\n    \n    Input string can contain only\
    \ numbers, decimal point and negative sign.\n    \n    Output integer is returned\
    \ in decimal format.\n    \n    Input string can contain only numbers, decimal\
    \ point and negative sign.\n    \n    Output integer is returned in decimal format.\n",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0)\n    {\n        temp = temp / base;\n        \n        if (temp ==\
    \ 0)\n        {\n            result = result + \"0\";\n        }\n        else\n\
    \        {\n            result = result + \"1\";\n        }\n    }\n    \n   \
    \ return result;\n}", "{\n    string result = \"\";\n    long temp = x;\n    long\
    \ temp2 = base;\n    while (temp2 > 0)\n    {\n        temp = temp / temp2;\n\
    \        result = to_string(temp) + result;\n        temp2 = temp2 / 10;\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n \
    \   \n    while (x != 0)\n    {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n\tstring result\
    \ = \"\";\n\tlong temp;\n\t\n\twhile(x != 0)\n\t{\n\t\ttemp = x % base;\n\t\t\
    result = to_string(temp) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp != 0) {\n        temp = temp / base;\n        result += (char)('0'\
    \ + temp % base);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (x != 0) {\n        remainder\
    \ = x % base;\n        result += to_string(remainder);\n        x /= base;\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n\tstring result\
    \ = \"\";\n\t\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\tlong\
    \ remainder = temp % base;\n\t\t\n\t\tif (remainder == 0) {\n\t\t\tresult += to_string(remainder);\n\
    \t\t}\n\t\t\n\t\ttemp = temp / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    while (x != 0)\n    {\n        temp = x % base;\n        result\
    \ += to_string(temp);\n        x = x / base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n        temp\
    \ = temp / base;\n        result = to_string(temp) + result;\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n \
    \   temp = x;\n    \n    while (temp > 0)\n    {\n        temp = temp / base;\n\
    \        \n        if (temp == 0)\n        {\n            result = result + \"\
    0\";\n        }\n        else\n        {\n            result = result + \"1\"\
    ;\n        }\n    }\n    \n    return result;\n}\n/*\n    Convert binary number\
    \ to decimal number.\n    \n    Input binary number x is represented as a string.\n\
    \    \n    Output decimal number y is represented as a string.\n    \n    Input\
    \ string x is \"0\" or \"1\".\n    \n    Output string y is \"0\" or \"1\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input string x is \"1010\".\n    \n    Output string y is \"10\".\n\
    \    \n    Input ", "{\n    string result = \"\";\n    long temp;\n    \n    while\
    \ (x > 0) {\n        temp = x % base;\n        result += to_string(temp);\n  \
    \      x = x / base;\n    }\n    \n    return result;\n}\n/*\n    Convert a string\
    \ to a number.\n    \n    Input string must be in base 10.\n    \n    Input string\
    \ must be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    while (temp > 0) {\n        temp = temp / base;\n  \
    \      result += char(temp % base);\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x != 0) {\n        remainder\
    \ = x % base;\n        result += char(remainder);\n        x /= base;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result += to_string(temp);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        result += to_string(temp);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n        long\
    \ remainder = temp % base;\n        temp = temp / base;\n        result = to_string(remainder)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    long tens = x / base;\n\
    \    long rem = x % base;\n    string res = \"\";\n    \n    while (tens > 0)\n\
    \    {\n        res += \"0\";\n        tens -= 1;\n    }\n    \n    if (rem >\
    \ 0)\n    {\n        res += \"1\";\n    }\n    \n    return res;\n}", "{\n   \
    \ long temp = x;\n    string result = \"\";\n    \n    while (temp > 0) {\n  \
    \      int digit = temp % base;\n        temp = temp / base;\n        result =\
    \ to_string(digit) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while\
    \ (temp > 0)\n    {\n        result = to_string(temp % base) + result;\n     \
    \   temp = temp / base;\n    }\n    \n    if (x < base)\n    {\n        result\
    \ = to_string(x - base) + result;\n    }\n    \n    return result;\n}", "{\n \
    \   string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        long r = temp % base;\n        temp = temp / base;\n \
    \       result = to_string(r) + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp = x;\n    while (temp > 0) {\n    \
    \    long r = temp % base;\n        temp = temp / base;\n        result = char(r)\
    \ + result;\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long temp;\n    \n    temp = x;\n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp != 0) {\n        temp = temp / base;\n        result\
    \ += to_string(temp);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(x != 0)\n    {\n        remainder\
    \ = x % base;\n        result += char(remainder);\n        x /= base;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp =\
    \ x;\n    long temp2 = base;\n    while(temp > 0)\n    {\n        long mod = temp\
    \ % temp2;\n        temp = temp / temp2;\n        result = to_string(mod) + result;\n\
    \        temp2 = base;\n    }\n    return result;\n}\n/*\n    Convert binary number\
    \ to decimal number.\n    \n    Input : binary number in string format.\n    Output\
    \ : decimal number in string format.\n    \n    Example :\n    >>> to_decimal(\"\
    101\")\n    '7'\n    >>> to_decimal(\"1010\")\n    '15'\n    \n*/\nstring to_decimal(string\
    \ binary)\n{\n    string result = \"\";\n    long temp = 0;\n    for(int i = 0;\
    \ i < binary.length(); i++)\n    {\n        if(binary[i] == '1')\n        {\n\
    \            temp = temp * 2 + 1;\n        }\n    }\n    result = to_string(temp);\n\
    \    return result;\n}\n/*\n    Convert decimal number to binary number.\n   \
    \ \n    Input : decimal number in string format.\n    Output : binary number in\
    \ string format.\n    \n    Example :\n    >>> to_binary(\"7\")\n    '101'\n \
    \   >>> to_binary(\"15\")\n    '1010'\n    \n*/\nstring to_binary(string decimal)\n\
    {\n    string result = \"\";\n    long temp = 0;\n    for(int i = 0; i < decimal.length();\
    \ i++)\n    {\n        if(decimal[i] == '0')\n        {\n            temp = temp\
    \ * 2 + 1;\n        }\n        else\n        {\n            temp = temp * 2 +\
    \ 0;\n        }\n    }\n    result = to_string(temp);\n    return result;\n}\n\
    /*\n    Convert hexadecimal number to decimal number.\n    \n    Input : hexadecimal\
    \ number in string format.\n    Output : decimal number in string format.\n  \
    \  \n    Example :\n    >>> to_decimal(\"0xA\")\n    '17'\n    >>> to_decimal(\"\
    0xA0\")\n    '15'\n    \n*/\nstring to_decimal(string hexadecimal)\n{\n    string\
    \ result = \"\";\n    long temp = 0;\n    for(int i = 0; i < hexadecimal.length();\
    \ i++)\n    {\n        if(hexadecimal[i] == 'x')\n        {\n            temp\
    \ = temp * 16 + hexadecimal[i+1];\n        }\n        else\n        {\n      \
    \      temp = temp * 16 + hexadecimal[i];\n        }\n    }\n    result = to_string(temp);\n\
    \    return result;\n}\n/*\n    Convert binary number to hexadecimal number.\n\
    \    \n    Input : binary number in string format.\n    Output : hexadecimal number\
    \ in string format.\n    \n    Example :\n    >>> to_hex(\"10", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x > 0)\n    {\n        temp\
    \ = x % base;\n        result += to_string(temp);\n        x /= base;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long temp;\n    \n \
    \   temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n   \
    \     result = to_string(temp) + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result += (char)('0' + temp\
    \ % base);\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n    \
    \    result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        long digit = temp % base;\n      \
    \  temp = temp / base;\n        result = digit.to_string() + result;\n    }\n\
    \    \n    return result;\n}", "{\n    long n = x;\n    string s = \"\";\n   \
    \ \n    while (n > 0)\n    {\n        int digit = n % base;\n        s = digitToString(digit)\
    \ + s;\n        n = n / base;\n    }\n    \n    return s;\n}", "{\n    long res\
    \ = 0;\n    string str = \"\";\n    while(x != 0)\n    {\n        res = (res *\
    \ base) + x;\n        str = to_string(res);\n        x = x / base;\n    }\n  \
    \  return str;\n}\n/*\n    Convert binary number to decimal number.\n    \n  \
    \  Input binary number is a string consisting of only 1s and 0s.\n    \n    Output\
    \ decimal number is a string consisting of only decimal digits.\n    \n    Input\
    \ string may contain leading zeros.\n    \n    Output string may contain leading\
    \ zeros.\n    \n    Input string may contain leading zeros.\n    \n    Output\
    \ string may contain leading zeros.\n    \n    >>> to_decimal(\"1001\")\n    '5'\n\
    \    >>> to_decimal(\"101\")\n    '5'\n    >>> to_decimal(\"11\")\n    '6'\n \
    \   >>> to_decimal(\"100\")\n    '8'\n    >>> to_decimal(\"10\")\n    '8'\n  \
    \  >>> to_decimal(\"1\")\n    '1'\n    >>> to_decimal(\"0\")\n    '0'\n    >>>\
    \ to_decimal
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ temp = temp / base;\n        \n        if (temp > 0) {\n            result +=\
    \ to_string(temp);\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        long mod = temp % base;\n        temp = temp / base;\n       \
    \ \n        if (mod != 0) {\n            result += char(mod);\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0)\n    {\n        temp = temp /\
    \ base;\n        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    long x_int = (long)x;\n    long x_fract = (x_int % base);\n    string\
    \ x_str = to_string(x_fract);\n    string x_str2 = to_string(x_int - x_fract);\n\
    \    string x_str3 = to_string(x_fract + base);\n    string x_str4 = to_string(x_fract\
    \ + base);\n    string x_str5 = to_string(x_fract + base);\n    string x_str6\
    \ = to_string(x_fract + base);\n    string x_str7 = to_string(x_fract + base);\n\
    \    string x_str8 = to_string(x_fract + base);\n    string x_str9 = to_string(x_fract\
    \ + base);\n    string x_str10 = to_string(x_fract + base);\n    string x_str11\
    \ = to_string(x_fract + base);\n    string x_str12 = to_string(x_fract + base);\n\
    \    string x_str13 = to_string(x_fract + base);\n    string x_str14 = to_string(x_fract\
    \ + base);\n    string x_str15 = to_string(x_fract + base);\n    string x_str16\
    \ = to_string(x_fract + base);\n    string x_str17 = to_string(x_fract + base);\n\
    \    string x_str18 = to_string(x_fract + base);\n    string x_str19 = to_string(x_fract\
    \ + base);\n    string x_str20 = to_string(x_fract + base);\n    string x_str21\
    \ = to_string(x_fract + base);\n    string x_str22 = to_string(x_fract + base);\n\
    \    string x_str23 = to_string(x_fract + base);\n    string x_str24 = to_string(x_fract\
    \ + base);\n    string x_str25 = to_string(x_fract + base);\n    string x_str26\
    \ = to_string(x_fract + base);\n    string x_str27 = to_string(x_fract + base);\n\
    \    string x_str28 = to_string(x_fract + base);\n    string x_str29 = to_string(x_fract\
    \ + base);\n    string x_str30 = to_string(x_fract + base);\n    string x_str31\
    \ = to_string(x_fract + base);\n    string x_str32 = to_string(x_fract + base);\n\
    \    string x_str33 = to_string(x_fract + base);\n    string x_str34 = to_string(x_",
  "{\n    string result = \"\";\n    long tmp = x;\n    while(!(tmp %= base))\n  \
    \  {\n        result += (char)(tmp % base);\n        tmp /= base;\n    }\n   \
    \ result += (char)(tmp);\n    return result;\n}", "{\n\tstring result = \"\";\n\
    \tlong tmp = x;\n\twhile (tmp > 0) {\n\t\tlong rem = tmp % base;\n\t\ttmp = tmp\
    \ / base;\n\t\tresult = to_string(base) + result;\n\t}\n\treturn result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n  \
    \      temp = temp / base;\n        result = to_string(temp) + result;\n    }\n\
    \    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\
    \ttemp = x;\n\t\n\twhile(temp > 0)\n\t{\n\t\tresult = to_string(temp % base) +\
    \ result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (x != 0) {\n        remainder\
    \ = x % base;\n        result += char(remainder);\n        x /= base;\n    }\n\
    \    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\
    \ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\tresult = to_string(temp % base) + result;\n\
    \t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ temp = temp / base;\n        result = to_string(temp) + result;\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n  \
    \  \n    temp = x;\n    \n    while (temp > 0)\n    {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x = x /\
    \ base;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long temp = x;\n    while(temp > 0)\n    {\n        int digit = temp % base;\n\
    \        temp = temp / base;\n        if(digit > 0)\n        {\n            result\
    \ += digit;\n        }\n    }\n    return result;\n}\n/*\n    Convert a string\
    \ to integer.\n    \n    Input string must be in base 10.\n    \n    Output integer\
    \ is returned.\n    \n    Exceptions:\n    None\n    \n    \n    >>> to_int(\"\
    10\")\n    10\n    >>> to_int(\"101\")\n    101\n    >>> to_int(\"1010\")\n  \
    \  1010\n    >>> to_int(\"10101\")\n    1010\n    >>> to_int(\"101010\")\n   \
    \ 1010\n    >>> to_int(\"10101010\")\n    1010\n    >>> to_int(\"101010101\")\n\
    \    1010\n    >>> to_int(\"1010101010\")\n    1010\n    >>> to_int(\"101010101010\"\
    )\n    1010\n    >>> to_int(\"1010101010101\")\n    1010\n    >>> to_int(\"10101010101010\"\
    )\n    1010\n    >>> to_int(\"1010101010101010\")\n    1010\n    >>> to_int(\"\
    10101010101010101\")\n    1010\n    >>> to_int(\"101010101010101010\")\n    1010\n\
    \    >>> to_int(\"10101010101010101010\")\n    1010\n    >>> to_int(\"101010101010101010101\"\
    )\n    1010\n    >>> to_int(\"1010101010101010101010\")\n    1010\n    >>> to_int(\"\
    101010101010101010101010\")\n    1010\n    >>> to_int(\"1010101010101010101010101\"\
    )\n    1010\n    >>> to_int(\"10101010101010101010101010\")\n    1010\n    >>>\
    \ to_int(\"1010101010101010101010101010\")\n    1010\n    >>> to_int(\"10101010101010101010101010101\"\
    )\n    1010\n    >>> to_int(\"101010101010101010101010101010\")\n    1010\n  \
    \  >>> to_int(\"10101010101010101010101010101010\")\n    1010\n    >>> to_int(\"\
    101010101010101010101010101010101\")\n    1010\n    >>> to_int(\"1010101010101010101010101010101010\"\
    )\n    1010\n    >>> to_int(\"101010101010101010101010101010101010\")\n    1010\n\
    \    >>> to_int(\"1010101010101010101010101010101010101\")\n    1010\n    >>>\
    \ to_int(\"10101010101010101010101010101010101010\")\n    1010\n    >>> to_int(\"\
    1010101010101010101010101010", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0)\n    {\n        temp = temp /\
    \ base;\n        result += to_string(temp);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n\tstring result = \"\";\n\t\n\tlong temp;\n\
    \t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\tlong mod = temp % base;\n\t\t\n\
    \t\tif (mod == 0) {\n\t\t\tresult += char(mod + 48);\n\t\t} else {\n\t\t\tresult\
    \ += char(mod + 55);\n\t\t}\n\t\t\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x / base;\n\
    \    \n    if (temp > 0)\n    {\n        while (temp > 0)\n        {\n       \
    \     result += to_string(temp % base);\n            temp /= base;\n        }\n\
    \    }\n    \n    temp = x % base;\n    \n    while (temp > 0)\n    {\n      \
    \  result += to_string(temp % base);\n        temp /= base;\n    }\n    \n   \
    \ return result;\n}", "{\n    long temp;\n    string result = \"\";\n    \n  \
    \  temp = x / base;\n    \n    if (temp == 0)\n    {\n        result = x;\n  \
    \  }\n    else\n    {\n        result = temp * base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while\
    \ (x != 0) {\n        remainder = x % base;\n        result += char(remainder);\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n\tstring result = \"\"\
    ;\n\t\n\tlong temp = x;\n\t\n\twhile (temp > 0) {\n\t\tlong rem = temp % base;\n\
    \t\tresult = to_string(base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\treturn\
    \ result;\n}", "{\n    string result = \"\";\n    long tmp = x;\n    \n    while(base\
    \ > 0)\n    {\n        if(tmp % base == 0)\n        {\n            result += (char)base;\n\
    \            tmp = tmp / base;\n        }\n        else\n        {\n         \
    \   result += (char)tmp % base;\n            tmp = (tmp / base) * base;\n    \
    \    }\n        \n        base--;\n    }\n    \n    result += (char)tmp;\n   \
    \ return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n  \
    \  temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n    \
    \    result = to_string(temp) + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp\
    \ > 0) {\n        temp = temp / base;\n        result += (char)('0' + temp % base);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long tmp = x;\n    \n    while (base > 0)\n    {\n        tmp =\
    \ tmp / base;\n        result += (char)(tmp % base);\n        base--;\n    }\n\
    \    \n    while (base < 0)\n    {\n        tmp = tmp / base;\n        result\
    \ += (char)(tmp % base);\n        base++;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    long temp;\n    string\
    \ result;\n    \n    temp = x;\n    \n    while (temp != 0) {\n        temp =\
    \ temp / base;\n        result = result + (char) (temp % base);\n    }\n    \n\
    \    return result;\n}", "{\n    long res = 0;\n    string s = \"\";\n    \n \
    \   while (x > 0) {\n        res += (x % base);\n        x /= base;\n    }\n \
    \   \n    while (x > 0) {\n        res *= base;\n        res += (x % base);\n\
    \        x /= base;\n    }\n    \n    while (x > 0) {\n        res *= base;\n\
    \        x /= base;\n    }\n    \n    s = to_string(res);\n    \n    return s;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n    \
    \    result += to_string(temp);\n        x /= base;\n    }\n    return result;\n\
    }\n/*\n    Convert binary number to decimal number.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string in reverse order.\n    \n    Output decimal number\
    \ is represented as a string in reverse order.\n    \n    Input binary number\
    \ is represented as a string ", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    while (temp != 0) {\n        temp = temp / base;\n \
    \       result = to_string(temp) + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp = x;\n    while (temp > 0) {\n    \
    \    long r = temp % base;\n        temp = temp / base;\n        result = to_string(base)\
    \ + result;\n    }\n    return result;\n}", "{\n    long res = 0;\n    long temp;\n\
    \    string res;\n    \n    while(x != 0)\n    {\n        temp = x % base;\n \
    \       res += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ res;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile\
    \ (temp > 0) {\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp /= base;\n\
    \t}\n\t\n\treturn result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\
    \twhile(x != 0)\n\t{\n\t\ttemp = x % base;\n\t\tresult = to_string(temp) + result;\n\
    \t\tx = x / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\"\
    ;\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit = temp %\
    \ base;\n        result += digit;\n        temp /= base;\n    }\n    return result;\n\
    }\n/*\n    Convert a string to integer.\n    \n    Input string must be in base\
    \ 10.\n    \n    Return integer value after conversion.\n    \n    Exceptions:\n\
    \    \n    Exception if input string is not in base 10.\n    \n    Exception if\
    \ input string contains non-numeric characters.\n    \n*/\nlong string_to_int(string\
    \ s)\n{\n    long result = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        char c = s[i];\n        if(c >= '0' && c <= '9')\n        {\n       \
    \     result *= 10;\n            result += c - '0';\n        }\n        else\n\
    \        {\n            throw runtime_error(\"Invalid input string\");\n     \
    \   }\n    }\n    return result;\n}\n/*\n    Convert a string to double.\n   \
    \ \n    Input string must be in base 10.\n    \n    Return double value after\
    \ conversion.\n    \n    Exceptions:\n    \n    Exception if input string is not\
    \ in base 10.\n    \n    Exception if input string contains non-numeric characters.\n\
    \    \n*/\ndouble string_to_double(string s)\n{\n    double result = 0;\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c >=\
    \ '0' && c <= '9')\n        {\n            result *= 10;\n            result +=\
    \ c - '0';\n        }\n        else\n        {\n            throw runtime_error(\"\
    Invalid input string\");\n        }\n    }\n    return result;\n}\n/*\n    Convert\
    \ a string to float.\n    \n    Input string must be in base 10.\n    \n    Return\
    \ float value after conversion.\n    \n    Exceptions:\n    \n    Exception if\
    \ input string is not in base 10.\n    \n    Exception if input string contains\
    \ non-numeric characters.\n    \n*/\nfloat string_to_float(string s)\n{\n    float\
    \ result = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c\
    \ = s[i];\n        if(c >= '0' && c <= '9')\n        {\n            result *=\
    \ 10;\n            result += c - '0';\n        }\n        else\n        {\n  \
    \          throw runtime_error(\"Invalid input string\");\n        }\n    }\n\
    \    return result;\n}\n/*\n    Convert a string to string.\n    \n    Input string\
    \ must be in base 10.\n    \n    Return string after conversion.\n    \n    Exceptions:\n\
    \    \n    Exception if input string is not in base 10.\n    \n    Exception if\
    \ input ", "{\n    long x_int = x;\n    string x_str = to_string(x_int);\n   \
    \ string x_str2 = x_str;\n    string x_str3 = x_str2;\n    string x_str4 = x_str3;\n\
    \    string x_str5 = x_str4;\n    string x_str6 = x_str5;\n    string x_str7 =\
    \ x_str6;\n    string x_str8 = x_str7;\n    string x_str9 = x_str8;\n    string\
    \ x_str10 = x_str9;\n    string x_str11 = x_str10;\n    string x_str12 = x_str11;\n\
    \    string x_str13 = x_str12;\n    string x_str14 = x_str13;\n    string x_str15\
    \ = x_str14;\n    string x_str16 = x_str15;\n    string x_str17 = x_str16;\n \
    \   string x_str18 = x_str17;\n    string x_str19 = x_str18;\n    string x_str20\
    \ = x_str19;\n    string x_str21 = x_str20;\n    string x_str22 = x_str21;\n \
    \   string x_str23 = x_str22;\n    string x_str24 = x_str23;\n    string x_str25\
    \ = x_str24;\n    string x_str26 = x_str25;\n    string x_str27 = x_str26;\n \
    \   string x_str28 = x_str27;\n    string x_str29 = x_str28;\n    string x_str30\
    \ = x_str29;\n    string x_str31 = x_str30;\n    string x_str32 = x_str31;\n \
    \   string x_str33 = x_str32;\n    string x_str34 = x_str33;\n    string x_str35\
    \ = x_str34;\n    string x_str36 = x_str35;\n    string x_str37 = x_str36;\n \
    \   string x_str38 = x_str37;\n    string x_str39 = x_str38;\n    string x_str40\
    \ = x_str39;\n    string x_str41 = x_str40;\n    string x_str42 = x_str41;\n \
    \   string x_str43 = x_str42;\n    string x_str44 = x_str43;\n    string x_str45\
    \ = x_str44;\n    string x_str46 = x_str45;\n    string x_str47 = x_str46;\n \
    \   string x_str48 = x_str47;\n    string x_str49 = x_str", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }\n/*\n    Convert a string to integer.\n    \n    Input string must be in base\
    \ 10.\n    \n    Return integer value after conversion.\n    \n    >>> to_int('10')\n\
    \    10\n    >>> to_int('10', 10)\n    10\n    >>> to_int('10', 2)\n    100\n\
    \    >>> to_int('10', 3)\n    1000\n    \n*/\nlong to_int(string x, long base)\
    \ \n{\n    long result = 0;\n    \n    for (auto i : x) {\n        result = result\
    \ * base + i - '0';\n    }\n    \n    return result;\n}\n/*\n    Convert a string\
    \ to float.\n    \n    Input string must be in base 10.\n    \n    Return float\
    \ value after conversion.\n    \n    >>> to_float('10')\n    10.0\n    >>> to_float('10',\
    \ 10)\n    10.0\n    >>> to_float('10', 2)\n    100.0\n    >>> to_float('10',\
    \ 3)\n    1000.0\n    \n*/\nfloat to_float(string x, long base) \n{\n    float\
    \ result = 0;\n    \n    for (auto i : x) {\n        result = result * base +\
    \ i - '0';\n    }\n    \n    return result;\n}\n/*\n    Convert a string to double.\n\
    \    \n    Input string must be in base 10.\n    \n    Return double value after\
    \ conversion.\n    \n    >>> to_double('10')\n    10.0\n    >>> to_double('10',\
    \ 10)\n    10.0\n    >>> to_double('10', 2)\n    100.0\n    >>> to_double('10',\
    \ 3)\n    1000.0\n    \n*/\ndouble to_double(string x, long base) \n{\n    double\
    \ result = 0;\n    \n    for (auto i : x) {\n        result = result * base +\
    \ i - '0';\n    }\n    \n    return result;\n}\n/*\n    Convert a string to long\
    \ double.\n    \n    Input string must be in base 10.\n    \n    Return long double\
    \ value after conversion.\n    \n    >>> to_long_double('10')\n    10.0\n    >>>\
    \ to_long_double('10', 10)\n    10.0\n    >>> to_long_double('10', 2)\n    100.0\n\
    \    >>> to_long_double('10', 3)\n    1000.0\n    \n*/\nlong double to_long_double(string\
    \ x, long base) \n{\n    long double result = 0;\n    \n    for (auto i : ", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n     \
    \   temp = x % base;\n        result += to_string(temp);\n        x = x / base;\n\
    \    }\n    \n    return result;\n}", "{\n    long temp;\n    string result =\
    \ \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\
    \twhile (temp > 0) {\n\t\tlong rem = temp % base;\n\t\tresult = to_string(base)\
    \ + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0)\n    {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n      \
    \  if (temp % base == 0) {\n            result += to_string(temp / base);\n  \
    \      }\n        temp = temp / base;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    while (x != 0)\n    {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n    long temp;\n    string result =\
    \ \"\";\n    \n    while (x != 0)\n    {\n        temp = x % base;\n        result\
    \ += to_string(temp);\n        x /= base;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    while (x > 0) {\n     \
    \   temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp = x;\n    while(temp > 0)\n    {\n        int digit = temp % base;\n  \
    \      temp = temp / base;\n        if(digit > 0)\n        {\n            result\
    \ += digit;\n        }\n    }\n    return result;\n}\n/*\nChange numerical base\
    \ of input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \n*/\nstring change_base(long x, int base) \n{\n    string result = \"\";\n\
    \    long temp = x;\n    while(temp > 0)\n    {\n        int digit = temp % base;\n\
    \        temp = temp / base;\n        if(digit > 0)\n        {\n            result\
    \ += digit;\n        }\n    }\n    return result;\n}\n/*\nChange numerical base\
    \ of input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \n*/\nstring change_base(long x, short base) \n{\n    string result = \"\"\
    ;\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit = temp %\
    \ base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n     \
    \       result += digit;\n        }\n    }\n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8,\
    \ 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7,\
    \ 2)\n    '111'\n    \n*/\nstring change_base(long x, char base) \n{\n    string\
    \ result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int\
    \ digit = temp % base;\n        temp = temp / base;\n        if(digit > 0)\n \
    \       {\n            result += digit;\n        }\n    }\n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8,\
    \ 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7,\
    \ 2)\n    '111'\n    \n*/\nstring change_base(long x, double base) \n{\n    string\
    \ result = \"\";\n    long temp = x;\n    while(temp > ", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        long r = temp % base;\n\
    \        temp = temp / base;\n        result = char(r) + result;\n    }\n    \n\
    \    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\twhile(x\
    \ != 0)\n\t{\n\t\ttemp = x % base;\n\t\tresult += to_string(temp);\n\t\tx = x\
    \ / base;\n\t}\n\t\n\treturn result;\n}", "{\n    long temp;\n    string result\
    \ = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    long temp;\n    string result = \"\";\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n\tstring\
    \ result = \"\";\n\t\n\tlong tmp = x;\n\t\n\twhile (tmp > 0) {\n\t\tlong rem =\
    \ tmp % base;\n\t\ttmp = tmp / base;\n\t\tresult = char(rem) + result;\n\t}\n\t\
    \n\treturn result;\n}", "{\n    string result = \"\";\n    long tmp = x;\n   \
    \ long rem = tmp % base;\n    tmp = tmp / base;\n    while(!(tmp == 0))\n    {\n\
    \        result = to_string(tmp) + result;\n        tmp /= base;\n    }\n    if(rem\
    \ != 0)\n    {\n        result = to_string(tmp) + result;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp = x;\n    while(temp > 0)\n \
    \   {\n        int digit = temp % base;\n        temp = temp / base;\n       \
    \ if(digit > 0)\n        {\n            result += digit;\n        }\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n\
    \    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n  \
    \      result = to_string(temp) + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n\
    \    while (temp > 0)\n    {\n        result = to_string(temp % base) + result;\n\
    \        temp = temp / base;\n    }\n    \n    if (x < base)\n    {\n        result\
    \ = to_string(x - base) + result;\n    }\n    \n    return result;\n}", "{\n \
    \   string result = \"\";\n    long temp = x;\n    while (temp > 0) {\n      \
    \  long mod = temp % base;\n        temp = temp / base;\n        if (mod != 0)\
    \ {\n            result += char(mod);\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0)\n    {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\n  \
    \  {\n        result = to_string(temp % base) + result;\n        temp = temp /\
    \ base;\n    }\n    \n    return result;\n}", "{\n    long temp;\n    string result\
    \ = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    while\
    \ (x != 0)\n    {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(x != 0)\
    \ {\n        remainder = x % base;\n        result += (char)('0' + remainder);\n\
    \        x /= base;\n    }\n    \n    return result;\n}", "{\n\tstring result\
    \ = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp != 0) {\n\t\ttemp\
    \ = temp / base;\n\t\tresult = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n\
    }", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\twhile(x != 0) {\n\t\ttemp\
    \ = x % base;\n\t\tresult += to_string(temp);\n\t\tx = x / base;\n\t}\n\t\n\t\
    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n\
    \    while(x != 0)\n    {\n        remainder = x % base;\n        \n        if(remainder\
    \ == 0)\n        {\n            result += to_string(remainder);\n        }\n \
    \       else\n        {\n            result += to_string(remainder);\n       \
    \     result += to_string(base);\n        }\n        \n        x = x / base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long d = 1;\n    long r = 1;\n    \n    while (n > 0)\n    {\n \
    \       r = n % base;\n        n /= base;\n        d *= base;\n        \n    \
    \    if (n > 0)\n        {\n            result += char(r + 48);\n        }\n \
    \   }\n    \n    return result + char(d);\n}", "{\n\tstring result = \"\";\n\t\
    \n\twhile(x > 0)\n\t{\n\t\tlong r = x % base;\n\t\tresult += char(r + '0');\n\t\
    \tx = x / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n\
    \    long tmp = x;\n    \n    while (!(tmp %= base))\n    {\n        result +=\
    \ char(tmp % base);\n        tmp = tmp / base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0) {\n        result = to_string(temp % base) + result;\n \
    \       temp = temp / base;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0)\n    {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    long temp;\n    string result =\
    \ \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        long remainder = temp % base;\n  \
    \      temp = temp / base;\n        result = to_string(base) + result;\n    }\n\
    \    \n    return result;\n}", "{\n    long temp;\n    string result = \"\";\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\n/*\n    Convert string representation of number\
    \ to long integer.\n    \n    string representation must be in base 10. \n   \
    \ \n    returns long integer representation of string.\n    \n    >>> to_long('100')\n\
    \    100\n    >>> to_long('1001')\n    1001\n    >>> to_long('10010')\n    10010\n\
    \    >>> to_long('100100')\n    100100\n    >>> to_long('1001000')\n    1001000\n\
    \    >>> to_long('10010000')\n    10010000\n    >>> to_long('100100000')\n   \
    \ 100100000\n    >>> to_long('1001000000')\n    1001000000\n    >>> to_long('10010000000')\n\
    \    10010000000\n    >>> to_long('100100000000')\n    100100000000\n    >>> to_long('1001000000000')\n\
    \    1001000000000\n    >>> to_long('10010000000000')\n    10010000000000\n  \
    \  >>> to_long('100100000000000')\n    100100000000000\n    >>> to_long('1001000000000000')\n\
    \    1001000000000000\n    >>> to_long('10010000000000000')\n    10010000000000000\n\
    \    >>> to_long('100100000000000000')\n    100100000000000000\n    >>> to_long('1001000000000000000')\n\
    \    1001000000000000000\n    >>> to_long('10010000000000000000')\n    10010000000000000000\n\
    \    >>> to_long('100100000000000000000')\n    100100000000000000000\n    >>>\
    \ to_long('1001000000000000000000')\n    1001000000000000000000\n    >>> to_long('10010000000000000000000')\n\
    \    10010000000000000000000\n    >>> to_long('100100000000000000000000')\n  \
    \  100100000000000000000000\n    >>> to_long('1001000000000000000000000')\n  \
    \  1001000000000000000000000\n    >>> to_long('10010000000000000000000000')\n\
    \    10010000000000000000000000\n    >>> to_long('100100000000000000000000000')\n\
    \    100100000000000000000000000\n    >>> to_long('1001000000000000000000000000')\n\
    \    1001000000000000000000000000\n    >>> to_long('10010000000000000000000000000')\n\
    \    10010000000000000000000000000\n    >>> to_long('100100000000000000000000000000')\n\
    \    100100000000000000000000000000\n    >>> to_long('1001000000000000000000000000000')\n\
    \    1001000000000000000000000000000\n    >>> to_long('10010000000000000000000000000000')\n\
    \    1001000000000000000000", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        long rem = temp %\
    \ base;\n        temp = temp / base;\n        result = to_string(base) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        long digit\
    \ = temp % base;\n        \n        if (digit < 10)\n            result += char(digit);\n\
    \        else {\n            result += char(digit - 10 + 'A');\n        }\n  \
    \      \n        temp /= base;\n    }\n    \n    return result;\n}", "{\n\tstring\
    \ result = \"\";\n\tlong temp;\n\t\n\twhile(x != 0)\n\t{\n\t\ttemp = x % base;\n\
    \t\tresult = to_string(temp) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n\
    }", "{\n    long rem = x % base;\n    string s = \"\";\n    while(x != 0)\n  \
    \  {\n        s = to_string(x % base) + s;\n        x = x / base;\n    }\n   \
    \ if(rem > 0)\n        s = to_string(x % base) + s;\n    return s;\n}", "{\n \
    \   string result = \"\";\n    long temp = x;\n    long temp2 = base;\n    while(temp\
    \ > 0)\n    {\n        long r = temp % base;\n        temp = temp / base;\n  \
    \      result = to_string(temp2) + result;\n        temp2 = r;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    while (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n    \
    \    result += to_string(temp);\n        x /= base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp != 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n        temp =\
    \ temp / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\
    while (temp > 0) {\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp /=\
    \ base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n    long\
    \ temp = x;\n    long rem = temp % base;\n    long quotient = temp / base;\n \
    \   \n    while(quotient != 0)\n    {\n        result = to_string(quotient) +\
    \ result;\n        quotient = temp / base;\n    }\n    \n    if(rem != 0)\n  \
    \  {\n        result = to_string(quotient) + result;\n    }\n    \n    return\
    \ result;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n\
    \    >>> change_base(7, 2)\n    '111'\n    \n*/\nstring change_base(long x, int\
    \ base) \n{\n    string result = \"\";\n    long temp = x;\n    long rem = temp\
    \ % base;\n    long quotient = temp / base;\n    \n    while(quotient != 0)\n\
    \    {\n        result = to_string(quotient) + result;\n        quotient = temp\
    \ / base;\n    }\n    \n    if(rem != 0)\n    {\n        result = to_string(quotient)\
    \ + result;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of\
    \ input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \n*/\nstring change_base(long x, short base) \n{\n    string result = \"\"\
    ;\n    long temp = x;\n    long rem = temp % base;\n    long quotient = temp /\
    \ base;\n    \n    while(quotient != 0)\n    {\n        result = to_string(quotient)\
    \ + result;\n        quotient = temp / base;\n    }\n    \n    if(rem != 0)\n\
    \    {\n        result = to_string(quotient) + result;\n    }\n    \n    return\
    \ result;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n\
    \    >>> change_base(7, 2)\n    '111'\n    \n*/\nstring change_base(long x, ushort\
    \ base) \n{\n    string result = \"\";\n    long temp = x;\n    long rem = temp\
    \ % base;\n    long quotient = temp / base;\n    \n    while(quotient != 0)\n\
    \    {\n        result = to_string(quoti", "{\n    long rem = x % base;\n    string\
    \ s = \"\";\n    while(x != 0)\n    {\n        s = std.string.format(std.string.format(\"\
    %{}d\", base), std.math.toInt(x / base));\n        x = x % base;\n    }\n    return\
    \ std.string.format(\"{}{}\", s, rem);\n}\n</code>\n<|/ a tags=c++,string |>\n\
    <| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    long temp;\n    \n    temp\
    \ = x;\n    \n    while (temp > 0) {\n        if (temp % base == 0) {\n      \
    \      result += to_string(temp / base);\n        }\n        temp /= base;\n \
    \   }\n    \n    return result;\n}", "{\n    long temp;\n    string result = \"\
    \";\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp /\
    \ base;\n        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8,\
    \ 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7,\
    \ 2)\n    '111'\n    \n*/\nstring change_base(long x, int base) \n{\n    long\
    \ temp;\n    string result = \"\";\n    \n    temp = x;\n    \n    while (temp\
    \ > 0) {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\n/*\nChange numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \n*/\nstring change_base(long\
    \ x, short base) \n{\n    long temp;\n    string result = \"\";\n    \n    temp\
    \ = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8,\
    \ 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7,\
    \ 2)\n    '111'\n    \n*/\nstring change_base(long x, char base) \n{\n    long\
    \ temp;\n    string result = \"\";\n    \n    temp = x;\n    \n    while (temp\
    \ > 0) {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\n/*\nChange numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \n*/\nstring change_base(long\
    \ x, double base) \n{\n    long temp;\n    string result = \"\";\n    \n    temp\
    \ = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}\n/*", "{\n \
    \   string result = \"\";\n    long temp;\n    \n    while (x > 0) {\n       \
    \ temp = x % base;\n        result += (char)('0' + temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\
    \t\n\twhile(x != 0)\n\t{\n\t\ttemp = x % base;\n\t\tresult = to_string(temp) +\
    \ result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n\
    \    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \n*/\nstring change_base(long\
    \ x, int base) \n{\n    string result = \"\";\n    long temp;\n    \n    temp\
    \ = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ += to_string(temp);\n    }\n    \n    return result;\n}\n/*\nChange numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \n*/\nstring change_base(long x, short base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n\
    \    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \n*/\nstring change_base(long\
    \ x, char base) \n{\n    string result = \"\";\n    long temp;\n    \n    temp\
    \ = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ += to_string(temp);\n    }\n    \n    return result;\n}\n/*\nChange numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \n*/\nstring change_base(long x, double base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        temp = temp / base;\n        result += to_string(temp);\n    }\n\
    \    \n    return result;\n}\n/*", "{\n\tstring result = \"\";\n\tlong temp;\n\
    \t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tlong remainder = temp % base;\n\t\t\
    result += char(remainder);\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    while (x > 0) {\n     \
    \   temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n    long temp;\n    string result =\
    \ \"\";\n    \n    temp = x / base;\n    \n    while (temp > 0)\n    {\n     \
    \   result = to_string(temp % base) + result;\n        temp = temp / base;\n \
    \   }\n    \n    if (x < base)\n    {\n        result = to_string(x - base) +\
    \ result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long tmp = x;\n    long tmp2 = base;\n    long tmp3 = tmp;\n    long tmp4\
    \ = tmp;\n    long tmp5 = tmp;\n    long tmp6 = tmp;\n    long tmp7 = tmp;\n \
    \   long tmp8 = tmp;\n    long tmp9 = tmp;\n    long tmp10 = tmp;\n    long tmp11\
    \ = tmp;\n    long tmp12 = tmp;\n    long tmp13 = tmp;\n    long tmp14 = tmp;\n\
    \    long tmp15 = tmp;\n    long tmp16 = tmp;\n    long tmp17 = tmp;\n    long\
    \ tmp18 = tmp;\n    long tmp19 = tmp;\n    long tmp20 = tmp;\n    long tmp21 =\
    \ tmp;\n    long tmp22 = tmp;\n    long tmp23 = tmp;\n    long tmp24 = tmp;\n\
    \    long tmp25 = tmp;\n    long tmp26 = tmp;\n    long tmp27 = tmp;\n    long\
    \ tmp28 = tmp;\n    long tmp29 = tmp;\n    long tmp30 = tmp;\n    long tmp31 =\
    \ tmp;\n    long tmp32 = tmp;\n    long tmp33 = tmp;\n    long tmp34 = tmp;\n\
    \    long tmp35 = tmp;\n    long tmp36 = tmp;\n    long tmp37 = tmp;\n    long\
    \ tmp38 = tmp;\n    long tmp39 = tmp;\n    long tmp40 = tmp;\n    long tmp41 =\
    \ tmp;\n    long tmp42 = tmp;\n    long tmp43 = tmp;\n    long tmp44 = tmp;\n\
    \    long tmp45 = tmp;\n    long tmp46 = tmp;\n    long tmp47 = tmp;\n    long\
    \ tmp48 = tmp;\n    long tmp49 = tmp;\n    long tmp50 = tmp;\n    long tmp51 =\
    \ tmp;\n    long tmp52 = tmp;\n    long tmp53 = tmp;\n    long tmp54 = tmp;\n\
    \    long tmp55 = tmp;\n    long tmp56 = tmp;\n    long tmp57 = tmp;\n    long\
    \ tmp58 = tmp;\n    long tmp59 = tmp;\n    long tmp60 = tmp;\n    long tmp61 =\
    \ tmp;\n    long tmp62 = tmp;\n    long tmp63 = tmp;\n    long tmp64 = tmp;\n\
    \    long tmp65 = tmp;", "{\n    long res = 0;\n    string s = \"\";\n    while(x\
    \ != 0) {\n        res += x / base;\n        x %= base;\n        s += to_string(res);\n\
    \    }\n    return s;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    long n = x;\n    \n    while\
    \ (n != 0) {\n        long r = n % base;\n        result += char(r + '0');\n \
    \       n = n / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n\
    \    >>> change_base(7, 2)\n    '111'\n    \n*/\nstring change_base(long x, int\
    \ base) \n{\n    string result = \"\";\n    long temp;\n    \n    while (x !=\
    \ 0) {\n        temp = x % base;\n        result += (char)('0' + temp);\n    \
    \    x /= base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base\
    \ of input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \n*/\nstring change_base(long x, short base) \n{\n    string result = \"\"\
    ;\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n    \
    \    result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n\
    \    >>> change_base(7, 2)\n    '111'\n    \n*/\nstring change_base(long x, char\
    \ base) \n{\n    string result = \"\";\n    long temp;\n    \n    while (x !=\
    \ 0) {\n        temp = x % base;\n        result += (char)('0' + temp);\n    \
    \    x /= base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base\
    \ of input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \n*/\nstring change_base(long x, double base) \n{\n    string result = \"\"\
    ;\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n    \
    \    result += (char)('0' + temp);\n", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n    {\n        result\
    \ = temp.to_string(base);\n    }\n    \n    return result;\n}", "{\n    long temp;\n\
    \    string result = \"\";\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp = x;\n    while(temp\
    \ > 0)\n    {\n        long mod = temp % base;\n        temp = temp / base;\n\
    \        if(mod == 0)\n        {\n            result += char(mod);\n        }\n\
    \        else\n        {\n            result += char(mod + 48);\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This code doesn't work for negative numbers. Try with x = -2 and base = 2.\n<|/\
    \ c |>\n<| c |>\nI fixed the code so it works for negative numbers. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cmath>", "{\n    long temp;\n    string result =\
    \ \"\";\n    \n    while (x > 0) {\n        temp = x % base;\n        result +=\
    \ to_string(temp);\n        x /= base;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        result = to_string(temp % base) + result;\n        temp\
    \ = temp / base;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        long remainder = temp % base;\n        temp = temp / base;\n        result\
    \ = remainder + result;\n    }\n    \n    return result;\n}", "{\n    long res\
    \ = 0;\n    long tmp = 0;\n    string res = \"\";\n    \n    while (x != 0) {\n\
    \        tmp = (x % base);\n        \n        if (tmp > 9) {\n            tmp\
    \ -= 10;\n        }\n        \n        res += (char)(tmp + '0');\n        \n \
    \       x /= base;\n    }\n    \n    return res;\n}", "{\n    string result =\
    \ \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\n\
    \    {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \n*/\nstring change_base(long x, int base) \n{\n    string result = \"\";\n\
    \    long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\n    {\n\
    \        result = to_string(temp % base) + result;\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}\n/*\nChange numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8,\
    \ 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \n*/\nstring change_base(long\
    \ x, short base) \n{\n    string result = \"\";\n    long temp;\n    \n    temp\
    \ = x / base;\n    \n    while (temp > 0)\n    {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8,\
    \ 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7,\
    \ 2)\n    '111'\n    \n*/\nstring change_base(long x, ushort base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while\
    \ (temp > 0)\n    {\n        result = to_string(temp % base) + result;\n     \
    \   temp = temp / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \n*/\nstring change_base(long x, int base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n        temp =\
    \ temp / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}\n/*\n    Convert binary number to decimal number.\n    \n    Input\
    \ binary number is a string of 0s and 1s.\n    Output decimal number is a string\
    \ of decimal numbers.\n    \n    Input binary number is a string of 0s and 1s.\n\
    \    Output decimal number is a string of decimal numbers.\n    \n    Input binary\
    \ number is a string of 0s and 1s.\n    Output decimal number is a string of decimal\
    \ numbers.\n    \n    Input binary number is a string of 0s and 1s.\n    Output\
    \ decimal number is a string of decimal numbers.\n    \n    Input binary number\
    \ is a string of 0s and 1s.\n    Output decimal number is a string of decimal\
    \ numbers.\n    \n    Input binary number is a string of 0s and 1s.\n    Output\
    \ decimal number is a string of decimal numbers.\n    \n    Input binary number\
    \ is a string of 0s and 1s.\n    Output decimal number is a string of decimal\
    \ numbers.\n    \n    Input binary number is a string of 0s and 1s.\n    Output\
    \ decimal number is a string of decimal numbers.\n    \n    Input binary number\
    \ is a string of 0s and 1s.\n    Output decimal number is a string of decimal\
    \ numbers.\n    \n    Input binary number is a string of 0s and 1s.\n    Output\
    \ decimal number is a string of decimal numbers.\n    \n    Input binary number\
    \ is a string of 0s and 1s.\n    Output decimal number is a string of decimal\
    \ numbers.\n    \n    Input binary number is a string of 0s and 1s.\n    Output\
    \ decimal number is a string of decimal numbers.\n    \n    Input binary number\
    \ is a string of 0s and 1s.\n    Output decimal number is a string of decimal\
    \ numbers.\n    \n    Input binary number is a string of 0s and 1s.\n    Output\
    \ decimal number is a string of decimal numbers.\n    \n    Input binary number\
    \ is a string of 0s and 1s.\n    Output decimal number is a string of decimal\
    \ numbers.\n    \n    Input binary number is a string of 0s and 1s.\n    Output\
    \ decimal number is a string of decimal numbers.\n    \n    Input binary number\
    \ is a string of 0s and 1s.\n    Output decimal number is a string of decimal\
    \ numbers.\n    \n    Input binary number is a string of 0s and 1s.\n    Output\
    \ decimal number is a string of decimal numbers.\n    \n    Input binary number\
    \ is a string of 0s and 1s.\n    Output decimal number is a string of decimal\
    \ numbers.\n    \n    Input binary number is a string of 0s and 1s.\n    Output\
    \ decimal number is a string of decimal numbers.\n    \n    Input binary number\
    \ is a string of 0s and 1s.\n    Output decimal number is a ", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0)\n\
    \    {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    long temp;\n    string result =\
    \ \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    long r = x;\n    string s = \"\";\n    while(base > 0)\n\
    \    {\n        r = r / base;\n        s = to_string(base) + s;\n        base\
    \ = base * 10;\n    }\n    return to_string(base) + to_string(r);\n}\n/*\n   \
    \ Convert string representation of number to long integer.\n    \n    string representation\
    \ must be in base 10. \n    \n    returns long integer representation of string.\n\
    \    \n    returns 0 if string representation is invalid or if string representation\
    \ is empty.\n    \n    returns -1 if string representation is invalid or if string\
    \ representation is empty.\n    \n    returns -2 if string representation is invalid\
    \ or if string representation is empty.\n    \n    returns -3 if string representation\
    \ is invalid or if string representation is empty.\n    \n    returns -4 if string\
    \ representation is invalid or if string representation is empty.\n    \n    returns\
    \ -5 if string representation is invalid or if string representation is empty.\n\
    \    \n    returns -6 if string representation is invalid or if string representation\
    \ is empty.\n    \n    returns -7 if string representation is invalid or if string\
    \ representation is empty.\n    \n    returns -8 if string representation is invalid\
    \ or if string representation is empty.\n    \n    returns -9 if string representation\
    \ is invalid or if string representation is empty.\n    \n    returns -10 if string\
    \ representation is invalid or if string representation is empty.\n    \n    returns\
    \ -11 if string representation is invalid or if string representation is empty.\n\
    \    \n    returns -12 if string representation is invalid or if string representation\
    \ is empty.\n    \n    returns -13 if string representation is invalid or if string\
    \ representation is empty.\n    \n    returns -14 if string representation is\
    \ invalid or if string representation is empty.\n    \n    returns -15 if string\
    \ representation is invalid or if string representation is empty.\n    \n    returns\
    \ -16 if string representation is invalid or if string representation is empty.\n\
    \    \n    returns -17 if string representation is invalid or if string representation\
    \ is empty.\n    \n    returns -18 if string representation is invalid or if string\
    \ representation is empty.\n    \n    returns -19 if string representation is\
    \ invalid or if string representation is empty.\n    \n    returns -20 if string\
    \ representation is invalid or if string representation is empty.\n    \n    returns\
    \ -21 if string representation is invalid or if string representation is empty.\n\
    \    \n    returns -22 if string representation is invalid or if string representation\
    \ is empty.\n    \n    returns -23 if string representation is invalid or if string\
    \ representation is empty.\n    \n    returns -24 if string representation is\
    \ invalid or if string representation is empty.\n", "{\n    string result = \"\
    \";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n     \
    \   long r = temp % base;\n        temp = temp / base;\n        result = char(r)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp = x;\n    while (temp > 0) {\n        long mod = temp % base;\n\
    \        if (mod != 0) {\n            result += char(mod);\n        }\n      \
    \  temp = temp / base;\n    }\n    return result;\n}", "{\n    long temp;\n  \
    \  string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0)\n  \
    \  {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\n/*\n    Convert decimal number to binary\
    \ number.\n    \n    Input number x is decimal number.\n    Output string representation\
    \ after the conversion.\n    \n    Input number x is decimal number.\n    Output\
    \ string representation after the conversion.\n    \n    Input number x is decimal\
    \ number.\n    Output string representation after the conversion.\n    \n    Input\
    \ number x is decimal number.\n    Output string representation after the conversion.\n\
    \    \n    Input number x is decimal number.\n    Output string representation\
    \ after the conversion.\n    \n    Input number x is decimal number.\n    Output\
    \ string representation after the conversion.\n    \n    Input number x is decimal\
    \ number.\n    Output string representation after the conversion.\n    \n    Input\
    \ number x is decimal number.\n    Output string representation after the conversion.\n\
    \    \n    Input number x is decimal number.\n    Output string representation\
    \ after the conversion.\n    \n    Input number x is decimal number.\n    Output\
    \ string representation after the conversion.\n    \n    Input number x is decimal\
    \ number.\n    Output string representation after the conversion.\n    \n    Input\
    \ number x is decimal number.\n    Output string representation after the conversion.\n\
    \    \n    Input number x is decimal number.\n    Output string representation\
    \ after the conversion.\n    \n    Input number x is decimal number.\n    Output\
    \ string representation after the conversion.\n    \n    Input number x is decimal\
    \ number.\n    Output string representation after the conversion.\n    \n    Input\
    \ number x is decimal number.\n    Output string representation after the conversion.\n\
    \    \n    Input number x is decimal number.\n    Output string representation\
    \ after the conversion.\n    \n    Input number x is decimal number.\n    Output\
    \ string representation after the conversion.\n    \n    Input number x is decimal\
    \ number.\n    Output string representation after the conversion.\n    \n    Input\
    \ number x is decimal number.\n    Output string representation after the conversion.\n\
    \    \n    Input number x is decimal number.\n    Output string representation\
    \ after the conversion.\n    \n    Input number x is decimal number.\n    Output\
    \ string representation after the conversion.\n    \n    Input number x is decimal\
    \ number.\n    Output string representation after the conversion.\n    \n    Input\
    \ number x is decimal number.\n    Output string representation after the conversion.\n\
    \    \n    Input number x is decimal number.\n    Output string representation\
    \ after the conversion.\n    \n    Input ", "{\n    long result = 0;\n    \n \
    \   while (x > 0) {\n        long r = x % base;\n        result += (char)(r +\
    \ '0');\n        x /= base;\n    }\n    \n    return string(result, 1);\n}", "{\n\
    \tstring result = \"\";\n\tlong temp;\n\t\n\twhile(x > 0)\n\t{\n\t\ttemp = x %\
    \ base;\n\t\tresult = to_string(temp) + result;\n\t\tx = x / base;\n\t}\n\t\n\t\
    return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp\
    \ = x / base;\n    \n    while (temp > 0) {\n        result = to_string(temp %\
    \ base) + result;\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }\n/*\n    Convert a string to integer.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    Input string must be in base 10.\n    \n    Input\
    \ string must be in base 10.\n    \n    Input string must be in base 10.\n   \
    \ \n    Input string must be in base 10.\n    \n    Input string must be in base\
    \ 10.\n    \n    Input string must be in base 10.\n    \n    Input string must\
    \ be in base 10.\n    \n    ", "{\n    long res = 0;\n    string s = \"\";\n \
    \   \n    while (x > 0) {\n        res += x % base;\n        x /= base;\n    }\n\
    \    \n    while (x > 0) {\n        s += \"0\";\n        x /= base;\n    }\n \
    \   \n    while (s < \"0\") {\n        s += \"1\";\n    }\n    \n    return s;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0) {\n        temp = temp / base;\n        result += to_string(temp);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp = x;\n    while(temp > 0)\n    {\n        int digit = temp % base;\n  \
    \      result += digit;\n        temp /= base;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n\tstring result = \"\";\n\t\n\t\
    while(x != 0)\n\t{\n\t\tlong r = x % base;\n\t\tresult += char(r + '0');\n\t\t\
    x = x / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n\
    \    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n       \
    \ result = to_string(temp) + result;\n        x = x / base;\n    }\n    \n   \
    \ return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
