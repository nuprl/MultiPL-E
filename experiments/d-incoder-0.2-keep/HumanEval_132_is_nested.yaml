name: HumanEval_132_is_nested
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
  \ takes a string as input which contains only square brackets.\n    The function\
  \ should return True if and only if there is a valid subsequence of brackets \n\
  \    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]')\
  \ \u279E True\n    is_nested('[]]]]]]][[[[[]') \u279E False\n    is_nested('[][]')\
  \ \u279E False\n    is_nested('[]') \u279E False\n    is_nested('[[][]]') \u279E\
  \ True\n    is_nested('[[]][[') \u279E True\n    \n*/\nbool is_nested(string string)\
  \ \n"
tests: "unittest\n{\n    alias candidate = is_nested;\n\n    assert(candidate(\"[[]]\"\
  ) == true);\n    assert(candidate(\"[]]]]]]][[[[[]\") == false);\n    assert(candidate(\"\
  [][]\") == false);\n    assert(candidate(\"[]\") == false);\n    assert(candidate(\"\
  [[[[]]]]\") == true);\n    assert(candidate(\"[]]]]]]]]]]\") == false);\n    assert(candidate(\"\
  [][][[]]\") == true);\n    assert(candidate(\"[[]\") == false);\n    assert(candidate(\"\
  []]\") == false);\n    assert(candidate(\"[[]][[\") == true);\n    assert(candidate(\"\
  [[][]]\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
  [[[[[[[[\") == false);\n    assert(candidate(\"]]]]]]]]\") == false);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
