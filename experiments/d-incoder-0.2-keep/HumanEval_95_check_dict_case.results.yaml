name: HumanEval_95_check_dict_case
language: humaneval_to_dlang.py
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfwzs_ry_.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwzs_ry_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppdu3d2oq.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppdu3d2oq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppgr30m93.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgr30m93.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt5ihr_gi.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5ihr_gi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9acf1pu6.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9acf1pu6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43wziatp.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43wziatp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4p_hjz2_.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4p_hjz2_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        string value = dict[key];\n        if(!is_string(value)\
    \ || !is_string(key))\n        {\n            return false;\n        }\n     \
    \   if(value.length() != key.length())\n        {\n            return false;\n\
    \        }\n        for(int i = 0; i < value.length(); i++)\n        {\n     \
    \       if(value[i] != key[i])\n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3lzcxer_.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lzcxer_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkaoqp27y.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpkaoqp27y.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpkaoqp27y.d(22):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpkaoqp27y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLowercase(key) || !isUppercase(key))\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5o6u6v47.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5o6u6v47.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        string lowerKey = key.to_lowercase();\n       \
    \ string upperKey = key.to_uppercase();\n        if(lowerKey == upperKey)\n  \
    \      {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbycjju1_.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbycjju1_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8kok4xro.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8kok4xro.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if (dict[key] == null) {\n            return false;\n\
    \        }\n        char c = tolower(dict[key]);\n        if (c != dict[key])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpors9nh91.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpors9nh91.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprokdto59.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprokdto59.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg_yhi2sn.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_yhi2sn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\
    \ return true;\n    \n    foreach (string key in dict.keys) \n    {\n        if\
    \ (key.isLower()) return true;\n        if (key.isUpper()) return true;\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw1b8wtlf.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1b8wtlf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplk3fcoy9.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplk3fcoy9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!is_string(key)) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6atavl2s.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6atavl2s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjmt2w1an.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmt2w1an.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9pca6drs.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9pca6drs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if (!(is_string(key) || is_string(key.to_lowercase())\
    \ || is_string(key.to_uppercase()))) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj3_c2ska.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3_c2ska.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpva2yh3f_.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva2yh3f_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqyhaqpdx.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpqyhaqpdx.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpqyhaqpdx.d(22):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpqyhaqpdx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfc6wg91d.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfc6wg91d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnsei5drj.d(18): Error: no identifier for declarator `v`\\n/tmp/tmpnsei5drj.d(18):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpnsei5drj.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsei5drj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=d,string,case-sensitive,dictionary |>\n\
    <code>\nimport std.stdio;\nimport std.string;\nimport std.conv;\nimport std.algorithm;\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn1m9gmjr.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpn1m9gmjr.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpn1m9gmjr.d(25):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpn1m9gmjr.d(27): Error: declaration\
    \ expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1m9gmjr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9l_s9wh9.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9l_s9wh9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcgpph9qy.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgpph9qy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        string lowerCaseKey = key.to_lower();\n       \
    \ string upperCaseKey = key.to_upper();\n        if(lowerCaseKey != key || upperCaseKey\
    \ != key)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ykgs9gx.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ykgs9gx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2qmft3hx.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qmft3hx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.IsNull)\n\
    \        return true;\n    \n    foreach (string key in dict.Keys)\n    {\n  \
    \      if (!is_string(key))\n            return false;\n    }\n    \n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp47vmg9z8.d(21): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47vmg9z8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeanhx36i.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeanhx36i.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if (!is_string(key) || !is_string(dict[key]))\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnb53mzvi.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnb53mzvi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmgvljdg2.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmgvljdg2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeva_xfw6.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeva_xfw6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(k,\
    \ v) \n    {\n        bool isString = (k as string).isLower();\n        bool isString2\
    \ = (k as! string).isUpper();\n        if(!isString && !isString2)\n         \
    \   return false;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=0 |>\n<code>\nimport std.stdio;\nimport std.string;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5m36yaol.d(18): Error: no identifier for declarator `v`\\n/tmp/tmp5m36yaol.d(18):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmp5m36yaol.d(20): Error: found `as`\
    \ when expecting `)`\\n/tmp/tmp5m36yaol.d(20): Error: semicolon expected, not\
    \ `string`\\n/tmp/tmp5m36yaol.d(20): Error: found `)` when expecting `;` following\
    \ statement\\n/tmp/tmp5m36yaol.d(21): Error: found `as` when expecting `)`\\n/tmp/tmp5m36yaol.d(21):\
    \ Error: semicolon expected, not `!`\\n/tmp/tmp5m36yaol.d(21): Error: found `)`\
    \ when expecting `;` following statement\\n/tmp/tmp5m36yaol.d(25): Error: found\
    \ `return` when expecting `)`\\n/tmp/tmp5m36yaol.d(27): Error: declaration expected,\
    \ not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5m36yaol.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpicbe_quy.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpicbe_quy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphgcgfqj5.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgcgfqj5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb970swml.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb970swml.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm2r6akt6.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2r6akt6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpydi6h1is.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydi6h1is.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdf3adt7d.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdf3adt7d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq3883zoy.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq3883zoy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplp5o0kpr.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplp5o0kpr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2k8ktd9a.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2k8ktd9a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7xvfpcyf.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xvfpcyf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n     \
    \       return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp13t7cu42.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13t7cu42.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyqkg6i48.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyqkg6i48.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8nkyqhk0.d(18): Error: found `in` when expecting `;`\\n/tmp/tmp8nkyqhk0.d(27):\
    \ Error: declaration expected, not `<`\\n/tmp/tmp8nkyqhk0.d(108): Error: identifier\
    \ expected following `package`\\n/tmp/tmp8nkyqhk0.d(108): Error: `;` expected\\\
    n/tmp/tmp8nkyqhk0.d(109): Error: declaration expected, not `{`\\n/tmp/tmp8nkyqhk0.d(112):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp8nkyqhk0.d(113): Error:\
    \ declaration expected, not `assert`\\n/tmp/tmp8nkyqhk0.d(114): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp8nkyqhk0.d(115): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp8nkyqhk0.d(116): Error: declaration expected, not `assert`\\\
    n/tmp/tmp8nkyqhk0.d(117): Error: declaration expected, not `assert`\\n/tmp/tmp8nkyqhk0.d(118):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp8nkyqhk0.d(119): Error:\
    \ unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8nkyqhk0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfgo5qu07.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpfgo5qu07.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpfgo5qu07.d(25):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpfgo5qu07.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqgei8ufm.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqgei8ufm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpayh0tabc.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayh0tabc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptlxdwwqy.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlxdwwqy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7i7_a9ay.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7i7_a9ay.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpez2mhn75.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpez2mhn75.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr8db02cd.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8db02cd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n       \
    \     return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7dmiuy6r.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmp7dmiuy6r.d(18): Error: found `)` when expecting `;`\\n/tmp/tmp7dmiuy6r.d(22):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp7dmiuy6r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(k,\
    \ v:dict)\n    {\n        if(!is_string(k))\n        {\n            return false;\n\
    \        }\n        if(!is_string(v))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv5ow38jz.d(18): Error: no identifier for declarator `v`\\n/tmp/tmpv5ow38jz.d(18):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpv5ow38jz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4ak5xdk.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4ak5xdk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!is_string(key) || !is_string(dict[key])) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7qgc0hu.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7qgc0hu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyn4tqsdl.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpyn4tqsdl.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpyn4tqsdl.d(25):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpyn4tqsdl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if (!(isLower(key) || isUpper(key))) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsupmad79.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsupmad79.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!key.IsLower()) return false; \n        if(!key.IsUpper())\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpffoa4a_4.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffoa4a_4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4grogdp.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4grogdp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3qn1rtor.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3qn1rtor.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps9d3tod3.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9d3tod3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq2uoljvm.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2uoljvm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprj1ct9ip.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprj1ct9ip.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptwbaft95.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwbaft95.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any external libraries. I only need to use std.\n<|/ c |>\n<| c |>\n\
    I added a solution that uses only std.\n<|/ c |>\n<| a tags=c++,dictionary,string\
    \ |>\n<code>\n#include <iostream>\n#include <map>\n#include <string>\n#include\
    \ <algorithm>\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn1guyajq.d(18): Error: found `in` when expecting `;`\\n/tmp/tmpn1guyajq.d(27):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpn1guyajq.d(45): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpn1guyajq.d(46): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpn1guyajq.d(47): Error: declaration expected, not `assert`\\\
    n/tmp/tmpn1guyajq.d(48): Error: declaration expected, not `assert`\\n/tmp/tmpn1guyajq.d(49):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpn1guyajq.d(50): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpn1guyajq.d(51): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpn1guyajq.d(52): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1guyajq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        string lowerCase = key.to_lowercase();\n      \
    \  string upperCase = key.to_uppercase();\n        if(lowerCase == upperCase)\n\
    \        {\n            return true;\n        }\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7jek4ks2.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jek4ks2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq2oirhip.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2oirhip.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!isLower(key) || !isUpper(key)) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgobureuc.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpgobureuc.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpgobureuc.d(25):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpgobureuc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpveptnj5z.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpveptnj5z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpih1_kyrk.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpih1_kyrk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        string value = dict[key];\n        if(!isLower(key)\
    \ || !isUpper(key) || !isLower(value) || !isUpper(value))\n        {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqd98v5fv.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqd98v5fv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8t7x3942.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t7x3942.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpko7l20at.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpko7l20at.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6mkp6edm.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6mkp6edm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\
    \ return true;\n    \n    foreach (string key in dict.keys) {\n        if (!(isLowercase(key)\
    \ || isUppercase(key))) return false;\n    }\n    \n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ph_c9sr.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ph_c9sr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwcln0l34.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcln0l34.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxi300a26.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxi300a26.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3u1n5rut.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u1n5rut.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2sud9476.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2sud9476.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf2ck8bxt.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2ck8bxt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        string lower = key.to_lowercase();\n        string upper\
    \ = key.to_uppercase();\n        if (lower == upper) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmkfqry4j.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmkfqry4j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\n\
    \        return false;\n    \n    foreach (string key in dict.keys) {\n      \
    \  if (!(islower(key) || isupper(key)))\n            return false;\n    }\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxhoansv.d(21): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxhoansv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjd3j030.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjd3j030.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9xdvcdow.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9xdvcdow.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        string lowerCase = key.to_lowercase();\n      \
    \  string upperCase = key.to_uppercase();\n        if(lowerCase == upperCase)\n\
    \        {\n            return true;\n        }\n    }\n    return false;\n}\n\
    </code>\n<|/ a tags=dictionary,c++,stl,string |>\n<| a tags=dictionary,c++,stl,string\
    \ |>\n<code>\n#include <iostream>\n#include <map>\n#include <string>\n#include\
    \ <algorithm>\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxcudvlgo.d(18): Error: found `in` when expecting `;`\\n/tmp/tmpxcudvlgo.d(29):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpxcudvlgo.d(41): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpxcudvlgo.d(42): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpxcudvlgo.d(43): Error: declaration expected, not `assert`\\\
    n/tmp/tmpxcudvlgo.d(44): Error: declaration expected, not `assert`\\n/tmp/tmpxcudvlgo.d(45):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpxcudvlgo.d(46): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpxcudvlgo.d(47): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpxcudvlgo.d(48): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcudvlgo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n       \
    \     return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmi5dw76_.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpmi5dw76_.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpmi5dw76_.d(22):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpmi5dw76_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) {\n        if (!is_string(key)) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_smtekql.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmp_smtekql.d(18): Error: found `)` when expecting `;`\\n/tmp/tmp_smtekql.d(23):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp_smtekql.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_gf03g3l.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gf03g3l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\
    \ return true;\n    \n    foreach (string key in dict) {\n        if (key.isLower())\
    \ return true;\n        if (key.isUpper()) return true;\n    }\n    return false;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphow_seft.d(20): Error: found `in` when expecting `;`\\n/tmp/tmphow_seft.d(26):\
    \ Error: declaration expected, not `<`\\n/tmp/tmphow_seft.d(34): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmphow_seft.d(35): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmphow_seft.d(36): Error: declaration expected, not `assert`\\\
    n/tmp/tmphow_seft.d(37): Error: declaration expected, not `assert`\\n/tmp/tmphow_seft.d(38):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmphow_seft.d(39): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmphow_seft.d(40): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmphow_seft.d(41): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphow_seft.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsv29buo0.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsv29buo0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi7raldpo.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi7raldpo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!is_string(key) || !is_string(dict[key])) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvcduzot4.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcduzot4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpobin3wwd.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobin3wwd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpov48bhp3.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpov48bhp3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpot_o4k4r.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpot_o4k4r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp37uoqyoh.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37uoqyoh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy4pkw0ci.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4pkw0ci.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc320jopn.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc320jopn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=dictionary,c++,stl |>\n\
    <| c |>\nI believe this would fail for `{\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"}`\n<|/ c |>\n<| c |>\n: Yes, it would. But that wasn't the question.\
    \ :)\n<|/ c |>\n<| c |>\nI believe this would fail for `{\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}`\n<|/ c |>\n<| c |>\n: Yes, it would. But\
    \ that wasn't the question. :)\n<|/ c |>\n<| c |>\nI believe this would fail for\
    \ `{\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}`\n<|/ c |>\n<| a |>\n\
    <code>\n#include <iostream>\n#include <map>\n#include <string>\n#include <algorithm>\n\
    #include <cctype>\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0j3fq45b.d(18): Error: found `in` when expecting `;`\\n/tmp/tmp0j3fq45b.d(24):\
    \ Error: declaration expected, not `<`\\n/tmp/tmp0j3fq45b.d(30): Error: unterminated\
    \ character constant\\n/tmp/tmp0j3fq45b.d(36): Error: unterminated character constant\\\
    n/tmp/tmp0j3fq45b.d(52): Error: declaration expected, not `assert`\\n/tmp/tmp0j3fq45b.d(53):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp0j3fq45b.d(54): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp0j3fq45b.d(55): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp0j3fq45b.d(56): Error: declaration expected, not `assert`\\\
    n/tmp/tmp0j3fq45b.d(57): Error: declaration expected, not `assert`\\n/tmp/tmp0j3fq45b.d(58):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp0j3fq45b.d(59): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0j3fq45b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy5q02g90.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy5q02g90.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkv6asuqo.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkv6asuqo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7z2i1tc.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7z2i1tc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpldogumuw.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldogumuw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp17qazec6.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17qazec6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpby8x1cyt.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpby8x1cyt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr3sabi7p.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3sabi7p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6v6y8pf9.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6v6y8pf9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb6j2e2jf.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6j2e2jf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa19n3sih.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa19n3sih.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8fd74cv2.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fd74cv2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk34_hft0.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk34_hft0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpno8okwkh.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpno8okwkh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9h2webgt.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9h2webgt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\
    \ return true;\n    \n    foreach (string key in dict) \n    {\n        if (!(islower(key)\
    \ || isupper(key))) return false;\n    }\n    \n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7olbx2fp.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7olbx2fp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp95laqog2.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95laqog2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qfw1jv1.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qfw1jv1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpen8q2i2c.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpen8q2i2c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!isLower(key) || !isUpper(key)) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkmc06c46.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkmc06c46.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a |>\n<| a tags=c++,dictionary |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <map>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6w1po9f6.d(18): Error: found `in` when expecting `;`\\n/tmp/tmp6w1po9f6.d(27):\
    \ Error: declaration expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6w1po9f6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!isLower(key)) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqx0iog8z.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqx0iog8z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplf0vojeu.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplf0vojeu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3_694ty.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3_694ty.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) {\n        bool isUpper = isupper(key);\n        bool isLower = islower(key);\n\
    \        if(!isUpper && !isLower) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,dictionary\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <map>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk0lcha29.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpk0lcha29.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpk0lcha29.d(25):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpk0lcha29.d(27): Error: declaration\
    \ expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0lcha29.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!is_string(key)) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1of88uu.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1of88uu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpedex_wgz.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpedex_wgz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9cipje20.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9cipje20.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(k,\
    \ v) \n    {\n        bool isStringInLowerCase = \n            isLowercase(to!string(k))\
    \ || \n            isLowercase(to!string(k));\n        bool isStringInUpperCase\
    \ = \n            isUppercase(to!string(k)) || \n            isUppercase(to!string(k));\n\
    \        if(isStringInLowerCase && isStringInUpperCase)\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d,string,case-insensitive,dictionary\
    \ |>\n<| c |>\nThis doesn't work. `isLowercase` returns true for non-ASCII characters,\
    \ such as `\xDF`.\n<|/ c |>\n<| c |>\n: Yes, it does. `isLowercase` returns true\
    \ if the character is lower case or upper case (depending on whether it's in the\
    \ ASCII range). `\xDF` is lower case and upper case in ASCII.\n<|/ c |>\n<| c\
    \ |>\n: It doesn't work if you pass it a non-ASCII character. `isLowercase` returns\
    \ true for non-ASCII characters, such as `\xDF`.\n<|/ c |>\n<| c |>\n: I didn't\
    \ say it wouldn't work, I said it wouldn't work if you pass it a non-ASCII character.\
    \ `\xDF` is lower case and upper case in ASCII.\n<|/ c |>\n<| c |>\n: I didn't\
    \ say it wouldn't work, I said it wouldn't work if you pass it a non-ASCII character.\
    \ `\xDF` is lower case and upper case in ASCII.\n<|/ c |>\n<| a dscore=3 |>\n\
    I wrote a function that checks if a dictionary is case insensitive or not:\n<code>\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xjui9rk.d(18): Error: no identifier for declarator `v`\\n/tmp/tmp1xjui9rk.d(18):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmp1xjui9rk.d(31): Error: found `return`\
    \ when expecting `)`\\n/tmp/tmp1xjui9rk.d(33): Error: declaration expected, not\
    \ `<`\\n/tmp/tmp1xjui9rk.d(36): Error: unterminated character constant\\n/tmp/tmp1xjui9rk.d(39):\
    \ Error: unterminated character constant\\n/tmp/tmp1xjui9rk.d(42): Error: unterminated\
    \ character constant\\n/tmp/tmp1xjui9rk.d(45): Error: unterminated character constant\\\
    n/tmp/tmp1xjui9rk.d(45): Error: unterminated character constant\\n/tmp/tmp1xjui9rk.d(45):\
    \ Error: unterminated character constant\\n/tmp/tmp1xjui9rk.d(48): Error: unterminated\
    \ character constant\\n/tmp/tmp1xjui9rk.d(48): Error: unterminated character constant\\\
    n/tmp/tmp1xjui9rk.d(48): Error: unterminated character constant\\n/tmp/tmp1xjui9rk.d(57):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1xjui9rk.d(58): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1xjui9rk.d(59): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1xjui9rk.d(60): Error: declaration expected, not `assert`\\\
    n/tmp/tmp1xjui9rk.d(61): Error: declaration expected, not `assert`\\n/tmp/tmp1xjui9rk.d(62):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1xjui9rk.d(63): Error: declaration\
    \ expected, not `assert`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp1xjui9rk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\
    \ return true;\n    \n    foreach (string key in dict) \n    {\n        if (!(isLowercase(key)\
    \ || isUppercase(key))) return false;\n    }\n    \n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpej8ie8bu.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpej8ie8bu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpelh3tyzp.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelh3tyzp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeptkje49.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeptkje49.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppe6c9zhc.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmppe6c9zhc.d(18): Error: found `)` when expecting `;`\\n/tmp/tmppe6c9zhc.d(25):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmppe6c9zhc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqmctttl3.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmctttl3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if (!(isLower(key) || isUpper(key))) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi5dt4n6k.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5dt4n6k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprp2vy1oi.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprp2vy1oi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq8ol8x8r.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq8ol8x8r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpokmuzm96.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokmuzm96.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplqxksu6t.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmplqxksu6t.d(18): Error: found `)` when expecting `;`\\n/tmp/tmplqxksu6t.d(25):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmplqxksu6t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx1g1vthi.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1g1vthi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8tuds5nk.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8tuds5nk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsjx0x189.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjx0x189.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        string lowerCase = key.to_lowercase();\n     \
    \   string upperCase = key.to_uppercase();\n        if(lowerCase == key || upperCase\
    \ == key)\n        {\n            return true;\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzwv2zxas.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwv2zxas.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!is_string(key) || !is_string(dict[key])) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a\
    \ |>\n<| a |>\n<code>\nimport std.stdio;\nimport std.string;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorith\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp930g7g96.d(18): Error: found `in` when expecting `;`\\n/tmp/tmp930g7g96.d(25):\
    \ Error: declaration expected, not `<`\\n/tmp/tmp930g7g96.d(107): Error: `;` expected\\\
    n/tmp/tmp930g7g96.d(108): Error: declaration expected, not `{`\\n/tmp/tmp930g7g96.d(111):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp930g7g96.d(112): Error:\
    \ declaration expected, not `assert`\\n/tmp/tmp930g7g96.d(113): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp930g7g96.d(114): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp930g7g96.d(115): Error: declaration expected, not `assert`\\\
    n/tmp/tmp930g7g96.d(116): Error: declaration expected, not `assert`\\n/tmp/tmp930g7g96.d(117):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp930g7g96.d(118): Error:\
    \ unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp930g7g96.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5k3ribmz.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5k3ribmz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjpgf8_t.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjpgf8_t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkovdz5qn.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkovdz5qn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        string lowerKey = key.to_lower();\n        string upperKey\
    \ = key.to_upper();\n        if (lowerKey == upperKey) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu4tzv2xh.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4tzv2xh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8a2jx_qa.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8a2jx_qa.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphy6_xb92.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy6_xb92.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3v3k1ygc.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v3k1ygc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkgeaz48e.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgeaz48e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp14e3dx82.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp14e3dx82.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3xdr7jn2.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xdr7jn2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxsdsyhif.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxsdsyhif.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqz9unj1e.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqz9unj1e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp11t01ccu.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11t01ccu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\
    \ return true;\n    \n    foreach (string key in dict.keys) {\n        if (!(isLowercase(key)\
    \ || isUppercase(key))) return false;\n    }\n    \n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5cubxk6j.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cubxk6j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdsg13r5j.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdsg13r5j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpptrj4gd6.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpptrj4gd6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\
    \ return true;\n    \n    foreach (string key in dict.keys) \n    {\n        if\
    \ (!(isLowercase(key) || isUppercase(key))) return false;\n    }\n    \n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_0hmlald.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0hmlald.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzy9bqj7x.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzy9bqj7x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) {\n        if(!isLower(key) || !isUpper(key)) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfjlau0f_.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpfjlau0f_.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpfjlau0f_.d(23):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpfjlau0f_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp54zkvg0c.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54zkvg0c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp673kzzn4.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp673kzzn4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjeyyclb0.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjeyyclb0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj2gpa_k1.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpj2gpa_k1.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpj2gpa_k1.d(25):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpj2gpa_k1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!isLower(key) || !isUpper(key)) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_apqhw14.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmp_apqhw14.d(18): Error: found `)` when expecting `;`\\n/tmp/tmp_apqhw14.d(25):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp_apqhw14.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        string lowerCase = key.to_lowercase();\n     \
    \   string upperCase = key.to_uppercase();\n        if(lowerCase == upperCase)\n\
    \        {\n            return true;\n        }\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb80sw2o0.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb80sw2o0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n \
    \           return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjcso_0hx.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpjcso_0hx.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpjcso_0hx.d(23):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpjcso_0hx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) {\n        if(!key.to_lowercase().equals(key)) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=dictionary,c++,string\
    \ |>\n<| c |>\nI like this solution, however it only checks whether the dictionary\
    \ is empty. How would you extend it to check whether the dictionary contains any\
    \ keys?\n<|/ c |>\n<| c |>\nI added a version that checks for empty dictionaries.\n\
    <|/ c |>\n<| c |>\nI like your solution, however it only checks whether the dictionary\
    \ is empty. How would you extend it to check whether the dictionary contains any\
    \ keys?\n<|/ c |>\n<| c |>\nI added a version that checks for empty dictionaries.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <map>\n#include <algorithm>\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_2a6rm7.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpq_2a6rm7.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpq_2a6rm7.d(23):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpq_2a6rm7.d(25): Error: declaration\
    \ expected, not `<`\\n/tmp/tmpq_2a6rm7.d(49): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmpq_2a6rm7.d(50): Error: declaration expected, not `assert`\\\
    n/tmp/tmpq_2a6rm7.d(51): Error: declaration expected, not `assert`\\n/tmp/tmpq_2a6rm7.d(52):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpq_2a6rm7.d(53): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpq_2a6rm7.d(54): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpq_2a6rm7.d(55): Error: declaration expected, not `assert`\\\
    n/tmp/tmpq_2a6rm7.d(56): Error: unrecognized declaration\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_2a6rm7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv1l26ed5.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1l26ed5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjhkxwo9b.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjhkxwo9b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=d |>\n<| a dscore=2\
    \ |>\nI wrote a function that checks if a dictionary is case insensitive:\n<code>\n\
    import std.stdio;\nimport std.string;\nimport std.conv;\nimport std.algorithm;\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwl8tsgya.d(18): Error: found `in` when expecting `;`\\n/tmp/tmpwl8tsgya.d(24):\
    \ Error: declaration expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwl8tsgya.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxqx6dhrh.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxqx6dhrh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3cwp7xgm.d(18): Error: no identifier for declarator `v`\\n/tmp/tmp3cwp7xgm.d(18):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmp3cwp7xgm.d(25): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cwp7xgm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp738u6z8x.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp738u6z8x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) {\n        if (!isLowercase(key) || !isUppercase(key)) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpppp3hvz6.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpppp3hvz6.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpppp3hvz6.d(23):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpppp3hvz6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        string value = dict[key];\n        if(!value.empty())\
    \ \n        {\n            if(value.length() == key.length()) \n            {\n\
    \                if(value.toLower() == key.toLower()) \n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjt66uau9.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjt66uau9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=d,string,dictionary |>\n<| c |>\nThis doesn't work if you have a dictionary\
    \ that has keys that are all upper case or all lower case. For example, `{\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}` returns true.\n<|/ c |>\n<| c\
    \ |>\nYes, I forgot about that case. Fixed now.\n<|/ c |>\n<| c |>\nI added a\
    \ version that doesn't require the keys to be in lower or upper case.\n<|/ c |>\n\
    <| a tags=d,string,dictionary |>\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx414c4kz.d(18): Error: found `in` when expecting `;`\\n/tmp/tmpx414c4kz.d(27):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpx414c4kz.d(30): Error: unterminated\
    \ character constant\\n/tmp/tmpx414c4kz.d(36): Error: unterminated character constant\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx414c4kz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) \n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm_3n8qja.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpm_3n8qja.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpm_3n8qja.d(25):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpm_3n8qja.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\
    \ return true;\n    \n    foreach (string key in dict) {\n        if (!(isLowerOrUpper(key)))\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4s4d2kwj.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4s4d2kwj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpye4kw7c7.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpye4kw7c7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpejkyl190.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpejkyl190.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzn4xw468.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn4xw468.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8mcfzdr_.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8mcfzdr_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if(!isLower(key) || !isUpper(key)) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjhwh4xbs.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjhwh4xbs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpudvv27_2.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudvv27_2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        string lowerKey = key.to_lower();\n        string\
    \ upperKey = key.to_upper();\n        if(!dict.contains(lowerKey) || !dict.contains(upperKey))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmen02ac8.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmen02ac8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        string lowerKey = key.to_lowercase();\n        string\
    \ upperKey = key.to_uppercase();\n        if(lowerKey == upperKey) {\n       \
    \     return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdbk_i_c0.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbk_i_c0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ox2pady.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ox2pady.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(k,\
    \ v) in dict \n    {\n        if (!is_string(k) || !is_string(k)) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=d,string,dictionary |>\n<| a dscore=0 |>\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.range;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphexfjrvv.d(18): Error: no identifier for declarator `v`\\n/tmp/tmphexfjrvv.d(18):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmphexfjrvv.d(18): Error: expression\
    \ expected, not `in`\\n/tmp/tmphexfjrvv.d(18): Error: found `dict` when expecting\
    \ `)`\\n/tmp/tmphexfjrvv.d(27): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphexfjrvv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        string lowerKey = key.to_lower();\n        string\
    \ upperKey = key.to_upper();\n        \n        if(!dict.contains(key) || !dict[lowerKey]\
    \ || !dict[upperKey])\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpze79nhc4.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpze79nhc4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6d6miec6.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6d6miec6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key, dict) {\n        if(!isLower(key) || !isUpper(key)) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmbxdkno9.d(18): Error: no identifier for declarator `dict`\\\
    n/tmp/tmpmbxdkno9.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpmbxdkno9.d(23):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpmbxdkno9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict)\n    {\n        string lowerCaseKey = key.to_lowercase();\n   \
    \     string upperCaseKey = key.to_uppercase();\n        \n        if(!lowerCaseKey.empty()\
    \ && !upperCaseKey.empty())\n        {\n            if(lowerCaseKey != upperCaseKey)\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n    \n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz6wt9h34.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz6wt9h34.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string\
    \ key in dict) {\n        if (dict[key] == null) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph4s9rzvx.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4s9rzvx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
