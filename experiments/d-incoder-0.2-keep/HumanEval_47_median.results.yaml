name: HumanEval_47_median
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0)\n        return std.math.mid(l, l / 2);\n    else\n        return\
    \ std.math.mid(l / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp35wkzudg.d(12): Error: undefined identifier `length`\\n/tmp/tmp35wkzudg.d(12):\
    \ Error: variable `l` is shadowing variable `tmp35wkzudg.median.l`\\n/tmp/tmp35wkzudg.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmp35wkzudg.d(16):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp35wkzudg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l == 0)\n        return 0;\n    float m = l[0];\n    float m1 = l[1];\n\
    \    float m2 = l[2];\n    float m3 = l[3];\n    float m4 = l[4];\n    float m5\
    \ = l[5];\n    float m6 = l[6];\n    float m7 = l[7];\n    float m8 = l[8];\n\
    \    float m9 = l[9];\n    float m10 = l[10];\n    float m11 = l[11];\n    float\
    \ m12 = l[12];\n    float m13 = l[13];\n    float m14 = l[14];\n    float m15\
    \ = l[15];\n    float m16 = l[16];\n    float m17 = l[17];\n    float m18 = l[18];\n\
    \    float m19 = l[19];\n    float m20 = l[20];\n    float m21 = l[21];\n    float\
    \ m22 = l[22];\n    float m23 = l[23];\n    float m24 = l[24];\n    float m25\
    \ = l[25];\n    float m26 = l[26];\n    float m27 = l[27];\n    float m28 = l[28];\n\
    \    float m29 = l[29];\n    float m30 = l[30];\n    float m31 = l[31];\n    float\
    \ m32 = l[32];\n    float m33 = l[33];\n    float m34 = l[34];\n    float m35\
    \ = l[35];\n    float m36 = l[36];\n    float m37 = l[37];\n    float m38 = l[38];\n\
    \    float m39 = l[39];\n    float m40 = l[40];\n    float m41 = l[41];\n    float\
    \ m42 = l[42];\n    float m43 = l[43];\n    float m44 = l[44];\n    float m45\
    \ = l[45];\n    float m46 = l[46];\n    float m47 = l[47];\n    float m48 = l[48];\n\
    \    float m49 = l[49];\n    float m50 = l[50];\n    float m51 = l[51];\n    float\
    \ m52 = l[52];\n    float \nunittest\n{\n    alias candidate = median;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_1ab__6c.d(69): Error: no identifier for declarator `float`\\\
    n/tmp/tmp_1ab__6c.d(69): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1ab__6c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l == 0)\n        throw new Exception(\"empty list\");\n    long mid = l\
    \ / 2;\n    long left = 0;\n    long right = mid;\n    float midVal = std.math.median(l);\n\
    \    while (left < right) {\n        long midVal = std.math.median(l);\n     \
    \   if (midVal < mid)\n            right = mid;\n        else\n            left\
    \ = mid;\n        mid = left + (right - left) / 2;\n    }\n    return midVal;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    long l = length(l);\n    if (l == 0)\n     \
    \   throw new Exception(\"empty list\");\n    long mid = l / 2;\n    long left\
    \ = 0;\n    long right = mid;\n    float midVal = std.math.median(l);\n    while\
    \ (left < right) {\n        long midVal = std.math.median(l);\n        if (midVal\
    \ < mid)\n            right = mid;\n        else\n            left = mid;\n  \
    \      mid = left + (right - left) / 2;\n    }\n    return midVal;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n\
    \    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end, int step) \n{\n    long l = length(l);\n    if (l ==\
    \ 0)\n        throw new Exception(\"empty list\");\n    long mid = l / 2;\n  \
    \  long left = 0;\n    long right = mid;\n    float midVal = std.math.median(l);\n\
    \    while (left < right) {\n        long midVal = std.math.median(l);\n     \
    \   if (midVal < mid)\n            right = mid;\n        else\n            left\
    \ = mid;\n        mid = left + (right - left) / 2;\n    }\n    return midVal;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end, int step, float mid) \n{\n    long l = length(l);\n \
    \   if (l == 0)\n        throw new Exception(\"empty list\");\n    long mid =\
    \ l / \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnmi4scr8.d(97): Error: expression expected, not `unittest`\\\
    n/tmp/tmpnmi4scr8.d(98): Error: semicolon expected, not `{`\\n/tmp/tmpnmi4scr8.d(107):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmi4scr8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd392x80x.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpd392x80x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat m = std.math::median(l);\n\
    \treturn m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppmr6ve9i.d(12): Error: semicolon expected, not `:`\\n/tmp/tmppmr6ve9i.d(12):\
    \ Error: found `:` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmppmr6ve9i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    \n    if (leftMedian == rightMedian)\n        return leftMedian;\n    \n\
    \    if (leftMedian > rightMedian)\n        return rightMedian;\n    \n    return\
    \ leftMedian;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwzw58z3v.d(14): Error: function `tmpwzw58z3v.median(long[] l)`\
    \ is not callable using argument types `(long[], long)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzw58z3v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.slice(mid));\n\
    \    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ilk1efm.d(14): Error: no property `slice` for type `long[]`\\\
    n/tmp/tmp3ilk1efm.d(15): Error: undefined identifier `fabs` in package `std`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ilk1efm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long low = 0;\n    long high\
    \ = l.length - 1;\n    float mid;\n    \n    while (low < high) {\n        mid\
    \ = (low + high) / 2;\n        if (l[mid] < l[low])\n            low = mid + 1;\n\
    \        else if (l[mid] > l[high])\n            high = mid - 1;\n        else\n\
    \            return l[mid];\n    }\n    return l[low];\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5etgm737.d(18): Error: cannot implicitly convert expression `mid`\
    \ of type `float` to `ulong`\\n/tmp/tmp5etgm737.d(19): Error: cannot implicitly\
    \ convert expression `mid + 1.00000F` of type `float` to `long`\\n/tmp/tmp5etgm737.d(20):\
    \ Error: cannot implicitly convert expression `mid` of type `float` to `ulong`\\\
    n/tmp/tmp5etgm737.d(21): Error: cannot implicitly convert expression `mid - 1.00000F`\
    \ of type `float` to `long`\\n/tmp/tmp5etgm737.d(23): Error: cannot implicitly\
    \ convert expression `mid` of type `float` to `ulong`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5etgm737.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpywmdwf1h.d(14): Error: no property `subarray` for type `long[]`\\\
    n/tmp/tmpywmdwf1h.d(15): Error: undefined identifier `fabs` in package `std`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywmdwf1h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n  \
    \  if (len == 0) return 0;\n    float m = l[0];\n    float m2 = l[len - 1];\n\
    \    float m3 = l[len / 2];\n    float m4 = l[len / 3];\n    float m5 = l[len\
    \ / 4];\n    float m6 = l[len / 5];\n    float m7 = l[len / 6];\n    float m8\
    \ = l[len / 7];\n    float m9 = l[len / 8];\n    float m10 = l[len / 9];\n   \
    \ float m11 = l[len / 10];\n    float m12 = l[len / 11];\n    float m13 = l[len\
    \ / 12];\n    float m14 = l[len / 13];\n    float m15 = l[len / 14];\n    float\
    \ m16 = l[len / 15];\n    float m17 = l[len / 16];\n    float m18 = l[len / 17];\n\
    \    float m19 = l[len / 18];\n    float m20 = l[len / 19];\n    float m21 = l[len\
    \ / 20];\n    float m22 = l[len / 21];\n    float m23 = l[len / 22];\n    float\
    \ m24 = l[len / 23];\n    float m25 = l[len / 24];\n    float m26 = l[len / 25];\n\
    \    float m27 = l[len / 26];\n    float m28 = l[len / 27];\n    float m29 = l[len\
    \ / 28];\n    float m30 = l[len / 29];\n    float m31 = l[len / 30];\n    float\
    \ m32 = l[len / 31];\n    float m33 = l[len / 32];\n    float m34 = l[len / 33];\n\
    \    float m35 = l[len / 34];\n    float m36 = l[len / 35];\n    float m37 = l[len\
    \ / 36];\n    float m38 = l[len / 37];\n    float m39 = l[len / 38];\n    float\
    \ m40 = l[len / 39];\n    float m41 = l[len / 40];\n    float m42 = l[len / 41];\n\
    \    float m43 = l[len / 42];\n\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmu8jlgom.d(58): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmu8jlgom.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxux7mn5p.d(14): Error: no property `subarray` for type `long[]`\\\
    n/tmp/tmpxux7mn5p.d(15): Error: undefined identifier `fabs` in package `std`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxux7mn5p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return l[0];\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[])\
    \ \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n  \
    \      if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ double m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n        if\
    \ (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] <\
    \ m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6,\
    \ 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\
    \ m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    double m = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m) m = l[i];\n\
    \    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2nmztdjp.d(29): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp2nmztdjp.d(46): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp2nmztdjp.d(63): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp2nmztdjp.d(80):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmp2nmztdjp.d(97):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmp2nmztdjp.d(106):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2nmztdjp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = 0.0;\n\tlong n\
    \ = l.length;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tmed = (med + l[i]) / 2.0;\n\
    \t}\n\treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpydu9a537.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42822d]\\n??:? void tmpydu9a537.__unittest_L20_C1()\
    \ [0x427e07]\\n??:? void tmpydu9a537.__modtest() [0x427fb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b142]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430784]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430261]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b119]\\n??:? runModuleUnitTests [0x42c085]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428677]\\n??:? _d_run_main [0x4285e2]\\n??:? main [0x427fc3]\\\
    n??:? __libc_start_main [0x604ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float med = 0.0;\n    int\
    \ n = l.length;\n    for(int i = 0; i < n; i++)\n    {\n        med = (med + l[i])\
    \ / 2.0;\n    }\n    return med;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg78p0bx2.d(13): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpg78p0bx2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fabs(leftMedian - rightMedian);\n}\n</code>\n<|/ a tags=median,c++,algorithm,sorting\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `median([-10, 4, 6, 1000,\
    \ 10, 20])` returns `15.0` instead of `10.0`.\n<|/ c |>\n<| c |>\nThe median of\
    \ a set of numbers is defined as the middle number in the set. `median([-10, 4,\
    \ 6, 1000, 10, 20])` returns `15.0` because `10` is the middle number in the set\
    \ `[-10, 4, 6, 1000, 10, 20]`.\n<|/ c |>\n<| c |>\nThe median of a set of numbers\
    \ is defined as the middle number in the set. `median([-10, 4, 6, 1000, 10, 20])`\
    \ returns `15.0` because `10` is the middle number in the set `[-10, 4, 6, 1000,\
    \ 10, 20]`.\n<|/ c |>\n<| c |>\nThe median of a set of numbers is defined as the\
    \ middle number in the set. `median([-10, 4, 6, 1000, 10, 20])` returns `15.0`\
    \ because `10` is the middle number in the set `[-10, 4, 6, 1000, 10, 20]`.\n\
    <|/ c |>\n<| c |>\nThe median of a set of numbers is defined as the middle number\
    \ in the set. `median([-10, 4, 6, 1000, 10, 20])` returns `15.0` because `10`\
    \ is the middle number in the set `[-10, 4, 6, 1000, 10, 20]`.\n<|/ c |>\n<| a\
    \ dscore=5 |>\nThe median of a set of numbers is defined as the middle number\
    \ in the set. median([-10, 4, 6, 1000, 10, 20]) returns 15.0 because 10 is the\
    \ middle number in the set [-10, 4, 6, 1000, 10, 20]. \u2013 James McCaffrey\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpegxjd3uw.d(17): Error: declaration expected, not `<`\\n/tmp/tmpegxjd3uw.d(20):\
    \ Error: unterminated character constant\\n/tmp/tmpegxjd3uw.d(35): Error: character\
    \ 0x2013 is not a valid token\\n/tmp/tmpegxjd3uw.d(40): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpegxjd3uw.d(41): Error: declaration expected, not `assert`\\\
    n/tmp/tmpegxjd3uw.d(42): Error: declaration expected, not `assert`\\n/tmp/tmpegxjd3uw.d(43):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpegxjd3uw.d(44): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpegxjd3uw.d(45): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpegxjd3uw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = 0.0;\n    float\
    \ n = 0.0;\n    float sum = 0.0;\n    float sum2 = 0.0;\n    int count = 0;\n\
    \    \n    for (int i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \        sum2 += l[i] * l[i];\n        count += 1;\n    }\n    \n    if (count\
    \ % 2 == 0) \n    {\n        m = sum / count;\n        n = sum2 / count;\n   \
    \ }\n    else \n    {\n        m = sum / count + sum2 / count / 2;\n        n\
    \ = sum2 / count / 2;\n    }\n    \n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk0ew3obe.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42830d]\\n??:? void tmpk0ew3obe.__unittest_L38_C1()\
    \ [0x427ee7]\\n??:? void tmpk0ew3obe.__modtest() [0x428090]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c38f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b222]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430864]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430341]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1f9]\\n??:? runModuleUnitTests [0x42c165]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428757]\\n??:? _d_run_main [0x4286c2]\\n??:? main [0x4280a3]\\\
    n??:? __libc_start_main [0xeda16554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float median;\n    if (l.length%2 == 0)\n    {\n        median = std.math.mid(l,\
    \ 0, mid);\n    }\n    else\n    {\n        median = std.math.mid(l, mid, l.length);\n\
    \    }\n    return median;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1bkh3x9k.d(16): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmp1bkh3x9k.d(20): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bkh3x9k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\n    {\n\
    \        if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n  \
    \  return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(float l[]) \n{\n    float mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\n    {\n       \
    \ if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2,\
    \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\
    float median(double l[]) \n{\n    double mid = l.length / 2;\n    double m = (double)l[mid];\n\
    \    for(int i = mid; i < l.length; i++)\n    {\n        if(l[i] < m)\n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long l[])\
    \ \n{\n    long mid = l.length / 2;\n    long m = (long)l[mid];\n    for(int i\
    \ = mid; i < l.length; i++)\n    {\n        if(l[i] < m)\n        {\n        \
    \    m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float\
    \ mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i <\
    \ l.length; i++)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9hstabzw.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmp9hstabzw.d(31): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[] l`\\n/tmp/tmp9hstabzw.d(34): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmp9hstabzw.d(52): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `double[] l`\\n/tmp/tmp9hstabzw.d(55): Error: C style cast illegal, use `cast(double)l[mid]`\\\
    n/tmp/tmp9hstabzw.d(73): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] l`\\n/tmp/tmp9hstabzw.d(76): Error: C style cast illegal, use `cast(long)l[mid]`\\\
    n/tmp/tmp9hstabzw.d(94): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[] l`\\n/tmp/tmp9hstabzw.d(97): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmp9hstabzw.d(115): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `double[] l`\\n/tmp/tmp9hstabzw.d(117): Error: found `unittest` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hstabzw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)(l[mid]);\n    for(int i = mid; i < l.length; i++) \n  \
    \  {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n   \
    \ }\n    return m;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer.\
    \ Just a bunch of code. Add some explanation to the answer, please.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post.\n<|/ c |>\n\
    <| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. \u2013  user4709542\n<|/ c |>\n<| c |>\nI\
    \ added some explanation.\n<|/ c |>\n<| a tags=c#,median,algorithm |>\n<code>\n\
    public double Median(List<int> list)\n{\n    double median = 0;\n    double temp\
    \ = 0;\n    int count = 0;\n    foreach (int i in list)\n    {\n        count++;\n\
    \        if (count == 1)\n        {\n            temp = i;\n        }\n      \
    \  else if (count > 1)\n        {\n            if (temp + i == list[0])\n    \
    \        {\n                temp = i;\n            }\n            else\n     \
    \       {\n                temp = temp + i;\n            }\n        }\n    }\n\
    \    median = temp;\n    return median;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,median,algorithm\
    \ |>\n<code>\npublic double Median(List<int> list)\n{\n    double median = 0;\n\
    \    double temp = 0;\n    int count = 0;\n    foreach (int i in list)\n    {\n\
    \        count++;\n        if (count == 1)\n        {\n            temp = i;\n\
    \        }\n        else if (count > 1)\n        {\n            if (temp + i ==\
    \ list[0])\n            {\n                temp = i;\n            }\n        \
    \    else\n            {\n                temp = temp + i;\n            }\n  \
    \      }\n    }\n    median = temp;\n    return median;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkhv_pj3e.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmpkhv_pj3e.d(23): Error: declaration expected, not `<`\\n/tmp/tmpkhv_pj3e.d(35):\
    \ Error: character 0x2013 is not a valid token\\n/tmp/tmpkhv_pj3e.d(47): Error:\
    \ declaration expected, not `foreach`\\n/tmp/tmpkhv_pj3e.d(50): Error: declaration\
    \ expected, not `if`\\n/tmp/tmpkhv_pj3e.d(53): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhv_pj3e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1)\n        return std.math.mid(l, mid);\n    else \n\
    \        return std.math.mid(l, mid + 1, l.length - mid);\n}\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpabbf31f0.d(14): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmpabbf31f0.d(16): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpabbf31f0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l == 0)\n        return 0;\n    float m = l[l / 2];\n    float m2 = l[l\
    \ / 2 - 1];\n    if (m > m2)\n        return m;\n    return m2;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptrd6aail.d(12): Error: undefined identifier `length`\\n/tmp/tmptrd6aail.d(12):\
    \ Error: variable `l` is shadowing variable `tmptrd6aail.median.l`\\n/tmp/tmptrd6aail.d(15):\
    \ Error: only one index allowed to index `long`\\n/tmp/tmptrd6aail.d(16): Error:\
    \ only one index allowed to index `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmptrd6aail.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1) \n    {\n        return std.math.toFloat(l[mid]);\n\
    \    }\n    else \n    {\n        return std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc4joiemw.d(15): Error: undefined identifier `toFloat` in module\
    \ `std.math`\\n/tmp/tmpc4joiemw.d(19): Error: undefined identifier `toFloat` in\
    \ module `std.math`\\n/tmp/tmpc4joiemw.d(19): Error: undefined identifier `toFloat`\
    \ in module `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpc4joiemw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length / 2;\n\t\
    float m = 0;\n\tfor (int i = 0; i < mid; i++)\n\t\tm += l[i];\n\tfor (int i =\
    \ mid; i < l.length; i++)\n\t\tm += l[i];\n\treturn m / mid;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi80mivrr.d(16): Error: cannot implicitly convert expression `mid`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpi80mivrr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(short[] l) \n{\n    short\
    \ n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float[]\
    \ l) \n{\n    float n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(double[] l) \n{\n    double n = l.length;\n    if (n <\
    \ 1) return 0;\n    double m = l[0];\n    for (int i = 1; i < n; ++i) {\n    \
    \    if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(int[] l) \n{\n    int\
    \ n = l.length;\n    if (n < 1) return 0;\n    int m = l[0];\n    for (int i =\
    \ 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(byte[]\
    \ l) \n{\n    byte n = l.length;\n    if (n < 1) return 0;\n    byte m = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list \nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqdh_svk.d(110): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqdh_svk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaxapvswp.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpaxapvswp.__unittest_L20_C1()\
    \ [0x427e57]\\n??:? void tmpaxapvswp.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b192]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430325]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b169]\\n??:? runModuleUnitTests [0x42c0d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0x77cf8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n \
    \       if (l[i] < m) \n            m = l[i];\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[])\
    \ \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; i++) \n        if\
    \ (l[i] < m) \n            m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ double m = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i]\
    \ < m) \n            m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ m = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] < m) \n\
    \            m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6,\
    \ 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] < m) \n \
    \           m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6,\
    \ 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    double\
    \ m = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] < m) \n\
    \            m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6,\
    \ 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long m =\
    \ l[0];\n    for (int \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_xpqlau7.d(28): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp_xpqlau7.d(44): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp_xpqlau7.d(60): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp_xpqlau7.d(76):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmp_xpqlau7.d(92):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmp_xpqlau7.d(108):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp_xpqlau7.d(112):\
    \ Error: no identifier for declarator `int`\\n/tmp/tmp_xpqlau7.d(112): Error:\
    \ expression expected, not `unittest`\\n/tmp/tmp_xpqlau7.d(113): Error: found\
    \ `{` when expecting `;` following `for` condition\\n/tmp/tmp_xpqlau7.d(114):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp_xpqlau7.d(114): Error: found\
    \ `candidate` when expecting `)`\\n/tmp/tmp_xpqlau7.d(114): Error: found `=` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xpqlau7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbe3vlw6v.d(14): Error: function `tmpbe3vlw6v.median(long[] l)`\
    \ is not callable using argument types `(long[], long)`\\n/tmp/tmpbe3vlw6v.d(15):\
    \ Error: undefined identifier `fabs` in package `std`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbe3vlw6v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n  \
    \  if (len % 2 == 1) return std.math::median(l);\n    \n    float mid = len /\
    \ 2;\n    float median = std.math::median(l);\n    \n    float left = 0;\n   \
    \ float right = mid;\n    \n    while (left < right) {\n        float mid2 = left\
    \ + right;\n        float mid = std.math::median(l);\n        if (mid > mid2)\
    \ {\n            right = mid2;\n        } else {\n            left = mid2;\n \
    \       }\n    }\n    \n    return median;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgmekgt67.d(13): Error: found `:` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpgmekgt67.d(13): Error: found `:` instead of statement\\\
    n/tmp/tmpgmekgt67.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpgmekgt67.d(16):\
    \ Error: found `:` instead of statement\\n/tmp/tmpgmekgt67.d(23): Error: semicolon\
    \ expected, not `:`\\n/tmp/tmpgmekgt67.d(23): Error: found `:` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmekgt67.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[])\
    \ \n{\n    int n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m) m = l[i];\n   \
    \ }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(double l[]) \n{\n    int n = l.length;\n    if (n < 2)\
    \ return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n   \
    \     if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long double l[]) \n{\n\
    \    int n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m) m = l[i];\n    }\n   \
    \ return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(ulong l[]) \n{\n    int n = l.length;\n    if (n < 2) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n        if\
    \ (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(short l[]) \n{\n    int\
    \ n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; ++i)\n    {\n        if (l[i] < m) \nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptvc_r224.d(29): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmptvc_r224.d(48): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmptvc_r224.d(67): Error: use\
    \ `real` instead of `long double`\\n/tmp/tmptvc_r224.d(67): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `real[] l`\\n/tmp/tmptvc_r224.d(86): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `ulong[] l`\\n/tmp/tmptvc_r224.d(105):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `short[] l`\\n/tmp/tmptvc_r224.d(113):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmptvc_r224.d(123): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvc_r224.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \      if (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float\
    \ m = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] < m) m =\
    \ l[i];\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    double m = l[0];\n    for\
    \ (int i = 1; i < l.length; ++i)\n        if (l[i] < m) m = l[i];\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2,\
    \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    long m = l[0];\n    for (int i = 1; i < l.length;\
    \ ++i)\n        if (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float\
    \ m = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] < m) m =\
    \ l[i];\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    double m = l[0];\n    for\
    \ (int i = 1; i < l.length; ++i)\n        if (l[i] < m) m = l[i];\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2,\
    \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    long m = l[0];\n    for (int i = 1; i < l.length;\
    \ ++\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpab2rtpwm.d(27): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmpab2rtpwm.d(42): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmpab2rtpwm.d(57): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmpab2rtpwm.d(72):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmpab2rtpwm.d(87):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmpab2rtpwm.d(102):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmpab2rtpwm.d(106):\
    \ Error: expression expected, not `unittest`\\n/tmp/tmpab2rtpwm.d(107): Error:\
    \ found `{` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpab2rtpwm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to know how to find the median of a list of numbers, not\
    \ how to sort them.\n<|/ c |>\n<| c |>\nI believe this does answer the question.\
    \ OP wants to know how to find the median of a list of numbers, not how to sort\
    \ them.\n<|/ c |>\n<| c |>\nThe OP wants to know how to find the median of a list\
    \ of numbers, not how to sort them.\n<|/ c |>\n<| c |>\nThe OP wants to know how\
    \ to find the median of a list of numbers, not how to sort them.\n<|/ c |>\n<|\
    \ c |>\nThe OP wants to know how to find the median of a list of numbers, not\
    \ how to sort them.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwd7pbna6.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmpwd7pbna6.d(23): Error: declaration expected, not `<`\\n/tmp/tmpwd7pbna6.d(26):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpwd7pbna6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return l[0];\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2sxy5eo_.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42829d]\\n??:? void tmp2sxy5eo_.__unittest_L20_C1()\
    \ [0x427e77]\\n??:? void tmp2sxy5eo_.__modtest() [0x428020]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c31f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430345]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b189]\\n??:? runModuleUnitTests [0x42c0f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428760]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286e7]\\n??:? _d_run_main [0x428652]\\n??:? main [0x428033]\\\
    n??:? __libc_start_main [0xa1808554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long length = l.length;\n\
    \    if (length < 2)\n        return 0;\n    float median = l[length / 2];\n \
    \   float sum = 0;\n    float count = 0;\n    float temp;\n    for (int i = 0;\
    \ i < length; i++) {\n        temp = l[i];\n        sum += temp;\n        count\
    \ += 1;\n        if (count > 1) {\n            float average = sum / count;\n\
    \            if (temp > median) {\n                median = temp;\n          \
    \  }\n        }\n    }\n    return median;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long\
    \ length = l.length;\n    if (length < 2)\n        return 0;\n    float median\
    \ = l[length / 2];\n    float sum = 0;\n    float count = 0;\n    float temp;\n\
    \    for (int i = 0; i < length; i++) {\n        temp = l[i];\n        sum +=\
    \ temp;\n        count += 1;\n        if (count > 1) {\n            float average\
    \ = sum / count;\n            if (temp > median) {\n                median = temp;\n\
    \            }\n        }\n    }\n    return median;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ long length = l.length;\n    if (length < 2)\n        return 0;\n    float median\
    \ = l[length / 2];\n    float sum = 0;\n    float count = 0;\n    float temp;\n\
    \    for (int i = 0; i < length; i++) {\n        temp = l[i];\n        sum +=\
    \ temp;\n        count += 1;\n        if (count > 1) {\n            float average\
    \ = sum / count;\n            if (temp > median) {\n                median = temp;\n\
    \            }\n        }\n    }\n    return median;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ length = l.length;\n    if (length < 2)\n        return 0;\n    float median\
    \ = l[length / 2];\n    float sum = 0;\n    float count = 0;\n    float temp;\n\
    \    for (int i = 0; i < length; i++) {\n        temp = l[i];\n        sum +=\
    \ temp;\n        count += 1;\n        if (count > 1) {\n            float average\
    \ = sum / count;\n            if (temp > median) {\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp535a1ger.d(40): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp535a1ger.d(70): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp535a1ger.d(100): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp535a1ger.d(116):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmp535a1ger.d(126): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp535a1ger.d(126):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp535a1ger.d(126): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp535a1ger.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float a = l[mid];\n    float b = l[mid+1];\n    return (a+b)/2;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8grr_sdy.d(22): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428235]\\n??:? void tmp8grr_sdy.__unittest_L17_C1()\
    \ [0x427e85]\\n??:? void tmp8grr_sdy.__modtest() [0x427fb4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b14a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302dd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43078c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430269]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b121]\\n??:? runModuleUnitTests [0x42c08d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867f]\\n??:? _d_run_main [0x4285ea]\\n??:? main [0x427fc7]\\\
    n??:? __libc_start_main [0xc854e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float median;\n    if (l.length%2 == 0) \n    {\n        median = std.math.mid(l,\
    \ 0, mid);\n    }\n    else \n    {\n        median = std.math.mid(l, mid, l.length);\n\
    \    }\n    return median;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw1r78y79.d(16): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmpw1r78y79.d(20): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1r78y79.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5z4_y0n9.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmp5z4_y0n9.__unittest_L21_C1()\
    \ [0x427e67]\\n??:? void tmp5z4_y0n9.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c30f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b179]\\n??:? runModuleUnitTests [0x42c0e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428750]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d7]\\n??:? _d_run_main [0x428642]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0x54e15554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7_jtn9j.d(14): Error: function `tmpr7_jtn9j.median(long[] l)`\
    \ is not callable using argument types `(long[], long)`\\n/tmp/tmpr7_jtn9j.d(15):\
    \ Error: undefined identifier `fabs` in package `std`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpr7_jtn9j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n    float\
    \ n = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < m)\n\
    \        {\n            m = l[i];\n        }\n        if(l[i] > n)\n        {\n\
    \            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n\
    \    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n        if(l[i] > n)\n        {\n            n = l[i];\n        }\n    }\n\
    \    return (n + m) / 2;\n}\n/*\nReturn median of elements in the list l.\n  \
    \  >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    float m = l[0];\n    float\
    \ n = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < m)\n\
    \        {\n            m = l[i];\n        }\n        if(l[i] > n)\n        {\n\
    \            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n\
    \    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n        if(l[i] > n)\n        {\n            n = l[i];\n        }\n    }\n\
    \    return (n + m) / 2;\n}\n/*\nReturn median of elements in the list l.\n  \
    \  >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m = l[0];\n    float\
    \ n = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < m)\n\
    \        {\n            m = l[i];\n        }\n        if(l[i] > n)\n        {\n\
    \            n = l[i];\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9cfo6sba.d(35): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp9cfo6sba.d(60): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp9cfo6sba.d(85): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp9cfo6sba.d(110):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmp9cfo6sba.d(123):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmp9cfo6sba.d(133): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp9cfo6sba.d(133):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9cfo6sba.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float) l[mid];\n    for(int i = mid; i < l.length; i++) \n   \
    \ {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n\
    \    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpheoj85bi.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpheoj85bi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length / 2;\n\t\
    float a = l[mid];\n\tfloat b = l[mid+1];\n\t\n\tif (a == b) return a;\n\t\n\t\
    if (a > b) \n\t{\n\t\tfloat t = a;\n\t\ta = b;\n\t\tb = t;\n\t}\n\t\n\treturn\
    \ (float)(a+b)/2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpadn1jh4y.d(25): Error: C style cast illegal, use `cast(float)(a\
    \ + b)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadn1jh4y.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n \
    \   {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppk8wgouu.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppk8wgouu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) \n        return 0;\n    float m = l[0];\n    for (int i = 1; i < n;\
    \ i++) \n        if (l[i] < m) \n            m = l[i];\n    return m;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n  \
    \  3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) \n        return 0;\n    float\
    \ m = l[0];\n    for (int i = 1; i < n; i++) \n        if (l[i] < m) \n      \
    \      m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    int n = l.length;\n\
    \    if (n < 1) \n        return 0;\n    float m = l[0];\n    for (int i = 1;\
    \ i < n; i++) \n        if (l[i] < m) \n            m = l[i];\n    return m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) \n        return 0;\n    float\
    \ m = l[0];\n    for (int i = 1; i < n; i++) \n        if (l[i] < m) \n      \
    \      m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n\
    \    if (n < 1) \n        return 0;\n    float m = l[0];\n    for (int i = 1;\
    \ i < n; i++) \n        if (l[i] < m) \n            m = l[i];\n    return m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) \n        return 0;\n    float\
    \ m = l[0];\n    for (int i = 1; i < n; i++) \n        if (l[i] < m) \n      \
    \      m = l[i];\n    return m;\n}\n/*\nReturn \nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5md7o233.d(29): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp5md7o233.d(48): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp5md7o233.d(67): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp5md7o233.d(86):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmp5md7o233.d(105):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmp5md7o233.d(116):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp5md7o233.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \      if (l[i] < m) m = l[i];\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdy4eadmh.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdy4eadmh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfkq4thpo.d(59): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkq4thpo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        float v = l[i];\n        if (v < m) m = v;\n    }\n    return m;\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv3p5ytes.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428265]\\n??:? void tmpv3p5ytes.__unittest_L21_C1()\
    \ [0x427e3f]\\n??:? void tmpv3p5ytes.__modtest() [0x427fe8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b17a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43030d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430299]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b151]\\n??:? runModuleUnitTests [0x42c0bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428728]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286af]\\n??:? _d_run_main [0x42861a]\\n??:? main [0x427ffb]\\\
    n??:? __libc_start_main [0xb2808554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float a = (float)l[mid];\n    float b = (float)l[mid-1];\n    return (a+b)/2;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdan3wdk3.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmpdan3wdk3.d(14): Error: C style cast illegal, use `cast(float)l[mid -\
    \ 1]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdan3wdk3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float sum = 0;\n    float\
    \ n = l.length;\n    float m = l[0];\n    float m2 = l[0];\n    for(int i = 1;\
    \ i < n; i++) {\n        sum += l[i];\n        if(sum > m) m = sum;\n        if(sum\
    \ < m) m2 = sum;\n    }\n    return m2;\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzg6cr6ro.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282e5]\\n??:? void tmpzg6cr6ro.__unittest_L23_C1()\
    \ [0x427ebb]\\n??:? void tmpzg6cr6ro.__modtest() [0x428064]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c367]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1d1]\\n??:? runModuleUnitTests [0x42c13d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42872f]\\n??:? _d_run_main [0x42869a]\\n??:? main [0x428077]\\\
    n??:? __libc_start_main [0xd3805554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong n = l.length;\n\tif (n\
    \ < 2) return 0;\n\tlong mid = n / 2;\n\tfloat m = std.math.median(l);\n\tfloat\
    \ m1 = std.math.median(l.subarray(0,mid));\n\tfloat m2 = std.math.median(l.subarray(mid,n));\n\
    \treturn (m + m1 + m2) / 3;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppxv7fa9g.d(15): Error: undefined identifier `median` in module\
    \ `std.math`\\n/tmp/tmppxv7fa9g.d(16): Error: undefined identifier `median` in\
    \ module `std.math`\\n/tmp/tmppxv7fa9g.d(17): Error: undefined identifier `median`\
    \ in module `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmppxv7fa9g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length / 2;\n\t\
    if (l.length % 2 == 1) \n\t{\n\t\treturn std.math.mid(l, mid);\n\t}\n\telse \n\
    \t{\n\t\treturn std.math.mid(l, mid, l.length);\n\t}\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd6y2qc_n.d(15): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmpd6y2qc_n.d(19): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6y2qc_n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n  \
    \  }\n    else \n    {\n        float m1 = median(l);\n        float m2 = median(l);\n\
    \        return std.math.mid(l, mid, std.math.mid(l, mid + 1, m2));\n    }\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04rtj_6r.d(15): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmp04rtj_6r.d(21): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04rtj_6r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float f = l[mid];\n    for(int i = mid; i > 0; i--)\n    {\n        if(l[i]\
    \ < f)\n        {\n            f = l[i];\n        }\n    }\n    return f;\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5yvrwg06.d(14): Error: cannot implicitly convert expression `mid`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp5yvrwg06.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0)\n        return std.math.mid(l, l / 2);\n    else\n        return\
    \ std.math.mid(l / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp99lur7r4.d(12): Error: undefined identifier `length`\\n/tmp/tmp99lur7r4.d(12):\
    \ Error: variable `l` is shadowing variable `tmp99lur7r4.median.l`\\n/tmp/tmp99lur7r4.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmp99lur7r4.d(16):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp99lur7r4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpameipscv.d(14): Error: function `tmpameipscv.median(long[] l)`\
    \ is not callable using argument types `(long[], long)`\\n/tmp/tmpameipscv.d(15):\
    \ Error: undefined identifier `fabs` in package `std`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpameipscv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l == 0)\n        return 0.0;\n    float m = 0.0;\n    float m1 = 0.0;\n\
    \    float m2 = 0.0;\n    float m3 = 0.0;\n    float m4 = 0.0;\n    float m5 =\
    \ 0.0;\n    float m6 = 0.0;\n    float m7 = 0.0;\n    float m8 = 0.0;\n    float\
    \ m9 = 0.0;\n    float m10 = 0.0;\n    float m11 = 0.0;\n    float m12 = 0.0;\n\
    \    float m13 = 0.0;\n    float m14 = 0.0;\n    float m15 = 0.0;\n    float m16\
    \ = 0.0;\n    float m17 = 0.0;\n    float m18 = 0.0;\n    float m19 = 0.0;\n \
    \   float m20 = 0.0;\n    float m21 = 0.0;\n    float m22 = 0.0;\n    float m23\
    \ = 0.0;\n    float m24 = 0.0;\n    float m25 = 0.0;\n    float m26 = 0.0;\n \
    \   float m27 = 0.0;\n    float m28 = 0.0;\n    float m29 = 0.0;\n    float m30\
    \ = 0.0;\n    float m31 = 0.0;\n    float m32 = 0.0;\n    float m33 = 0.0;\n \
    \   float m34 = 0.0;\n    float m35 = 0.0;\n    float m36 = 0.0;\n    float m37\
    \ = 0.0;\n    float m38 = 0.0;\n    float m39 = 0.0;\n    float m40 = 0.0;\n \
    \   float m41 = 0.0;\n    float m42 = 0.0;\n    float m43 = 0.0;\n    float m44\
    \ = 0.0;\n    float m45 = 0.0;\n    float m46 = 0.0;\n    float m47 = 0.0;\n \
    \   float m48 = 0.0;\n    float m49 = 0.0;\n    float m50 = 0.0;\n    float m51\
    \ = 0.0;\n    float m52 = 0.0;\n    float m53 = 0.0;\n    float m54 = 0.0;\n \
    \   float m55 = 0.0;\n    float m56 = 0.0;\n    float m57 = 0.0;\n    float m58\
    \ = 0.0;\n    float m59 = 0.0;\n    float m60 = 0.0;\n    float m61 = 0.0;\n \
    \   float m62 = 0.0;\n    float m63 = 0.0;\n    float m64 = 0.0;\n    float m65\
    \ = 0.0;\n    float m66 = 0.0;\n    float m67 = 0.0;\n    float m68 = 0.0;\n \
    \   float \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59fx_nws.d(85): Error: no identifier for declarator `float`\\\
    n/tmp/tmp59fx_nws.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59fx_nws.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 1) return std.math.mid(l, l / 2);\n    else return std.math.mid(l\
    \ / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfjkql85p.d(12): Error: undefined identifier `length`\\n/tmp/tmpfjkql85p.d(12):\
    \ Error: variable `l` is shadowing variable `tmpfjkql85p.median.l`\\n/tmp/tmpfjkql85p.d(13):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmpfjkql85p.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjkql85p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n  \
    \  if (len == 0) return 0;\n    float mid = len / 2;\n    float sum = 0;\n   \
    \ float count = 0;\n    float median;\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        sum += l[i];\n        count++;\n    }\n    \n    if (count % 2\
    \ == 0)\n    {\n        median = sum / 2;\n    }\n    else\n    {\n        median\
    \ = (sum + l[mid]) / 2;\n    }\n    \n    return median;\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6d2aorsx.d(31): Error: cannot implicitly convert expression `mid`\
    \ of type `float` to `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6d2aorsx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length / 2;\n\t\
    if (l.length == 0) return 0;\n\tif (l.length == 1) return l[0];\n\tif (l[mid]\
    \ < l[mid-1]) return l[mid];\n\treturn l[mid-1];\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn6jzhyn0.d(22): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282bd]\\n??:? void tmpn6jzhyn0.__unittest_L18_C1()\
    \ [0x427e93]\\n??:? void tmpn6jzhyn0.__modtest() [0x42803c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c33f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430365]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1a9]\\n??:? runModuleUnitTests [0x42c115]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428707]\\n??:? _d_run_main [0x428672]\\n??:? main [0x42804f]\\\
    n??:? __libc_start_main [0xd50b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n    float\
    \ n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n \
    \   float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n\
    \    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m =\
    \ l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float\
    \ m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n \
    \   float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n\
    \    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n =\
    \ l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float\
    \ n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n \
    \   float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n\
    \    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m =\
    \ l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float\
    \ m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n \
    \   float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n\
    \    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n =\
    \ l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float\
    \ n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n \
    \   float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n\
    \    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m =\
    \ l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float\
    \ m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n \
    \   float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n\
    \    float m = l[0];\n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpra_oyp7f.d(98): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpra_oyp7f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l == 0)\n        return 0;\n    float m = l[0];\n    for (int i = 1; i <\
    \ l; i++)\n    {\n        if (l[i] < m)\n            m = l[i];\n    }\n    return\
    \ m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2g5yfqq6.d(12): Error: undefined identifier `length`\\n/tmp/tmp2g5yfqq6.d(12):\
    \ Error: variable `l` is shadowing variable `tmp2g5yfqq6.median.l`\\n/tmp/tmp2g5yfqq6.d(15):\
    \ Error: only one index allowed to index `long`\\n/tmp/tmp2g5yfqq6.d(18): Error:\
    \ only one index allowed to index `long`\\n/tmp/tmp2g5yfqq6.d(19): Error: only\
    \ one index allowed to index `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2g5yfqq6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = 0;\n    \n    for(int i = 0; i < mid; i++)\n    {\n        if(l[i]\
    \ > m)\n            m = l[i];\n    }\n    \n    for(int i = mid; i < l.length;\
    \ i++)\n    {\n        if(l[i] > m)\n            m = l[i];\n    }\n    \n    return\
    \ m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmparehl8k0.d(21): Error: cannot implicitly convert expression `mid`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmparehl8k0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    float m2 = l[n - 1];\n    for (int\
    \ i = 1; i < n; i++) {\n        float x = l[i];\n        if (x < m) m = x;\n \
    \       if (x > m2) m2 = x;\n    }\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpasoqabvn.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ad]\\n??:? void tmpasoqabvn.__unittest_L23_C1()\
    \ [0x427e83]\\n??:? void tmpasoqabvn.__modtest() [0x42802c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c32f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1c2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430355]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430804]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302e1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b199]\\n??:? runModuleUnitTests [0x42c105]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428770]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286f7]\\n??:? _d_run_main [0x428662]\\n??:? main [0x42803f]\\\
    n??:? __libc_start_main [0xc7bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n \
    \   {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50ciqtnx.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp50ciqtnx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    float median = leftMedian + rightMedian / 2;\n    return median;\n}\n</code>\n\
    <|/ a tags=c++,median |>\n<| c |>\nThis is not an answer to the question. Also\
    \ the code is not complete.\n<|/ c |>\n<| c |>\nThis code is not complete. How\
    \ can we know what is the median of what ? We don't know what is the median of\
    \ what ? The median of what ? The median of what ? The median of what ? The median\
    \ of what ? The median of what ? The median of what ? The median of what ? The\
    \ median of what ? The median of what ? The median of what ? The median of what\
    \ ? The median of what ? The median of what ? The median of what ? The median\
    \ of what ? The median of what ? The median of what ? The median of what ? The\
    \ median of what ? The median of what ? The median of what ? The median of what\
    \ ? The median of what ? The median of what ? The median of what ? The median\
    \ of what ? The median of what ? The median of what ? The median of what ? The\
    \ median of what ? The median of what ? The median of what ? The median of what\
    \ ? The median of what ? The median of what ? The median of what ? The median\
    \ of what ? The median of what ? The median of what ? The median of what ? The\
    \ median of what ? The median of what ? The median of what ? The median of what\
    \ ? The median of what ? The median of what ? The median of what ? The median\
    \ of what ? The median of what ? The median of what ? The median of what ? The\
    \ median of what ? The median of what ? The median of what ? The median of what\
    \ ? The median of what ? The median of what ? The median of what ? The median\
    \ of what ? The median of what ? The median of what ? The median of what ? The\
    \ median of what ? The median of what ? The median of what ? The median of what\
    \ ? The median of what ? The median of what ? The median of what ? The median\
    \ of what ? The median of what ? The median of what ? The median of what ? The\
    \ median of what ? The median of what ? The median of what ? The median of what\
    \ ? The median of what ? The median of what \nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7s2weuv.d(18): Error: declaration expected, not `<`\\n/tmp/tmpo7s2weuv.d(24):\
    \ Error: unterminated character constant\\n/tmp/tmpo7s2weuv.d(29): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpo7s2weuv.d(30): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpo7s2weuv.d(31): Error: declaration expected, not `assert`\\\
    n/tmp/tmpo7s2weuv.d(32): Error: declaration expected, not `assert`\\n/tmp/tmpo7s2weuv.d(33):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpo7s2weuv.d(34): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7s2weuv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ float median;\n    \n    if (l % 2 == 0)\n    {\n        median = (l+1)/2;\n\
    \    }\n    else\n    {\n        median = (l)/2;\n    }\n    \n    return median;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double[]\
    \ l) \n{\n    double l = length(l);\n    float median;\n    \n    if (l % 2 ==\
    \ 0)\n    {\n        median = (l+1)/2;\n    }\n    else\n    {\n        median\
    \ = (l)/2;\n    }\n    \n    return median;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float[] l) \n{\n    float\
    \ l = length(l);\n    float median;\n    \n    if (l % 2 == 0)\n    {\n      \
    \  median = (l+1)/2;\n    }\n    else\n    {\n        median = (l)/2;\n    }\n\
    \    \n    return median;\n}\n/*\nReturn median of elements in the list l.\n \
    \   >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(short[] l) \n{\n    short l = length(l);\n \
    \   float median;\n    \n    if (l % 2 == 0)\n    {\n        median = (l+1)/2;\n\
    \    }\n    else\n    {\n        median = (l)/2;\n    }\n    \n    return median;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(int[]\
    \ l) \n{\n    int l = length(l);\n    float median;\n    \n    if (l % 2 == 0)\n\
    \    {\n        median = (l+1)/2;\n    }\n    else\n    {\n        median = (l)/2;\n\
    \    }\n    \n    return median;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfcwq8m6b.d(133): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcwq8m6b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long low = 0;\n    long high\
    \ = l.length - 1;\n    float mid;\n    \n    while (low < high) {\n        mid\
    \ = (low + high) / 2;\n        if (l[mid] < l[low])\n            low = mid;\n\
    \        else\n            high = mid;\n    }\n    \n    return l[low];\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnmequ_fj.d(18): Error: cannot implicitly convert expression `mid`\
    \ of type `float` to `ulong`\\n/tmp/tmpnmequ_fj.d(19): Error: cannot implicitly\
    \ convert expression `mid` of type `float` to `long`\\n/tmp/tmpnmequ_fj.d(21):\
    \ Error: cannot implicitly convert expression `mid` of type `float` to `long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmequ_fj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgsa71au5.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgsa71au5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float f = l[mid];\n    for(int i = 1; i < l.length; i++){\n        if(l[i]\
    \ < f){\n            f = l[i];\n        }\n    }\n    return f;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n\
    \    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(short[]\
    \ l) \n{\n    short mid = l.length / 2;\n    float f = l[mid];\n    for(int i\
    \ = 1; i < l.length; i++){\n        if(l[i] < f){\n            f = l[i];\n   \
    \     }\n    }\n    return f;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10,\
    \ 20])\n    15.0\n    \n*/\nfloat median(float[] l) \n{\n    float mid = l.length\
    \ / 2;\n    float f = l[mid];\n    for(int i = 1; i < l.length; i++){\n      \
    \  if(l[i] < f){\n            f = l[i];\n        }\n    }\n    return f;\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double[]\
    \ l) \n{\n    double mid = l.length / 2;\n    double f = l[mid];\n    for(int\
    \ i = 1; i < l.length; i++){\n        if(l[i] < f){\n            f = l[i];\n \
    \       }\n    }\n    return f;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    15.0\n    \n*/\nfloat median(byte[] l) \n{\n    byte mid = l.length\
    \ / 2;\n    byte f = l[mid];\n    for(int i = 1; i < l.length; i++){\n       \
    \ if(l[i] < f){\n            f = l[i];\n        }\n    }\n    return f;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n  \
    \  3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(char[]\
    \ l) \n{\n    char mid = l.length / 2;\n    char f = l[mid];\n    for(int i =\
    \ 1; i < l.\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp40mov0a0.d(110): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmp40mov0a0.d(111): Error: found `{` when expecting `;` following\
    \ `for` condition\\n/tmp/tmp40mov0a0.d(112): Error: expression expected, not `alias`\\\
    n/tmp/tmp40mov0a0.d(112): Error: found `candidate` when expecting `)`\\n/tmp/tmp40mov0a0.d(112):\
    \ Error: found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp40mov0a0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid-2];\n   \
    \ float d = l[mid-3];\n    float e = l[mid-4];\n    float f = l[mid-5];\n    float\
    \ g = l[mid-6];\n    float h = l[mid-7];\n    float i = l[mid-8];\n    float j\
    \ = l[mid-9];\n    float k = l[mid-10];\n    float l = l[mid-11];\n    float m\
    \ = l[mid-12];\n    float n = l[mid-13];\n    float o = l[mid-14];\n    float\
    \ p = l[mid-15];\n    float q = l[mid-16];\n    float r = l[mid-17];\n    float\
    \ s = l[mid-18];\n    float t = l[mid-19];\n    float u = l[mid-20];\n    float\
    \ v = l[mid-21];\n    float w = l[mid-22];\n    float x = l[mid-23];\n    float\
    \ y = l[mid-24];\n    float z = l[mid-25];\n    float a = l[mid-26];\n    float\
    \ b = l[mid-27];\n    float c = l[mid-28];\n    float d = l[mid-29];\n    float\
    \ e = l[mid-30];\n    float f = l[mid-31];\n    float g = l[mid-32];\n    float\
    \ h = l[mid-33];\n    float i = l[mid-34];\n    float j = l[mid-35];\n    float\
    \ k = l[mid-36];\n    float l = l[mid-37];\n    float m = l[mid-38];\n    float\
    \ n = l[mid-39];\n    float o = l[mid-40];\n    float p = l[mid-41];\n    float\
    \ q = l[mid-42];\n    float r = l[mid-43];\n    float s = l[mid-44];\n    float\
    \ t = l[mid-45];\n    float u = l[mid-46];\n    float v = l[mid-47];\n    float\
    \ w = l[mid-48];\n    float x = l[mid-49];\n    float y = l[mid-50];\n    float\
    \ z = l[mid-51];\n    float a = l[mid-\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn9_kzgj2.d(66): Error: expression expected, not `unittest`\\\
    n/tmp/tmpn9_kzgj2.d(67): Error: found `{` when expecting `,`\\n/tmp/tmpn9_kzgj2.d(68):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpn9_kzgj2.d(68): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpn9_kzgj2.d(68): Error: expression expected,\
    \ not `=`\\n/tmp/tmpn9_kzgj2.d(68): Error: found `median` when expecting `,`\\\
    n/tmp/tmpn9_kzgj2.d(68): Error: expression expected, not `;`\\n/tmp/tmpn9_kzgj2.d(70):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpn9_kzgj2.d(70): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpn9_kzgj2.d(71): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpn9_kzgj2.d(72): Error: found `;` when expecting `,`\\n/tmp/tmpn9_kzgj2.d(73):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmpn9_kzgj2.d(74): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmpn9_kzgj2.d(75): Error: expression expected, not\
    \ `}`\\n/tmp/tmpn9_kzgj2.d(76): Error: found `void` when expecting `,`\\n/tmp/tmpn9_kzgj2.d(76):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpn9_kzgj2.d(76): Error: expression\
    \ expected, not `}`\\n/tmp/tmpn9_kzgj2.d(76): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmpn9_kzgj2.d(76): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmpn9_kzgj2.d(76): Error: semicolon expected, not `End of File`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn9_kzgj2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz2wlorpc.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmpz2wlorpc.__unittest_L21_C1()\
    \ [0x427e67]\\n??:? void tmpz2wlorpc.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c30f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b179]\\n??:? runModuleUnitTests [0x42c0e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428750]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d7]\\n??:? _d_run_main [0x428642]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0x239f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \      if (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int\
    \ n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n\
    \    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2,\
    \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    int n = l.length;\n    if (n < 2) return 0;\n\
    \    float m = l[0];\n    for (int i = 1; i < n; ++i)\n        if (l[i] < m) m\
    \ = l[i];\n    return m;\n}\n/*\nReturn median of elements in the list l.\n  \
    \  >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \      if (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ int n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for (int\
    \ i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return m;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3, 1, 2, \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgm1v_mjq.d(27): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmpgm1v_mjq.d(44): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmpgm1v_mjq.d(61): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmpgm1v_mjq.d(78):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmpgm1v_mjq.d(95):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmpgm1v_mjq.d(104):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgm1v_mjq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm7_hk42j.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmpm7_hk42j.__unittest_L21_C1()\
    \ [0x427e67]\\n??:? void tmpm7_hk42j.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c30f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b179]\\n??:? runModuleUnitTests [0x42c0e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428750]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d7]\\n??:? _d_run_main [0x428642]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0x894c6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n   \
    \ }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi2n40og9.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmpi2n40og9.__unittest_L24_C1()\
    \ [0x427e67]\\n??:? void tmpi2n40og9.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c30f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b179]\\n??:? runModuleUnitTests [0x42c0e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428750]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d7]\\n??:? _d_run_main [0x428642]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0x8b6d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = 0;\n    float sum = 0;\n    float average = 0;\n    for(int i =\
    \ 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    average = sum\
    \ / l.length;\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] >\
    \ average)\n        {\n            m = l[i];\n        }\n    }\n    return m;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf9g5jkc8.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282fd]\\n??:? void tmpf9g5jkc8.__unittest_L30_C1()\
    \ [0x427ed3]\\n??:? void tmpf9g5jkc8.__modtest() [0x42807c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c37f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b212]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430854]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430331]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1e9]\\n??:? runModuleUnitTests [0x42c155]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428747]\\n??:? _d_run_main [0x4286b2]\\n??:? main [0x42808f]\\\
    n??:? __libc_start_main [0x6985b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n   \
    \ float d = (a + b + c) / 3;\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpikykxbq1.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpikykxbq1.__unittest_L19_C1()\
    \ [0x427e47]\\n??:? void tmpikykxbq1.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b182]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430315]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307c4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b159]\\n??:? runModuleUnitTests [0x42c0c5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428730]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286b7]\\n??:? _d_run_main [0x428622]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x76abe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = 0.0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t{\n\t\tmed = std.math::max(med, l[i]);\n\t}\n\t\
    return med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_oe9nbom.d(15): Error: found `:` when expecting `;` following\
    \ statement\\n/tmp/tmp_oe9nbom.d(15): Error: found `:` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_oe9nbom.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    \n    if (leftMedian > rightMedian)\n        return leftMedian;\n    else\n\
    \        return rightMedian;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5j_wasc_.d(14): Error: function `tmp5j_wasc_.median(long[] l)`\
    \ is not callable using argument types `(long[], long)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp5j_wasc_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n   \
    \ float d = l[mid+2];\n    float e = l[mid+3];\n    float f = l[mid+4];\n    float\
    \ g = l[mid+5];\n    float h = l[mid+6];\n    float i = l[mid+7];\n    float j\
    \ = l[mid+8];\n    float k = l[mid+9];\n    float l = l[mid+10];\n    float m\
    \ = l[mid+11];\n    float n = l[mid+12];\n    float o = l[mid+13];\n    float\
    \ p = l[mid+14];\n    float q = l[mid+15];\n    float r = l[mid+16];\n    float\
    \ s = l[mid+17];\n    float t = l[mid+18];\n    float u = l[mid+19];\n    float\
    \ v = l[mid+20];\n    float w = l[mid+21];\n    float x = l[mid+22];\n    float\
    \ y = l[mid+23];\n    float z = l[mid+24];\n    float aa = l[mid+25];\n    float\
    \ ab = l[mid+26];\n    float ac = l[mid+27];\n    float ad = l[mid+28];\n    float\
    \ ae = l[mid+29];\n    float af = l[mid+30];\n    float ag = l[mid+31];\n    float\
    \ ah = l[mid+32];\n    float ai = l[mid+33];\n    float aj = l[mid+34];\n    float\
    \ ak = l[mid+35];\n    float al = l[mid+36];\n    float am = l[mid+37];\n    float\
    \ an = l[mid+38];\n    float ao = l[mid+39];\n    float ap = l[mid+40];\n    float\
    \ aq = l[mid+41];\n    float ar = l[mid+42];\n    float as = l[mid+43];\n    float\
    \ at = l[mid+44];\n    float au = l[mid+45];\n    float av = l[mid+46];\n    float\
    \ aw = \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ln54kai.d(62): Error: expression expected, not `unittest`\\\
    n/tmp/tmp5ln54kai.d(63): Error: semicolon expected, not `{`\\n/tmp/tmp5ln54kai.d(72):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ln54kai.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float midVal = l[mid];\n    float leftMedian = median(l, 0, mid);\n    float\
    \ rightMedian = median(l, mid+1, l.length);\n    return midVal + (leftMedian +\
    \ rightMedian)/2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpenvs6mum.d(14): Error: function `tmpenvs6mum.median(long[] l)`\
    \ is not callable using argument types `(long[], int, long)`\\n/tmp/tmpenvs6mum.d(15):\
    \ Error: function `tmpenvs6mum.median(long[] l)` is not callable using argument\
    \ types `(long[], long, ulong)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpenvs6mum.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = l[mid];\n    float n = l[mid+1];\n    \n    for(int i = mid; i\
    \ > 0; i--)\n    {\n        if(l[i] > m)\n        {\n            m = l[i];\n \
    \       }\n        if(l[i] < n)\n        {\n            n = l[i];\n        }\n\
    \    }\n    \n    return m+(n-m)/2;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpylyovk4y.d(16): Error: cannot implicitly convert expression `mid`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpylyovk4y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n  \
    \  if (len == 0)\n        throw new IllegalArgumentException(\"List is empty.\"\
    );\n    long mid = len / 2;\n    if (len % 2 == 0)\n        return std.math.mid(l,\
    \ 0, mid);\n    else\n        return std.math.mid(l, mid, len - 1);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpledydwj4.d(14): Error: undefined identifier `IllegalArgumentException`\\\
    n/tmp/tmpledydwj4.d(17): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmpledydwj4.d(19): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpledydwj4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1pkgdi5p.d(59): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1pkgdi5p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length/2;\n\t\
    float midVal = l[mid];\n\tfloat leftMedian = median(l.subarray(0, mid));\n\tfloat\
    \ rightMedian = median(l.subarray(mid+1, l.length));\n\treturn midVal * (rightMedian\
    \ - leftMedian);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc95pvv68.d(14): Error: no property `subarray` for type `long[]`\\\
    n/tmp/tmpc95pvv68.d(15): Error: no property `subarray` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc95pvv68.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkdez0prt.d(14): Error: no property `subarray` for type `long[]`\\\
    n/tmp/tmpkdez0prt.d(15): Error: undefined identifier `fabs` in package `std`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdez0prt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long length = l.length;\n\
    \    if (length == 0)\n        throw new IllegalArgumentException(\"List is empty\"\
    );\n    float median = l[length / 2];\n    for (int i = 0; i < length / 2; i++)\
    \ {\n        if (l[i] < median)\n            median = l[i];\n    }\n    return\
    \ median;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this solution is\
    \ O(n^2). Not O(n).\n<|/ c |>\n<| c |>\nYes, you are right. But the question was\
    \ about O(n) solution. Anyway, I added O(n) solution as well.\n<|/ c |>\n<| a\
    \ tags=algorithm,java,sorting |>\n<code>\npublic static void main(String[] args)\
    \ {\n    int[] a = {1, 2, 3, 4, 5};\n    Arrays.sort(a);\n    System.out.println(a[0]);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/11365473)\n<|/ c\
    \ |>\n<| c |>\nThis does provide an answer. He asked how to sort an array in Java.\
    \ He didn't ask for an alternative to sorting. He asked how to sort an array in\
    \ Java. He didn't ask for an alternative to sorting. He asked how to sort an array\
    \ in Java. He didn't ask for an alternative to sorting. He asked how to sort an\
    \ array in Java. He didn't ask for an alternative to sorting. He asked how to\
    \ sort an array in Java. He didn't ask for an alternative to sorting. He asked\
    \ how to sort an array in Java. He didn't ask for an alternative to sorting. He\
    \ asked how to sort an array in Java. He didn't ask for an alternative to sorting.\
    \ He asked how to sort an array in Java. He didn't ask for an alternative to sorting.\
    \ He asked how to sort an array in Java. He didn't ask for an alternative to sorting.\
    \ He asked how to sort an array in Java. He didn't ask for an alternative to sorting.\
    \ He asked how to sort an array in Java. He didn't ask for an alternative to sorting.\
    \ He asked how to sort an array in Java. He didn't ask for an alternative to sorting.\
    \ He asked how to sort an array \nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqzdl62qm.d(22): Error: declaration expected, not `<`\\n/tmp/tmpqzdl62qm.d(34):\
    \ Error: function declaration without return type. (Note that constructors are\
    \ always named `this`)\\n/tmp/tmpqzdl62qm.d(34): Error: no identifier for declarator\
    \ `Arrays.sort(a)`\\n/tmp/tmpqzdl62qm.d(35): Error: identifier expected following\
    \ `.` instead of `out`\\n/tmp/tmpqzdl62qm.d(35): Error: no identifier for declarator\
    \ `System`\\n/tmp/tmpqzdl62qm.d(35): Error: declaration expected, not `out`\\\
    n/tmp/tmpqzdl62qm.d(36): Error: unrecognized declaration\\n/tmp/tmpqzdl62qm.d(43):\
    \ Error: unterminated character constant\\n/tmp/tmpqzdl62qm.d(43): Error: unterminated\
    \ character constant\\n/tmp/tmpqzdl62qm.d(43): Error: unterminated character constant\\\
    n/tmp/tmpqzdl62qm.d(43): Error: unterminated character constant\\n/tmp/tmpqzdl62qm.d(43):\
    \ Error: unterminated character constant\\n/tmp/tmpqzdl62qm.d(43): Error: unterminated\
    \ character constant\\n/tmp/tmpqzdl62qm.d(43): Error: unterminated character constant\\\
    n/tmp/tmpqzdl62qm.d(43): Error: unterminated character constant\\n/tmp/tmpqzdl62qm.d(43):\
    \ Error: unterminated character constant\\n/tmp/tmpqzdl62qm.d(43): Error: unterminated\
    \ character constant\\n/tmp/tmpqzdl62qm.d(43): Error: unterminated character constant\\\
    n/tmp/tmpqzdl62qm.d(43): Error: unterminated character constant\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzdl62qm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    float hi = mid - 1;\n    float lo = mid + 1;\n\
    \    \n    while(lo < hi)\n    {\n        float mid = (lo + hi) / 2;\n       \
    \ float m = (float)l[mid];\n        if(m > m)\n            hi = mid;\n       \
    \ else\n            lo = mid + 1;\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3sjy5ht_.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmp3sjy5ht_.d(20): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3sjy5ht_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp38wy_fl8.d(59): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38wy_fl8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    float hi = mid;\n    float lo = mid - 1;\n\
    \    \n    while (lo < hi) {\n        float mid = (lo + hi) / 2;\n        if (l[mid]\
    \ >= m)\n            hi = mid;\n        else\n            lo = mid + 1;\n    }\n\
    \    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwva2xetl.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwva2xetl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    float m2 = l[n/2];\n    for (int\
    \ i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n        else if (l[i]\
    \ > m2) m2 = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppvyned3a.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428325]\\n??:? void tmppvyned3a.__unittest_L22_C1()\
    \ [0x427eff]\\n??:? void tmppvyned3a.__modtest() [0x4280a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b23a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430359]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b211]\\n??:? runModuleUnitTests [0x42c17d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876f]\\n??:? _d_run_main [0x4286da]\\n??:? main [0x4280bb]\\\
    n??:? __libc_start_main [0xe6f7a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(1,\
    \ mid));\n    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0pie6map.d(14): Error: no property `subarray` for type `long[]`\\\
    n/tmp/tmp0pie6map.d(15): Error: undefined identifier `fabs` in package `std`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pie6map.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float midVal = l[mid];\n    float leftMedian = median(l.subarray(0, mid));\n\
    \    float rightMedian = median(l.subarray(mid, l.length));\n    return midVal\
    \ + (leftMedian + rightMedian) / 2;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This code does not compile. `midVal` should be `float` not `int`.\n<|/ c |>\n\
    <| c |>\nThanks, I fixed it\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic float\
    \ median(ArrayList<Float> list) {\n    float median = 0;\n    float temp = 0;\n\
    \    int size = list.size();\n    if (size % 2 == 0) {\n        median = (list.get(size\
    \ / 2) - list.get(size / 2 - 1)) / 2;\n    } else {\n        median = (list.get(size\
    \ / 2) - list.get(size / 2 - 1)) / 2;\n    }\n    return median;\n}\n</code>\n\
    <|/ a tags=java,median |>\n<| a dscore=2 |>\n<code>\npublic float median(ArrayList<Float>\
    \ list) {\n    float median = 0;\n    float temp = 0;\n    int size = list.size();\n\
    \    if (size % 2 == 0) {\n        median = (list.get(size / 2) - list.get(size\
    \ / 2 - 1)) / 2;\n    } else {\n        median = (list.get(size / 2) - list.get(size\
    \ / 2 - 1)) / 2;\n    }\n    return median;\n}\n</code>\n<|/ a tags=java,median\
    \ |>\n<| a tags=java,median |>\n<code>\npublic float median(ArrayList<Float> list)\
    \ {\n    float median = 0;\n    float temp = 0;\n    int size = list.size();\n\
    \    if (size % 2 == 0) {\n        median = (list.get(size / 2) - list.get(size\
    \ / 2 - 1)) / 2;\n    } else {\n        median = (list.get(size / 2) - list.get(size\
    \ / 2 - 1)) / 2;\n    }\n    return median;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=java,median |>\n<code>\npublic float median(ArrayList<Float> list) {\n\
    \    float median = 0;\n    float temp = 0;\n    int size = list.size();\n   \
    \ if (size % 2 == 0) {\n        median = (list.get(size / 2) - list.get(size /\
    \ 2 - 1)) / 2;\n    } else {\n        median = (list.get(size / 2) - list.get(size\
    \ / 2 - 1)) / 2;\n    }\n    return median;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=java,median |>\n<code>\npublic float median(ArrayList<Float\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjq8btnc0.d(18): Error: declaration expected, not `<`\\n/tmp/tmpjq8btnc0.d(32):\
    \ Error: declaration expected, not `if`\\n/tmp/tmpjq8btnc0.d(34): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjq8btnc0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0)\n        return std.math.mid(l, l / 2);\n    else \n       \
    \ return std.math.mid(l / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwc9v_rdj.d(12): Error: undefined identifier `length`\\n/tmp/tmpwc9v_rdj.d(12):\
    \ Error: variable `l` is shadowing variable `tmpwc9v_rdj.median.l`\\n/tmp/tmpwc9v_rdj.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmpwc9v_rdj.d(16):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwc9v_rdj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \      if (l[i] < m)\n            m = l[i];\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf8ezcm2m.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmpf8ezcm2m.__unittest_L20_C1()\
    \ [0x427e67]\\n??:? void tmpf8ezcm2m.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c30f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b179]\\n??:? runModuleUnitTests [0x42c0e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428750]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d7]\\n??:? _d_run_main [0x428642]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0x46d39554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    float m2 = m;\n    float m3 = m;\n\
    \    float m4 = m;\n    float m5 = m;\n    float m6 = m;\n    float m7 = m;\n\
    \    float m8 = m;\n    float m9 = m;\n    float m10 = m;\n    float m11 = m;\n\
    \    float m12 = m;\n    float m13 = m;\n    float m14 = m;\n    float m15 = m;\n\
    \    float m16 = m;\n    float m17 = m;\n    float m18 = m;\n    float m19 = m;\n\
    \    float m20 = m;\n    float m21 = m;\n    float m22 = m;\n    float m23 = m;\n\
    \    float m24 = m;\n    float m25 = m;\n    float m26 = m;\n    float m27 = m;\n\
    \    float m28 = m;\n    float m29 = m;\n    float m30 = m;\n    float m31 = m;\n\
    \    float m32 = m;\n    float m33 = m;\n    float m34 = m;\n    float m35 = m;\n\
    \    float m36 = m;\n    float m37 = m;\n    float m38 = m;\n    float m39 = m;\n\
    \    float m40 = m;\n    float m41 = m;\n    float m42 = m;\n    float m43 = m;\n\
    \    float m44 = m;\n    float m45 = m;\n    float m46 = m;\n    float m47 = m;\n\
    \    float m48 = m;\n    float m49 = m;\n    float m50 = m;\n    float m51 = m;\n\
    \    float m52 = m;\n    float m53 = m;\n    float m54 = m;\n    float m55 = m;\n\
    \    float m56 = m;\n    float m57 = m;\n    float m58 = m;\n    float m59 = m;\n\
    \    float m60 = m;\n    float m61 = m;\n    float m62 = m;\n    float m63 = m;\n\
    \    float m64 = m;\n    float m65 = m;\n    float m66 = m;\n    float m67 = m;\n\
    \    float m68 = m;\n    float m69 = m;\n    float m70 = m;\n    float m71 = m;\n\
    \    float m72 = m;\n    float m73 = m;\n    \nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwumjijmx.d(88): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwumjijmx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0.0;\n    long mid = n / 2;\n    float leftMedian = median(l);\n\
    \    float rightMedian = median(std.range.rem(l, mid));\n    return std.fma(leftMedian,\
    \ rightMedian, mid);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpek_wnfd6.d(16): Error: undefined identifier `range` in package\
    \ `std`\\n/tmp/tmpek_wnfd6.d(17): Error: undefined identifier `fma` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpek_wnfd6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpagogmm1q.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmpagogmm1q.__unittest_L21_C1()\
    \ [0x427e67]\\n??:? void tmpagogmm1q.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c30f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b179]\\n??:? runModuleUnitTests [0x42c0e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428750]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d7]\\n??:? _d_run_main [0x428642]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0xfb3e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n  \
    \  if (len < 2) return 0;\n    float mid = len / 2;\n    float sum = 0;\n    float\
    \ sum2 = 0;\n    float median;\n    float temp;\n    int i;\n    \n    for (i\
    \ = 0; i < len; i++)\n    {\n        sum += l[i];\n        sum2 += l[i] * l[i];\n\
    \    }\n    median = sum / len;\n    \n    if (sum2 % 2 == 0)\n    {\n       \
    \ temp = sum / 2;\n        median = temp;\n    }\n    \n    return median;\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwmu1vd4f.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428315]\\n??:? void tmpwmu1vd4f.__unittest_L36_C1()\
    \ [0x427f65]\\n??:? void tmpwmu1vd4f.__modtest() [0x428094]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c397]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b22a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430349]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b201]\\n??:? runModuleUnitTests [0x42c16d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42875f]\\n??:? _d_run_main [0x4286ca]\\n??:? main [0x4280a7]\\\
    n??:? __libc_start_main [0x600cb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp83yi9r2z.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp83yi9r2z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0) return std.math.mid(l, l / 2);\n    else return std.math.mid(l\
    \ / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_q4b_msp.d(12): Error: undefined identifier `length`\\n/tmp/tmp_q4b_msp.d(12):\
    \ Error: variable `l` is shadowing variable `tmp_q4b_msp.median.l`\\n/tmp/tmp_q4b_msp.d(13):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmp_q4b_msp.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_q4b_msp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = std.math.median(l);\n\
    \treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph1o7nxq5.d(12): Error: undefined identifier `median` in module\
    \ `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1o7nxq5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    long mid = n / 2;\n    float a = l[mid];\n    float b\
    \ = l[n - 1];\n    if (a > b) \n        return median(l);\n    else \n       \
    \ return median(l);\n}\n</code>\n<|/ a tags=median,c++,algorithm |>\n<| c |>\n\
    This algorithm is O(n^2), which is very inefficient.\n<|/ c |>\n<| c |>\n: I agree,\
    \ but I didn't want to change OP's code too much. Maybe I should add some comments\
    \ to explain why I did what I did.\n<|/ c |>\n<| c |>\n: I added a O(n) solution\
    \ that uses only O(1) memory.\n<|/ c |>\n<| c |>\n: I added a O(n) solution that\
    \ uses only O(1) memory.\n<|/ c |>\n<| c |>\n: I added a O(n) solution that uses\
    \ only O(1) memory.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwk8ccl6_.d(22): Error: declaration expected, not `<`\\n/tmp/tmpwk8ccl6_.d(28):\
    \ Error: unterminated character constant\\n/tmp/tmpwk8ccl6_.d(28): Error: unterminated\
    \ character constant\\n/tmp/tmpwk8ccl6_.d(47): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmpwk8ccl6_.d(48): Error: declaration expected, not `assert`\\\
    n/tmp/tmpwk8ccl6_.d(49): Error: declaration expected, not `assert`\\n/tmp/tmpwk8ccl6_.d(50):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpwk8ccl6_.d(51): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpwk8ccl6_.d(52): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwk8ccl6_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo5nk49fm.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpo5nk49fm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fabs(leftMedian - rightMedian);\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double[]\
    \ l) \n{\n    double mid = l.length / 2;\n    float leftMedian = median(l);\n\
    \    float rightMedian = median(l.subarray(0, mid));\n    return std.fabs(leftMedian\
    \ - rightMedian);\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(float[] l) \n{\n    float mid = l.length / 2;\n    float\
    \ leftMedian = median(l);\n    float rightMedian = median(l.subarray(0, mid));\n\
    \    return std.fabs(leftMedian - rightMedian);\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(short[] l) \n{\n    short\
    \ mid = l.length / 2;\n    float leftMedian = median(l);\n    float rightMedian\
    \ = median(l.subarray(0, mid));\n    return std.fabs(leftMedian - rightMedian);\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(int[]\
    \ l) \n{\n    int mid = l.length / 2;\n    float leftMedian = median(l);\n   \
    \ float rightMedian = median(l.subarray(0, mid));\n    return std.fabs(leftMedian\
    \ - rightMedian);\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n    \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdcthf4dt.d(89): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcthf4dt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float f = l[mid];\n    for(int i = 0; i < mid; i++) \n    {\n        if(l[i]\
    \ < f) \n            f = l[i];\n    }\n    return f;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float\
    \ f = l[0];\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] <\
    \ f) \n            f = l[i];\n    }\n    return f;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ double f = l[0];\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ < f) \n            f = l[i];\n    }\n    return f;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ f = l[0];\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] <\
    \ f) \n            f = l[i];\n    }\n    return f;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float\
    \ f = l[0];\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] <\
    \ f) \n            f = l[i];\n    }\n    return f;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ double f = l[0];\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ < f) \n            f = l[i];\n    }\n    return f;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ariqk1o.d(29): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp7ariqk1o.d(47): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp7ariqk1o.d(65): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp7ariqk1o.d(83):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmp7ariqk1o.d(101):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmp7ariqk1o.d(124):\
    \ Error: `tmp7ariqk1o.median` called with argument types `(long[])` matches both:\\\
    n/tmp/tmp7ariqk1o.d(10):     `tmp7ariqk1o.median(long[] l)`\\nand:\\n/tmp/tmp7ariqk1o.d(65):\
    \     `tmp7ariqk1o.median(long[] l)`\\n/tmp/tmp7ariqk1o.d(125): Error: `tmp7ariqk1o.median`\
    \ called with argument types `(long[])` matches both:\\n/tmp/tmp7ariqk1o.d(10):\
    \     `tmp7ariqk1o.median(long[] l)`\\nand:\\n/tmp/tmp7ariqk1o.d(65):     `tmp7ariqk1o.median(long[]\
    \ l)`\\n/tmp/tmp7ariqk1o.d(126): Error: `tmp7ariqk1o.median` called with argument\
    \ types `(long[])` matches both:\\n/tmp/tmp7ariqk1o.d(10):     `tmp7ariqk1o.median(long[]\
    \ l)`\\nand:\\n/tmp/tmp7ariqk1o.d(65):     `tmp7ariqk1o.median(long[] l)`\\n/tmp/tmp7ariqk1o.d(127):\
    \ Error: `tmp7ariqk1o.median` called with argument types `(long[])` matches both:\\\
    n/tmp/tmp7ariqk1o.d(10):     `tmp7ariqk1o.median(long[] l)`\\nand:\\n/tmp/tmp7ariqk1o.d(65):\
    \     `tmp7ariqk1o.median(long[] l)`\\n/tmp/tmp7ariqk1o.d(128): Error: `tmp7ariqk1o.median`\
    \ called with argument types `(long[])` matches both:\\n/tmp/tmp7ariqk1o.d(10):\
    \     `tmp7ariqk1o.median(long[] l)`\\nand:\\n/tmp/tmp7ariqk1o.d(65):     `tmp7ariqk1o.median(long[]\
    \ l)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ariqk1o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3ajqupmf.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmp3ajqupmf.__unittest_L20_C1()\
    \ [0x427e57]\\n??:? void tmp3ajqupmf.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b192]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430325]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b169]\\n??:? runModuleUnitTests [0x42c0d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0x6ff89554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float median;\n    if (l.length % 2 == 0)\n    {\n        median = std.math.mid(l,\
    \ 0, mid);\n    }\n    else\n    {\n        median = std.math.mid(l, mid, l.length);\n\
    \    }\n    return median;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10,\
    \ 20])\n    15.0\n    \n*/\nfloat median(float[] l) \n{\n    float median;\n \
    \   long mid = l.length / 2;\n    if (l.length % 2 == 0)\n    {\n        median\
    \ = std.math.mid(l, 0, mid);\n    }\n    else\n    {\n        median = std.math.mid(l,\
    \ mid, l.length);\n    }\n    return median;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\ndouble median(double[] l) \n{\n  \
    \  double median;\n    long mid = l.length / 2;\n    if (l.length % 2 == 0)\n\
    \    {\n        median = std.math.mid(l, 0, mid);\n    }\n    else\n    {\n  \
    \      median = std.math.mid(l, mid, l.length);\n    }\n    return median;\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nlong median(long[]\
    \ l, int start, int end) \n{\n    long mid = l.length / 2;\n    if (l.length %\
    \ 2 == 0)\n    {\n        long mid = std.math.mid(l, start, mid);\n    }\n   \
    \ else\n    {\n        long mid = std.math.mid(l, mid, l.length);\n    }\n   \
    \ return mid;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(float[] l, int start, int end) \n{\n    float median;\n\
    \    long mid = l.length / 2;\n    if (l.length % 2 == 0)\n    {\n        float\
    \ mid = std.math.mid(l, start, mid);\n    }\n    else\n    {\n        float mid\
    \ = std.\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph62uvlwg.d(108): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmph62uvlwg.d(109): Error: semicolon expected, not `{`\\n/tmp/tmph62uvlwg.d(118):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmph62uvlwg.d(118): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph62uvlwg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m1 = l[mid];\n    float m2 = l[mid-1];\n    return std.fabs(m1 - m2)\
    \ > 0.000001 ? m2 : m1;\n}\nunittest\n{\n    alias candidate = median;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvi_42dm.d(15): Error: undefined identifier `fabs` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjvi_42dm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 0) \n    {\n        return std.math.mid(l, mid);\n  \
    \  }\n    else \n    {\n        return std.math.mid(l, mid - 1, mid);\n    }\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp24jc5ocu.d(15): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmp24jc5ocu.d(19): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24jc5ocu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(std.algorithm.removeLastN(l,mid));\n\
    \    return std.math._median(leftMedian, rightMedian);\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0gjb_u3.d(14): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpu0gjb_u3.d(15): Error: undefined identifier `_median` in module\
    \ `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0gjb_u3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0) return std.math.toFloat(l/2);\n    else return std.math.toFloat(l/2);\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcmiqnf70.d(12): Error: undefined identifier `length`\\n/tmp/tmpcmiqnf70.d(12):\
    \ Error: variable `l` is shadowing variable `tmpcmiqnf70.median.l`\\n/tmp/tmpcmiqnf70.d(13):\
    \ Error: undefined identifier `toFloat` in module `std.math`\\n/tmp/tmpcmiqnf70.d(14):\
    \ Error: undefined identifier `toFloat` in module `std.math`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcmiqnf70.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = std.math.median(l);\n\
    \treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvnq4z_32.d(12): Error: undefined identifier `median` in module\
    \ `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvnq4z_32.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcmmgti5t.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcmmgti5t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4cxuyjp9.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cxuyjp9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n  \
    \  if (len % 2 == 1) \n    {\n        float mid = l.length / 2;\n        float\
    \ a = l[mid];\n        float b = l[mid-1];\n        return a + (b - a) / 2;\n\
    \    }\n    else \n    {\n        float mid = len / 2;\n        float a = l[mid];\n\
    \        float b = l[mid-1];\n        return b;\n    }\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long\
    \ len = l.length;\n    if (len % 2 == 1) \n    {\n        float mid = l.length\
    \ / 2;\n        float a = l[mid];\n        float b = l[mid-1];\n        return\
    \ a + (b - a) / 2;\n    }\n    else \n    {\n        float mid = len / 2;\n  \
    \      float a = l[mid];\n        float b = l[mid-1];\n        return b;\n   \
    \ }\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2,\
    \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\
    float median(double l[]) \n{\n    long len = l.length;\n    if (len % 2 == 1)\
    \ \n    {\n        float mid = l.length / 2;\n        float a = l[mid];\n    \
    \    float b = l[mid-1];\n        return a + (b - a) / 2;\n    }\n    else \n\
    \    {\n        float mid = len / 2;\n        float a = l[mid];\n        float\
    \ b = l[mid-1];\n        return b;\n    }\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ len = l.length;\n    if (len % 2 == 1) \n    {\n        float mid = l.length\
    \ / 2;\n        float a = l[mid];\n        float b = l[mid-1];\n        return\
    \ a + (b - a) / 2;\n    }\n    else \n    {\n        float mid = len / 2;\n  \
    \      float a = l[mid];\n        float b = l[mid-1];\n        return b;\n   \
    \ }\n}\n/*\nReturn median of elements in the list l.\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ldne5ht.d(36): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp6ldne5ht.d(62): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp6ldne5ht.d(88): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp6ldne5ht.d(106):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6ldne5ht.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length == 0) return 0;\n    if (l.length == 1) return l[0];\n    if\
    \ (l.length % 2 == 1) return (l[mid] + l[mid-1]) / 2.0;\n    else return l[mid];\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2vuvcopb.d(22): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282b5]\\n??:? void tmp2vuvcopb.__unittest_L18_C1()\
    \ [0x427e8b]\\n??:? void tmp2vuvcopb.__modtest() [0x428034]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c337]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43035d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43080c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1a1]\\n??:? runModuleUnitTests [0x42c10d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428778]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286ff]\\n??:? _d_run_main [0x42866a]\\n??:? main [0x428047]\\\
    n??:? __libc_start_main [0xfb530554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int\
    \ n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(long l[]) \n{\n    int n = l.length;\n    if (n < 1) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6,\
    \ 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    int n\
    \ = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i =\
    \ 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp57ik9lq_.d(28): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp57ik9lq_.d(46): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp57ik9lq_.d(64): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp57ik9lq_.d(82):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmp57ik9lq_.d(100):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp57ik9lq_.d(110):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp57ik9lq_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx582yk8t.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpx582yk8t.__unittest_L20_C1()\
    \ [0x427e57]\\n??:? void tmpx582yk8t.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b192]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430325]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b169]\\n??:? runModuleUnitTests [0x42c0d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0x5ad6e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0) return std.math::median(l);\n    else return std.math::median(l)\
    \ / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpykez9p6v.d(13): Error: found `:` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpykez9p6v.d(13): Error: found `:` instead of statement\\\
    n/tmp/tmpykez9p6v.d(14): Error: found `else` without a corresponding `if`, `version`\
    \ or `debug` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpykez9p6v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 0)\n        return std.math.mid(l, mid);\n    else \n\
    \        return std.math.mid(l, mid + 1, l.length);\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6_ysdyb.d(14): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmpq6_ysdyb.d(16): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6_ysdyb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat m = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < m) \n\t\t{\n\t\t\tm = l[i];\n\
    \t\t}\n\t}\n\treturn m;\n}\nunittest\n{\n    alias candidate = median;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe_wp10rm.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428265]\\n??:? void tmpe_wp10rm.__unittest_L22_C1()\
    \ [0x427e3f]\\n??:? void tmpe_wp10rm.__modtest() [0x427fe8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b17a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43030d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430299]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b151]\\n??:? runModuleUnitTests [0x42c0bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428728]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286af]\\n??:? _d_run_main [0x42861a]\\n??:? main [0x427ffb]\\\
    n??:? __libc_start_main [0x4f77d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long length = l.length;\n\
    \    if (length == 0) \n        return 0;\n    float median = l[0];\n    float\
    \ sum = 0;\n    float average;\n    for (int i = 1; i < length; i++) \n    {\n\
    \        sum += l[i];\n    }\n    average = sum / length;\n    for (int i = 1;\
    \ i < length; i++) \n    {\n        if (l[i] < average) \n        {\n        \
    \    median = l[i];\n        }\n    }\n    return median;\n}\n</code>\n<|/ a tags=c++,median,arrays\
    \ |>\n<| c |>\nThis does not answer the question, which is about how to find the\
    \ median of an array in C++.\n<|/ c |>\n<| c |>\nThe question was how to find\
    \ the median of an array in C++. My answer was to show how to find the median\
    \ in C++.\n<|/ c |>\n<| c |>\nThe question was how to find the median of an array\
    \ in C++. My answer was to show how to find the median in C++.\n<|/ c |>\n<| c\
    \ |>\nThe question was how to find the median of an array in C++. My answer was\
    \ to show how to find the median in C++.\n<|/ c |>\n<| c |>\nThe question was\
    \ how to find the median of an array in C++. My answer was to show how to find\
    \ the median in C++.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>\n#include <numeric>\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_jwshrv.d(32): Error: declaration expected, not `<`\\n/tmp/tmp1_jwshrv.d(59):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1_jwshrv.d(60): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1_jwshrv.d(61): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1_jwshrv.d(62): Error: declaration expected, not `assert`\\\
    n/tmp/tmp1_jwshrv.d(63): Error: declaration expected, not `assert`\\n/tmp/tmp1_jwshrv.d(64):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1_jwshrv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n    for(int\
    \ i = 1; i < l.length; i++) \n    {\n        if(l[i] < m) \n        {\n      \
    \      m = l[i];\n        }\n    }\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwc2i6nks.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428265]\\n??:? void tmpwc2i6nks.__unittest_L22_C1()\
    \ [0x427e3f]\\n??:? void tmpwc2i6nks.__modtest() [0x427fe8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b17a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43030d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430299]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b151]\\n??:? runModuleUnitTests [0x42c0bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428728]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286af]\\n??:? _d_run_main [0x42861a]\\n??:? main [0x427ffb]\\\
    n??:? __libc_start_main [0x8b486554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3nv00lsr.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmp3nv00lsr.__unittest_L20_C1()\
    \ [0x427e57]\\n??:? void tmp3nv00lsr.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b192]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430325]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b169]\\n??:? runModuleUnitTests [0x42c0d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0xc1512554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n \
    \       if (l[i] < m) \n            m = l[i];\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprtzs13u8.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmprtzs13u8.__unittest_L20_C1()\
    \ [0x427e57]\\n??:? void tmprtzs13u8.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b192]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430325]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b169]\\n??:? runModuleUnitTests [0x42c0d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0x74122554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float f = l[mid];\n    for(int i = 0; i < l.length; i++) \n    {\n      \
    \  if(l[i] < f) \n        {\n            f = l[i];\n        }\n    }\n    return\
    \ f;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx_ifxmxp.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpx_ifxmxp.__unittest_L23_C1()\
    \ [0x427e47]\\n??:? void tmpx_ifxmxp.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b182]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430315]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307c4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b159]\\n??:? runModuleUnitTests [0x42c0c5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428730]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286b7]\\n??:? _d_run_main [0x428622]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x72868554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n   \
    \ }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjqfcdlc6.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmpjqfcdlc6.__unittest_L24_C1()\
    \ [0x427e67]\\n??:? void tmpjqfcdlc6.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c30f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b179]\\n??:? runModuleUnitTests [0x42c0e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428750]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d7]\\n??:? _d_run_main [0x428642]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0xf4ffa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long n = l.length;\n   \
    \ if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long n = l.length;\n  \
    \  if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long n = l.length;\n   \
    \ if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long n = l.length;\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuuj7_lux.d(32): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmpuuj7_lux.d(54): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmpuuj7_lux.d(76): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmpuuj7_lux.d(98):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmpuuj7_lux.d(120):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmpuuj7_lux.d(123):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpuuj7_lux.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \      if (l[i] < m) m = l[i];\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_kymquv3.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_kymquv3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0)\n        return std.math.mid(l);\n    \n    float mid = std.math.mid(l);\n\
    \    float leftMedian = median(subarray(l, 0, l/2));\n    float rightMedian =\
    \ median(subarray(l, l/2, l));\n    \n    return std.math.fma(leftMedian, rightMedian,\
    \ mid);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1j_5fa1x.d(12): Error: undefined identifier `length`\\n/tmp/tmp1j_5fa1x.d(12):\
    \ Error: variable `l` is shadowing variable `tmp1j_5fa1x.median.l`\\n/tmp/tmp1j_5fa1x.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmp1j_5fa1x.d(16):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmp1j_5fa1x.d(17):\
    \ Error: undefined identifier `subarray`\\n/tmp/tmp1j_5fa1x.d(18): Error: undefined\
    \ identifier `subarray`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp1j_5fa1x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \      if (l[i] < m)\n            m = l[i];\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[])\
    \ \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if\
    \ (l[i] < m)\n            m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ double m = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] <\
    \ m)\n            m = l[i];\n    return m;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long double l[]) \n{\n \
    \   long double m = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if\
    \ (l[i] < m)\n            m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(ulong l[]) \n{\n    ulong\
    \ m = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] < m)\n \
    \           m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6,\
    \ 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(short l[]) \n{\n    short m\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] < m)\n   \
    \         m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    15.0\n    \n*/\nfloat median(int l[]) \n{\n    int m = l[0];\n\
    \    for (int i = 1; i < l.\nunittest\n{\n    alias candidate = median;\n\n  \
    \  assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpms9ov5eq.d(28): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmpms9ov5eq.d(44): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmpms9ov5eq.d(60): Error: use\
    \ `real` instead of `long double`\\n/tmp/tmpms9ov5eq.d(60): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `real[] l`\\n/tmp/tmpms9ov5eq.d(62): Error:\
    \ use `real` instead of `long double`\\n/tmp/tmpms9ov5eq.d(76): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `ulong[] l`\\n/tmp/tmpms9ov5eq.d(92):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `short[] l`\\n/tmp/tmpms9ov5eq.d(108):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `int[] l`\\n/tmp/tmpms9ov5eq.d(112):\
    \ Error: identifier expected following `.`, not `unittest`\\n/tmp/tmpms9ov5eq.d(113):\
    \ Error: found `{` when expecting `;` following `for` condition\\n/tmp/tmpms9ov5eq.d(114):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpms9ov5eq.d(114): Error: found\
    \ `candidate` when expecting `)`\\n/tmp/tmpms9ov5eq.d(114): Error: found `=` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpms9ov5eq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = 0.0;\n\tint n =\
    \ l.length;\n\t\n\tfor (int i = 0; i < n; i++) {\n\t\tmed = (med + l[i]) / 2.0;\n\
    \t}\n\treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptyl_bhu8.d(13): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptyl_bhu8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat m = std.math.median(l);\n\
    \treturn m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdymxvyc3.d(12): Error: undefined identifier `median` in module\
    \ `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdymxvyc3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float sum = 0;\n    int n\
    \ = l.length;\n    for(int i = 0; i < n; ++i)\n        sum += l[i];\n    return\
    \ sum / n;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcst89n6c.d(13): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcst89n6c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length == 0) return 0;\n    if (l.length == 1) return l[0];\n    if\
    \ (l[mid] < l[mid-1]) return median(l);\n    else return median(l);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n \
    \       if (l[i] < m) \n            m = l[i];\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[])\
    \ \n{\n    long n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; i++) \n        if (l[i] < m) \n            m = l[i];\n\
    \    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(double l[]) \n{\n    long n = l.length;\n    if (n < 2)\
    \ return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n        if\
    \ (l[i] < m) \n            m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; i++) \n        if (l[i] < m) \n            m = l[i];\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2,\
    \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\
    float median(float l[]) \n{\n    long n = l.length;\n    if (n < 2) return 0;\n\
    \    float m = l[0];\n    for (int i = 1; i < n; i++) \n        if (l[i] < m)\
    \ \n            m = l[i];\n    return m;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long\
    \ n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; i++) \n        if (l[i] < m) \n            m = l[i];\n    return\
    \ m;\n}\n/*\nReturn \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9i1e0bk5.d(28): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp9i1e0bk5.d(46): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp9i1e0bk5.d(64): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp9i1e0bk5.d(82):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmp9i1e0bk5.d(100):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmp9i1e0bk5.d(110):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9i1e0bk5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnktra5o3.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmpnktra5o3.__unittest_L21_C1()\
    \ [0x427e67]\\n??:? void tmpnktra5o3.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c30f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b179]\\n??:? runModuleUnitTests [0x42c0e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428750]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d7]\\n??:? _d_run_main [0x428642]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0x5a6b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float median;\n    if (l.length == 0)\n        median = -1;\n    else\n \
    \   {\n        median = std.math.mid(l, 0, mid);\n    }\n    return median;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpevi1fyap.d(18): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevi1fyap.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp17q8p456.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp17q8p456.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0)\n        return std.math.mid(l, l / 2);\n    else\n        return\
    \ std.math.mid(l / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbbz4ao33.d(12): Error: undefined identifier `length`\\n/tmp/tmpbbz4ao33.d(12):\
    \ Error: variable `l` is shadowing variable `tmpbbz4ao33.median.l`\\n/tmp/tmpbbz4ao33.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmpbbz4ao33.d(16):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbbz4ao33.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0)\n        return std.math.mid(l, l / 2);\n    else\n        return\
    \ std.math.mid(l / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn7p6shp1.d(12): Error: undefined identifier `length`\\n/tmp/tmpn7p6shp1.d(12):\
    \ Error: variable `l` is shadowing variable `tmpn7p6shp1.median.l`\\n/tmp/tmpn7p6shp1.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmpn7p6shp1.d(16):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7p6shp1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.math.min(leftMedian, rightMedian);\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe3gqiyng.d(14): Error: no property `subarray` for type `long[]`\\\
    n/tmp/tmpe3gqiyng.d(15): Error: undefined identifier `min` in module `std.math`,\
    \ did you mean function `sin`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpe3gqiyng.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph9y4qib_.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmph9y4qib_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1) \n        return std.math.mid(l, mid);\n    else \n\
    \        return std.math.mid(l, mid - 1, mid);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6tz8j5wb.d(14): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmp6tz8j5wb.d(16): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tz8j5wb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppwd_r6ox.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppwd_r6ox.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = (float)l.length/2;\n\
    \    float sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum\
    \ += l[i];\n        if(sum > m) \n        {\n            m = sum;\n        }\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg0i4k65d.d(12): Error: C style cast illegal, use `cast(float)l.length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0i4k65d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = std.math::median(l);\n\
    \    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmr6vhcal.d(12): Error: semicolon expected, not `:`\\n/tmp/tmpmr6vhcal.d(12):\
    \ Error: found `:` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpmr6vhcal.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n  \
    \  if (len == 0) \n        return 0;\n    float m = l[0];\n    for (int i = 1;\
    \ i < len; ++i)\n    {\n        if (l[i] < m) \n            m = l[i];\n    }\n\
    \    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(float l[]) \n{\n    float m = l[0];\n    for (int i = 1;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < m) \n            m = l[i];\n \
    \   }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    float m = l[0];\n    for\
    \ (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m) \n            m\
    \ = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    float m = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m) \n     \
    \       m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6,\
    \ 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\
    \ \n            m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i]\
    \ < m) \n            m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaeeih08i.d(31): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmpaeeih08i.d(49): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmpaeeih08i.d(67): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmpaeeih08i.d(85):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmpaeeih08i.d(103):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmpaeeih08i.d(113):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpaeeih08i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n    for\
    \ (int i = 1; i < l.length; ++i) {\n        if (l[i] < m)\n            m = l[i];\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp08_qrc6r.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmp08_qrc6r.__unittest_L19_C1()\
    \ [0x427e4b]\\n??:? void tmp08_qrc6r.__modtest() [0x427ff4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b18a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43031d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b161]\\n??:? runModuleUnitTests [0x42c0cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428738]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286bf]\\n??:? _d_run_main [0x42862a]\\n??:? main [0x428007]\\\
    n??:? __libc_start_main [0x3659e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    \n    if (leftMedian > rightMedian)\n        return leftMedian;\n    else\n\
    \        return rightMedian;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7rsiqqnw.d(14): Error: function `tmp7rsiqqnw.median(long[] l)`\
    \ is not callable using argument types `(long[], long)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rsiqqnw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2faxdq1c.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2faxdq1c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l == 0)\n        return 0;\n    float m = l[l / 2];\n    for (int i = l\
    \ / 2; i > 0; i /= 2)\n    {\n        if (l[i] > m)\n            m = l[i];\n \
    \   }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp5xuif68.d(12): Error: undefined identifier `length`\\n/tmp/tmpp5xuif68.d(12):\
    \ Error: variable `l` is shadowing variable `tmpp5xuif68.median.l`\\n/tmp/tmpp5xuif68.d(15):\
    \ Error: only one index allowed to index `long`\\n/tmp/tmpp5xuif68.d(16): Error:\
    \ cannot implicitly convert expression `l / 2L` of type `long` to `int`\\n/tmp/tmpp5xuif68.d(18):\
    \ Error: only one index allowed to index `long`\\n/tmp/tmpp5xuif68.d(19): Error:\
    \ only one index allowed to index `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpp5xuif68.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0) return std.math::median(l);\n    else return (l+1)/2;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4f8xf5a.d(13): Error: found `:` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpd4f8xf5a.d(13): Error: found `:` instead of statement\\\
    n/tmp/tmpd4f8xf5a.d(14): Error: found `else` without a corresponding `if`, `version`\
    \ or `debug` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpd4f8xf5a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n \
    \       if (l[i] < m) \n            m = l[i];\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpefx163c_.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpefx163c_.__unittest_L20_C1()\
    \ [0x427e57]\\n??:? void tmpefx163c_.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b192]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430325]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b169]\\n??:? runModuleUnitTests [0x42c0d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0x6d82f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ float m = 0.0;\n    float sum = 0.0;\n    for(int i = 0; i < l; i++) {\n   \
    \     sum += l[i];\n    }\n    m = sum / l;\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpza9oorl6.d(12): Error: undefined identifier `length`\\n/tmp/tmpza9oorl6.d(12):\
    \ Error: variable `l` is shadowing variable `tmpza9oorl6.median.l`\\n/tmp/tmpza9oorl6.d(16):\
    \ Error: only one index allowed to index `long`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpza9oorl6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 1) return (l+1)/2;\n    else return (l/2)+1;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphozq2gum.d(12): Error: undefined identifier `length`\\n/tmp/tmphozq2gum.d(12):\
    \ Error: variable `l` is shadowing variable `tmphozq2gum.median.l`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphozq2gum.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float sum = 0;\n    int n\
    \ = l.length;\n    for(int i = 0; i < n; ++i)\n        sum += l[i];\n    return\
    \ sum / n;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_nvnec8o.d(13): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_nvnec8o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n    \
    \    if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2,\
    \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    long mid = l.length / 2;\n    float m = l[mid];\n\
    \    for(int i = mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n    \
    \    {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n\
    \    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float m = l[mid];\n    for(int i\
    \ = mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n        {\n      \
    \      m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ long mid = l.length / 2;\n    float m = l[mid];\n    for(int i = mid; i < l.length;\
    \ i++) \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n    \
    \    }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10,\
    \ 20])\n    15.0\n    \n*/\nfloat median(long long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(ulong l[]) \n\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphqcms1kr.d(31): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] l`\\n/tmp/tmphqcms1kr.d(52): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `float[] l`\\n/tmp/tmphqcms1kr.d(73): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmphqcms1kr.d(94):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmphqcms1kr.d(94):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmphqcms1kr.d(115):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `ulong[] l`\\n/tmp/tmphqcms1kr.d(117):\
    \ Error: semicolon expected following function declaration\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphqcms1kr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n   \
    \ float d = (a + b + c) / 3;\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsazc6t8n.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpsazc6t8n.__unittest_L19_C1()\
    \ [0x427e47]\\n??:? void tmpsazc6t8n.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b182]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430315]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307c4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b159]\\n??:? runModuleUnitTests [0x42c0c5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428730]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286b7]\\n??:? _d_run_main [0x428622]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x3859c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5at8jxel.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5at8jxel.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0) \n    {\n        return (l+1)/2;\n    }\n    else \n    {\n\
    \        return std.math.mid(l, l/2);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw61tu0qf.d(12): Error: undefined identifier `length`\\n/tmp/tmpw61tu0qf.d(12):\
    \ Error: variable `l` is shadowing variable `tmpw61tu0qf.median.l`\\n/tmp/tmpw61tu0qf.d(19):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpw61tu0qf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0) \n    {\n        float m = (float)l/2; \n        return std.math.midpoint(l,m);\n\
    \    }\n    else \n    {\n        float m = (float)l/2;\n        return std.math.midpoint(l,m);\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7szz4dgn.d(15): Error: C style cast illegal, use `cast(float)l`\\\
    n/tmp/tmp7szz4dgn.d(20): Error: C style cast illegal, use `cast(float)l`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7szz4dgn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmlz2kcor.d(14): Error: no property `subarray` for type `long[]`\\\
    n/tmp/tmpmlz2kcor.d(15): Error: undefined identifier `fabs` in package `std`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlz2kcor.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subList(0,\
    \ mid));\n    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpof35ky_j.d(14): Error: no property `subList` for type `long[]`\\\
    n/tmp/tmpof35ky_j.d(15): Error: undefined identifier `fabs` in package `std`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof35ky_j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length/2;\n\t\
    if (l.length%2 == 0)\n\t\treturn std.math.mid(l, mid);\n\telse\n\t\treturn std.math.mid(l,\
    \ mid, l.length);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4lfu0ph7.d(14): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmp4lfu0ph7.d(16): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lfu0ph7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    long mid = n / 2;\n    float left = 0;\n    float right\
    \ = 0;\n    float median = 0;\n    float temp = 0;\n    \n    for (int i = 0;\
    \ i < n; i++) {\n        temp = l[i];\n        if (temp < left) left = temp;\n\
    \        if (temp > right) right = temp;\n    }\n    \n    median = (left + right)\
    \ / 2;\n    return median;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvo22ggke.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ad]\\n??:? void tmpvo22ggke.__unittest_L29_C1()\
    \ [0x427e87]\\n??:? void tmpvo22ggke.__modtest() [0x428030]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c32f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1c2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430355]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430804]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302e1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b199]\\n??:? runModuleUnitTests [0x42c105]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428770]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286f7]\\n??:? _d_run_main [0x428662]\\n??:? main [0x428043]\\\
    n??:? __libc_start_main [0xd3540554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 1) return (l+1)/2;\n    else return std.math.mid(l);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr4rcccuq.d(12): Error: undefined identifier `length`\\n/tmp/tmpr4rcccuq.d(12):\
    \ Error: variable `l` is shadowing variable `tmpr4rcccuq.median.l`\\n/tmp/tmpr4rcccuq.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4rcccuq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long low = l[0];\n    long\
    \ high = l[0];\n    float median;\n    \n    for (int i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < low) low = l[i];\n        if (l[i] > high) high\
    \ = l[i];\n    }\n    \n    median = (float)(low + high) / 2;\n    \n    return\
    \ median;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp38vl40v_.d(22): Error: C style cast illegal, use `cast(float)(low\
    \ + high)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38vl40v_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float f = l[mid];\n    for(int i = 0; i < mid; i++) \n    {\n        f =\
    \ std.max(std.min(f + l[i], l[mid]), l[mid]);\n    }\n    return f;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9bm87veq.d(16): Error: undefined identifier `max` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bm87veq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float median;\n    if (l.length == 0) return 0;\n    if (l.length == 1) return\
    \ l[0];\n    if (l.length == 2) return l[0] + l[1];\n    if (l.length == 3) return\
    \ std.math.toFloat(l[0] + l[1] + l[2]);\n    \n    float leftMedian = median(l.subarray(0,\
    \ mid));\n    float rightMedian = median(l.subarray(mid, l.length));\n    \n \
    \   median = leftMedian + rightMedian / 2;\n    return median;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n\
    \    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double[]\
    \ l) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length ==\
    \ 0) return 0;\n    if (l.length == 1) return l[0];\n    if (l.length == 2) return\
    \ l[0] + l[1];\n    if (l.length == 3) return std.math.toFloat(l[0] + l[1] + l[2]);\n\
    \    \n    float leftMedian = median(l.subarray(0, mid));\n    float rightMedian\
    \ = median(l.subarray(mid, l.length));\n    \n    median = leftMedian + rightMedian\
    \ / 2;\n    return median;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10,\
    \ 20])\n    15.0\n    \n*/\nfloat median(float[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length == 0) return 0;\n    if (l.length\
    \ == 1) return l[0];\n    if (l.length == 2) return l[0] + l[1];\n    if (l.length\
    \ == 3) return std.math.toFloat(l[0] + l[1] + l[2]);\n    \n    float leftMedian\
    \ = median(l.subarray(0, mid));\n    float rightMedian = median(l.subarray(mid,\
    \ l.length));\n    \n    median = leftMedian + rightMedian / 2;\n    return median;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(short[]\
    \ l) \n{\n    long mid = l.length / 2;\n    float \nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq1dxg_ov.d(83): Error: no identifier for declarator `float`\\\
    n/tmp/tmpq1dxg_ov.d(83): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1dxg_ov.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n\
    \        if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n  \
    \  return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n       \
    \ if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2,\
    \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\
    float median(double l[]) \n{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    for(int i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(long l[])\
    \ \n{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int\
    \ i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n      \
    \      m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long\
    \ mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i <\
    \ l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    15.0\n    \n*/\nfloat median(double l\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphk48jyqj.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmphk48jyqj.d(31): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[] l`\\n/tmp/tmphk48jyqj.d(34): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmphk48jyqj.d(52): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `double[] l`\\n/tmp/tmphk48jyqj.d(55): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmphk48jyqj.d(73): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] l`\\n/tmp/tmphk48jyqj.d(76): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmphk48jyqj.d(94): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[] l`\\n/tmp/tmphk48jyqj.d(97): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmphk48jyqj.d(116): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphk48jyqj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length / 2;\n\t\
    float m1 = l[mid];\n\tfloat m2 = l[mid-1];\n\tfloat m3 = l[mid-2];\n\tfloat m4\
    \ = l[mid-3];\n\tfloat m5 = l[mid-4];\n\tfloat m6 = l[mid-5];\n\tfloat m7 = l[mid-6];\n\
    \tfloat m8 = l[mid-7];\n\tfloat m9 = l[mid-8];\n\tfloat m10 = l[mid-9];\n\tfloat\
    \ m11 = l[mid-10];\n\tfloat m12 = l[mid-11];\n\tfloat m13 = l[mid-12];\n\tfloat\
    \ m14 = l[mid-13];\n\tfloat m15 = l[mid-14];\n\tfloat m16 = l[mid-15];\n\tfloat\
    \ m17 = l[mid-16];\n\tfloat m18 = l[mid-17];\n\tfloat m19 = l[mid-18];\n\tfloat\
    \ m20 = l[mid-19];\n\tfloat m21 = l[mid-20];\n\tfloat m22 = l[mid-21];\n\tfloat\
    \ m23 = l[mid-22];\n\tfloat m24 = l[mid-23];\n\tfloat m25 = l[mid-24];\n\tfloat\
    \ m26 = l[mid-25];\n\tfloat m27 = l[mid-26];\n\tfloat m28 = l[mid-27];\n\tfloat\
    \ m29 = l[mid-28];\n\tfloat m30 = l[mid-29];\n\tfloat m31 = l[mid-30];\n\tfloat\
    \ m32 = l[mid-31];\n\tfloat m33 = l[mid-32];\n\tfloat m34 = l[mid-33];\n\tfloat\
    \ m35 = l[mid-34];\n\tfloat m36 = l[mid-35];\n\tfloat m37 = l[mid-36];\n\tfloat\
    \ m38 = l[mid-37];\n\tfloat m39 = l[mid-38];\n\tfloat m40 = l[mid-39];\n\tfloat\
    \ m41 = l[mid-40];\n\tfloat m42 = l[mid-41];\n\tfloat m43 = l[mid-42];\n\tfloat\
    \ m44 = l[mid-43];\n\tfloat m45 = l[mid-44];\n\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcwddnn6r.d(59): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwddnn6r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = 0.0;\n\tlong mid;\n\
    \t\n\tmid = l.length / 2;\n\t\n\tif (l.length == 0)\n\t\treturn 0.0;\n\t\n\tif\
    \ (l.length == 1)\n\t\treturn l[0];\n\t\n\tif (l[mid] < 0.0)\n\t\tmed = l[mid];\n\
    \telse\n\t\tmed = median(l);\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\
    \tif (l[i] < 0.0)\n\t\t\tmed = l[i];\n\t\telse\n\t\t{\n\t\t\tif (l[i] > med)\n\
    \t\t\t\tmed = l[i];\n\t\t}\n\t}\n\t\n\treturn med;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ float m = 0.0;\n    \n    for(int i = 0; i < l; i++)\n    {\n        if(l[i]\
    \ > m)\n            m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn9nashff.d(12): Error: undefined identifier `length`\\n/tmp/tmpn9nashff.d(12):\
    \ Error: variable `l` is shadowing variable `tmpn9nashff.median.l`\\n/tmp/tmpn9nashff.d(17):\
    \ Error: only one index allowed to index `long`\\n/tmp/tmpn9nashff.d(18): Error:\
    \ only one index allowed to index `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpn9nashff.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = std.math._median(l);\n\
    \    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp76fcgaag.d(12): Error: undefined identifier `_median` in module\
    \ `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76fcgaag.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int\
    \ n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(long l[]) \n{\n    int n = l.length;\n    if (n < 1) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6,\
    \ 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int n =\
    \ l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1;\
    \ i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n  \
    \  3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6vpv5teg.d(28): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp6vpv5teg.d(46): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp6vpv5teg.d(64): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp6vpv5teg.d(82):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmp6vpv5teg.d(100):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmp6vpv5teg.d(110):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6vpv5teg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n    for(int\
    \ i = 1; i < l.length; i++) \n    {\n        if(l[i] < m) \n        {\n      \
    \      m = l[i];\n        }\n    }\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuwgxtggs.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428265]\\n??:? void tmpuwgxtggs.__unittest_L22_C1()\
    \ [0x427e3f]\\n??:? void tmpuwgxtggs.__modtest() [0x427fe8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b17a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43030d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430299]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b151]\\n??:? runModuleUnitTests [0x42c0bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428728]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286af]\\n??:? _d_run_main [0x42861a]\\n??:? main [0x427ffb]\\\
    n??:? __libc_start_main [0x9f1a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 0)\n        return std.math.mid(l, 0, mid);\n    else\n\
    \        return std.math.mid(l, mid, l.length);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp24757hbi.d(14): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmp24757hbi.d(16): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24757hbi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n  \
    \  if (len == 0) return 0;\n    float m = l[0];\n    for (int i = 1; i < len;\
    \ i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg9uml0yz.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpg9uml0yz.__unittest_L20_C1()\
    \ [0x427e57]\\n??:? void tmpg9uml0yz.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b192]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430325]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b169]\\n??:? runModuleUnitTests [0x42c0d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0xc7d60554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length/2;\n\t\
    float median;\n\tif (l.length%2 == 0)\n\t{\n\t\tmedian = std.math.mid(l, mid);\n\
    \t}\n\telse\n\t{\n\t\tmedian = std.math.mid(l, mid, l.length);\n\t}\n\treturn\
    \ median;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphleyzyfc.d(16): Error: undefined identifier `mid` in module `std.math`\\\
    n/tmp/tmphleyzyfc.d(20): Error: undefined identifier `mid` in module `std.math`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphleyzyfc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1ip8dg8_.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmp1ip8dg8_.__unittest_L20_C1()\
    \ [0x427e57]\\n??:? void tmp1ip8dg8_.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b192]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430325]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b169]\\n??:? runModuleUnitTests [0x42c0d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0xe545f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length / 2;\n\t\
    float median = l[mid];\n\t\n\tfor (int i = 0; i < mid; i++)\n\t\tmedian = std.max(median,\
    \ l[i]);\n\t\n\treturn median;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5t5lzxto.d(16): Error: undefined identifier `max` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5t5lzxto.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length / 2;\n\t\
    if (l.length % 2 == 0) \n\t\treturn std.math.toFloat(l[mid]);\n\telse \n\t\treturn\
    \ std.math.toFloat(l[mid-1] + l[mid]);\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbbg4lynk.d(14): Error: undefined identifier `toFloat` in module\
    \ `std.math`\\n/tmp/tmpbbg4lynk.d(16): Error: undefined identifier `toFloat` in\
    \ module `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbbg4lynk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l == 0) return 0;\n    float m = l[0];\n    float m2 = l[l / 2];\n    float\
    \ m3 = l[l / 3];\n    float m4 = l[l / 4];\n    float m5 = l[l / 5];\n    float\
    \ m6 = l[l / 6];\n    float m7 = l[l / 7];\n    float m8 = l[l / 8];\n    float\
    \ m9 = l[l / 9];\n    float m10 = l[l / 10];\n    float m11 = l[l / 11];\n   \
    \ float m12 = l[l / 12];\n    float m13 = l[l / 13];\n    float m14 = l[l / 14];\n\
    \    float m15 = l[l / 15];\n    float m16 = l[l / 16];\n    float m17 = l[l /\
    \ 17];\n    float m18 = l[l / 18];\n    float m19 = l[l / 19];\n    float m20\
    \ = l[l / 20];\n    float m21 = l[l / 21];\n    float m22 = l[l / 22];\n    float\
    \ m23 = l[l / 23];\n    float m24 = l[l / 24];\n    float m25 = l[l / 25];\n \
    \   float m26 = l[l / 26];\n    float m27 = l[l / 27];\n    float m28 = l[l /\
    \ 28];\n    float m29 = l[l / 29];\n    float m30 = l[l / 30];\n    float m31\
    \ = l[l / 31];\n    float m32 = l[l / 32];\n    float m33 = l[l / 33];\n    float\
    \ m34 = l[l / 34];\n    float m35 = l[l / 35];\n    float m36 = l[l / 36];\n \
    \   float m37 = l[l / 37];\n    float m38 = l[l / 38];\n    float m39 = l[l /\
    \ 39];\n    float m40 = l[l / 40];\n    float m41 = l[l / 41];\n    float m42\
    \ = l[l / 42];\n    float m43 = l[l / 43];\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7kbgnbpa.d(57): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7kbgnbpa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length / 2;\n\t\
    float m = 0;\n\tfor (int i = 0; i < mid; i++)\n\t\tm += l[i];\n\tfor (int i =\
    \ mid; i < l.length; i++)\n\t\tm += l[i];\n\treturn m / mid;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkz8kc_r1.d(16): Error: cannot implicitly convert expression `mid`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpkz8kc_r1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m = l[0];\n    for\
    \ (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m) \n        {\n \
    \           m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n   \
    \ double m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n        if\
    \ (l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3, 1, 2,\
    \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    long m = l[0];\n    for (int i = 1; i < l.length;\
    \ ++i)\n    {\n        if (l[i] < m) \n        {\n            m = l[i];\n    \
    \    }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10,\
    \ 20])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m) \n     \
    \   {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[])\
    \ \n{\n    double m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n \
    \       if (l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\n\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4tw54ct4.d(32): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[] l`\\n/tmp/tmp4tw54ct4.d(52): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `double[] l`\\n/tmp/tmp4tw54ct4.d(72): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp4tw54ct4.d(92):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmp4tw54ct4.d(112):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmp4tw54ct4.d(124):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4tw54ct4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n    for(int\
    \ i = 1; i < l.length; i++) \n    {\n        if(l[i] < m) \n        {\n      \
    \      m = l[i];\n        }\n    }\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpola8erod.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428265]\\n??:? void tmpola8erod.__unittest_L22_C1()\
    \ [0x427e3f]\\n??:? void tmpola8erod.__modtest() [0x427fe8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b17a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43030d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430299]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b151]\\n??:? runModuleUnitTests [0x42c0bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428728]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286af]\\n??:? _d_run_main [0x42861a]\\n??:? main [0x427ffb]\\\
    n??:? __libc_start_main [0xae1a0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n\
    \        if(l[i] < m)\n        {\n            mid = i;\n            m = (float)l[mid];\n\
    \        }\n    }\n    return m;\n}\n</code>\n<|/ a tags=c++,median,algorithm\
    \ |>\n<| c |>\nThis code does not work. `median([3, 1, 2, 4, 5])` returns `3`\
    \ instead of `1.5`.\n<|/ c |>\n<| c |>\n: It doesn't work because `median([3,\
    \ 1, 2, 4, 5])` returns `3` instead of `1.5`. You have to change `if(l[i] < m)`\
    \ to `if(l[i] < m+l[mid])`.\n<|/ c |>\n<| c |>\n: I fixed the code. Now it works.\n\
    <|/ c |>\n<| c |>\n: I fixed the code. Now it works.\n<|/ c |>\n<| c |>\n: I fixed\
    \ the code. Now it works.\n<|/ c |>\n<| a tags=c++,median,algorithm |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy7payodl.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmpy7payodl.d(19): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmpy7payodl.d(24): Error: declaration expected, not `<`\\n/tmp/tmpy7payodl.d(30):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpy7payodl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0) return std.math.mid(l, l / 2);\n    else return std.math.mid(l\
    \ / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb7x790fd.d(12): Error: undefined identifier `length`\\n/tmp/tmpb7x790fd.d(12):\
    \ Error: variable `l` is shadowing variable `tmpb7x790fd.median.l`\\n/tmp/tmpb7x790fd.d(13):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmpb7x790fd.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpb7x790fd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n  \
    \  if (len == 0) return 0;\n    long mid = len / 2;\n    float median = l[mid];\n\
    \    for (int i = 0; i < mid; ++i)\n    {\n        median += l[i];\n    }\n  \
    \  median /= len;\n    return median;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6zk67njt.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428285]\\n??:? void tmp6zk67njt.__unittest_L23_C1()\
    \ [0x427e5b]\\n??:? void tmp6zk67njt.__modtest() [0x428004]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c307]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b19a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b171]\\n??:? runModuleUnitTests [0x42c0dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428748]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286cf]\\n??:? _d_run_main [0x42863a]\\n??:? main [0x428017]\\\
    n??:? __libc_start_main [0x7b68f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprz4twp2o.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42828d]\\n??:? void tmprz4twp2o.__unittest_L20_C1()\
    \ [0x427e67]\\n??:? void tmprz4twp2o.__modtest() [0x428010]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c30f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b179]\\n??:? runModuleUnitTests [0x42c0e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428750]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d7]\\n??:? _d_run_main [0x428642]\\n??:? main [0x428023]\\\
    n??:? __libc_start_main [0xc3c48554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0)\n        return std.math.toFloat(l/2);\n    else \n        return\
    \ std.math.toFloat((l+1)/2);\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp38qgcupu.d(12): Error: undefined identifier `length`\\n/tmp/tmp38qgcupu.d(12):\
    \ Error: variable `l` is shadowing variable `tmp38qgcupu.median.l`\\n/tmp/tmp38qgcupu.d(14):\
    \ Error: undefined identifier `toFloat` in module `std.math`\\n/tmp/tmp38qgcupu.d(16):\
    \ Error: undefined identifier `toFloat` in module `std.math`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38qgcupu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length / 2;\n\t\
    float median = l[mid];\n\tfor (int i = 0; i < mid; i++)\n\t\tmedian = (median\
    \ + l[i]) / 2;\n\treturn median;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcspxxdqd.d(22): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42824d]\\n??:? void tmpcspxxdqd.__unittest_L18_C1()\
    \ [0x427e27]\\n??:? void tmpcspxxdqd.__modtest() [0x427fd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2cf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b162]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430281]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b139]\\n??:? runModuleUnitTests [0x42c0a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428710]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428697]\\n??:? _d_run_main [0x428602]\\n??:? main [0x427fe3]\\\
    n??:? __libc_start_main [0x5093c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = (float)n;\n    float sum = 0;\n    for (int\
    \ i = 0; i < n; i++) sum += l[i];\n    return sum / m;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa5c5y0nk.d(14): Error: C style cast illegal, use `cast(float)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5c5y0nk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
    \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n \
    \   \n*/\nfloat median(float l[]) \n{\n    float m = (float)l[l.length / 2];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] < m) \n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double l[])\
    \ \n{\n    double m = (double)l[l.length / 2];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n    \
    \    }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10,\
    \ 20])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long m = (long)l[l.length\
    \ / 2];\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] < m) \n\
    \        {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n\
    \    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    float m = (float)l[l.length / 2];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n    \
    \    }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10,\
    \ 20])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    double m = (double)l[l.length\
    \ / 2];\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp09fc32l1.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\\\
    n/tmp/tmp09fc32l1.d(31): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[] l`\\n/tmp/tmp09fc32l1.d(33): Error: C style cast illegal, use `cast(float)l[l.length\
    \ / 2]`\\n/tmp/tmp09fc32l1.d(51): Deprecation: instead of C-style syntax, use\
    \ D-style syntax `double[] l`\\n/tmp/tmp09fc32l1.d(53): Error: C style cast illegal,\
    \ use `cast(double)l[l.length / 2]`\\n/tmp/tmp09fc32l1.d(71): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[] l`\\n/tmp/tmp09fc32l1.d(73): Error:\
    \ C style cast illegal, use `cast(long)l[l.length / 2]`\\n/tmp/tmp09fc32l1.d(91):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[] l`\\n/tmp/tmp09fc32l1.d(93):\
    \ Error: C style cast illegal, use `cast(float)l[l.length / 2]`\\n/tmp/tmp09fc32l1.d(111):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\\n/tmp/tmp09fc32l1.d(113):\
    \ Error: C style cast illegal, use `cast(double)l[l.length / 2]`\\n/tmp/tmp09fc32l1.d(117):\
    \ Error: found `unittest` when expecting `)`\\n/tmp/tmp09fc32l1.d(127): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp09fc32l1.d(127):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09fc32l1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 1) return (l+1)/2;\n    else return std.math.toFloat(std.random.nextFloat()\
    \ * l);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpios38md8.d(12): Error: undefined identifier `length`\\n/tmp/tmpios38md8.d(12):\
    \ Error: variable `l` is shadowing variable `tmpios38md8.median.l`\\n/tmp/tmpios38md8.d(14):\
    \ Error: undefined identifier `toFloat` in module `std.math`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpios38md8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptq52bcmo.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptq52bcmo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l % 2 == 0)\n        return std.math.mid(l, l / 2);\n    else\n        return\
    \ std.math.mid(l / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8plkupka.d(12): Error: undefined identifier `length`\\n/tmp/tmp8plkupka.d(12):\
    \ Error: variable `l` is shadowing variable `tmp8plkupka.median.l`\\n/tmp/tmp8plkupka.d(14):\
    \ Error: undefined identifier `mid` in module `std.math`\\n/tmp/tmp8plkupka.d(16):\
    \ Error: undefined identifier `mid` in module `std.math`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8plkupka.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n   \
    \ if (l == 0)\n        throw new Exception(\"empty list\");\n    \n    float m\
    \ = l[0];\n    \n    for (int i = 1; i < l; i++)\n        if (l[i] < m)\n    \
    \        m = l[i];\n    \n    return m;\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq3wb32yw.d(12): Error: undefined identifier `length`\\n/tmp/tmpq3wb32yw.d(12):\
    \ Error: variable `l` is shadowing variable `tmpq3wb32yw.median.l`\\n/tmp/tmpq3wb32yw.d(16):\
    \ Error: only one index allowed to index `long`\\n/tmp/tmpq3wb32yw.d(19): Error:\
    \ only one index allowed to index `long`\\n/tmp/tmpq3wb32yw.d(20): Error: only\
    \ one index allowed to index `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpq3wb32yw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float med = std.math.median(l);\n\
    \    return med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpixk644xm.d(12): Error: undefined identifier `median` in module\
    \ `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpixk644xm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float med = std.math.median(l);\n\
    \    return med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcxs61y9f.d(12): Error: undefined identifier `median` in module\
    \ `std.math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcxs61y9f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.fabs(leftMedian - rightMedian);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvi63op26.d(14): Error: function `tmpvi63op26.median(long[] l)`\
    \ is not callable using argument types `(long[], long)`\\n/tmp/tmpvi63op26.d(15):\
    \ Error: undefined identifier `fabs` in package `std`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvi63op26.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
