name: HumanEval_12_longest
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
  \ the longest one. Return the first one in case of multiple\n    strings of the\
  \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
  \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
  \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n"
tests: "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
  \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
  , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n\
  {\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
  , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\n\
  void main(){}"
completions: ["{\n    if (strings.length == 0) {\n        return null;\n    }\n  \
    \  var maxLength = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= maxLength.length) {\n            maxLength =\
    \ strings[i];\n        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}", "{\n\tint? max = null;\n\t\
    foreach (string s in strings)\n\t{\n\t\tif (s.Length > max)\n\t\t{\n\t\t\tmax\
    \ = s.Length;\n\t\t}\n\t}\n\treturn max;\n}", "{\n    if (strings.length == 0)\n\
    \        return null;\n    var maxLength = strings[0].length;\n    for (var i\
    \ = 1; i < strings.length; ++i) {\n        if (strings[i].length >= maxLength)\n\
    \            return strings[i];\n    }\n    return null;\n}", "{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLen = 0;\n    string maxString\
    \ = null;\n    for (string s : strings) {\n        int len = s.length();\n   \
    \     if (len > maxLen) {\n            maxLen = len;\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string; strings) {\n        if (longest == null || string.length\
    \ >= longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = 0;\n    string maxString\
    \ = null;\n    for (string string : strings) {\n        int len = string.length;\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length < longest.length)\n            longest = string;\n    }\n \
    \   return longest;\n}", "{\n    var longest = strings[0];\n    var longestLength\
    \ = strings[0].Length;\n    for(var i = 1; i < strings.Length; i++)\n    {\n \
    \       if(strings[i].Length > longestLength)\n        {\n            longest\
    \ = strings[i];\n            longestLength = strings[i].Length;\n        }\n \
    \   }\n    return longest;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nThis code doesn't work if you have a string with multiple equal\
    \ lengths. For example, `longest(\"abcabc\") returns \"abc\" instead of \"abcabc\"\
    .\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns \"abcabc\" as\
    \ expected.\n<|/ c |>\n<| c |>\n: I see what you mean. Yes, it does work. My bad.\
    \ Sorry.\n<|/ c |>\n<| c |>\n: No problem. Thanks for your help.\n<|/ c |>\n<|\
    \ c |>\n: No problem. Thanks for your help.\n<|/ c |>\n<| a tags=string,c#,longest-substring,algorithm\
    \ |>\n<code>\npublic string LongestSubstring(string s)\n{\n    string longest\
    \ = \"\";\n    string currentLongest = \"\";\n    foreach (char c in s)\n    {\n\
    \        if (current.Length > longest.Length)\n        {\n            longest\
    \ = currentLongest;\n        }\n        currentLongest = currentLongest + c;\n\
    \    }\n    return longest;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis code\
    \ doesn't work if you have a string with multiple equal lengths. For example,\
    \ `longest(\"abcabc\") returns \"abc\" instead of \"abcabc\".\n<|/ c |>\n<| c\
    \ |>\n: It does work. Try it yourself. It returns \"abcabc\" as expected.\n<|/\
    \ c |>\n<| c |>\n: I see what you mean. Yes, it does work. My bad. Sorry.\n<|/\
    \ c |>\n<| c |>\n: No problem. Thanks for your help.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\npublic static string LongestSubstring(string s)\n{\n    string longest\
    \ = \"\";\n    string currentLongest = \"\";\n    foreach (char c in s)\n    {\n\
    \        if (current.Length > longest.Length)\n        {\n            longest\
    \ = currentLongest;\n        }\n        currentLongest = currentLongest + c;\n\
    \    }\n    return longest;", "{\n\tstring[] longestStrings;\n\tif (strings.length\
    \ == 0) {\n\t\treturn null;\n\t}\n\tlongestStrings = strings;\n\tfor (int i =\
    \ 0; i < strings.length; ++i) {\n\t\tint length = strings[i].length;\n\t\tfor\
    \ (int j = i + 1; j < strings.length; ++j) {\n\t\t\tif (strings[i].length < strings[j].length)\
    \ {\n\t\t\t\tlongestStrings = strings;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (strings[i].length\
    \ == strings[j].length) {\n\t\t\t\tif (strings[i].length < longestStrings[j].length)\
    \ {\n\t\t\t\t\tlongestStrings = strings;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn longestStrings[0];\n}", "{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}", "{\n    foreach (string s in strings) {\n        if\
    \ (s.length() > longest.length)\n            longest = s;\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    \n    for (string string\
    \ : strings) {\n        int length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string s in strings) {\n        int length = s.length();\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = s;\n        }\n    }\n    \n    return maxString;\n}", "{\n \
    \   if (strings.length == 0) {\n        return null;\n    }\n    int maxLen =\
    \ 0;\n    string maxStr = null;\n    foreach (string s in strings) {\n       \
    \ int len = s.length();\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxStr = s;\n        }\n    }\n    return maxStr;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n \
    \       if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}", "{\n   \
    \ if (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nI like the idea of using LINQ to solve this problem, but I think\
    \ this solution doesn't work if there are multiple strings of the same length.\
    \ For example, longest([\"ab\", \"abc\", \"abcd\"]) returns \"abcd\" instead of\
    \ \"abc\".\n<|/ c |>\n<| c |>\nI agree, my solution doesn't take that into account.\
    \ I'll edit my answer to include a solution that does.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that does take that into account.\n<|/ c |>\n<| c |>\nI like the\
    \ idea of using LINQ to solve this problem, but I think this solution doesn't\
    \ work if there are multiple strings of the same length. For example, longest([\"\
    ab\", \"abc\", \"abcd\"]) returns \"abcd\" instead of \"abc\".\n<|/ c |>\n<| c\
    \ |>\nI agree, my solution doesn't take that into account. I'll edit my answer\
    \ to include a solution that does.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nstring\
    \ longest(string s)\n{\n    string longest = string.Empty;\n    string currentLongest\
    \ = string.Empty;\n    foreach (char c in s)\n    {\n        if (currentLongest.Length\
    \ > longest.Length)\n        {\n            longest = currentLongest;\n      \
    \  }\n        currentLongest += c;\n    }\n    return longest;\n}\n</code>\n<|/\
    \ a tags=string,c#,longest-substring,algorithm |>\n<| c |>\nThis solution doesn't\
    \ work if there are multiple strings of the same length. For example, longest([\"\
    ab\", \"abc\", \"abcd\"]) returns \"abcd\" instead of \"abc\".\n<|/ c |>\n<| c\
    \ |>\nI agree, my solution doesn't take that into account. I'll edit my answer\
    \ to include a solution that does.\n<|/ c |>\n<| c |>\nI like the idea of using\
    \ LINQ to solve this problem, but I think this solution doesn't work if there\
    \ are multiple strings of the same length. For example, longest([\"ab\", \"abc\"\
    , \"abcd\"]) returns \"abcd\" instead of \"abc\".\n<|/ c |>\n<| c |>\nI agree,\
    \ my solution doesn't take that into ", "{\n    if (strings.length == 0) {\n \
    \       return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string string : strings) {\n        int length = string.length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string; strings) {\n     \
    \   if (longest == null || string.length() > longest.length()) {\n           \
    \ longest = string;\n        }\n    }\n    return longest;\n}", "{\n    int? maxLength\
    \ = null;\n    foreach (string s in strings) {\n        int length = s.length();\n\
    \        if (maxLength == null || maxLength > length) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLen = 0;\n    string\
    \ maxStr = null;\n    foreach (string s in strings) {\n        int len = s.length();\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxStr =\
    \ s;\n        }\n    }\n    return maxStr;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n   \
    \ for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length >=\
    \ maxLen) {\n            return strings[i];\n        }\n        maxLen = strings[i].length;\n\
    \    }\n    return null;\n}", "{\n    foreach (string str in strings) {\n    \
    \    if (str.length > longest.length)\n            longest = str;\n    }\n   \
    \ return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\n/*\n In list of strings, return the longest string in reverse order. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longestReverse([])", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string; strings) {\n        if(longest == null || string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}", "{\n    foreach (string s in strings) {\n        if (s.length()\
    \ > longest.length) longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    var maxLength = 0;\n    var\
    \ maxString = \"\";\n    \n    for (var i = 0; i <strings.length; ++i) {\n   \
    \     var str = strings[i];\n        if (str.length > maxLength) {\n         \
    \   maxLength = str.length;\n            maxString = str;\n        }\n    }\n\
    \    \n    return maxString;\n}", "{\n    if (strings.length == 0) {\n       \
    \ return null;\n    }\n    int maxLen = strings[0].Length;\n    foreach (string\
    \ s in strings) {\n        if (s.Length > maxLen) {\n            maxLen = s.Length;\n\
    \        }\n    }\n    return maxLen > 0 ? strings[strings.length - 1] : null;\n\
    }", "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\
    \ longest = s;\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static string LongestSubstring(string str)\n\
    {\n    string longest = \"\";\n    string current;\n    foreach (char c in str)\n\
    \    {\n        if (current == \"\")\n        {\n            current = c;\n  \
    \      }\n        else if (current.Length > c.Length)\n        {\n           \
    \ current = c;\n        }\n        else\n        {\n            if (current.Length\
    \ < c.Length)\n            {\n                longest = current;\n           \
    \     current = c;\n            }\n        }\n    }\n    return longest;\n}\n\
    </code>\n<|/ a tags=string,c#,longest-substring,algorithm |>\n<| a tags=string,c#,longest-substring,algorithm\
    \ |>\n<code>\npublic static string LongestSubstring(string str)\n{\n    string\
    \ longest = \"\";\n    string current;\n    foreach (char c in str)\n    {\n \
    \       if (current == \"\")\n        {\n            current = c;\n        }\n\
    \        else if (current.Length > c.Length)\n        {\n            current =\
    \ c;\n        }\n        else\n        {\n            if (current.Length < c.Length)\n\
    \            {\n                longest = current;\n                current =\
    \ c;\n            }\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=string,c#,longest-substring,algorithm |>\n<code>\npublic\
    \ static string LongestSubstring(string str)\n{\n    string longest = \"\";\n\
    \    string current;\n    foreach (char c in str)\n    {\n        if (current\
    \ == \"\")\n        {\n            current = c;\n        }\n        else if (current.Length\
    \ > c.Length)\n        {\n            current = c;\n        }\n        else\n\
    \        {\n            if (current.Length < c.Length)\n            {\n      \
    \          longest = current;\n                current = c;\n            }\n \
    \       }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static string LongestSubstring(string str)\n{\n    string\
    \ longest = \"\";\n    string current;\n    foreach (char c in str)\n    {\n \
    \       if (current == \"\")\n        {\n            current = c;\n        }\n\
    \        else if (current.Length > c.Length)\n        {\n            current =\
    \ c;\n        }\n        else\n        {\n            if (current.Length < c.Length)\n\
    \            {\n                longest = current;\n                current =\
    \ c;\n            }\n        }\n    }\n    return longest;\n}\n</code>", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen\
    \ = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int len = strings[i].length;\n        if (len > maxLen) {\n     \
    \       maxLen = len;\n            maxIndex = i;\n        }\n    }\n    \n   \
    \ return strings[maxIndex];\n}", "{\n\tstring longest = strings[0];\n\tfor (string\
    \ s in strings) {\n\t\tif (s.length() > longest.length()) {\n\t\t\tlongest = s;\n\
    \t\t}\n\t}\n\treturn longest;\n}", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    \n    int maxLen = strings[0].length;\n    \n    for\
    \ (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= maxLen)\
    \ {\n            maxLen = strings[i].length;\n        }\n    }\n    \n    return\
    \ strings[strings.length - 1];\n}", "{\n    if (strings.length == 0) {\n     \
    \   return null;\n    }\n    \n    int maxLen = 0;\n    int maxIndex = 0;\n  \
    \  \n    for (int i = 0; i < strings.length; ++i) {\n        int len = strings[i].length;\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        var len = strings[i].length;\n\
    \        if (len > longest.length) {\n            longest = strings[i];\n    \
    \    }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string; strings)\n    {\n        if (longest == null || string.length\
    \ < longest.length)\n        {\n            longest = string;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    foreach(string; strings) {\n        if (string.length()\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    foreach (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLength = 0;\n    string maxString = null;\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i\
    \ < strings.length; ++i) {\n        if (strings[i].length >= maxLen) {\n     \
    \       maxLen = strings[i].length;\n        }\n    }\n    \n    return strings[strings.length\
    \ - 1];\n}", "{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    var longest = strings[0];\n    for (var i =\
    \ 1; i < strings.length; i++) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string; strings) {\n\
    \        if (longest == null || string.length() > longest.length()) {\n      \
    \      longest = string;\n        }\n    }\n    return longest;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i <strings.length;\
    \ ++i) {\n        var length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    return maxString;\n}", "{\n    var maxLength = 0;\n    var\
    \ maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}", "{\n    foreach(string; strings)\
    \ {\n        if (string.length() > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n  \
    \  for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s in strings) {\n\
    \        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    int maxLength = 0;\n    string maxString = null;\n    foreach (string s\
    \ in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    int maxLen = 0;\n    int maxIndex = 0;\n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int len = strings[i].length;\n  \
    \      if (len > maxLen) {\n            maxLen = len;\n            maxIndex =\
    \ i;\n        }\n    }\n    return strings[maxIndex];\n}", "{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n \
    \       return null;\n    }\n    var longest = strings[0];\n    for (var i = 1;\
    \ i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    foreach (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    return maxString;\n}", "{\n    int? maxLength = null;\n    foreach(string;\
    \ strings)\n    {\n        if (maxLength == null || string.length >= maxLength)\n\
    \        {\n            maxLength = string.length;\n        }\n    }\n    return\
    \ maxLength;\n}", "{\n    string longest = strings[0];\n    foreach (string s\
    \ in strings) {\n        if (s.length() > longest.length()) {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    int maxLength = 0;\n    string maxString = null;\n    foreach(string;\
    \ strings) {\n        int length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}", "{\n    string longest = null;\n    foreach\
    \ (string s in strings) {\n        if (longest == null || s.length() > longest.length())\
    \ {\n            longest = s;\n        }\n    }\n    return longest;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n    int maxLength = 0;\n\
    \    string maxString = null;\n    foreach (string s in strings) {\n        if\
    \ (s.length() > maxLength) {\n            maxLength = s.length();\n          \
    \  maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    for (var i=0; i<strings.length; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}", "{\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n", "{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n    foreach (string s in strings)\n    {\n     \
    \   if (s.length() > longest.length)\n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n \
    \       return null;\n    var maxLength = strings[0];\n    for (var i = 1; i <\
    \ strings.length; ++i)\n        if (strings[i].length >= maxLength.length)\n \
    \           maxLength = strings[i];\n    return maxLength;\n}", "{\n    int? maxLength\
    \ = null;\n    foreach(string; strings) {\n        if (maxLength == null || string.length\
    \ >= maxLength) {\n            maxLength = string.length;\n        }\n    }\n\
    \    return maxLength;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    int? maxLength = null;\n    foreach (string s in strings) {\n        if\
    \ (maxLength == null || s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string; strings) {\n        if (longest == null || string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}", "{\n    int maxLength = 0;\n    string maxString = null;\n\
    \    foreach(string,strings,string) \n    {\n        int length = string.length;\n\
    \        if (length > maxLength)\n        {\n            maxLength = length;\n\
    \            maxString = string;\n        }\n    }\n    return maxString;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length\
    \ > maxLength) {\n            maxLength = s.length;\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    int maxLen = 0;\n    int maxIndex = 0;\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        int len = strings[i].length;\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxIndex\
    \ = i;\n        }\n    }\n    return strings[maxIndex];\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLen = 0;\n    int maxIdx =\
    \ 0;\n    for (int i = 0; i < strings.length; ++i) {\n        int len = strings[i].length;\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxIdx =\
    \ i;\n        }\n    }\n    return strings[maxIdx];\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    for (var i = 0; i &lt; strings.length; i++) {\n        var length\
    \ = strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    int maxLength = 0;\n    int maxIndex = 0;\n    for (int i = 0; i <\
    \ strings.length; i++) {\n        int length = strings[i].length;\n        if\
    \ (length > maxLength) {\n            maxLength = length;\n            maxIndex\
    \ = i;\n        }\n    }\n    return strings[maxIndex];\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLen) {\n   \
    \         maxLen = s.length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}", "{\n\tint? maxLength = null;\n\tforeach (string s in strings)\n\t\
    {\n\t\tif (maxLength == null || s.length() > maxLength)\n\t\t{\n\t\t\tmaxLength\
    \ = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\n/*\n In list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n    >>> longest([])", "{\n   \
    \ if (strings.length == 0) {\n        return null;\n    }\n    int maxLength =\
    \ 0;\n    int maxIndex = 0;\n    for (auto s : strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxIndex =\
    \ i;\n        }\n    }\n    return strings[maxIndex];\n}", "{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n \
    \       return null;\n    }\n    \n    int maxLen = strings[0].length;\n    \n\
    \    for (int i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= maxLen) {\n            maxLen = strings[i].length;\n        }\n    }\n  \
    \  \n    return strings[strings.length - 1];\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string s in strings) {\n        int length\
    \ = s.length();\n        if (length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    for (var i = 0; i <strings.length; i++)\
    \ {\n        var s = strings[i];\n        if (s.length == maxLength) {\n     \
    \       maxString = s;\n        } else {\n            if (s.length > maxLength)\
    \ {\n                maxLength = s.length;\n                maxString = s;\n \
    \           }\n        }\n    }\n    return maxString;\n}", "{\n\tint? max = null;\n\
    \tforeach(string; strings) {\n\t\tif (max is null || string.length >= max.value)\
    \ {\n\t\t\tmax = string;\n\t\t}\n\t}\n\treturn max;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s in strings)\n  \
    \  {\n        int length = s.length();\n        if (length > maxLength)\n    \
    \    {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    \n    return maxString;\n}", "{\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    foreach(string; strings) {\n        var length = string.length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = string;\n        }\n    }\n    return maxString;\n}", "{\n  \
    \  if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    for (var i = 0; i != strings.length; ++i)\
    \ {\n        var s = strings[i];\n        var length = s.length();\n        if\
    \ (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}", "{\n    int? maxLength =\
    \ null;\n    foreach(string; strings) {\n        if (maxLength == null || string.length\
    \ < maxLength) {\n            maxLength = string.length;\n        }\n    }\n \
    \   return maxLength;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    int maxLength = 0;\n    string maxString = null;\n    for\
    \ (string string : strings) {\n        if (string.length > maxLength) {\n    \
    \        maxLength = string.length;\n            maxString = string;\n       \
    \ }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n  \
    \      return null;\n    }\n    \n    int maxLen = 0;\n    int maxIndex = 0;\n\
    \    \n    for (int i = 0; i < strings.length; ++i) {\n        int len = strings[i].length;\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    \n    int maxLength = 0;\n    string maxString = null;\n\
    \    \n    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n    foreach(string) string\
    \ in strings {\n        if(string.length > longest.length) longest = string;\n\
    \    }\n    return longest;\n}", "{\n    string longest = strings[0];\n    foreach\
    \ (string s in strings)\n    {\n        if (s.length() > longest.length())\n \
    \       {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLen\
    \ = 0;\n    string maxStr = null;\n    for (string str : strings) {\n        int\
    \ len = str.length;\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxStr = str;\n        }\n    }\n    return maxStr;\n}", "{\n   \
    \ foreach(string; strings) {\n        if (string.length == strings.length)\n \
    \           return string;\n    }\n    return None;\n}", "{\n    int maxLen =\
    \ 0;\n    string maxStr = null;\n    foreach (string s in strings) {\n       \
    \ int len = s.length();\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxStr = s;\n        }\n    }\n    return maxStr;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    int maxIndex = 0;\n    for (int i = 0; i < strings.length; ++i) {\n     \
    \   if (strings[i].length() > maxLength) {\n            maxLength = strings[i].length();\n\
    \            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ < longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ > longest.length) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        var len = strings[i].length;\n        if (len > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = Nullable!(string);\n    foreach(string;\
    \ strings) {\n        if (longest.isNull) {\n            longest = string;\n \
    \       } else {\n            if (longest.length < string.length) {\n        \
    \        longest = string;\n            }\n        }\n    }\n    return longest;\n\
    }", "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\
    \ longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string s in strings) {\n        int length\
    \ = s.length();\n        if (length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen\
    \ = strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return maxLen > 0 ? strings[strings.length - 1] :\
    \ null;\n}", "{\n    int maxLen = 0;\n    int maxIdx = 0;\n    foreach(string\
    \ s, strings) {\n        int len = s.length();\n        if (len > maxLen) {\n\
    \            maxLen = len;\n            maxIdx = idx;\n        }\n    }\n    return\
    \ strings[maxIdx];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import std.stdio;\nimport std.string;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;", "{\n    if (strings.length == 0)\n        return null;\n  \
    \  var maxLength = 0;\n    var maxString = null;\n    for (var i = 0; i &lt; strings.length;\
    \ ++i) {\n        var s = strings[i];\n        if (s.length &gt; maxLength) {\n\
    \            maxLength = s.length;\n            maxString = s;\n        }\n  \
    \  }\n    return maxString;\n}", "{\n    Nullable!(string) longest = null;\n \
    \   foreach(string; strings) {\n        if (longest == null || string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    for (var string in strings) {\n       \
    \ if (string.length > maxLength) {\n            maxLength = string.length;\n \
    \           maxString = string;\n        }\n    }\n    return maxString;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string; strings) {\n    \
    \    if (longest == null || string.length() > longest.length()) {\n          \
    \  longest = string;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      int length = strings[i].length;\n        if (length > maxLength) {\n  \
    \          maxLength = length;\n            maxString = strings[i];\n        }\n\
    \    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    var longest = strings[0];\n    for (var i =\
    \ 1; i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string)null;\n    foreach(string; strings) {\n        if(longest\
    \ == null || string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    var longest = strings[0];\n    for (var i =\
    \ 1; i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    var maxLen = strings[0].length;\n\
    \    for (var i = 1; i < strings.length; i++)\n        if (strings[i].length >=\
    \ maxLen)\n            maxLen = strings[i].length;\n    return maxLen > 0 ? strings[strings.length\
    \ - 1] : null;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLength = 0;\n    string maxString = null;\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    int maxLength = 0;\n    string maxString = null;\n    for (string string\
    \ : strings) {\n        int stringLength = string.length;\n        if (stringLength\
    \ > maxLength) {\n            maxLength = stringLength;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}", "{\n    var longest\
    \ = strings[0];\n    var longestLength = strings.length;\n    for(var i = 1; i\
    \ < strings.length; ++i)\n    {\n        var length = strings[i].length;\n   \
    \     if(length > longestLength)\n        {\n            longest = strings[i];\n\
    \            longestLength = length;\n        }\n    }\n    return longest;\n}",
  "{\n    int? maxLength = null;\n    foreach (string s in strings) {\n        if\
    \ (maxLength == null || s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    foreach (string s in strings) {\n        int length = s.length();\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n    int?\
    \ maxLength = null;\n    foreach(string; strings) {\n        if (maxLength ==\
    \ null || string.length < maxLength) {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}", "{\n   \
    \ int maxLength = 0;\n    string maxString = null;\n    foreach(string; strings)\
    \ {\n        if (string.length > maxLength) {\n            maxLength = string.length;\n\
    \            maxString = string;\n        }\n    }\n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen\
    \ = 0;\n    string maxStr = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int len = strings[i].length;\n        if (len > maxLen) {\n\
    \            maxLen = len;\n            maxStr = strings[i];\n        }\n    }\n\
    \    \n    return maxStr;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    var maxLength = 0;\n    var maxString = null;\n    \n\
    \    for (var i = 0; i <strings.length; ++i) {\n        var s = strings[i];\n\
    \        if (s.length >= maxLength) {\n            maxString = s;\n          \
    \  maxLength = s.length;\n        }\n    }\n    \n    return maxString;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s in strings) {\n\
    \        int length = s.length();\n        if (length > maxLength) {\n       \
    \     maxLength = length;\n            maxString = s;\n        }\n    }\n    \n\
    \    return maxString;\n}", "{\n    int maxLen = 0;\n    string maxString = null;\n\
    \    foreach(string; strings)\n    {\n        int len = string.length;\n     \
    \   if (len > maxLen)\n        {\n            maxLen = len;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }", "{\n    int maxLen = 0;\n    int maxIdx = 0;\n    foreach (string s in strings)\
    \ {\n        int len = s.length();\n        if (len > maxLen) {\n            maxLen\
    \ = len;\n            maxIdx = s.length();\n        }\n    }\n    if (maxLen >\
    \ 0) return strings[maxIdx];\n    else return null;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    var maxLength = 0;\n    var maxString = null;\n\
    \    for (var i=0; i<strings.length; ++i) {\n        var s = strings[i];\n   \
    \     if (s.length >= maxLength) {\n            maxString = s;\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      int length = strings[i].length();\n        if (length > maxLength) {\n\
    \            maxLength = length;\n            maxString = strings[i];\n      \
    \  }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    foreach (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n  \
    \      return null;\n    }\n    var longest = strings[0];\n    for (var i = 1;\
    \ i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    foreach (string s in strings) {\n     \
    \   if (s.length() > maxLength) {\n            maxLength = s.length();\n     \
    \       maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = strings[0].Length;\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].Length\
    \ > maxLength) {\n            maxLength = strings[i].Length;\n        }\n    }\n\
    \    return maxLength > 0 ? strings[strings.length - 1] : null;\n}", "{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length) longest =\
    \ s;\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n   \
    \     return null;\n    }\n    int maxLen = strings[0].length;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLen) {\n            maxLen = s.length;\n\
    \        }\n    }\n    return strings[strings.length - 1];\n}", "{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    for (var i = 0; i &lt; strings.length; ++i) {\n        var s =\
    \ strings[i];\n        if (s.length &gt; maxLength) {\n            maxLength =\
    \ s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }", "{\n    Nullable!(string) longest = Nullable!(string);\n    foreach(string;\
    \ strings) {\n        if (longest.isNull) {\n            longest = string;\n \
    \       }\n        else if (longest.length < string.length) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    foreach (string s in strings) {\n        int length =\
    \ s.length();\n        if (length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n \
    \   Nullable!(string) longest = Nullable!(string);\n    foreach(string; strings)\
    \ {\n        if (longest.isNull) {\n            longest = string;\n        } else\
    \ if (longest.length < string.length) {\n            longest = string;\n     \
    \   }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ shortest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n    >>> shortest([])",
  "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string string : strings) {\n        int length = string.length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = string;\n        }\n    }\n    return maxString;\n}", "{\n  \
    \  Nullable!(string) longest = null;\n    foreach(string; strings) {\n       \
    \ if (longest == null || string.length() > longest.length()) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLen = strings[0].length;\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            maxLen = strings[i].length;\n        }\n    }\n  \
    \  \n    return strings[strings.length - 1];\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string string : strings) {\n        int length\
    \ = string.length;\n        if (length > maxLength) {\n            maxLength =\
    \ length;\n            maxString = string;\n        }\n    }\n    \n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for\
    \ (string s : strings) {\n        int length = s.length();\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = s;\n\
    \        }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLen) {\n   \
    \         maxLen = s.length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}", "{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        var len = strings[i].length;\n        if (len > longest.length) {\n \
    \           longest = strings[i];\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLen = 0;\n    int maxIndex\
    \ = 0;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int len\
    \ = strings[i].length;\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n\
    }", "{\n    int? maxLength = null;\n    foreach (string s in strings) {\n    \
    \    if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n\tstring[] longestStrings = strings;\n\t\n\tfor (int i = 0; i < longestStrings.length;\
    \ ++i)\n\t{\n\t\tstring longestString = longestStrings[i];\n\t\t\n\t\tfor (int\
    \ j = i + 1; j < longestStrings.length; ++j)\n\t\t{\n\t\t\tstring currentString\
    \ = longestStrings[j];\n\t\t\t\n\t\t\tif (currentString.length() > longestString.length())\n\
    \t\t\t{\n\t\t\t\tlongestString = currentString;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif\
    \ (longestString.length() > 0)\n\t\t{\n\t\t\treturn longestString;\n\t\t}\n\t\
    }\n\t\n\treturn null;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    var maxLength = 0;\n    var maxString = \"\";\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0;\
    \ i <strings.length; ++i) {\n        var s = strings[i];\n        if (s.length\
    \ >= maxLength) {\n            maxString = s;\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxString;\n}\n/*\n In list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n    >>> longest([])",
  "{\n    int? maxLength = null;\n    foreach (string s in strings) {\n        if\
    \ (maxLength == null || s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}", "{\n    var maxLength = 0;\n   \
    \ var maxString = \"\";\n    foreach(string; strings) {\n        var length =\
    \ string.length;\n        if (length > maxLength) {\n            maxLength = length;\n\
    \            maxString = string;\n        }\n    }\n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n", "{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        var len\
    \ = strings[i].length;\n        if (len > longest.length)\n            longest\
    \ = strings[i];\n    }\n    return longest;\n}", "{\n    foreach(string; strings)\
    \ {\n        string longest = string;\n        foreach(string; strings) {\n  \
    \          if (string.length() > longest.length()) {\n                longest\
    \ = string;\n            }\n        }\n        return longest;\n    }\n    return\
    \ None;\n}", "{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = strings[0].length;\n    int maxIndex = 0;\n    for (int i =\
    \ 1; i < strings.length; i++) {\n        if (strings[i].length >= maxLen) {\n\
    \            maxLen = strings[i].length;\n            maxIndex = i;\n        }\n\
    \    }\n    return strings[maxIndex];\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    var maxLength = 0;\n    var maxString = \"\"\
    ;\n    for (var i = 0; i <strings.length; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}", "{\n\
    \    var longest = strings[0];\n    foreach(string; strings)\n    {\n        if(string.length\
    \ > longest.length)\n        {\n            longest = string;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}", "{\n\tint? maxLength = null;\n\tforeach\
    \ (string s in strings) {\n\t\tif (maxLength == null || s.length() > maxLength.Value())\
    \ {\n\t\t\tmaxLength = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}", "{\n  \
    \  Nullable!(string) longest = null;\n    foreach(string; strings) {\n       \
    \ if (longest == null || string.length() > longest.length()) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}", "{\n\tstring[] longest\
    \ = strings;\n\t\n\tforeach (string s in strings) {\n\t\tif (longest.length <\
    \ s.length) longest = s;\n\t}\n\t\n\treturn longest;\n}", "{\n    string longest\
    \ = strings[0];\n    foreach (string s in strings)\n    {\n        if (s.length()\
    \ > longest.length())\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    int maxLen = 0;\n    int maxLenIndex = 0;\n    for (int i = 0; i <\
    \ strings.length; ++i) {\n        int len = strings[i].length;\n        if (len\
    \ > maxLen) {\n            maxLen = len;\n            maxLenIndex = i;\n     \
    \   }\n    }\n    return strings[maxLenIndex];\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int length\
    \ = strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    \n   \
    \ return maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    var maxLen = 0;\n    var maxString = \"\";\n\
    \    for (var i=0; i<strings.length; ++i) {\n        var len = strings[i].length;\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length >= longest.length)\n            longest = string;\n    }\n\
    \    return longest;\n}", "{\n    int? maxLength = null;\n    foreach(string;\
    \ strings) {\n        if (maxLength == null || string.length < maxLength) {\n\
    \            maxLength = string.length;\n        }\n    }\n    return maxLength;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nimport std.stdio;\nimport\
    \ std.string;\nimport std.array;\nimport std.algorithm;", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string s : strings) {\n        int length\
    \ = s.length();\n        if (length >= maxLength) {\n            maxString = s;\n\
    \            maxLength = length;\n        } else if (length == maxLength) {\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLen\
    \ = strings[0].length;\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLen) {\n            maxLen = s.length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}", "{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLen = strings[0].length;\n\
    \    string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= maxLen) {\n            longest = strings[i];\n\
    \            maxLen = longest.length;\n        }\n    }\n    \n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string; strings) {\n\
    \        if (longest == null || string.length >= longest.length)\n           \
    \ longest = string;\n    }\n    return longest;\n}", "{\n    foreach (string s\
    \ in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
