name: HumanEval_12_longest
language: humaneval_to_dlang.py
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLength.length) {\n            maxLength = strings[i];\n        }\n   \
    \ }\n    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkomgv207.d(19): Error: undefined identifier `var`\\n/tmp/tmpkomgv207.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpkomgv207.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkomgv207.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgi_91g_q.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgi_91g_q.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\tint?\
    \ max = null;\n\tforeach (string s in strings)\n\t{\n\t\tif (s.Length > max)\n\
    \t\t{\n\t\t\tmax = s.Length;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_62prca.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpi_62prca.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmpi_62prca.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpi_62prca.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var maxLength = strings[0].length;\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLength)\n            return strings[i];\n    }\n    return null;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfj5vqe2y.d(18): Error: undefined identifier `var`\\n/tmp/tmpfj5vqe2y.d(19):\
    \ Error: undefined identifier `var`\\n/tmp/tmpfj5vqe2y.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpfj5vqe2y.d(23):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfj5vqe2y.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk6n0vfl9.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6n0vfl9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = 0;\n\
    \    string maxString = null;\n    for (string s : strings) {\n        int len\
    \ = s.length();\n        if (len > maxLen) {\n            maxLen = len;\n    \
    \        maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1hr1z_3b.d(21): Error: found `s` when expecting `;` following\
    \ statement\\n/tmp/tmp1hr1z_3b.d(21): Error: expression expected, not `:`\\n/tmp/tmp1hr1z_3b.d(21):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hr1z_3b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length >= longest.length)\n            longest = string;\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6k23mr5k.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x455539]\\n??:? void tmp6k23mr5k.__unittest_L23_C1()\
    \ [0x4414a3]\\n??:? void tmp6k23mr5k.__modtest() [0x453048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e3af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454b66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459d59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454b3d]\\n??:? runModuleUnitTests [0x45e185]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4564c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x45644b]\\n??:? _d_run_main [0x4563b6]\\n??:? main [0x45311b]\\\
    n??:? __libc_start_main [0xadff0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n\
    \    string maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbulrmyz9.d(23): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpbulrmyz9.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpbulrmyz9.d(30):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbulrmyz9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = 0;\n\
    \    string maxString = null;\n    for (string string : strings) {\n        int\
    \ len = string.length;\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxString = string;\n        }\n    }\n    return maxString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplzilu295.d(21): Error: found `string` when expecting `;` following\
    \ statement\\n/tmp/tmplzilu295.d(21): Error: expression expected, not `:`\\n/tmp/tmplzilu295.d(21):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzilu295.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length < longest.length)\n            longest = string;\n    }\n \
    \   return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc291ulyr.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x455539]\\n??:? void tmpc291ulyr.__unittest_L23_C1()\
    \ [0x4414a3]\\n??:? void tmpc291ulyr.__modtest() [0x453048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e3af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454b66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459d59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454b3d]\\n??:? runModuleUnitTests [0x45e185]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4564c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x45644b]\\n??:? _d_run_main [0x4563b6]\\n??:? main [0x45311b]\\\
    n??:? __libc_start_main [0xed539554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    var\
    \ longest = strings[0];\n    var longestLength = strings[0].Length;\n    for(var\
    \ i = 1; i < strings.Length; i++)\n    {\n        if(strings[i].Length > longestLength)\n\
    \        {\n            longest = strings[i];\n            longestLength = strings[i].Length;\n\
    \        }\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nThis code doesn't work if you have a string with multiple equal\
    \ lengths. For example, `longest(\"abcabc\") returns \"abc\" instead of \"abcabc\"\
    .\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns \"abcabc\" as\
    \ expected.\n<|/ c |>\n<| c |>\n: I see what you mean. Yes, it does work. My bad.\
    \ Sorry.\n<|/ c |>\n<| c |>\n: No problem. Thanks for your help.\n<|/ c |>\n<|\
    \ c |>\n: No problem. Thanks for your help.\n<|/ c |>\n<| a tags=string,c#,longest-substring,algorithm\
    \ |>\n<code>\npublic string LongestSubstring(string s)\n{\n    string longest\
    \ = \"\";\n    string currentLongest = \"\";\n    foreach (char c in s)\n    {\n\
    \        if (current.Length > longest.Length)\n        {\n            longest\
    \ = currentLongest;\n        }\n        currentLongest = currentLongest + c;\n\
    \    }\n    return longest;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis code\
    \ doesn't work if you have a string with multiple equal lengths. For example,\
    \ `longest(\"abcabc\") returns \"abc\" instead of \"abcabc\".\n<|/ c |>\n<| c\
    \ |>\n: It does work. Try it yourself. It returns \"abcabc\" as expected.\n<|/\
    \ c |>\n<| c |>\n: I see what you mean. Yes, it does work. My bad. Sorry.\n<|/\
    \ c |>\n<| c |>\n: No problem. Thanks for your help.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\npublic static string LongestSubstring(string s)\n{\n    string longest\
    \ = \"\";\n    string currentLongest = \"\";\n    foreach (char c in s)\n    {\n\
    \        if (current.Length > longest.Length)\n        {\n            longest\
    \ = currentLongest;\n        }\n        currentLongest = currentLongest + c;\n\
    \    }\n    return longest;\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxok2z_lc.d(28): Error: declaration expected, not `<`\\n/tmp/tmpxok2z_lc.d(31):\
    \ Error: unterminated character constant\\n/tmp/tmpxok2z_lc.d(81): Error: declaration\
    \ expected, not `foreach`\\n/tmp/tmpxok2z_lc.d(86): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxok2z_lc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\tstring[]\
    \ longestStrings;\n\tif (strings.length == 0) {\n\t\treturn null;\n\t}\n\tlongestStrings\
    \ = strings;\n\tfor (int i = 0; i < strings.length; ++i) {\n\t\tint length = strings[i].length;\n\
    \t\tfor (int j = i + 1; j < strings.length; ++j) {\n\t\t\tif (strings[i].length\
    \ < strings[j].length) {\n\t\t\t\tlongestStrings = strings;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t\tif (strings[i].length == strings[j].length) {\n\t\t\t\tif (strings[i].length\
    \ < longestStrings[j].length) {\n\t\t\t\t\tlongestStrings = strings;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn longestStrings[0];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcocsipi9.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpcocsipi9.d(18): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpcocsipi9.d(36):\
    \ Error: cannot implicitly convert expression `longestStrings[0]` of type `string`\
    \ to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpcocsipi9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach (string s in strings) {\n        if (maxLength\
    \ == null || s.length() > maxLength.Value()) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9lslbo2s.d(16): Error: no identifier for declarator `int`\\n/tmp/tmp9lslbo2s.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmp9lslbo2s.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp9lslbo2s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkw1hpiqd.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkw1hpiqd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string string : strings)\
    \ {\n        int length = string.length;\n        if (length > maxLength) {\n\
    \            maxLength = length;\n            maxString = string;\n        }\n\
    \    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_pg3em62.d(23): Error: found `string` when expecting `;` following\
    \ statement\\n/tmp/tmp_pg3em62.d(23): Error: expression expected, not `:`\\n/tmp/tmp_pg3em62.d(23):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_pg3em62.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s in strings) {\n\
    \        int length = s.length();\n        if (length > maxLength) {\n       \
    \     maxLength = length;\n            maxString = s;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcr11hs0z.d(23): Error: semicolon expected, not `in`\\n/tmp/tmpcr11hs0z.d(23):\
    \ Error: expression expected, not `in`\\n/tmp/tmpcr11hs0z.d(23): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcr11hs0z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = 0;\n\
    \    string maxStr = null;\n    foreach (string s in strings) {\n        int len\
    \ = s.length();\n        if (len > maxLen) {\n            maxLen = len;\n    \
    \        maxStr = s;\n        }\n    }\n    return maxStr;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8n9gh1jc.d(21): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8n9gh1jc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n \
    \       if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppqpg_vwy.d(20): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmppqpg_vwy.d(24): Error: cannot implicitly\
    \ convert expression `strings[cast(ulong)i].length` of type `ulong` to `int`\\\
    n/tmp/tmppqpg_vwy.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmppqpg_vwy.d(28): Error: cannot\
    \ implicitly convert expression `strings[strings.length - 1LU]` of type `string`\
    \ to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmppqpg_vwy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7qo9_u6l.d(19): Error: undefined identifier `var`\\n/tmp/tmp7qo9_u6l.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmp7qo9_u6l.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qo9_u6l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    string maxString = null;\n    foreach (string s in strings) {\n        int\
    \ length = s.length();\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm |>\n<| c |>\nI like\
    \ the idea of using LINQ to solve this problem, but I think this solution doesn't\
    \ work if there are multiple strings of the same length. For example, longest([\"\
    ab\", \"abc\", \"abcd\"]) returns \"abcd\" instead of \"abc\".\n<|/ c |>\n<| c\
    \ |>\nI agree, my solution doesn't take that into account. I'll edit my answer\
    \ to include a solution that does.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ does take that into account.\n<|/ c |>\n<| c |>\nI like the idea of using LINQ\
    \ to solve this problem, but I think this solution doesn't work if there are multiple\
    \ strings of the same length. For example, longest([\"ab\", \"abc\", \"abcd\"\
    ]) returns \"abcd\" instead of \"abc\".\n<|/ c |>\n<| c |>\nI agree, my solution\
    \ doesn't take that into account. I'll edit my answer to include a solution that\
    \ does.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nstring longest(string s)\n{\n   \
    \ string longest = string.Empty;\n    string currentLongest = string.Empty;\n\
    \    foreach (char c in s)\n    {\n        if (currentLongest.Length > longest.Length)\n\
    \        {\n            longest = currentLongest;\n        }\n        currentLongest\
    \ += c;\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nThis solution doesn't work if there are multiple strings of the\
    \ same length. For example, longest([\"ab\", \"abc\", \"abcd\"]) returns \"abcd\"\
    \ instead of \"abc\".\n<|/ c |>\n<| c |>\nI agree, my solution doesn't take that\
    \ into account. I'll edit my answer to include a solution that does.\n<|/ c |>\n\
    <| c |>\nI like the idea of using LINQ to solve this problem, but I think this\
    \ solution doesn't work if there are multiple strings of the same length. For\
    \ example, longest([\"ab\", \"abc\", \"abcd\"]) returns \"abcd\" instead of \"\
    abc\".\n<|/ c |>\n<| c |>\nI agree, my solution doesn't take that into \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4tljd6ky.d(21): Error: found `in` when expecting `;`\\n/tmp/tmp4tljd6ky.d(30):\
    \ Error: declaration expected, not `<`\\n/tmp/tmp4tljd6ky.d(33): Error: unterminated\
    \ character constant\\n/tmp/tmp4tljd6ky.d(36): Error: unterminated character constant\\\
    n/tmp/tmp4tljd6ky.d(36): Error: unterminated character constant\\n/tmp/tmp4tljd6ky.d(42):\
    \ Error: unterminated character constant\\n/tmp/tmp4tljd6ky.d(45): Error: unterminated\
    \ character constant\\n/tmp/tmp4tljd6ky.d(45): Error: unterminated character constant\\\
    n/tmp/tmp4tljd6ky.d(53): Error: declaration expected, not `foreach`\\n/tmp/tmp4tljd6ky.d(58):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp4tljd6ky.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string string : strings)\
    \ {\n        int length = string.length;\n        if (length > maxLength) {\n\
    \            maxLength = length;\n            maxString = string;\n        }\n\
    \    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpedlbjpsf.d(23): Error: found `string` when expecting `;` following\
    \ statement\\n/tmp/tmpedlbjpsf.d(23): Error: expression expected, not `:`\\n/tmp/tmpedlbjpsf.d(23):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpedlbjpsf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg4zimfp3.d(18): Error: no property `length` for type `string`\\\
    n/tmp/tmpg4zimfp3.d(18): Error: function expected before `()`, not `longest.get().length`\
    \ of type `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4zimfp3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach (string s in strings) {\n        int length =\
    \ s.length();\n        if (maxLength == null || maxLength > length) {\n      \
    \      maxLength = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiyg03oww.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpiyg03oww.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmpiyg03oww.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpiyg03oww.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ 0;\n    string maxStr = null;\n    foreach (string s in strings) {\n       \
    \ int len = s.length();\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxStr = s;\n        }\n    }\n    return maxStr;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmi1yax69.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmi1yax69.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n\
    \    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            return strings[i];\n        }\n        maxLen = strings[i].length;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk_myr3rk.d(19): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpk_myr3rk.d(24): Error: cannot implicitly\
    \ convert expression `strings[cast(ulong)i].length` of type `ulong` to `int`\\\
    n/tmp/tmpk_myr3rk.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmpk_myr3rk.d(22): Error: cannot\
    \ implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\\\
    n/tmp/tmpk_myr3rk.d(26): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpk_myr3rk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string str in strings) {\n        if (str.length > longest.length)\n      \
    \      longest = str;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy7vd9wkr.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy7vd9wkr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}\n/*\n In list of strings, return\
    \ the longest string in reverse order. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \    >>> longestReverse([])\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2srzy0sv.d(21): Error: found `in` when expecting `;`\\n/tmp/tmp2srzy0sv.d(29):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2srzy0sv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyxsaamk1.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxsaamk1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if(longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkja1mkxi.d(18): Error: no property `length` for type `string`\\\
    n/tmp/tmpkja1mkxi.d(18): Error: function expected before `()`, not `longest.get().length`\
    \ of type `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkja1mkxi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length) longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1jx63lx.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1jx63lx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    \n    for (var i = 0; i <strings.length;\
    \ ++i) {\n        var str = strings[i];\n        if (str.length > maxLength) {\n\
    \            maxLength = str.length;\n            maxString = str;\n        }\n\
    \    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprtag2_nw.d(20): Error: undefined identifier `var`\\n/tmp/tmprtag2_nw.d(21):\
    \ Error: undefined identifier `var`\\n/tmp/tmprtag2_nw.d(23): Error: undefined\
    \ identifier `var`\\n/tmp/tmprtag2_nw.d(24): Error: undefined identifier `var`\\\
    n/tmp/tmprtag2_nw.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmprtag2_nw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = strings[0].Length;\n\
    \    foreach (string s in strings) {\n        if (s.Length > maxLen) {\n     \
    \       maxLen = s.Length;\n        }\n    }\n    return maxLen > 0 ? strings[strings.length\
    \ - 1] : null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuyo573_u.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyo573_u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length) longest =\
    \ s;\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static string LongestSubstring(string str)\n\
    {\n    string longest = \"\";\n    string current;\n    foreach (char c in str)\n\
    \    {\n        if (current == \"\")\n        {\n            current = c;\n  \
    \      }\n        else if (current.Length > c.Length)\n        {\n           \
    \ current = c;\n        }\n        else\n        {\n            if (current.Length\
    \ < c.Length)\n            {\n                longest = current;\n           \
    \     current = c;\n            }\n        }\n    }\n    return longest;\n}\n\
    </code>\n<|/ a tags=string,c#,longest-substring,algorithm |>\n<| a tags=string,c#,longest-substring,algorithm\
    \ |>\n<code>\npublic static string LongestSubstring(string str)\n{\n    string\
    \ longest = \"\";\n    string current;\n    foreach (char c in str)\n    {\n \
    \       if (current == \"\")\n        {\n            current = c;\n        }\n\
    \        else if (current.Length > c.Length)\n        {\n            current =\
    \ c;\n        }\n        else\n        {\n            if (current.Length < c.Length)\n\
    \            {\n                longest = current;\n                current =\
    \ c;\n            }\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=string,c#,longest-substring,algorithm |>\n<code>\npublic\
    \ static string LongestSubstring(string str)\n{\n    string longest = \"\";\n\
    \    string current;\n    foreach (char c in str)\n    {\n        if (current\
    \ == \"\")\n        {\n            current = c;\n        }\n        else if (current.Length\
    \ > c.Length)\n        {\n            current = c;\n        }\n        else\n\
    \        {\n            if (current.Length < c.Length)\n            {\n      \
    \          longest = current;\n                current = c;\n            }\n \
    \       }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static string LongestSubstring(string str)\n{\n    string\
    \ longest = \"\";\n    string current;\n    foreach (char c in str)\n    {\n \
    \       if (current == \"\")\n        {\n            current = c;\n        }\n\
    \        else if (current.Length > c.Length)\n        {\n            current =\
    \ c;\n        }\n        else\n        {\n            if (current.Length < c.Length)\n\
    \            {\n                longest = current;\n                current =\
    \ c;\n            }\n        }\n    }\n    return longest;\n}\n</code>\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45uu4c5x.d(16): Error: found `in` when expecting `;`\\n/tmp/tmp45uu4c5x.d(21):\
    \ Error: declaration expected, not `<`\\n/tmp/tmp45uu4c5x.d(29): Error: declaration\
    \ expected, not `foreach`\\n/tmp/tmp45uu4c5x.d(34): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45uu4c5x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int len = strings[i].length;\n        if (len > maxLen) {\n     \
    \       maxLen = len;\n            maxIndex = i;\n        }\n    }\n    \n   \
    \ return strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeksd0bhu.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpeksd0bhu.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpeksd0bhu.d(31):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpeksd0bhu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\tstring\
    \ longest = strings[0];\n\tfor (string s in strings) {\n\t\tif (s.length() > longest.length())\
    \ {\n\t\t\tlongest = s;\n\t\t}\n\t}\n\treturn longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfv_dj0vc.d(17): Error: semicolon expected, not `in`\\n/tmp/tmpfv_dj0vc.d(17):\
    \ Error: expression expected, not `in`\\n/tmp/tmpfv_dj0vc.d(17): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfv_dj0vc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n \
    \       if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaue8fthp.d(20): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpaue8fthp.d(24): Error: cannot implicitly\
    \ convert expression `strings[cast(ulong)i].length` of type `ulong` to `int`\\\
    n/tmp/tmpaue8fthp.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmpaue8fthp.d(28): Error: cannot\
    \ implicitly convert expression `strings[strings.length - 1LU]` of type `string`\
    \ to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpaue8fthp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int len = strings[i].length;\n        if (len > maxLen) {\n     \
    \       maxLen = len;\n            maxIndex = i;\n        }\n    }\n    \n   \
    \ return strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzpd1qbcn.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpzpd1qbcn.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpzpd1qbcn.d(31):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzpd1qbcn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        var len = strings[i].length;\n\
    \        if (len > longest.length) {\n            longest = strings[i];\n    \
    \    }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1gkefwx.d(19): Error: undefined identifier `var`\\n/tmp/tmpt1gkefwx.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpt1gkefwx.d(21): Error: undefined\
    \ identifier `var`\\n/tmp/tmpt1gkefwx.d(17): Error: cannot implicitly convert\
    \ expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1gkefwx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings)\n    {\n        if (longest ==\
    \ null || string.length < longest.length)\n        {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpieolg13y.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x455539]\\n??:? void tmpieolg13y.__unittest_L26_C1()\
    \ [0x4414a3]\\n??:? void tmpieolg13y.__modtest() [0x453048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e3af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454b66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459d59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454b3d]\\n??:? runModuleUnitTests [0x45e185]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4564c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x45644b]\\n??:? _d_run_main [0x4563b6]\\n??:? main [0x45311b]\\\
    n??:? __libc_start_main [0x5e6a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach(string;\
    \ strings) {\n        if (string.length() > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpti9s0es1.d(17): Error: no property `length` for type `string`\\\
    n/tmp/tmpti9s0es1.d(17): Error: function `tmpti9s0es1.longest(string[] strings)`\
    \ is not callable using argument types `()`\\n/tmp/tmpti9s0es1.d(18): Error: function\
    \ `tmpti9s0es1.longest(string[] strings)` is not callable using argument types\
    \ `(string)`\\n/tmp/tmpti9s0es1.d(18):        cannot pass argument `string` of\
    \ type `string` to parameter `string[] strings`\\n/tmp/tmpti9s0es1.d(20): Error:\
    \ function `tmpti9s0es1.longest(string[] strings)` is not callable using argument\
    \ types `()`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpti9s0es1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1po3lya.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1po3lya.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1luyci7c.d(19): Error: undefined identifier `var`\\n/tmp/tmp1luyci7c.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmp1luyci7c.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1luyci7c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpao789q6p.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpao789q6p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n \
    \       if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_6k8dec.d(20): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpb_6k8dec.d(24): Error: cannot implicitly\
    \ convert expression `strings[cast(ulong)i].length` of type `ulong` to `int`\\\
    n/tmp/tmpb_6k8dec.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmpb_6k8dec.d(28): Error: cannot\
    \ implicitly convert expression `strings[strings.length - 1LU]` of type `string`\
    \ to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpb_6k8dec.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp83mja6x.d(19): Error: undefined identifier `var`\\n/tmp/tmpp83mja6x.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpp83mja6x.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp83mja6x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > longest.length) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc4in1_e8.d(19): Error: undefined identifier `var`\\n/tmp/tmpc4in1_e8.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpc4in1_e8.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4in1_e8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hkaxxha.d(18): Error: no property `length` for type `string`\\\
    n/tmp/tmp4hkaxxha.d(18): Error: function expected before `()`, not `longest.get().length`\
    \ of type `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hkaxxha.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe65g76f3.d(19): Error: undefined identifier `var`\\n/tmp/tmpe65g76f3.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpe65g76f3.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe65g76f3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var maxLength = 0;\n    var\
    \ maxString = \"\";\n    for (var i = 0; i <strings.length; ++i) {\n        var\
    \ length = strings[i].length;\n        if (length > maxLength) {\n           \
    \ maxLength = length;\n            maxString = strings[i];\n        }\n    }\n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpka41517b.d(18): Error: undefined identifier `var`\\n/tmp/tmpka41517b.d(19):\
    \ Error: undefined identifier `var`\\n/tmp/tmpka41517b.d(20): Error: undefined\
    \ identifier `var`\\n/tmp/tmpka41517b.d(21): Error: undefined identifier `var`\\\
    n/tmp/tmpka41517b.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpka41517b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    var\
    \ maxLength = 0;\n    var maxString = \"\";\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp60v1pgo4.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60v1pgo4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach(string;\
    \ strings) {\n        if (string.length() > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv2r42r5_.d(17): Error: no property `length` for type `string`\\\
    n/tmp/tmpv2r42r5_.d(17): Error: function `tmpv2r42r5_.longest(string[] strings)`\
    \ is not callable using argument types `()`\\n/tmp/tmpv2r42r5_.d(18): Error: function\
    \ `tmpv2r42r5_.longest(string[] strings)` is not callable using argument types\
    \ `(string)`\\n/tmp/tmpv2r42r5_.d(18):        cannot pass argument `string` of\
    \ type `string` to parameter `string[] strings`\\n/tmp/tmpv2r42r5_.d(20): Error:\
    \ function `tmpv2r42r5_.longest(string[] strings)` is not callable using argument\
    \ types `()`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2r42r5_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n\
    \    string maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcdend1t2.d(23): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpcdend1t2.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpcdend1t2.d(30):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdend1t2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s in strings) {\n\
    \        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppp68lhv9.d(23): Error: semicolon expected, not `in`\\n/tmp/tmppp68lhv9.d(23):\
    \ Error: expression expected, not `in`\\n/tmp/tmppp68lhv9.d(23): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmppp68lhv9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int\
    \ maxLength = 0;\n    string maxString = null;\n    foreach (string s in strings)\
    \ {\n        int length = s.length();\n        if (length > maxLength) {\n   \
    \         maxLength = length;\n            maxString = s;\n        }\n    }\n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpej5c8mxm.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpej5c8mxm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = 0;\n\
    \    int maxIndex = 0;\n    for (int i = 0; i < strings.length; ++i) {\n     \
    \   int len = strings[i].length;\n        if (len > maxLen) {\n            maxLen\
    \ = len;\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4sgxex2i.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp4sgxex2i.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp4sgxex2i.d(28):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4sgxex2i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqg66vpyo.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqg66vpyo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpep27vkzu.d(19): Error: undefined identifier `var`\\n/tmp/tmpep27vkzu.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpep27vkzu.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpep27vkzu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuij5kw07.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuij5kw07.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    string maxString = null;\n    foreach (string s in strings) {\n        if\
    \ (s.length() > maxLength) {\n            maxLength = s.length();\n          \
    \  maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp15m9leqm.d(21): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15m9leqm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach(string; strings)\n    {\n        if (maxLength\
    \ == null || string.length >= maxLength)\n        {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnl7i0vhw.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpnl7i0vhw.d(16):\
    \ Error: found `?` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpnl7i0vhw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    string\
    \ longest = strings[0];\n    foreach (string s in strings) {\n        if (s.length()\
    \ > longest.length()) {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvsf2kjjj.d(17): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsf2kjjj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7hhmv6bs.d(19): Error: undefined identifier `var`\\n/tmp/tmp7hhmv6bs.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmp7hhmv6bs.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7hhmv6bs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int\
    \ maxLength = 0;\n    string maxString = null;\n    foreach(string; strings) {\n\
    \        int length = string.length;\n        if (length > maxLength) {\n    \
    \        maxLength = length;\n            maxString = string;\n        }\n   \
    \ }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw2si3rew.d(19): Error: cannot implicitly convert expression `string.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpw2si3rew.d(25): Error: cannot implicitly\
    \ convert expression `maxString` of type `string` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2si3rew.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    string\
    \ longest = null;\n    foreach (string s in strings) {\n        if (longest ==\
    \ null || s.length() > longest.length()) {\n            longest = s;\n       \
    \ }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_hqhve1.d(17): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_hqhve1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3lvele04.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp3lvele04.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp3lvele04.d(31):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lvele04.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int\
    \ maxLength = 0;\n    string maxString = null;\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpig89o2eg.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpig89o2eg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var i=0; i<strings.length; ++i) {\n     \
    \   var length = strings[i].length;\n        if (length > maxLength) {\n     \
    \       maxLength = length;\n            maxString = strings[i];\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfnd1tmty.d(19): Error: undefined identifier `var`\\n/tmp/tmpfnd1tmty.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpfnd1tmty.d(21): Error: undefined\
    \ identifier `var`\\n/tmp/tmpfnd1tmty.d(22): Error: undefined identifier `var`\\\
    n/tmp/tmpfnd1tmty.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpfnd1tmty.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt64x04it.d(272): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt64x04it.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    var\
    \ maxLength = 0;\n    var maxString = \"\";\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpol9j8q9d.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpol9j8q9d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphbhbmxrj.d(19): Error: undefined identifier `var`\\n/tmp/tmphbhbmxrj.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmphbhbmxrj.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbhbmxrj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings)\n    {\n        if (s.length() > longest.length)\n   \
    \     {\n            longest = s;\n        }\n    }\n    return longest;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfsqjzl9e.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsqjzl9e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var maxLength = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length >=\
    \ maxLength.length)\n            maxLength = strings[i];\n    return maxLength;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp13k38m6m.d(18): Error: undefined identifier `var`\\n/tmp/tmp13k38m6m.d(19):\
    \ Error: undefined identifier `var`\\n/tmp/tmp13k38m6m.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13k38m6m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach(string; strings) {\n        if (maxLength ==\
    \ null || string.length >= maxLength) {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqa4thg96.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpqa4thg96.d(16):\
    \ Error: found `?` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpqa4thg96.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n\
    \    string maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfh49mwyk.d(23): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpfh49mwyk.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpfh49mwyk.d(30):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfh49mwyk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach (string s in strings) {\n        if (maxLength\
    \ == null || s.length() > maxLength) {\n            maxLength = s.length;\n  \
    \      }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpabzqqv6f.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpabzqqv6f.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmpabzqqv6f.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpabzqqv6f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7tuqdtg.d(18): Error: no property `length` for type `string`\\\
    n/tmp/tmpz7tuqdtg.d(18): Error: function expected before `()`, not `longest.get().length`\
    \ of type `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7tuqdtg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int\
    \ maxLength = 0;\n    string maxString = null;\n    foreach(string,strings,string)\
    \ \n    {\n        int length = string.length;\n        if (length > maxLength)\n\
    \        {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9lvis77m.d(18): Error: no identifier for declarator `string`\\\
    n/tmp/tmp9lvis77m.d(18): Error: found `)` when expecting `;`\\n/tmp/tmp9lvis77m.d(27):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp9lvis77m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var maxLength = 0;\n    var\
    \ maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length\
    \ > maxLength) {\n            maxLength = s.length;\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph22u6wb8.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph22u6wb8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = 0;\n\
    \    int maxIndex = 0;\n    for (int i = 0; i < strings.length; ++i) {\n     \
    \   int len = strings[i].length;\n        if (len > maxLen) {\n            maxLen\
    \ = len;\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_24_hmy5.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp_24_hmy5.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp_24_hmy5.d(28):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_24_hmy5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = 0;\n\
    \    int maxIdx = 0;\n    for (int i = 0; i < strings.length; ++i) {\n       \
    \ int len = strings[i].length;\n        if (len > maxLen) {\n            maxLen\
    \ = len;\n            maxIdx = i;\n        }\n    }\n    return strings[maxIdx];\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo8aucjlt.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpo8aucjlt.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpo8aucjlt.d(28):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxIdx]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpo8aucjlt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var i = 0; i &lt; strings.length; i++) {\n\
    \        var length = strings[i].length;\n        if (length > maxLength) {\n\
    \            maxLength = length;\n            maxString = strings[i];\n      \
    \  }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpku8qtyv6.d(21): Error: found `;` when expecting `)`\\n/tmp/tmpku8qtyv6.d(21):\
    \ Error: found `)` when expecting `;` following statement\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku8qtyv6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    int maxIndex = 0;\n    for (int i = 0; i < strings.length; i++) {\n     \
    \   int length = strings[i].length;\n        if (length > maxLength) {\n     \
    \       maxLength = length;\n            maxIndex = i;\n        }\n    }\n   \
    \ return strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0woj9d3.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpy0woj9d3.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpy0woj9d3.d(28):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpy0woj9d3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLen) {\n   \
    \         maxLen = s.length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpakhu0j0z.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpakhu0j0z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\tint?\
    \ maxLength = null;\n\tforeach (string s in strings)\n\t{\n\t\tif (maxLength ==\
    \ null || s.length() > maxLength)\n\t\t{\n\t\t\tmaxLength = s.length;\n\t\t}\n\
    \t}\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp29s6hswo.d(16): Error: no identifier for declarator `int`\\n/tmp/tmp29s6hswo.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmp29s6hswo.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp29s6hswo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\n/*\n In list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n    >>> longest([])\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgsp2fqds.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgsp2fqds.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    int maxIndex = 0;\n    for (auto s : strings) {\n        if (s.length() >\
    \ maxLength) {\n            maxLength = s.length();\n            maxIndex = i;\n\
    \        }\n    }\n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsirg9s_k.d(21): Error: no identifier for declarator `s`\\n/tmp/tmpsirg9s_k.d(21):\
    \ Error: expression expected, not `:`\\n/tmp/tmpsirg9s_k.d(21): Error: found `strings`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsirg9s_k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_wb4lbpj.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_wb4lbpj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    \n    for (int i = 1; i < strings.length; i++) {\n \
    \       if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_hg4ekjy.d(20): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp_hg4ekjy.d(24): Error: cannot implicitly\
    \ convert expression `strings[cast(ulong)i].length` of type `ulong` to `int`\\\
    n/tmp/tmp_hg4ekjy.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmp_hg4ekjy.d(28): Error: cannot\
    \ implicitly convert expression `strings[strings.length - 1LU]` of type `string`\
    \ to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp_hg4ekjy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s in strings) {\n\
    \        int length = s.length();\n        if (length > maxLength) {\n       \
    \     maxLength = length;\n            maxString = s;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsizcj0ru.d(23): Error: semicolon expected, not `in`\\n/tmp/tmpsizcj0ru.d(23):\
    \ Error: expression expected, not `in`\\n/tmp/tmpsizcj0ru.d(23): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpsizcj0ru.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var i = 0; i <strings.length; i++) {\n  \
    \      var s = strings[i];\n        if (s.length == maxLength) {\n           \
    \ maxString = s;\n        } else {\n            if (s.length > maxLength) {\n\
    \                maxLength = s.length;\n                maxString = s;\n     \
    \       }\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkv7ks68w.d(19): Error: undefined identifier `var`\\n/tmp/tmpkv7ks68w.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpkv7ks68w.d(21): Error: undefined\
    \ identifier `var`\\n/tmp/tmpkv7ks68w.d(22): Error: undefined identifier `var`\\\
    n/tmp/tmpkv7ks68w.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpkv7ks68w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\tint?\
    \ max = null;\n\tforeach(string; strings) {\n\t\tif (max is null || string.length\
    \ >= max.value) {\n\t\t\tmax = string;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpan9duhle.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpan9duhle.d(16):\
    \ Error: found `?` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpan9duhle.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpivmb3vm0.d(19): Error: undefined identifier `var`\\n/tmp/tmpivmb3vm0.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpivmb3vm0.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpivmb3vm0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n\
    \    string maxString = null;\n    \n    for (string s in strings)\n    {\n  \
    \      int length = s.length();\n        if (length > maxLength)\n        {\n\
    \            maxLength = length;\n            maxString = s;\n        }\n    }\n\
    \    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplfca88fk.d(22): Error: semicolon expected, not `in`\\n/tmp/tmplfca88fk.d(22):\
    \ Error: expression expected, not `in`\\n/tmp/tmplfca88fk.d(22): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplfca88fk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    var\
    \ maxLength = 0;\n    var maxString = \"\";\n    foreach(string; strings) {\n\
    \        var length = string.length;\n        if (length > maxLength) {\n    \
    \        maxLength = length;\n            maxString = string;\n        }\n   \
    \ }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph2sri4en.d(16): Error: undefined identifier `var`\\n/tmp/tmph2sri4en.d(17):\
    \ Error: undefined identifier `var`\\n/tmp/tmph2sri4en.d(19): Error: undefined\
    \ identifier `var`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2sri4en.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var i = 0; i != strings.length; ++i) {\n\
    \        var s = strings[i];\n        var length = s.length();\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknkis0p3.d(19): Error: undefined identifier `var`\\n/tmp/tmpknkis0p3.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpknkis0p3.d(21): Error: undefined\
    \ identifier `var`\\n/tmp/tmpknkis0p3.d(22): Error: undefined identifier `var`\\\
    n/tmp/tmpknkis0p3.d(23): Error: undefined identifier `var`\\n/tmp/tmpknkis0p3.d(17):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknkis0p3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach(string; strings) {\n        if (maxLength ==\
    \ null || string.length < maxLength) {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr29897hd.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpr29897hd.d(16):\
    \ Error: found `?` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpr29897hd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    string maxString = null;\n    for (string string : strings) {\n        if\
    \ (string.length > maxLength) {\n            maxLength = string.length;\n    \
    \        maxString = string;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45q22l9u.d(21): Error: found `string` when expecting `;` following\
    \ statement\\n/tmp/tmp45q22l9u.d(21): Error: expression expected, not `:`\\n/tmp/tmp45q22l9u.d(21):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45q22l9u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int len = strings[i].length;\n        if (len > maxLen) {\n     \
    \       maxLen = len;\n            maxIndex = i;\n        }\n    }\n    \n   \
    \ return strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8107ufc0.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp8107ufc0.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp8107ufc0.d(31):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8107ufc0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc84p5ysq.d(19): Error: undefined identifier `var`\\n/tmp/tmpc84p5ysq.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpc84p5ysq.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc84p5ysq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    string maxString = null;\n    foreach (string s in strings) {\n        int\
    \ length = s.length();\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpggu4lt63.d(21): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpggu4lt63.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5n_9i5r_.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp5n_9i5r_.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp5n_9i5r_.d(31):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5n_9i5r_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk8mfrscu.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpk8mfrscu.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpk8mfrscu.d(31):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8mfrscu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach(string)\
    \ string in strings {\n        if(string.length > longest.length) longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgrcy31b1.d(16): Error: no identifier for declarator `string`\\\
    n/tmp/tmpgrcy31b1.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpgrcy31b1.d(16):\
    \ Error: found `{` when expecting `)`\\n/tmp/tmpgrcy31b1.d(19): Error: declaration\
    \ expected, not `return`\\n/tmp/tmpgrcy31b1.d(20): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrcy31b1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    string\
    \ longest = strings[0];\n    foreach (string s in strings)\n    {\n        if\
    \ (s.length() > longest.length())\n        {\n            longest = s;\n     \
    \   }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82fn1sgt.d(17): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82fn1sgt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = 0;\n\
    \    string maxStr = null;\n    for (string str : strings) {\n        int len\
    \ = str.length;\n        if (len > maxLen) {\n            maxLen = len;\n    \
    \        maxStr = str;\n        }\n    }\n    return maxStr;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9dpsba3x.d(21): Error: found `str` when expecting `;` following\
    \ statement\\n/tmp/tmp9dpsba3x.d(21): Error: expression expected, not `:`\\n/tmp/tmp9dpsba3x.d(21):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dpsba3x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach(string;\
    \ strings) {\n        if (string.length == strings.length)\n            return\
    \ string;\n    }\n    return None;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy69gaei_.d(20): Error: undefined identifier `None`, did you mean\
    \ struct `No`?\\n/tmp/tmpy69gaei_.d(18): Error: cannot implicitly convert expression\
    \ `string` of type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpy69gaei_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int\
    \ maxLen = 0;\n    string maxStr = null;\n    foreach (string s in strings) {\n\
    \        int len = s.length();\n        if (len > maxLen) {\n            maxLen\
    \ = len;\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcnhijk1t.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcnhijk1t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    int maxIndex = 0;\n    for (int i = 0; i < strings.length; ++i) {\n     \
    \   if (strings[i].length() > maxLength) {\n            maxLength = strings[i].length();\n\
    \            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwc71_sib.d(22): Error: no property `length` for type `string`\\\
    n/tmp/tmpwc71_sib.d(23): Error: no property `length` for type `string`\\n/tmp/tmpwc71_sib.d(17):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!string`\\n/tmp/tmpwc71_sib.d(27): Error: cannot implicitly convert\
    \ expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwc71_sib.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ < longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp79vd1vqt.d(18): Error: undefined identifier `var`\\n/tmp/tmp79vd1vqt.d(19):\
    \ Error: undefined identifier `var`\\n/tmp/tmp79vd1vqt.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79vd1vqt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ > longest.length) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3c704vgo.d(19): Error: undefined identifier `var`\\n/tmp/tmp3c704vgo.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmp3c704vgo.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c704vgo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        var len = strings[i].length;\n\
    \        if (len > longest.length) {\n            longest = strings[i];\n    \
    \    }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3q6focq2.d(19): Error: undefined identifier `var`\\n/tmp/tmp3q6focq2.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmp3q6focq2.d(21): Error: undefined\
    \ identifier `var`\\n/tmp/tmp3q6focq2.d(17): Error: cannot implicitly convert\
    \ expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3q6focq2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = Nullable!(string);\n    foreach(string; strings) {\n        if (longest.isNull)\
    \ {\n            longest = string;\n        } else {\n            if (longest.length\
    \ < string.length) {\n                longest = string;\n            }\n     \
    \   }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpneqtucj3.d(16): Error: type `inout(string)` has no value\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneqtucj3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length) longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7a_cc6pn.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a_cc6pn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s in strings) {\n\
    \        int length = s.length();\n        if (length > maxLength) {\n       \
    \     maxLength = length;\n            maxString = s;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp08t5eoyn.d(23): Error: semicolon expected, not `in`\\n/tmp/tmp08t5eoyn.d(23):\
    \ Error: expression expected, not `in`\\n/tmp/tmp08t5eoyn.d(23): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp08t5eoyn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n \
    \       if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return maxLen > 0 ? strings[strings.length - 1] :\
    \ null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5tsrl808.d(20): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp5tsrl808.d(24): Error: cannot implicitly\
    \ convert expression `strings[cast(ulong)i].length` of type `ulong` to `int`\\\
    n/tmp/tmp5tsrl808.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmp5tsrl808.d(28): Error: cannot\
    \ implicitly convert expression `maxLen > 0 ? strings[strings.length - 1LU] :\
    \ null` of type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5tsrl808.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int\
    \ maxLen = 0;\n    int maxIdx = 0;\n    foreach(string s, strings) {\n       \
    \ int len = s.length();\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxIdx = idx;\n        }\n    }\n    return strings[maxIdx];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport std.stdio;\nimport\
    \ std.string;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpruie23v_.d(18): Error: no identifier for declarator `strings`\\\
    n/tmp/tmpruie23v_.d(18): Error: found `)` when expecting `;`\\n/tmp/tmpruie23v_.d(25):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpruie23v_.d(27): Error: declaration\
    \ expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpruie23v_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var maxLength = 0;\n    var\
    \ maxString = null;\n    for (var i = 0; i &lt; strings.length; ++i) {\n     \
    \   var s = strings[i];\n        if (s.length &gt; maxLength) {\n            maxLength\
    \ = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvtzwltjb.d(20): Error: found `;` when expecting `)`\\n/tmp/tmpvtzwltjb.d(20):\
    \ Error: found `)` when expecting `;` following statement\\n/tmp/tmpvtzwltjb.d(22):\
    \ Error: found `;` when expecting `)`\\n/tmp/tmpvtzwltjb.d(22): Error: found `)`\
    \ when expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpvtzwltjb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6vlssbrk.d(18): Error: no property `length` for type `string`\\\
    n/tmp/tmp6vlssbrk.d(18): Error: function expected before `()`, not `longest.get().length`\
    \ of type `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vlssbrk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n\
    \    string maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp63_w4xvq.d(23): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp63_w4xvq.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp63_w4xvq.d(30):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp63_w4xvq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var string in strings) {\n        if (string.length\
    \ > maxLength) {\n            maxLength = string.length;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpomf4_i4d.d(21): Error: semicolon expected, not `in`\\n/tmp/tmpomf4_i4d.d(21):\
    \ Error: expression expected, not `in`\\n/tmp/tmpomf4_i4d.d(21): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpomf4_i4d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6e3ka13x.d(18): Error: no property `length` for type `string`\\\
    n/tmp/tmp6e3ka13x.d(18): Error: function expected before `()`, not `longest.get().length`\
    \ of type `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6e3ka13x.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmy9hb3qa.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpmy9hb3qa.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpmy9hb3qa.d(31):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmy9hb3qa.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2yhg7cwy.d(19): Error: undefined identifier `var`\\n/tmp/tmp2yhg7cwy.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmp2yhg7cwy.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2yhg7cwy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq50nb9d4.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq50nb9d4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = Nullable!(string)null;\n    foreach(string; strings) {\n        if(longest\
    \ == null || string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmff77krg.d(16): Error: semicolon expected, not `null`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmff77krg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuct2f4lk.d(19): Error: undefined identifier `var`\\n/tmp/tmpuct2f4lk.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpuct2f4lk.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuct2f4lk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var maxLen = strings[0].length;\n\
    \    for (var i = 1; i < strings.length; i++)\n        if (strings[i].length >=\
    \ maxLen)\n            maxLen = strings[i].length;\n    return maxLen > 0 ? strings[strings.length\
    \ - 1] : null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3cpz2vh8.d(18): Error: undefined identifier `var`\\n/tmp/tmp3cpz2vh8.d(19):\
    \ Error: undefined identifier `var`\\n/tmp/tmp3cpz2vh8.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cpz2vh8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0qmnr11l.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qmnr11l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    string maxString = null;\n    for (string string : strings) {\n        int\
    \ stringLength = string.length;\n        if (stringLength > maxLength) {\n   \
    \         maxLength = stringLength;\n            maxString = string;\n       \
    \ }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr0ukwtay.d(21): Error: found `string` when expecting `;` following\
    \ statement\\n/tmp/tmpr0ukwtay.d(21): Error: expression expected, not `:`\\n/tmp/tmpr0ukwtay.d(21):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr0ukwtay.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    var\
    \ longest = strings[0];\n    var longestLength = strings.length;\n    for(var\
    \ i = 1; i < strings.length; ++i)\n    {\n        var length = strings[i].length;\n\
    \        if(length > longestLength)\n        {\n            longest = strings[i];\n\
    \            longestLength = length;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpded2obe2.d(16): Error: undefined identifier `var`\\n/tmp/tmpded2obe2.d(17):\
    \ Error: undefined identifier `var`\\n/tmp/tmpded2obe2.d(18): Error: undefined\
    \ identifier `var`\\n/tmp/tmpded2obe2.d(20): Error: undefined identifier `var`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpded2obe2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach (string s in strings) {\n        if (maxLength\
    \ == null || s.length() > maxLength) {\n            maxLength = s.length;\n  \
    \      }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ic0hx2p.d(16): Error: no identifier for declarator `int`\\n/tmp/tmp1ic0hx2p.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmp1ic0hx2p.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp1ic0hx2p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      int length = s.length();\n        if (length > maxLength) {\n         \
    \   maxLength = length;\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp848yd4_t.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp848yd4_t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach(string; strings) {\n        if (maxLength ==\
    \ null || string.length < maxLength) {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvvzvk26x.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpvvzvk26x.d(16):\
    \ Error: found `?` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpvvzvk26x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp14ug9r2y.d(19): Error: undefined identifier `var`\\n/tmp/tmp14ug9r2y.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmp14ug9r2y.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp14ug9r2y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n \
    \       if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzr5j1x7b.d(20): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpzr5j1x7b.d(24): Error: cannot implicitly\
    \ convert expression `strings[cast(ulong)i].length` of type `ulong` to `int`\\\
    n/tmp/tmpzr5j1x7b.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmpzr5j1x7b.d(28): Error: cannot\
    \ implicitly convert expression `strings[strings.length - 1LU]` of type `string`\
    \ to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpzr5j1x7b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int\
    \ maxLength = 0;\n    string maxString = null;\n    foreach(string; strings) {\n\
    \        if (string.length > maxLength) {\n            maxLength = string.length;\n\
    \            maxString = string;\n        }\n    }\n    return maxString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3oefz0y.d(20): Error: cannot implicitly convert expression `string.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpw3oefz0y.d(24): Error: cannot implicitly\
    \ convert expression `maxString` of type `string` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3oefz0y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ 0;\n    string maxStr = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int len = strings[i].length;\n        if (len > maxLen) {\n\
    \            maxLen = len;\n            maxStr = strings[i];\n        }\n    }\n\
    \    \n    return maxStr;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi6mz4akf.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpi6mz4akf.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpi6mz4akf.d(31):\
    \ Error: cannot implicitly convert expression `maxStr` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6mz4akf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    var maxLength\
    \ = 0;\n    var maxString = null;\n    \n    for (var i = 0; i <strings.length;\
    \ ++i) {\n        var s = strings[i];\n        if (s.length >= maxLength) {\n\
    \            maxString = s;\n            maxLength = s.length;\n        }\n  \
    \  }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkd1b3dzb.d(20): Error: undefined identifier `var`\\n/tmp/tmpkd1b3dzb.d(21):\
    \ Error: undefined identifier `var`\\n/tmp/tmpkd1b3dzb.d(23): Error: undefined\
    \ identifier `var`\\n/tmp/tmpkd1b3dzb.d(24): Error: undefined identifier `var`\\\
    n/tmp/tmpkd1b3dzb.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpkd1b3dzb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s in strings) {\n\
    \        int length = s.length();\n        if (length > maxLength) {\n       \
    \     maxLength = length;\n            maxString = s;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr8f5j5jw.d(23): Error: semicolon expected, not `in`\\n/tmp/tmpr8f5j5jw.d(23):\
    \ Error: expression expected, not `in`\\n/tmp/tmpr8f5j5jw.d(23): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8f5j5jw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int\
    \ maxLen = 0;\n    string maxString = null;\n    foreach(string; strings)\n  \
    \  {\n        int len = string.length;\n        if (len > maxLen)\n        {\n\
    \            maxLen = len;\n            maxString = string;\n        }\n    }\n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0puq2_6c.d(20): Error: cannot implicitly convert expression `string.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp0puq2_6c.d(27): Error: cannot implicitly\
    \ convert expression `maxString` of type `string` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0puq2_6c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ > longest.length) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzdta5sf9.d(19): Error: undefined identifier `var`\\n/tmp/tmpzdta5sf9.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpzdta5sf9.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdta5sf9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    var\
    \ maxLength = 0;\n    var maxString = \"\";\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuzrlz15l.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzrlz15l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int\
    \ maxLen = 0;\n    int maxIdx = 0;\n    foreach (string s in strings) {\n    \
    \    int len = s.length();\n        if (len > maxLen) {\n            maxLen =\
    \ len;\n            maxIdx = s.length();\n        }\n    }\n    if (maxLen > 0)\
    \ return strings[maxIdx];\n    else return null;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeoerktd0.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeoerktd0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var maxLength = 0;\n    var\
    \ maxString = null;\n    for (var i=0; i<strings.length; ++i) {\n        var s\
    \ = strings[i];\n        if (s.length >= maxLength) {\n            maxString =\
    \ s;\n            maxLength = s.length;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_adpmki.d(18): Error: undefined identifier `var`\\n/tmp/tmpb_adpmki.d(19):\
    \ Error: undefined identifier `var`\\n/tmp/tmpb_adpmki.d(20): Error: undefined\
    \ identifier `var`\\n/tmp/tmpb_adpmki.d(21): Error: undefined identifier `var`\\\
    n/tmp/tmpb_adpmki.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpb_adpmki.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj7i35brk.d(24): Error: no property `length` for type `string`\\\
    n/tmp/tmpj7i35brk.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmpj7i35brk.d(31): Error: cannot\
    \ implicitly convert expression `maxString` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj7i35brk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxnl0l9ce.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxnl0l9ce.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz4ri1b5b.d(19): Error: undefined identifier `var`\\n/tmp/tmpz4ri1b5b.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpz4ri1b5b.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4ri1b5b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpah5suxj9.d(21): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpah5suxj9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = strings[0].Length;\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].Length\
    \ > maxLength) {\n            maxLength = strings[i].Length;\n        }\n    }\n\
    \    return maxLength > 0 ? strings[strings.length - 1] : null;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf9w4n57a.d(19): Error: undefined identifier `var`\\n/tmp/tmpf9w4n57a.d(19):\
    \ Error: no property `Length` for type `string`\\n/tmp/tmpf9w4n57a.d(20): Error:\
    \ undefined identifier `var`\\n/tmp/tmpf9w4n57a.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9w4n57a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length) longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2nm9uws.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2nm9uws.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLen) {\n   \
    \         maxLen = s.length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcrijeysz.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrijeysz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ughkv4p.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ughkv4p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var i = 0; i &lt; strings.length; ++i) {\n\
    \        var s = strings[i];\n        if (s.length &gt; maxLength) {\n       \
    \     maxLength = s.length;\n            maxString = s;\n        }\n    }\n  \
    \  return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7rn9imz4.d(21): Error: found `;` when expecting `)`\\n/tmp/tmp7rn9imz4.d(21):\
    \ Error: found `)` when expecting `;` following statement\\n/tmp/tmp7rn9imz4.d(23):\
    \ Error: found `;` when expecting `)`\\n/tmp/tmp7rn9imz4.d(23): Error: found `)`\
    \ when expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp7rn9imz4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = Nullable!(string);\n    foreach(string; strings) {\n        if (longest.isNull)\
    \ {\n            longest = string;\n        }\n        else if (longest.length\
    \ < string.length) {\n            longest = string;\n        }\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu6pbm66c.d(16): Error: type `inout(string)` has no value\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6pbm66c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      int length = s.length();\n        if (length > maxLength) {\n         \
    \   maxLength = length;\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpquo2bg1u.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpquo2bg1u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp78sxgmgj.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78sxgmgj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = Nullable!(string);\n    foreach(string; strings) {\n        if (longest.isNull)\
    \ {\n            longest = string;\n        } else if (longest.length < string.length)\
    \ {\n            longest = string;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the shortest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n    >>> shortest([])\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqksou3zx.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqksou3zx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuqpxc85z.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqpxc85z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLength = 0;\n\
    \    string maxString = null;\n    for (string string : strings) {\n        int\
    \ length = string.length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = string;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3i3lmia.d(21): Error: found `string` when expecting `;` following\
    \ statement\\n/tmp/tmph3i3lmia.d(21): Error: expression expected, not `:`\\n/tmp/tmph3i3lmia.d(21):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3i3lmia.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkjtf67kf.d(18): Error: no property `length` for type `string`\\\
    n/tmp/tmpkjtf67kf.d(18): Error: function expected before `()`, not `longest.get().length`\
    \ of type `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjtf67kf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n \
    \       if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp515l_48v.d(20): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp515l_48v.d(24): Error: cannot implicitly\
    \ convert expression `strings[cast(ulong)i].length` of type `ulong` to `int`\\\
    n/tmp/tmp515l_48v.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmp515l_48v.d(28): Error: cannot\
    \ implicitly convert expression `strings[strings.length - 1LU]` of type `string`\
    \ to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp515l_48v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string string : strings)\
    \ {\n        int length = string.length;\n        if (length > maxLength) {\n\
    \            maxLength = length;\n            maxString = string;\n        }\n\
    \    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn5x_v4ia.d(23): Error: found `string` when expecting `;` following\
    \ statement\\n/tmp/tmpn5x_v4ia.d(23): Error: expression expected, not `:`\\n/tmp/tmpn5x_v4ia.d(23):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn5x_v4ia.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s : strings) {\n \
    \       int length = s.length();\n        if (length > maxLength) {\n        \
    \    maxLength = length;\n            maxString = s;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7k58jyzm.d(23): Error: found `s` when expecting `;` following\
    \ statement\\n/tmp/tmp7k58jyzm.d(23): Error: expression expected, not `:`\\n/tmp/tmp7k58jyzm.d(23):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7k58jyzm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLen) {\n   \
    \         maxLen = s.length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp61xgy98j.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp61xgy98j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        var len = strings[i].length;\n\
    \        if (len > longest.length) {\n            longest = strings[i];\n    \
    \    }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsbj3b41h.d(19): Error: undefined identifier `var`\\n/tmp/tmpsbj3b41h.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpsbj3b41h.d(21): Error: undefined\
    \ identifier `var`\\n/tmp/tmpsbj3b41h.d(17): Error: cannot implicitly convert\
    \ expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbj3b41h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n\
    \    string maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpylt6sx4g.d(23): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpylt6sx4g.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpylt6sx4g.d(30):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpylt6sx4g.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int len = strings[i].length;\n        if (len > maxLen) {\n     \
    \       maxLen = len;\n            maxIndex = i;\n        }\n    }\n    \n   \
    \ return strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1t50ih70.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp1t50ih70.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp1t50ih70.d(31):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp1t50ih70.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach (string s in strings) {\n        if (maxLength\
    \ == null || s.length() > maxLength) {\n            maxLength = s.length;\n  \
    \      }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1oxoss2v.d(16): Error: no identifier for declarator `int`\\n/tmp/tmp1oxoss2v.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmp1oxoss2v.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp1oxoss2v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjua8agvi.d(19): Error: undefined identifier `var`\\n/tmp/tmpjua8agvi.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpjua8agvi.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjua8agvi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\tstring[]\
    \ longestStrings = strings;\n\t\n\tfor (int i = 0; i < longestStrings.length;\
    \ ++i)\n\t{\n\t\tstring longestString = longestStrings[i];\n\t\t\n\t\tfor (int\
    \ j = i + 1; j < longestStrings.length; ++j)\n\t\t{\n\t\t\tstring currentString\
    \ = longestStrings[j];\n\t\t\t\n\t\t\tif (currentString.length() > longestString.length())\n\
    \t\t\t{\n\t\t\t\tlongestString = currentString;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif\
    \ (longestString.length() > 0)\n\t\t{\n\t\t\treturn longestString;\n\t\t}\n\t\
    }\n\t\n\treturn null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n \
    \       auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5_sccpy3.d(26): Error: no property `length` for type `string`\\\
    n/tmp/tmp5_sccpy3.d(26): Error: no property `length` for type `string`\\n/tmp/tmp5_sccpy3.d(32):\
    \ Error: no property `length` for type `string`\\n/tmp/tmp5_sccpy3.d(34): Error:\
    \ cannot implicitly convert expression `longestString` of type `string` to `Nullable!string`\\\
    n/tmp/tmp5_sccpy3.d(38): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp5_sccpy3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    foreach (string s in strings) {\n     \
    \   if (s.length() > maxLength) {\n            maxLength = s.length();\n     \
    \       maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk9medyhn.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk9medyhn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var i = 0; i <strings.length; ++i) {\n  \
    \      var s = strings[i];\n        if (s.length >= maxLength) {\n           \
    \ maxString = s;\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxString;\n}\n/*\n In list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjih7qi3n.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjih7qi3n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach (string s in strings) {\n        if (maxLength\
    \ == null || s.length() > maxLength) {\n            maxLength = s.length;\n  \
    \      }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45a30zxc.d(16): Error: no identifier for declarator `int`\\n/tmp/tmp45a30zxc.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmp45a30zxc.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp45a30zxc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    var\
    \ maxLength = 0;\n    var maxString = \"\";\n    foreach(string; strings) {\n\
    \        var length = string.length;\n        if (length > maxLength) {\n    \
    \        maxLength = length;\n            maxString = string;\n        }\n   \
    \ }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8zj24nkx.d(16): Error: undefined identifier `var`\\n/tmp/tmp8zj24nkx.d(17):\
    \ Error: undefined identifier `var`\\n/tmp/tmp8zj24nkx.d(19): Error: undefined\
    \ identifier `var`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zj24nkx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5rihahrm.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rihahrm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf66lwelw.d(272): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf66lwelw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        var len = strings[i].length;\n\
    \        if (len > longest.length)\n            longest = strings[i];\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvwb86tfz.d(18): Error: undefined identifier `var`\\n/tmp/tmpvwb86tfz.d(19):\
    \ Error: undefined identifier `var`\\n/tmp/tmpvwb86tfz.d(20): Error: undefined\
    \ identifier `var`\\n/tmp/tmpvwb86tfz.d(17): Error: cannot implicitly convert\
    \ expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwb86tfz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach(string;\
    \ strings) {\n        string longest = string;\n        foreach(string; strings)\
    \ {\n            if (string.length() > longest.length()) {\n                longest\
    \ = string;\n            }\n        }\n        return longest;\n    }\n    return\
    \ None;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp47izr5lt.d(17): Error: `string` is used as a type\\n/tmp/tmp47izr5lt.d(18):\
    \ Error: variable `string` is shadowing variable `tmp47izr5lt.longest.string`\\\
    n/tmp/tmp47izr5lt.d(19): Error: no property `length` for type `string`\\n/tmp/tmp47izr5lt.d(25):\
    \ Error: undefined identifier `None`, did you mean struct `No`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47izr5lt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n\
    \    int maxIndex = 0;\n    for (int i = 1; i < strings.length; i++) {\n     \
    \   if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptdljb_1c.d(19): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmptdljb_1c.d(23): Error: cannot implicitly\
    \ convert expression `strings[cast(ulong)i].length` of type `ulong` to `int`\\\
    n/tmp/tmptdljb_1c.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmptdljb_1c.d(27): Error: cannot\
    \ implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string`\
    \ to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmptdljb_1c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var i = 0; i <strings.length; ++i) {\n  \
    \      var length = strings[i].length;\n        if (length > maxLength) {\n  \
    \          maxLength = length;\n            maxString = strings[i];\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprazcxkdd.d(19): Error: undefined identifier `var`\\n/tmp/tmprazcxkdd.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmprazcxkdd.d(21): Error: undefined\
    \ identifier `var`\\n/tmp/tmprazcxkdd.d(22): Error: undefined identifier `var`\\\
    n/tmp/tmprazcxkdd.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmprazcxkdd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    var\
    \ longest = strings[0];\n    foreach(string; strings)\n    {\n        if(string.length\
    \ > longest.length)\n        {\n            longest = string;\n        }\n   \
    \ }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn3_ysn3j.d(16): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3_ysn3j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnjrc9dz2.d(19): Error: undefined identifier `var`\\n/tmp/tmpnjrc9dz2.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpnjrc9dz2.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjrc9dz2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfrqp_34t.d(18): Error: no property `length` for type `string`\\\
    n/tmp/tmpfrqp_34t.d(18): Error: function expected before `()`, not `longest.get().length`\
    \ of type `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfrqp_34t.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\tint?\
    \ maxLength = null;\n\tforeach (string s in strings) {\n\t\tif (maxLength == null\
    \ || s.length() > maxLength.Value()) {\n\t\t\tmaxLength = s.length;\n\t\t}\n\t\
    }\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxdefnqk4.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpxdefnqk4.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmpxdefnqk4.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpxdefnqk4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpof_6nkwo.d(18): Error: no property `length` for type `string`\\\
    n/tmp/tmpof_6nkwo.d(18): Error: function expected before `()`, not `longest.get().length`\
    \ of type `ulong`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof_6nkwo.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n\tstring[]\
    \ longest = strings;\n\t\n\tforeach (string s in strings) {\n\t\tif (longest.length\
    \ < s.length) longest = s;\n\t}\n\t\n\treturn longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5dk1jrl.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5dk1jrl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    string\
    \ longest = strings[0];\n    foreach (string s in strings)\n    {\n        if\
    \ (s.length() > longest.length())\n        {\n            longest = s;\n     \
    \   }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi4u_2qae.d(17): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4u_2qae.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = 0;\n\
    \    int maxLenIndex = 0;\n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      int len = strings[i].length;\n        if (len > maxLen) {\n           \
    \ maxLen = len;\n            maxLenIndex = i;\n        }\n    }\n    return strings[maxLenIndex];\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwgrl8r5w.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpwgrl8r5w.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpwgrl8r5w.d(28):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxLenIndex]`\
    \ of type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpwgrl8r5w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n\
    \    string maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6uy96_6k.d(23): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp6uy96_6k.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp6uy96_6k.d(30):\
    \ Error: cannot implicitly convert expression `maxString` of type `string` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6uy96_6k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsm5uj3hd.d(19): Error: undefined identifier `var`\\n/tmp/tmpsm5uj3hd.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpsm5uj3hd.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsm5uj3hd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var maxLen = 0;\n    var maxString\
    \ = \"\";\n    for (var i=0; i<strings.length; ++i) {\n        var len = strings[i].length;\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}\nunittest\n{\n   \
    \ alias candidate = longest;\n\n{\n        auto result = candidate([]);\n    \
    \    assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"\
    y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv2jlo_oq.d(18): Error: undefined identifier `var`\\n/tmp/tmpv2jlo_oq.d(19):\
    \ Error: undefined identifier `var`\\n/tmp/tmpv2jlo_oq.d(20): Error: undefined\
    \ identifier `var`\\n/tmp/tmpv2jlo_oq.d(21): Error: undefined identifier `var`\\\
    n/tmp/tmpv2jlo_oq.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpv2jlo_oq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length >= longest.length)\n            longest = string;\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpor2zgrtq.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x455539]\\n??:? void tmpor2zgrtq.__unittest_L23_C1()\
    \ [0x4414a3]\\n??:? void tmpor2zgrtq.__modtest() [0x453048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e3af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454b66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459d59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454b3d]\\n??:? runModuleUnitTests [0x45e185]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4564c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x45644b]\\n??:? _d_run_main [0x4563b6]\\n??:? main [0x45311b]\\\
    n??:? __libc_start_main [0xaced0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    int?\
    \ maxLength = null;\n    foreach(string; strings) {\n        if (maxLength ==\
    \ null || string.length < maxLength) {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\n<code>\nimport std.stdio;\nimport std.string;\nimport std.array;\n\
    import std.algorithm;\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgoj8myp_.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpgoj8myp_.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmpgoj8myp_.d(24): Error: declaration\
    \ expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgoj8myp_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s : strings) {\n \
    \       int length = s.length();\n        if (length >= maxLength) {\n       \
    \     maxString = s;\n            maxLength = length;\n        } else if (length\
    \ == maxLength) {\n            maxString = s;\n        }\n    }\n    \n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpns137jia.d(23): Error: found `s` when expecting `;` following\
    \ statement\\n/tmp/tmpns137jia.d(23): Error: expression expected, not `:`\\n/tmp/tmpns137jia.d(23):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpns137jia.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLen) {\n   \
    \         maxLen = s.length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpky4sfm8w.d(20): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpky4sfm8w.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxIndex = i;\n        }\n \
    \   }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ro3zdjf.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`\
    \ of type `ulong` to `int`\\n/tmp/tmp9ro3zdjf.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmp9ro3zdjf.d(31):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9ro3zdjf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg9tvxf8u.d(21): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg9tvxf8u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    string longest = strings[0];\n    \n    for (int i =\
    \ 1; i < strings.length; i++) {\n        if (strings[i].length >= maxLen) {\n\
    \            longest = strings[i];\n            maxLen = longest.length;\n   \
    \     }\n    }\n    \n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptyix_t91.d(20): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmptyix_t91.d(26): Error: cannot implicitly\
    \ convert expression `longest.length` of type `ulong` to `int`\\n/tmp/tmptyix_t91.d(17):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!string`\\n/tmp/tmptyix_t91.d(30): Error: cannot implicitly convert\
    \ expression `longest` of type `string` to `Nullable!string`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyix_t91.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length >= longest.length)\n            longest = string;\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi8rxj2sm.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x455539]\\n??:? void tmpi8rxj2sm.__unittest_L23_C1()\
    \ [0x4414a3]\\n??:? void tmpi8rxj2sm.__modtest() [0x453048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e3af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454b66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459d59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454b3d]\\n??:? runModuleUnitTests [0x45e185]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4564c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x45644b]\\n??:? _d_run_main [0x4563b6]\\n??:? main [0x45311b]\\\
    n??:? __libc_start_main [0xc5c1b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
    \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4cy5ngwk.d(16): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cy5ngwk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
