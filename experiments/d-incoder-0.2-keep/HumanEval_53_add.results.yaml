name: HumanEval_53_add
language: humaneval_to_dlang.py
results:
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(7, 3)\n    2\n    >>> divide(7, 0)\n    Traceback (most recent call last):\n\
    \      File \"<stdin>\", line 1, in ?\n    ZeroDivisionError: division by zero\n\
    \    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nRaise a\
    \ number to a power\n    >>> power(3, 2)\n    9\n    \n*/\nlong power(long x,\
    \ long y) \n{\n    return pow(x, y);\n}\n/*\nReturn the square root of a number\n\
    \    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return sqrt(x);\n\
    }\n/*\nReturn the absolute value of a number\n    >>> abs(-5)\n    5\n    \n*/\n\
    long abs(long x) \n{\n    return abs(x);\n}\n/*\nReturn the natural logarithm\
    \ of a number\n    >>> log(10)\n    2.302585092994046\n    \n*/\ndouble log(double\
    \ x) \n{\n    return log(x);\n}\n/*\nReturn the exponential of a number\n    >>>\
    \ exp(3)\n    7.38905609893065\n    \n*/\ndouble exp(double x) \n{\n    return\
    \ exp(x);\n}\n/*\nReturn the natural logarithm of e raised to the power of x\n\
    \    >>> log(exp(3))\n    7.38905609893065\n    \n*/\ndouble log(double x, double\
    \ y) \n{\n    return log(x) * y;\n}\n/*\nReturn the exponential of e raised to\
    \ the power of x\n    >>> exp(log(3))\n    7.38905609893065\n    \n*/\ndouble\
    \ exp(double x, double y) \n{\n    return exp(x) * y;\n}\n/*\nReturn the natural\
    \ logarithm of e raised to the power of x\n    >>> log(exp(log(3)))\n    7.38905609893065\n\
    \    \n*/\ndouble log(double x, double y, double z) \n{\n    return log(x) * y\
    \ + z;\n}\n/*\nReturn the exponential of e raised to the power of x\n    >>> exp(log(log(3)))\n\
    \    7.38905609893065\n    \n*/\ndouble exp(double x, double y, double z) \n{\n\
    \    return exp(x) * y + z;\n}\n/*\nReturn the natural logarithm of e raised to\
    \ the power of x\n    >>> log(exp(\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmper7y2atd.d(131): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmper7y2atd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the cube root of a number\n    >>> cube_root(9)\n    3\n    \n*/\n\
    long cube_root(long x) \n{\n    return std.math.cube_root(x);\n}\n/*\nGet the\
    \ floor of a number\n    >>> floor(3.5)\n    3\n    \n*/\nlong floor(long x) \n\
    {\n    return std.math.floor(x);\n}\n/*\nGet the ceil of a number\n    >>> ceil(3.5)\n\
    \    4\n    \n*/\nlong ceil(long x) \n{\n    return std.math.ceil(x);\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return std.math.abs(x);\n}\n/*\nGet the modulus of a number\n  \
    \  >>> modulus(-5, 3)\n    1\n    \n*/\nlong modulus(long x, long y) \n{\n   \
    \ return std.math.modulus(x, y);\n}\n/*\nGet the sine of a number\n    >>> sin(3.5)\n\
    \    1.2246467991473532e-16\n    \n*/\ndouble sin(double x) \n{\n    return std.math.sin(x);\n\
    }\n/*\nGet the cosine of a number\n    >>> cos(3.5)\n    -0.4161468365471424\n\
    \    \n*/\ndouble cos(double x) \n{\n    return std.math.cos(x);\n}\n/*\nGet the\
    \ tangent of a number\n    >>> tan(3.5)\n    -0.9510565162951535\n    \n*/\ndouble\
    \ tan(double x) \n{\n    return std.math.tan(x);\n}\n/*\nGet the arcsine of a\
    \ number\n    >>> asin(3.5)\n    1.5707963267948966\n    \n*/\ndouble asin(double\
    \ x) \n{\n    return std.math.asin(x);\n}\n/*\nGet the arcco\nunittest\n{\n  \
    \  alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6kznte8.d(139): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6kznte8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    2\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nstd.complex sqrt(std.complex\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nstd.complex sqrt(std.complex\
    \ x, int y) \n{\n    return std.math.sqrt(x, y);\n}\n/*\nGet the square root of\
    \ a number\n    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nstd.complex\
    \ sqrt(std.complex x, int y, int z) \n{\n    return std.math.sqrt(x, y, z);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(25)\n    5.385164807134504e-08\n\
    \    \n*/\nstd.complex sqrt(std.complex x, int y, int z, int w) \n{\n    return\
    \ std.math.sqrt(x, y, z, w);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nstd.complex sqrt(std.complex\
    \ x, int y, int z, int w, int x) \n{\n    return std.math.sqrt(x, y, z, w, x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(25)\n    5.385164807134504e-08\n\
    \    \n*/\nstd.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp68ytwxnc.d(65): Error: use `real` instead of `long double`\\\
    n/tmp/tmp68ytwxnc.d(65): Error: use `real` instead of `long double`\\n/tmp/tmp68ytwxnc.d(126):\
    \ Error: identifier expected following `.` instead of `unittest`\\n/tmp/tmp68ytwxnc.d(126):\
    \ Error: no identifier for declarator `std`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp68ytwxnc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1.5\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(4)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4)\n    2.0\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(4)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4)\n    2.0\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(4)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4)\n    2.0\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(4)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4)\n    2.0\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ki75tpb.d(158): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmp1ki75tpb.d(159): Error: found `{` when expecting `;` following\
    \ `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ki75tpb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 5)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(7, 5)\n    15\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(7, 5)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nRaise a number to a power\n    >>> pow(2, 3)\n    8\n    \n*/\n\
    long pow(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nGet the absolute value\
    \ of a number\n    >>> abs(-5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return\
    \ abs(x);\n}\n/*\nGet the modulus of a number\n    >>> mod(-5, 3)\n    1\n   \
    \ \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the remainder\
    \ of a number divided by another\n    >>> rem(7, 3)\n    1\n    \n*/\nlong rem(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n    >>>\
    \ floor(7.5)\n    7\n    \n*/\nlong floor(long x) \n{\n    return floor(x);\n\
    }\n/*\nGet the ceiling of a number\n    >>> ceil(7.5)\n    8\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return ceil(x);\n}\n/*\nGet the floor of a number\n    >>> floor(7.5)\n\
    \    7\n    \n*/\nlong floor(long x) \n{\n    return floor(x);\n}\n/*\nGet the\
    \ ceiling of a number\n    >>> ceil(7.5)\n    8\n    \n*/\nlong ceil(long x) \n\
    {\n    return ceil(x);\n}\n/*\nGet the absolute value of a number\n    >>> abs(-5)\n\
    \    5\n    \n*/\nlong abs(long x) \n{\n    return abs(x);\n}\n/*\nGet the modulus\
    \ of a number\n    >>> mod(-5, 3)\n    1\n    \n*/\nlong mod(long x, long y) \n\
    {\n    return x % y;\n}\n/*\nGet the remainder of a number divided by another\n\
    \    >>> rem(7, 3)\n    1\n    \n*/\nlong rem(long \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiwm9f1ym.d(158): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwm9f1ym.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(5, 7)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nGet the modulus of two numbers x and y\n    >>> mod(2, 3)\n \
    \   1\n    >>> mod(5, 7)\n    3\n    \n*/\nlong mod(long x, long y) \n{\n    return\
    \ x % y;\n}\n/*\nGet the absolute value of number x\n    >>> abs(-3)\n    3\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square\
    \ root of number x\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n\
    \    return x < 0 ? -x : sqrt(x);\n}\n/*\nGet the square root of number x\n  \
    \  >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -x\
    \ : sqrt(x);\n}\n/*\nGet the square root of number x\n    >>> sqrt(9)\n    3\n\
    \    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -x : sqrt(x);\n}\n/*\nGet\
    \ the square root of number x\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return x < 0 ? -x : sqrt(x);\n}\n/*\nGet the square root of number\
    \ x\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0\
    \ ? -x : sqrt(x);\n}\n/*\nGet the square root of number x\n    >>> sqrt(9)\n \
    \   3\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -x : sqrt(x);\n}\n\
    /*\nGet the square root of number x\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return x < 0 ? -x : sqrt(x);\n}\n/*\nGet the square root of number\
    \ x\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0\
    \ ? -\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L)\
    \ == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L)\
    \ == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L)\
    \ == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyo2gsa6e.d(152): Error: expression expected, not `unittest`\\\
    n/tmp/tmpyo2gsa6e.d(153): Error: found `{` when expecting `:`\\n/tmp/tmpyo2gsa6e.d(154):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpyo2gsa6e.d(154): Error: found\
    \ `candidate` when expecting `;` following `return` statement\\n/tmp/tmpyo2gsa6e.d(154):\
    \ Error: found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpyo2gsa6e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add2(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add3(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add4(long x, long y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n   \
    \ 12\n    \n*/\nlong add5(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two\
    \ numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n\
    */\nlong add6(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x\
    \ and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add7(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add8(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add9(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add10(long x, long y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n   \
    \ 12\n    \n*/\nlong add11(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd\
    \ two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n \
    \   \n*/\nlong add12(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_t1unqm.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_t1unqm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(5, 7)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nRaise a number to a power\n    >>> pow(2, 3)\n    8\n    >>>\
    \ pow(5, 7)\n    121\n    \n*/\nlong pow(long x, long y) \n{\n    return pow(x,\
    \ y);\n}\n/*\nReturn the square root of a number\n    >>> sqrt(8)\n    2.0\n \
    \   >>> sqrt(16)\n    4.0\n    \n*/\ndouble sqrt(double x) \n{\n    return sqrt(x);\n\
    }\n/*\nReturn the absolute value of a number\n    >>> abs(-5)\n    5\n    >>>\
    \ abs(5)\n    5\n    \n*/\ndouble abs(double x) \n{\n    return fabs(x);\n}\n\
    /*\nReturn the natural logarithm of a number\n    >>> log(10)\n    2.302585092994046\n\
    \    >>> log(100)\n    2.302585092994046\n    \n*/\ndouble log(double x) \n{\n\
    \    return log(x);\n}\n/*\nReturn the base 10 logarithm of a number\n    >>>\
    \ log10(10)\n    0.1\n    >>> log10(100)\n    1.0\n    \n*/\ndouble log10(double\
    \ x) \n{\n    return log10(x);\n}\n/*\nReturn the base 2 logarithm of a number\n\
    \    >>> log2(10)\n    2.0\n    >>> log2(100)\n    3.0\n    \n*/\ndouble log2(double\
    \ x) \n{\n    return log2(x);\n}\n/*\nReturn the base e logarithm of a number\n\
    \    >>> loge(10)\n    2.302585092994046\n    >>> loge(100)\n    2.302585092994046\n\
    \    \n*/\ndouble loge(double x) \n{\n    return log(x);\n}\n/*\nReturn the natural\
    \ logarithm of e to the power of a number\n    >>> log2e(10)\n    2.302585092994046\n\
    \    >>> log2e(100)\n    2.302585092994046\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 3)\n    -1\n    \n*/\nlong sub(long x,\
    \ long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ mul(2, 3)\n    6\n    >>> mul(3, 4)\n    12\n    \n*/\nlong mul(long x, long\
    \ y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2,\
    \ 3)\n    1\n    >>> div(7, 3)\n    3\n    \n*/\nlong div(long x, long y) \n{\n\
    \    return x / y;\n}\n/*\nReturn x to the power of y\n    >>> pow(2, 3)\n   \
    \ 8\n    \n*/\nlong pow(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nReturn\
    \ the square root of x\n    >>> sqrt(2)\n    1.41421356237\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nReturn the absolute value of x\n    >>>\
    \ abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\ndouble abs(double x) \n{\n\
    \    return abs(x);\n}\n/*\nReturn the natural logarithm of x\n    >>> log(10)\n\
    \    2.302585092994046\n    \n*/\ndouble log(double x) \n{\n    return log(x);\n\
    }\n/*\nReturn the base 2 logarithm of x\n    >>> log2(10)\n    3\n    \n*/\ndouble\
    \ log2(double x) \n{\n    return log2(x);\n}\n/*\nReturn the base 10 logarithm\
    \ of x\n    >>> log10(10)\n    3\n    \n*/\ndouble log10(double x) \n{\n    return\
    \ log10(x);\n}\n/*\nReturn the base e logarithm of x\n    >>> logb(10)\n    3\n\
    \    \n*/\ndouble logb(double x) \n{\n    return logb(x);\n}\n/*\nReturn the natural\
    \ logarithm of x to the power of y\n    >>> logb(10, 3)\n    3\n    \n*/\ndouble\
    \ logb(double x, double y) \n{\n    return logb(x, y);\n}\n/*\nReturn the base\
    \ 2 logarithm of x to the power of y\n    >>> logb(10, 3)\n    3\n    \n*/\ndouble\
    \ logb(double x, double y) \n{\n    return logb(x, y);\n}\n/*\nReturn the base\
    \ 10 logarithm of x to the power of y\n    >>> logb(10, 3)\n    3\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmposoom3ov.d(143): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmposoom3ov.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 2)\n    -5\n    >>> modulus(5, 2)\n    2\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number divided by another\n\
    \    >>> remainder(10, 3)\n    2\n    >>> remainder(10, 5)\n    3\n    \n*/\n\
    long remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the floor of\
    \ a number\n    >>> floor(10)\n    10\n    >>> floor(9.9)\n    9\n    \n*/\nlong\
    \ floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n\
    \    >>> ceil(10)\n    11\n    >>> ceil(9.9)\n    10\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(10)\n    5.0\n    >>> sqrt(9.9)\n    5.000000000000001\n    \n*/\n\
    double sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(10)\n    5.0\n    >>> sqrt(9.9)\n    5.000000000000001\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(10)\n    5.0\n    >>> sqrt(9.9)\n\
    \    5.000000000000001\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(10)\n    5.0\n    >>> sqrt(9.9)\n\
    \    5.000000000000001\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a \nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxxh6vxgj.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxxh6vxgj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 2)\n    3\n    >>> divide(6, 0)\n    Traceback (most recent call last):\n\
    \        ...\n    ZeroDivisionError: division by zero\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    if (y == 0)\n        throw new ZeroDivisionError();\n  \
    \  return x / y;\n}\n/*\nRaise a number to a power\n    >>> power(2, 3)\n    8\n\
    \    \n*/\nlong power(long x, long y) \n{\n    return x * y;\n}\n/*\nReturn the\
    \ square root of a number\n    >>> sqrt(25)\n    5.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nReturn the absolute value of a\
    \ number\n    >>> abs(-5)\n    5\n    \n*/\ndouble abs(double x) \n{\n    return\
    \ std.math.abs(x);\n}\n/*\nReturn the natural logarithm of a number\n    >>> log(10)\n\
    \    2.302585092994046\n    \n*/\ndouble log(double x) \n{\n    return std.math.log(x);\n\
    }\n/*\nReturn the natural logarithm of e raised to a power\n    >>> log2(10)\n\
    \    2.302585092994046\n    \n*/\ndouble log2(double x) \n{\n    return std.math.log2(x);\n\
    }\n/*\nReturn the base 2 logarithm of a number\n    >>> log2(1)\n    0.0\n   \
    \ \n*/\ndouble log2(double x) \n{\n    return std.math.log2(x);\n}\n/*\nReturn\
    \ the base 10 logarithm of a number\n    >>> log10(100)\n    3.0\n    \n*/\ndouble\
    \ log10(double x) \n{\n    return std.math.log10(x);\n}\n/*\nReturn the base 10\
    \ logarithm of e raised to a power\n    >>> log10(2)\n    3.0\n    \n*/\ndouble\
    \ log10(double x) \n{\n    return std.math.log10(x);\n}\n/*\nReturn the natural\
    \ logarithm of 10 raised to a power\n    >>> log10(2)\n    3.0\n    \n*/\ndouble\
    \ log10(double x) \n{\n    return std.math.log10(x);\n}\n/*\nReturn the base 2\
    \ logarithm of 10 raised to a power\n    >>> log2(10)\n    3.0\n    \n*/\ndouble\
    \ log2(double x) \n{\n    return \nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2q48yj5g.d(142): Error: expression expected, not `unittest`\\\
    n/tmp/tmp2q48yj5g.d(143): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2q48yj5g.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 3)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(3, 7)\n    21\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(3, 7)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nReturn x to the power of y\n    >>> pow(2, 3)\n    8\n    >>>\
    \ pow(3, 7)\n    21\n    \n*/\nlong pow(long x, long y) \n{\n    return pow(x,\
    \ y);\n}\n/*\nReturn x to the power of y modulo m\n    >>> powmod(2, 3, 7)\n \
    \   3\n    \n*/\nlong powmod(long x, long y, long m) \n{\n    return powmod(x,\
    \ y, m);\n}\n/*\nReturn x to the power of y modulo m\n    >>> powmod(2, 7, 7)\n\
    \    1\n    \n*/\nlong powmod(long x, long y, long m) \n{\n    return powmod(x,\
    \ y, m);\n}\n/*\nReturn x to the power of y modulo m\n    >>> powmod(2, 7, 7)\n\
    \    1\n    \n*/\nlong powmod(long x, long y, long m) \n{\n    return powmod(x,\
    \ y, m);\n}\n/*\nReturn x to the power of y modulo m\n    >>> powmod(2, 7, 7)\n\
    \    1\n    \n*/\nlong powmod(long x, long y, long m) \n{\n    return powmod(x,\
    \ y, m);\n}\n/*\nReturn x to the power of y modulo m\n    >>> powmod(2, 7, 7)\n\
    \    1\n    \n*/\nlong powmod(long x, long y, long m) \n{\n    return powmod(x,\
    \ y, m);\n}\n/*\nReturn x to the power of y modulo m\n    >>> powmod(2, 7, 7)\n\
    \    1\n    \n*/\nlong powmod(long x, long y, long m) \n{\n    return powmod(x,\
    \ y, m);\n}\n/*\nReturn x to the power of y modulo m\n    >>> powmod(2, 7, 7)\n\
    \    1\n    \n*/\nlong powmod(long x, long y, long m) \n{\n    return powmod(x,\
    \ y, m);\n}\n/*\nReturn x \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbrv5q6an.d(133): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrv5q6an.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(5,\
    \ 3)\n    1\n    >>> modulus(5, -3)\n    -1\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number divided by another\n\
    \    >>> remainder(5, 3)\n    2\n    >>> remainder(5, -3)\n    1\n    \n*/\nlong\
    \ remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a\
    \ number\n    >>> floor(5)\n    5\n    >>> floor(5.5)\n    5\n    \n*/\nlong floor(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n   \
    \ >>> ceil(5)\n    6\n    >>> ceil(5.5)\n    6\n    \n*/\nlong ceil(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.0\n    >>> sqrt(25)\n    5.0\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.0\n    >>> sqrt(25)\n    5.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.0\n    >>> sqrt(25)\n    5.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.0\n    >>> sqrt(25)\n    5.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.0\n    >>> sqrt(25)\n    5.0\n    \n*/\ndouble sqrt(\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv65256ar.d(156): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpv65256ar.d(156): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv65256ar.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nstd.complex sqrt(std.complex\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nstd.complex sqrt(std.complex\
    \ x, long double y) \n{\n    return std.math.sqrt(x, y);\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nstd.complex\
    \ sqrt(std.complex x, double y) \n{\n    return std.math.sqrt(x, y);\n}\n/*\n\
    Get the square root of a number\n    >>> sqrt(25)\n    5.385164807134504e-08\n\
    \    \n*/\nstd.complex sqrt(std.complex x, float y) \n{\n    return std.math.sqrt(x,\
    \ y);\n}\n/*\nGet the square root of a number\n    >>> sqrt(25)\n    5.385164807134504e-08\n\
    \    \n*/\nstd.complex sqrt(std.complex x, long double y) \n{\n    return std.math.sqrt(x,\
    \ y);\n}\n/*\nGet the square root of a number\n    >>> sqrt(25)\n    5.385164807134504e-08\n\
    \    \n*/\nstd.complex sqrt(std.complex x, st\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqo7c3c93.d(65): Error: use `real` instead of `long double`\\\
    n/tmp/tmpqo7c3c93.d(65): Error: use `real` instead of `long double`\\n/tmp/tmpqo7c3c93.d(85):\
    \ Error: use `real` instead of `long double`\\n/tmp/tmpqo7c3c93.d(115): Error:\
    \ use `real` instead of `long double`\\n/tmp/tmpqo7c3c93.d(126): Error: found\
    \ `unittest` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqo7c3c93.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 5)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(7, 5)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-5)\n    5\n\
    \    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the modulus of a number\n    >>> mod(-5, 3)\n    3\n    >>>\
    \ mod(5, 3)\n    0\n    \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the remainder of a number divided by another\n    >>> rem(5, 3)\n \
    \   2\n    \n*/\nlong rem(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the\
    \ floor of a number\n    >>> floor(-5.5)\n-5\n    >>> floor(5.5)\n5\n    \n*/\n\
    long floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of\
    \ a number\n    >>> ceil(5.5)\n6\n    \n*/\nlong ceil(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n\
    -5\n    >>> sqrt(5)\n5\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the square root of a number rounded down\n    >>> sqrtd(-5)\n\
    -5\n    >>> sqrtd(5)\n5\n    \n*/\nlong sqrtd(long x) \n{\n    return x < 0 ?\
    \ -x : x;\n}\n/*\nGet the square root of a number rounded up\n    >>> sqrtu(5)\n\
    5\n    \n*/\nlong sqrtu(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the\
    \ square root of a number rounded down\n    >>> sqrtu(-5)\n-5\n    >>> sqrtu(5)\n\
    5\n    \n*/\nlong sqrtu(long x) \n{\n    return x < 0 ? -\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk1ryyxem.d(152): Error: expression expected, not `unittest`\\\
    n/tmp/tmpk1ryyxem.d(153): Error: found `{` when expecting `:`\\n/tmp/tmpk1ryyxem.d(154):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpk1ryyxem.d(154): Error: found\
    \ `candidate` when expecting `;` following `return` statement\\n/tmp/tmpk1ryyxem.d(154):\
    \ Error: found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpk1ryyxem.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add2(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add3(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add4(long x, long y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n   \
    \ 12\n    \n*/\nlong add5(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two\
    \ numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n\
    */\nlong add6(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x\
    \ and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add7(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add8(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add9(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add10(long x, long y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n   \
    \ 12\n    \n*/\nlong add11(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd\
    \ two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n \
    \   \n*/\nlong add12(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpskixxf4t.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpskixxf4t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(16)\n    4.000000\n    \n*/\ndouble sqrt(double x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(16)\n\
    \    4.000000\n    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(16)\n    4.000000\n    \n\
    */\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(16)\n    4.000000\n    \n*/\nunittest\n{\n  \
    \  alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ovs5eai.d(67): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2ovs5eai.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    2\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of x\n    >>>\
    \ abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the floor of x\n    >>> floor(5)\n    5\n    >>>\
    \ floor(5.5)\n    6\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x :\
    \ x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(5)\n    6\n    >>> ceil(5.5)\n\
    \    6\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the remainder of x divided by y\n    >>> remainder(5, 2)\n    1\n    >>> remainder(5,\
    \ 3)\n    0\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the remainder of x divided by y with rounding\n    >>> remainder(5.5,\
    \ 2)\n    1\n    >>> remainder(5.5, 3)\n    0\n    \n*/\nlong remainder(double\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nGet the absolute value of x with rounding\n\
    \    >>> abs(5.5)\n    6\n    >>> abs(5.61)\n    6\n    \n*/\nlong abs(double\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor of x with rounding\n\
    \    >>> floor(5.5)\n    6\n    >>> floor(5.61)\n    6\n    \n*/\nlong floor(double\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x with rounding\n\
    \    >>> ceil(5.5)\n    6\n    >>> ceil(5.61)\n    6\n    \n*/\nlong ceil(double\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x with\
    \ rounding\n    >>> abs(5.61)\n    6\n    >>> abs(5.5)\n    5\n    \n*/\nlong\
    \ abs(double x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the flo\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpikfxzl8w.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikfxzl8w.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 2)\n    3\n    >>> divide(6, 3)\n    1\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder of dividing x by\
    \ y\n    >>> remainder(6, 2)\n    1\n    >>> remainder(6, 3)\n    0\n    \n*/\n\
    long remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of x by y\n    >>>\
    \ modulus(5, 2)\n    1\n    >>> modulus(5, 3)\n    0\n    \n*/\nlong modulus(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nGet the floor of x\n    >>> floor(5)\n\
    \    5\n    >>> floor(5)\n    5\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(5)\n    6\n    >>>\
    \ ceil(5)\n    6\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n \
    \   5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of x by y\n    >>> modulus(5, 2)\n    1\n    >>> modulus(5, 3)\n\
    \    0\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n}\n/*\n\
    Get the floor of x\n    >>> floor(5)\n    5\n    >>> floor(5)\n    5\n    \n*/\n\
    long floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of\
    \ x\n    >>> ceil(5)\n    6\n    >>> ceil(5)\n    6\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n   \
    \ >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add2(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add3(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add4(long x, long y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n   \
    \ 12\n    \n*/\nlong add5(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two\
    \ numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n\
    */\nlong add6(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x\
    \ and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add7(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add8(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add9(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add10(long x, long y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n   \
    \ 12\n    \n*/\nlong add11(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd\
    \ two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n \
    \   \n*/\nlong add12(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpysuljijm.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpysuljijm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 2)\n    3\n    >>> divide(6, 3)\n    1\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder of x divided by\
    \ y\n    >>> remainder(6, 2)\n    1\n    >>> remainder(6, 3)\n    0\n    \n*/\n\
    long remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n   \
    \ >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n\
    \    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x <\
    \ 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n  \
    \  >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x :\
    \ x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n\
    \    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n   \
    \ \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n   \
    \ >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n\
    \    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x <\
    \ 0 ? -x : x;\n}\n/*\nGet the absolute value of x\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ptu9da9.d(159): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ptu9da9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 2)\n    3\n    >>> divide(6, 4)\n    1\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double \n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp86rexpkr.d(65): Error: use `real` instead of `long double`\\\
    n/tmp/tmp86rexpkr.d(65): Error: use `real` instead of `long double`\\n/tmp/tmp86rexpkr.d(95):\
    \ Error: use `real` instead of `long double`\\n/tmp/tmp86rexpkr.d(95): Error:\
    \ use `real` instead of `long double`\\n/tmp/tmp86rexpkr.d(125): Error: use `real`\
    \ instead of `long double`\\n/tmp/tmp86rexpkr.d(125): Error: use `real` instead\
    \ of `long double`\\n/tmp/tmp86rexpkr.d(136): Error: found `unittest` when expecting\
    \ `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86rexpkr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(5, 7)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-5)\n    5\n\
    \    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the modulus of a number\n    >>> mod(-5, 3)\n    3\n    >>>\
    \ mod(5, 3)\n    0\n    \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the remainder of a number divided by another\n    >>> rem(10, 3)\n\
    \    2\n    >>> rem(10, 5)\n    3\n    \n*/\nlong rem(long x, long y) \n{\n  \
    \  return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(10)\n    10\n\
    \    >>> floor(3.5)\n    3\n    \n*/\nlong floor(long x) \n{\n    return x < 0\
    \ ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(10)\n    10\n  \
    \  >>> ceil(3.5)\n    4\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(10)\n    5.0\n  \
    \  >>> sqrt(3.5)\n    1.7320508075688772\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(10)\n    5.0\n    >>> sqrt(3.5)\n    1.7320508075688772\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(10)\n    5.0\n    >>> sqrt(3.5)\n    1.7320508075688772\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 3)\n    3\n    >>> modulus(5, 3)\n    0\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number\n    >>> remainder(-5,\
    \ 3)\n    2\n    >>> remainder(5, 3)\n    3\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(-5)\n\
    -4\n    >>> floor(5)\n0\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ?\
    \ -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(-5)\n-5\n    >>> ceil(5)\n\
    5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the\
    \ square root of a number\n    >>> sqrt(-5)\n-2.0\n    >>> sqrt(5)\n1.41421356237\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(-5)\n-2.0\n    >>> sqrt(5)\n1.41421356237\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(-5)\n-2.0\n    >>> sqrt(5)\n1.41421356237\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(-5)\n-2.0\n    >>> sqrt(5)\n1.41421356237\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(-5)\n-2.0\n    >>> sqrt(5)\n1.\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbrefs1ly.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrefs1ly.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 3)\n    3\n    >>> modulus(5, 3)\n    0\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number divided by another\
    \ number\n    >>> remainder(10, 3)\n    2\n    >>> remainder(5, 3)\n    1\n  \
    \  \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the\
    \ floor of a number\n    >>> floor(10)\n    10\n    >>> floor(5.5)\n    5\n  \
    \  \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling\
    \ of a number\n    >>> ceil(10)\n    11\n    >>> ceil(5.5)\n    6\n    \n*/\n\
    long ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(10)\n    5.0\n    >>> sqrt(5.5)\n    2.0\n    \n*/\n\
    double sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(10)\n    5.0\n    >>> sqrt(5.5)\n    2.0\n  \
    \  \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the\
    \ square root of a number\n    >>> sqrt(10)\n    5.0\n    >>> sqrt(5.5)\n    2.0\n\
    \    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the\
    \ square root of a number\n    >>> sqrt(10)\n    5.0\n    >>> sqrt(5.5)\n    2.0\n\
    \    \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpddc3apa5.d(133): Error: `std.math.sqrt` called with argument\
    \ types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpddc3apa5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 5)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(3, 4)\n    12\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(7, 5)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-5)\n    5\n\
    \    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the modulus of a number\n    >>> mod(-5, 3)\n    3\n    >>>\
    \ mod(5, 3)\n    1\n    \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the remainder of a number divided by another\n    >>> rem(7, 3)\n \
    \   1\n    >>> rem(7, 5)\n    3\n    \n*/\nlong rem(long x, long y) \n{\n    return\
    \ x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(3.5)\n    3\n    \n\
    */\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling\
    \ of a number\n    >>> ceil(3.5)\n    4\n    \n*/\nlong ceil(long x) \n{\n   \
    \ return x < 0 ? -x : x;\n}\n/*\nGet the floor of a number\n    >>> floor(3.5)\n\
    \    3\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the ceiling of a number\n    >>> ceil(3.5)\n    4\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(25)\n    5.0\n    \n*/\n\
    double sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(25)\n    5.0\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8_w2bb8u.d(156): Error: expression expected, not `unittest`\\\
    n/tmp/tmp8_w2bb8u.d(157): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_w2bb8u.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 3)\n    3\n    >>> modulus(5, 3)\n    0\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(-5)\n\
    -4\n    >>> floor(5)\n0\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ?\
    \ -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(-5)\n-5\n    >>> ceil(5)\n\
    5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the\
    \ round of a number\n    >>> round(2.5)\n2\n    >>> round(2.4)\n2\n    >>> round(2.6)\n\
    3\n    \n*/\nlong round(double x) \n{\n    return x < 0 ? -floor(-x) : floor(x);\n\
    }\n/*\nGet the remainder of a number\n    >>> remainder(-5, 3)\n-3\n    >>> remainder(5,\
    \ 3)\n3\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n\
    /*\nGet the absolute value of a number\n    >>> abs(-5)\n    5\n    >>> abs(5)\n\
    \    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of a number\n    >>> modulus(-5, 3)\n    3\n    >>> modulus(5, 3)\n\
    \    0\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n}\n/*\n\
    Get the floor of a number\n    >>> floor(-5)\n-4\n    >>> floor(5)\n0\n    \n\
    */\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling\
    \ of a number\n    >>> ceil(-5)\n\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmij40b_o.d(149): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmij40b_o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong\
    \ sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of\
    \ a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(9)\n\
    \    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\n\
    Get the square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong\
    \ sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of\
    \ a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(9)\n\
    \    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\n\
    Get the square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong\
    \ sqrt(long x) \n{\n    return std.math.sqrt(\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkkh_u9nd.d(158): Error: expression expected, not `unittest`\\\
    n/tmp/tmpkkh_u9nd.d(159): Error: found `{` when expecting `,`\\n/tmp/tmpkkh_u9nd.d(160):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpkkh_u9nd.d(160): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpkkh_u9nd.d(160): Error: expression\
    \ expected, not `=`\\n/tmp/tmpkkh_u9nd.d(160): Error: found `add` when expecting\
    \ `,`\\n/tmp/tmpkkh_u9nd.d(160): Error: expression expected, not `;`\\n/tmp/tmpkkh_u9nd.d(162):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpkkh_u9nd.d(162): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpkkh_u9nd.d(163): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpkkh_u9nd.d(164): Error: found `;` when expecting `,`\\n/tmp/tmpkkh_u9nd.d(165):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmpkkh_u9nd.d(166): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpkkh_u9nd.d(167): Error: expression expected,\
    \ not `}`\\n/tmp/tmpkkh_u9nd.d(168): Error: found `void` when expecting `,`\\\
    n/tmp/tmpkkh_u9nd.d(168): Error: found `{` when expecting `,`\\n/tmp/tmpkkh_u9nd.d(168):\
    \ Error: expression expected, not `}`\\n/tmp/tmpkkh_u9nd.d(168): Error: found\
    \ `End of File` when expecting `,`\\n/tmp/tmpkkh_u9nd.d(168): Error: found `End\
    \ of File` when expecting `)`\\n/tmp/tmpkkh_u9nd.d(168): Error: found `End of\
    \ File` when expecting `;` following `return` statement\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkkh_u9nd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 3)\n    3\n    >>> modulus(5, 3)\n    1\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number divided by another\n\
    \    >>> remainder(5, 3)\n    2\n    \n*/\nlong remainder(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(5)\n    5\n\
    \    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the\
    \ ceiling of a number\n    >>> ceil(5)\n    6\n    \n*/\nlong ceil(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(5)\n\
    \    1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(5)\n    1.41421356237\n \
    \   \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\n\
    double sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double \nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ls9ivbu.d(150): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ls9ivbu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1.5\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 3)\n    3\n    >>> modulus(5, 3)\n    0\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number\n    >>> remainder(-5,\
    \ 3)\n    -2\n    >>> remainder(5, 3)\n    1\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(-5)\n\
    \    -5\n    >>> floor(5)\n    0\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(-5)\n    5\n\
    \    >>> ceil(5)\n    5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n    -5\n   \
    \ >>> sqrt(5)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n    -5\n    >>> sqrt(5)\n\
    \    2.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n    -5\n    >>> sqrt(5)\n\
    \    2.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n    -5\n    >>> sqrt(5)\n\
    \    2.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n    -5\n    >>> sqrt(5)\n\
    \    2.0\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvxd8gz3z.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxd8gz3z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 5)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(5, 7)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nRaise a number to a power\n    >>> pow(2, 3)\n    8\n    \n*/\n\
    long pow(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nReturn the square\
    \ root of a number\n    >>> sqrt(25)\n    5.385164807134504e-15\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return sqrt(x);\n}\n/*\nReturn the square root of a\
    \ number\n    >>> sqrt(25)\n    5.385164807134504e-15\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nReturn the square root of a number\n   \
    \ >>> sqrt(25)\n    5.385164807134504e-15\n    \n*/\ndouble sqrt(double x) \n\
    {\n    return sqrt(x);\n}\n/*\nReturn the square root of a number\n    >>> sqrt(25)\n\
    \    5.385164807134504e-15\n    \n*/\ndouble sqrt(double x) \n{\n    return sqrt(x);\n\
    }\n/*\nReturn the square root of a number\n    >>> sqrt(25)\n    5.385164807134504e-15\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return sqrt(x);\n}\n/*\nReturn the square\
    \ root of a number\n    >>> sqrt(25)\n    5.385164807134504e-15\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return sqrt(x);\n}\n/*\nReturn the square root of a\
    \ number\n    >>> sqrt(25)\n    5.385164807134504e-15\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nReturn the square root of a number\n   \
    \ >>> sqrt(25)\n    5.385164807134504e-15\n    \n*/\ndouble sqrt(double x) \n\
    {\n    return sqrt(x);\n}\n/*\nReturn the square root of a number\n    >>> sqrt(25)\n\
    \    5.385164\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfkhtr1j5.d(141): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkhtr1j5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x >= 0 ? x : -x;\n}\n/*\nGet the floor of a number\n    >>> floor(5)\n\
    \    5\n    >>> floor(5.5)\n    5\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? x : x - 1;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(5)\n  \
    \  6\n    >>> ceil(5.5)\n    6\n    \n*/\nlong ceil(long x) \n{\n    return x\
    \ < 0 ? x + 1 : x;\n}\n/*\nGet the remainder of a number divided by another\n\
    \    >>> remainder(10, 3)\n    2\n    >>> remainder(10, 5)\n    1\n    \n*/\n\
    long remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the modulo of\
    \ a number divided by another\n    >>> modulo(10, 3)\n    3\n    >>> modulo(10,\
    \ 5)\n    3\n    \n*/\nlong modulo(long x, long y) \n{\n    return x % y;\n}\n\
    /*\nGet the floor division of two numbers x and y\n    >>> floordiv(10, 3)\n \
    \   3\n    >>> floordiv(10, 5)\n    3\n    \n*/\nlong floordiv(long x, long y)\
    \ \n{\n    return x / y;\n}\n/*\nGet the ceiling division of two numbers x and\
    \ y\n    >>> ceildiv(10, 3)\n    3\n    >>> ceildiv(10, 5)\n    4\n    \n*/\n\
    long ceildiv(long x, long y) \n{\n    return x / (y + 1);\n}\n/*\nGet the absolute\
    \ value of a number\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\n\
    long abs(long x) \n{\n    return x >= 0 ? x : -x;\n}\n/*\nGet the floor of a number\n\
    \    >>> floor(5)\n    5\n    >>> floor(5.5)\n    5\n    \n*/\nlong floor(long\
    \ x) \n{\n    return x < 0 ? x : x - 1;\n}\n/*\nGet the ceiling of a number\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6l61gzmm.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6l61gzmm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(5, 7)\n    2\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-5)\n    5\n\
    \    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x >= 0 ? x\
    \ : -x;\n}\n/*\nGet the modulus of a number\n    >>> mod(-5, 3)\n    3\n    >>>\
    \ mod(5, 3)\n    1\n    \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the remainder of a number divided by another\n    >>> rem(12, 3)\n\
    \    3\n    >>> rem(12, 0)\n    12\n    \n*/\nlong rem(long x, long y) \n{\n \
    \   return x % y;\n}\n/*\nGet the sign of a number\n    >>> sign(-5)\n    1\n\
    \    >>> sign(0)\n    0\n    >>> sign(-0)\n    0\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    2\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(5,\
    \ 3)\n    1\n    >>> modulus(5, -3)\n    -1\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number\n    >>> remainder(5,\
    \ 3)\n    2\n    >>> remainder(5, -3)\n    -1\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(5)\n\
    \    5\n    >>> floor(5.5)\n    5\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(5)\n    6\n\
    \    >>> ceil(5.5)\n    6\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ?\
    \ -x : x;\n}\n/*\nGet the floor of a number\n    >>> floor(5)\n    5\n    >>>\
    \ floor(5.5)\n    5\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x :\
    \ x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(5)\n    6\n    >>> ceil(5.5)\n\
    \    6\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(25)\n    5.000000000000000000000000001\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(25)\n    5.000000000000000000000000001\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(25)\n    5.000000000000000000000000001\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8m7kpcyf.d(152): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m7kpcyf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add2(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add3(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add4(long x, long y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n   \
    \ 12\n    \n*/\nlong add5(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two\
    \ numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n\
    */\nlong add6(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x\
    \ and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add7(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add8(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add9(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add10(long x, long y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n   \
    \ 12\n    \n*/\nlong add11(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd\
    \ two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n \
    \   \n*/\nlong add12(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps8a3c46w.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8a3c46w.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return std.math.abs(x);\n}\n/*\nGet the ceiling of x\n    >>> ceil(3.5)\n\
    \    4\n    \n*/\nlong ceil(long x) \n{\n    return std.math.ceil(x);\n}\n/*\n\
    Get the floor of x\n    >>> floor(3.5)\n    3\n    \n*/\nlong floor(long x) \n\
    {\n    return std.math.floor(x);\n}\n/*\nGet the natural logarithm of x\n    >>>\
    \ log(10)\n    2.302585092994046\n    \n*/\ndouble log(double x) \n{\n    return\
    \ std.math.log(x);\n}\n/*\nGet the exponential of x\n    >>> exp(10)\n    2.718281828459045\n\
    \    \n*/\ndouble exp(double x) \n{\n    return std.math.exp(x);\n}\n/*\nGet the\
    \ sine of x\n    >>> sin(3.14)\n    0.8414709848078965\n    \n*/\ndouble sin(double\
    \ x) \n{\n    return std.math.sin(x);\n}\n/*\nGet the cosine of x\n    >>> cos(3.14)\n\
    \    -0.4186152414921257\n    \n*/\ndouble cos(double x) \n{\n    return std.math.cos(x);\n\
    }\n/*\nGet the tangent of x\n    >>> tan(3.14)\n    -0.5772156649015329\n    \n\
    */\ndouble tan(double x) \n{\n    return std.math.tan(x);\n}\n/*\nGet the arctangent\
    \ of x\n    >>> atan(3.14)\n    0.4636476090008061\n    \n*/\ndouble atan(double\
    \ x) \n{\n    return std.math.atan(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(3.14)\n    2.2360679\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq50e417d.d(139): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq50e417d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor of a number\n    >>> floor(5)\n\
    \    5\n    >>> floor(5.5)\n    6\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? 0 : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(5)\n    6\n\
    \    >>> ceil(5.5)\n    6\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ?\
    \ x : x;\n}\n/*\nGet the remainder of a number divided by another\n    >>> remainder(5,\
    \ 2)\n    1\n    >>> remainder(5, 3)\n    0\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number divided\
    \ by another and multiplied by a constant\n    >>> remainder(5, 2, 2)\n    3\n\
    \    \n*/\nlong remainder(long x, long y, long z) \n{\n    return x % y * z;\n\
    }\n/*\nGet the absolute value of a number multiplied by a constant\n    >>> abs(-5)\n\
    \    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x, long y) \n{\n    return\
    \ x < 0 ? -y : y;\n}\n/*\nGet the absolute value of a number multiplied by a constant\
    \ and multiplied by a constant\n    >>> abs(-5, 2)\n    5\n    >>> abs(5, 2)\n\
    \    5\n    \n*/\nlong abs(long x, long y, long z) \n{\n    return x < 0 ? -y\
    \ : y;\n}\n/*\nGet the absolute value of a number multiplied by a constant and\
    \ multiplied by a constant\n    >>> abs(-5, 2, 2)\n    5\n    >>> abs(5, 2, 2)\n\
    \    5\n    \n*/\nlong abs(long x, long y, long z, long w) \n{\n    return x <\
    \ 0 ? -y : y;\n}\n/*\nGet the absolute value of a number multiplied by a constant\
    \ and multiplied by a constant\n    >>> abs(-5, 2, 2, 2)\n    5\n    >>> abs(\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmgsq1a59.d(133): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmgsq1a59.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(5, 7)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nGet the modulus of two numbers x and y\n    >>> mod(2, 3)\n \
    \   1\n    >>> mod(5, 7)\n    3\n    \n*/\nlong mod(long x, long y) \n{\n    return\
    \ x % y;\n}\n/*\nGet the absolute value of number x\n    >>> abs(-3)\n    3\n\
    \    \n*/\nlong abs(long x) \n{\n    return std.math.abs(x);\n}\n/*\nGet the square\
    \ root of number x\n    >>> sqrt(-3)\n    3\n    \n*/\nlong sqrt(long x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the reciprocal of number x\n    >>>\
    \ reciprocal(-3)\n    -1\n    \n*/\nlong reciprocal(long x) \n{\n    return std.math.reciprocal(x);\n\
    }\n/*\nGet the floor of number x\n    >>> floor(-3)\n    -3\n    \n*/\nlong floor(long\
    \ x) \n{\n    return std.math.floor(x);\n}\n/*\nGet the ceiling of number x\n\
    \    >>> ceil(-3)\n    -1\n    \n*/\nlong ceil(long x) \n{\n    return std.math.ceil(x);\n\
    }\n/*\nGet the natural logarithm of number x\n    >>> log(-3)\n    -2\n    \n\
    */\nlong log(long x) \n{\n    return std.math.log(x);\n}\n/*\nGet the exponential\
    \ of number x\n    >>> exp(-3)\n    3\n    \n*/\nlong exp(long x) \n{\n    return\
    \ std.math.exp(x);\n}\n/*\nGet the natural logarithm of number x to the base y\n\
    \    >>> log(-3, 2)\n    -2\n    \n*/\nlong log(long x, long y) \n{\n    return\
    \ std.math.log(x, y);\n}\n/*\nGet the exponential of number x to the base y\n\
    \    >>> exp(-3, \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfr_l6pgs.d(143): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfr_l6pgs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 3)\n    -1\n    \n*/\nlong sub(long x,\
    \ long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ mul(2, 3)\n    6\n    >>> mul(3, 7)\n    21\n    \n*/\nlong mul(long x, long\
    \ y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2,\
    \ 3)\n    1\n    >>> div(7, 3)\n    3\n    \n*/\nlong div(long x, long y) \n{\n\
    \    return x / y;\n}\n/*\nGet the modulus of two numbers x and y\n    >>> mod(2,\
    \ 3)\n    1\n    >>> mod(7, 3)\n    3\n    \n*/\nlong mod(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nGet the absolute value of number x\n    >>> abs(-3)\n\
    \    3\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the square root of number x\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of number x\n\
    \    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of number x\n    >>> sqrt(9)\n    3\n    \n*/\nlong\
    \ sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of\
    \ number x\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of number x\n    >>> sqrt(9)\n\
    \    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\n\
    Get the square root of number x\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of number x\n\
    \    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of number x\n    >>> sqrt(9)\n    3\n    \n*/\nlong\
    \ sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjj8wd6y.d(153): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjj8wd6y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1.5\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 3)\n    3\n    >>> modulus(5, 3)\n    0\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number\n    >>> remainder(-5,\
    \ 3)\n    -2\n    >>> remainder(5, 3)\n    1\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(-5)\n\
    \    -5\n    >>> floor(5)\n    0\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(-5)\n    -5\n\
    \    >>> ceil(5)\n    5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n    -5\n   \
    \ >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n\
    \    -5\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(-5)\n    -5\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(-5)\n    -5\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr0mn2m1e.d(133): Error: `std.math.sqrt` called with argument\
    \ types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpr0mn2m1e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1.5\n    >>> divide(5, 7)\n    3.2\n    \n*/\ndouble divide(double\
    \ x, double y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return st\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptkzj2fgp.d(138): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmptkzj2fgp.d(148): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptkzj2fgp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1.5\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the reciprocal of a number\n\
    \    >>> reciprocal(25)\n    0.0\n    \n*/\ndouble reciprocal(double x) \n{\n\
    \    return std.math.reciprocal(x);\n}\n/*\nGet the reciprocal of a number\n \
    \   >>> reciprocal(25)\n    0.0\n    \n*/\nfloat reciprocal(float x) \n{\n   \
    \ return std.math.reciprocal(x);\n}\n/*\nGet the reciprocal of a number\n    >>>\
    \ reciprocal(25)\n    0.0\n    \n*/\nlong double reciprocal(long double x) \n\
    {\n    return std.math.reciprocal(x);\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\ndouble abs(double x)\
    \ \n{\n    return std.math.abs(x);\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nfloat abs(float x) \n\
    {\n    return std.math.abs(x);\n}\n/*\nGet the absolute value of a number\n  \
    \  >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong double abs(long double\
    \ x) \n{\n    return std.math.abs(x);\n}\n/*\nGet the natural logarithm of a number\n\
    \    >>> log(10)\n    2.302585092994046\n    \n\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnlqg_grw.d(65): Error: use `real` instead of `long double`\\\
    n/tmp/tmpnlqg_grw.d(65): Error: use `real` instead of `long double`\\n/tmp/tmpnlqg_grw.d(95):\
    \ Error: use `real` instead of `long double`\\n/tmp/tmpnlqg_grw.d(95): Error:\
    \ use `real` instead of `long double`\\n/tmp/tmpnlqg_grw.d(131): Error: use `real`\
    \ instead of `long double`\\n/tmp/tmpnlqg_grw.d(131): Error: use `real` instead\
    \ of `long double`\\n/tmp/tmpnlqg_grw.d(135): Error: unterminated /* */ comment\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnlqg_grw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(25)\n    5.385164807134504e-08\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(25)\n    5.385164807134504e-08\n\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpix9jcqo1.d(65): Error: use `real` instead of `long double`\\\
    n/tmp/tmpix9jcqo1.d(65): Error: use `real` instead of `long double`\\n/tmp/tmpix9jcqo1.d(95):\
    \ Error: use `real` instead of `long double`\\n/tmp/tmpix9jcqo1.d(95): Error:\
    \ use `real` instead of `long double`\\n/tmp/tmpix9jcqo1.d(125): Error: use `real`\
    \ instead of `long double`\\n/tmp/tmpix9jcqo1.d(125): Error: use `real` instead\
    \ of `long double`\\n/tmp/tmpix9jcqo1.d(129): Error: unterminated /* */ comment\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpix9jcqo1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(5, 7)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n    >>>\
    \ abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n\
    }\n/*\nGet the modulus of x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n\
    \    3\n    \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n}\n/*\nGet\
    \ the remainder of x and y\n    >>> rem(2, 3)\n    1\n    >>> rem(5, 7)\n    3\n\
    \    \n*/\nlong rem(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the floor\
    \ of x\n    >>> floor(-5)\n    -5\n    >>> floor(5)\n    0\n    \n*/\nlong floor(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(-5)\n\
    \    5\n    >>> ceil(5)\n    5\n    \n*/\nlong ceil(long x) \n{\n    return x\
    \ < 0 ? -x : x;\n}\n/*\nGet the floor of x\n    >>> trunc(2.5)\n    2\n    >>>\
    \ trunc(2.6)\n    2.6\n    \n*/\nlong trunc(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the ceiling of x\n    >>> trunc(2.5)\n    2.5\n    >>> trunc(2.6)\n\
    \    2.6\n    \n*/\nlong trunc(double x) \n{\n    return x < 0 ? -x : x;\n}\n\
    /*\nGet the floor of x\n    >>> floor(2.5)\n    2\n    >>> floor(2.6)\n    2.6\n\
    \    \n*/\nlong floor(double x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the\
    \ ceiling of x\n    >>> ceil(2.5)\n    2.5\n    >>> ceil(2.6)\n    \nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0cvjts2m.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cvjts2m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 3)\n    -1\n    \n*/\nlong sub(long x,\
    \ long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ mul(2, 3)\n    6\n    >>> mul(3, 2)\n    6\n    \n*/\nlong mul(long x, long\
    \ y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2,\
    \ 3)\n    1\n    >>> div(7, 3)\n    3\n    \n*/\nlong div(long x, long y) \n{\n\
    \    return x / y;\n}\n/*\nReturn true if the two numbers are equal\n    >>> eq(2,\
    \ 3)\n    True\n    \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(-5)\n    -5\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the floor of a number\n   \
    \ >>> floor(-5.5)\n    -5\n    >>> floor(5.5)\n    5\n    \n*/\nlong floor(double\
    \ x) \n{\n    return std.math.floor(x);\n}\n/*\nGet the ceil of a number\n   \
    \ >>> ceil(5.5)\n    6\n    \n*/\nlong ceil(double x) \n{\n    return std.math.ceil(x);\n\
    }\n/*\nGet the round of a number\n    >>> round(5.5)\n    6\n    \n*/\nlong round(double\
    \ x) \n{\n    return std.math.round(x);\n}\n/*\nGet the floor of a number\n  \
    \  >>> floor(5.5)\n    5\n    \n*/\nlong floor(long x) \n{\n    return std.math.floor(x);\n\
    }\n/*\nGet the ceil of a number\n    >>> ceil(5.5)\n    6\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return std.math.ceil(x);\n}\n/*\nGet the round of a number\n   \
    \ >>> round(5.5)\n    6\n    \n*/\nlong round(long x) \n{\n    return std.math.round(x);\n\
    }\n/*\nGet the floor of a number\n    >>> floor(5.5)\n    5\n    \n*/\nlong floor(double\
    \ x) \n{\n    return std.math.floor(x);\n}\n/*\nGet the ceil of a number\n   \
    \ >>> ceil(5.5)\n    6\n    \n*/\nlong ceil(double x) \n{\n    return std.math.ceil(x);\n\
    }\n/*\nGet the round of a number\n    >>> round(5.5)\n    6\n    \n*/\nlong round(double\
    \ x) \n{\n    return std.math.round(x);\n}\n/*\nGet the floor \nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo8gklpze.d(155): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo8gklpze.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(5, 7)\n    2\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-5)\n    5\n\
    \    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the modulus of a number\n    >>> mod(-5, 2)\n    1\n    >>>\
    \ mod(5, 2)\n    1\n    \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the remainder of a number\n    >>> rem(5, 2)\n    1\n    \n*/\nlong\
    \ rem(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n\
    \    >>> floor(-5)\n-5\n    >>> floor(5)\n5\n    \n*/\nlong floor(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(-5)\n\
    -5\n    >>> ceil(5)\n5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n-5\n    >>>\
    \ sqrt(5)\n5\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -x : x;\n}\n\
    /*\nGet the square of a number\n    >>> sqr(-5)\n-5\n    >>> sqr(5)\n25\n    \n\
    */\nlong sqr(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the reciprocal\
    \ of a number\n    >>> recip(5)\n1\n    \n*/\nlong recip(long x) \n{\n    return\
    \ 1 / x;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-5)\n    5\n\
    \    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the modulus of a number\n    >>> mod(-5, 2)\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp21ld42vl.d(155): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp21ld42vl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 2)\n    2\n    >>> modulus(5, 2)\n    1\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number\n    >>> remainder(-5,\
    \ 2)\n    -1\n    >>> remainder(5, 2)\n    1\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(-5)\n\
    \    -5\n    >>> floor(5)\n    0\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(-5)\n    5\n\
    \    >>> ceil(5)\n    5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n    -5\n   \
    \ >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square of a number\n    >>> square(-5)\n \
    \   -5\n    >>> square(5)\n    25\n    \n*/\ndouble square(double x) \n{\n   \
    \ return x * x;\n}\n/*\nGet the reciprocal of a number\n    >>> reciprocal(-5)\n\
    \    -0.25\n    >>> reciprocal(5)\n    0.5\n    \n*/\ndouble reciprocal(double\
    \ x) \n{\n    return 1.0 / x;\n}\n/*\nGet the natural logarithm of a number\n\
    \    >>> log(-5)\n    -5\n    >>> log(5)\n    1.098612288668\n    \n*/\ndouble\
    \ log(double x) \n{\n    return std.math.log(x);\n}\n/*\nGet the exponential of\
    \ a number\n    >>> exp(-5)\n    \nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwl4_wykp.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwl4_wykp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder of x divided by\
    \ y\n    >>> remainder(2, 3)\n    1\n    >>> remainder(5, 7)\n    3\n    \n*/\n\
    long remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x > 0 ? x : -x;\n}\n/*\nGet the modulus of x divided by y\n\
    \    >>> modulus(5, 3)\n    2\n    >>> modulus(5, -3)\n    3\n    \n*/\nlong modulus(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nGet the floor of x\n    >>> floor(5)\n\
    \    5\n    >>> floor(-5)\n    -5\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(5)\n    6\n    >>>\
    \ ceil(-5)\n    -5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? x + 1\
    \ : x;\n}\n/*\nGet the floor of x with precision p\n    >>> floor(5, 2)\n    5\n\
    \    >>> floor(-5, 2)\n    -5\n    \n*/\nlong floor(long x, int p) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x with precision p\n    >>> ceil(5,\
    \ 2)\n    6\n    >>> ceil(-5, 2)\n    -5\n    \n*/\nlong ceil(long x, int p) \n\
    {\n    return x < 0 ? x + 1 : x;\n}\n/*\nGet the absolute value of x with precision\
    \ p\n    >>> abs(5, 2)\n    5\n    >>> abs(-5, 2)\n    5\n    \n*/\nlong abs(long\
    \ x, int p) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of x with\
    \ precision p\n    >>> modulus(5, 2, 2)\n    5\n    >>> modulus(5, -2, 2)\n  \
    \  3\n    \n*/\nlong modulus(long x, \nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_s7wq4dj.d(144): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp_s7wq4dj.d(144): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_s7wq4dj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    3\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the modulus of two numbers x and\
    \ y\n    >>> modulus(2, 3)\n    1\n    >>> modulus(5, 7)\n    3\n    \n*/\nlong\
    \ modulus(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the absolute value\
    \ of number x\n    >>> abs(-3)\n    3\n    \n*/\nlong abs(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the square root of number x\n    >>> sqrt(-3)\n\
    \    -2\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -sqrt(-x) : sqrt(x);\n\
    }\n/*\nGet the floor of number x\n    >>> floor(-3)\n    -3\n    \n*/\nlong floor(long\
    \ x) \n{\n    return x < 0 ? floor(-x) : floor(x);\n}\n/*\nGet the ceiling of\
    \ number x\n    >>> ceil(-3)\n    -1\n    \n*/\nlong ceil(long x) \n{\n    return\
    \ x < 0 ? ceil(-x) : ceil(x);\n}\n/*\nGet the natural logarithm of number x\n\
    \    >>> log(10)\n    2.302585092994046\n    \n*/\ndouble log(double x) \n{\n\
    \    return log(x);\n}\n/*\nGet the exponential of number x\n    >>> exp(10)\n\
    \    2.718281828459045\n    \n*/\ndouble exp(double x) \n{\n    return exp(x);\n\
    }\n/*\nGet the natural logarithm of number x\n    >>> log(10)\n    2.302585092994046\n\
    \    \n*/\ndouble log(double x) \n{\n    return log(x);\n}\n/*\nGet the exponential\
    \ of number x\n    >>> exp(10)\n    2.718281828459045\n    \n*/\ndouble exp(double\
    \ x) \n{\n    return exp(x);\n}\n/*\nGet the natural logarith\nunittest\n{\n \
    \   alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxu3hb_4.d(143): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxu3hb_4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 5)\n    3\n    \n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    42\n    \n*/\nlong mul(long x, long y) \n\
    {\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n \
    \   1\n    >>> div(7, 5)\n    3\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nGet the square root of a number\n    >>> sqrt(9)\n    3\n   \
    \ \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong\
    \ sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of\
    \ a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(9)\n\
    \    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\n\
    Get the square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong\
    \ sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of\
    \ a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(9)\n\
    \    3\n    \n*/\nlong sqrt(\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjld83zr.d(158): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpxjld83zr.d(158): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjld83zr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the modulus of two numbers x and\
    \ y\n    >>> modulus(2, 3)\n    1\n    >>> modulus(5, 7)\n    3\n    \n*/\nlong\
    \ modulus(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the absolute value\
    \ of number x\n    >>> abs(-5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the square root of number x\n    >>> sqrt(-5)\n\
    \    -5\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -sqrt(-x) : sqrt(x);\n\
    }\n/*\nGet the reciprocal of number x\n    >>> reciprocal(-5)\n    -1\n    \n\
    */\nlong reciprocal(long x) \n{\n    return 1 / x;\n}\n/*\nGet the floor of number\
    \ x\n    >>> floor(-5)\n    -5\n    \n*/\nlong floor(long x) \n{\n    return x\
    \ < 0 ? floor(-x) : floor(x);\n}\n/*\nGet the ceiling of number x\n    >>> ceil(-5)\n\
    \    0\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? ceil(-x) : ceil(x);\n\
    }\n/*\nGet the round of number x\n    >>> round(3.5)\n    3\n    \n*/\nlong round(double\
    \ x) \n{\n    return x < 0 ? round(-x) : round(x);\n}\n/*\nGet the floor of number\
    \ x\n    >>> trunc(3.5)\n    3\n    \n*/\nlong trunc(double x) \n{\n    return\
    \ x < 0 ? trunc(-x) : trunc(x);\n}\n/*\nGet the ceiling of number x\n    >>> ceil(3.5)\n\
    \    4\n    \n*/\nlong ceil(double x) \n{\n    return x < 0 ? ceil(-x) : ceil(x);\n\
    }\n/*\nGet the floor of number x\n    >>> floor(3.5)\n    3\n    \n*/\nlong floor(double\
    \ x) \n{\n    return x < 0 ? floor(-x) : floor(x);\n}\n/*\nGet the ceiling of\
    \ number x\n    >>> ceil(\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5f1mhsvl.d(141): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5f1mhsvl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 3)\n    -1\n    \n*/\nlong sub(long x,\
    \ long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ mul(2, 3)\n    6\n    >>> mul(7, 3)\n    21\n    \n*/\nlong mul(long x, long\
    \ y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2,\
    \ 3)\n    1\n    >>> div(7, 3)\n    3\n    \n*/\nlong div(long x, long y) \n{\n\
    \    return x / y;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-3)\n\
    \    3\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of a number\n    >>> mod(-7, 3)\n    1\n    >>> mod(7, 3)\n    3\n\
    \    \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the remainder\
    \ of a number divided by another number\n    >>> rem(7, 3)\n    1\n    >>> rem(7,\
    \ -3)\n    -3\n    \n*/\nlong rem(long x, long y) \n{\n    return x % y;\n}\n\
    /*\nGet the sign of a number\n    >>> sign(-3)\n    -1\n    >>> sign(3)\n    1\n\
    \    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute\
    \ value of a number\n    >>> abs(-3)\n    3\n    \n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> mod(-7,\
    \ 3)\n    1\n    >>> mod(7, 3)\n    3\n    \n*/\nlong mod(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nGet the remainder of a number divided by another number\n\
    \    >>> rem(7, 3)\n    1\n    >>> rem(7, -3)\n    -3\n    \n*/\nlong rem(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nGet the sign of a number\n    >>>\
    \ sign(-3)\n    -1\n    >>> sign(3)\n    1\n    \n*/\nlong sign(long x) \n{\n\
    \    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of a number\n    >>>\
    \ abs(-3)\n    3\n    \n*/\nlong abs(long x) \n{\n    return x < \nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvo8i_ie4.d(152): Error: expression expected, not `unittest`\\\
    n/tmp/tmpvo8i_ie4.d(153): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo8i_ie4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor value of a number\n    >>>\
    \ floor(-5)\n-5\n    >>> floor(5)\n5\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling value of a number\n    >>> ceil(-5)\n\
    -5\n    >>> ceil(5)\n5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the remainder of a number divided by another\n    >>> remainder(10,\
    \ 3)\n    2\n    >>> remainder(10, 5)\n    1\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number divided\
    \ by another and return the remainder\n    >>> remainder(10, 3, 2)\n    2\n  \
    \  \n*/\nlong remainder(long x, long y, long z) \n{\n    return x % y + z;\n}\n\
    /*\nGet the modulus of a number divided by another\n    >>> modulus(10, 3)\n \
    \   2\n    >>> modulus(10, 5)\n    1\n    \n*/\nlong modulus(long x, long y) \n\
    {\n    return x % y;\n}\n/*\nGet the modulus of a number divided by another and\
    \ return the modulus\n    >>> modulus(10, 3, 2)\n    2\n    \n*/\nlong modulus(long\
    \ x, long y, long z) \n{\n    return x % y + z;\n}\n/*\nGet the absolute value\
    \ of a number\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor value of a number\n\
    \    >>> floor(-5)\n-5\n    >>> floor(5)\n5\n    \n*/\nlong floor(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling value of a number\n\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_fumsjej.d(143): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_fumsjej.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder of dividing x by\
    \ y\n    >>> remainder(5, 7)\n    2\n    \n*/\nlong remainder(long x, long y)\
    \ \n{\n    return x % y;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n\
    \    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the absolute value of x\n    >>> abs(-5)\n    5\n    \n*/\nlong abs(long x)\
    \ \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n    >>>\
    \ abs(-5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n   \
    \ >>> abs(-5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x :\
    \ x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n    \n*/\nlong\
    \ abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of\
    \ x\n    >>> abs(-5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0\
    \ ? -x : x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n    \n\
    */\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppdvuo9xj.d(159): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppdvuo9xj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 3)\n    3\n    >>> modulus(5, 3)\n    0\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number\n    >>> remainder(-5,\
    \ 3)\n    -2\n    >>> remainder(5, 3)\n    1\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(-5)\n\
    \    -5\n    >>> floor(5)\n    0\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(-5)\n    0\n\
    \    >>> ceil(5)\n    5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n    -5\n   \
    \ >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n\
    \    -5\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(-5)\n    -5\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(-5)\n    -5\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(-\nunittest\n{\n    alias candidate = add;\n\n   \
    \ assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n   \
    \ assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n  \
    \  assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkm8ektug.d(147): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkm8ektug.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nFind the remainder of dividing x by\
    \ y\n    >>> remainder(5, 3)\n    1\n    >>> remainder(5, 7)\n    2\n    \n*/\n\
    long remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nFind the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x >= 0 ? x : -x;\n}\n/*\nFind the absolute value of x\n \
    \   >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n\
    \    return x >= 0 ? x : -x;\n}\n/*\nFind the absolute value of x\n    >>> abs(-5)\n\
    \    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x >=\
    \ 0 ? x : -x;\n}\n/*\nFind the absolute value of x\n    >>> abs(-5)\n    5\n \
    \   >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x >= 0 ? x :\
    \ -x;\n}\n/*\nFind the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n\
    \    5\n    \n*/\nlong abs(long x) \n{\n    return x >= 0 ? x : -x;\n}\n/*\nFind\
    \ the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n   \
    \ \n*/\nlong abs(long x) \n{\n    return x >= 0 ? x : -x;\n}\n/*\nFind the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x >= 0 ? x : -x;\n}\n/*\nFind the absolute value of x\n \
    \   >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n\
    \    return x >= 0 ? x : -x;\n}\n/*\nFind the absolute value of x\n    >>> abs(-5)\n\
    \    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x >=\
    \ 0 ? x : -x;\n}\n/*\nFind the absolute value of x\n\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsfqesuhh.d(159): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfqesuhh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 3)\n    -1\n    \n*/\nlong sub(long x,\
    \ long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ mul(2, 3)\n    6\n    >>> mul(3, 2)\n    6\n    \n*/\nlong mul(long x, long\
    \ y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2,\
    \ 3)\n    1\n    >>> div(7, 3)\n    3\n    \n*/\nlong div(long x, long y) \n{\n\
    \    return x / y;\n}\n/*\nReturn x to the power of y\n    >>> pow(2, 3)\n   \
    \ 8\n    \n*/\nlong pow(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nReturn\
    \ the square root of x\n    >>> sqrt(25)\n    5.0000000000000000\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return sqrt(x);\n}\n/*\nReturn the absolute value of\
    \ x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\ndouble abs(double\
    \ x) \n{\n    return abs(x);\n}\n/*\nReturn the natural logarithm of x\n    >>>\
    \ log(10)\n    2.302585092994046\n    \n*/\ndouble log(double x) \n{\n    return\
    \ log(x);\n}\n/*\nReturn the base 10 logarithm of x\n    >>> log10(10)\n    2.0\n\
    \    \n*/\ndouble log10(double x) \n{\n    return log10(x);\n}\n/*\nReturn the\
    \ base 2 logarithm of x\n    >>> log2(10)\n    2.0\n    \n*/\ndouble log2(double\
    \ x) \n{\n    return log2(x);\n}\n/*\nReturn the natural logarithm of x to the\
    \ power of y\n    >>> log2(10, 2)\n    5.8\n    \n*/\ndouble log2(double x, double\
    \ y) \n{\n    return log2(x, y);\n}\n/*\nReturn the base 10 logarithm of x to\
    \ the power of y\n    >>> log2(10, 2)\n    5.8\n    \n*/\ndouble log2(double x,\
    \ double y) \n{\n    return log2(x, y);\n}\n/*\nReturn the base 2 logarithm of\
    \ x to the power of y\n    >>> log2(10, 2)\n    5.8\n    \n*/\ndouble log2(double\
    \ x, double y) \n{\n    return log2(x, y);\n}\n/*\nReturn the base 10 logarithm\
    \ of x to the power of y\n\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjqtrpenz.d(143): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqtrpenz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    1\n    >>> sub(7, 3)\n    -1\n    \n*/\nlong sub(long x,\
    \ long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ mul(2, 3)\n    6\n    >>> mul(3, 7)\n    21\n    \n*/\nlong mul(long x, long\
    \ y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2,\
    \ 3)\n    1\n    >>> div(7, 3)\n    3\n    \n*/\nlong div(long x, long y) \n{\n\
    \    return x / y;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-3)\n\
    \    3\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of a number\n    >>> mod(-7, 3)\n    1\n    >>> mod(7, 3)\n    3\n\
    \    \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the factorial\
    \ of a number\n    >>> factorial(0)\n    1\n    >>> factorial(7)\n    5040\n \
    \   \n*/\nlong factorial(long x) \n{\n    long result = 1;\n    for (long i =\
    \ 1; i <= x; i++) \n    {\n        result *= i;\n    }\n    return result;\n}\n\
    /*\nGet the square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square of a number\n  \
    \  >>> square(9)\n    81\n    \n*/\nlong square(long x) \n{\n    return x * x;\n\
    }\n/*\nGet the cube of a number\n    >>> cube(9)\n    27\n    \n*/\nlong cube(long\
    \ x) \n{\n    return x * x * x;\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(9)\n    3\n    \n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square of a number\n    >>> square(9)\n    81\n    \n*/\nlong square(long\
    \ x) \n{\n    return x * x;\n}\n/*\nGet the cube of a number\n    >>> cube(9)\n\
    \    27\n    \n*/\nlong cube(long x) \n{\n    return x * x * x;\n}\n/*\nGet the\
    \ square root of a number\n    >>> sqrt(9)\n    3\n    \n*/\nlong sqrt(long x)\
    \ \n{\n    return \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu16ulugi.d(159): Error: expression expected, not `unittest`\\\
    n/tmp/tmpu16ulugi.d(160): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu16ulugi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of x\n    >>>\
    \ abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the remainder of x divided by y\n    >>> remainder(5,\
    \ 2)\n    1\n    >>> remainder(5, 3)\n    0\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the floor of x\n    >>> floor(5)\n\
    \    5\n    >>> floor(3.5)\n    3\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(5)\n    4\n    >>>\
    \ ceil(3.5)\n    4\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n\
    }\n/*\nGet the sign of x\n    >>> sign(-5)\n    -1\n    >>> sign(0)\n    0\n \
    \   >>> sign(-0)\n    0\n    >>> sign(1)\n    1\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(-5,\
    \ 3)\n    3\n    >>> modulus(5, 3)\n    0\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number\n    >>> remainder(-5,\
    \ 3)\n    -3\n    >>> remainder(5, 3)\n    3\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(-5)\n\
    \    -5\n    >>> floor(5)\n    0\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(-5)\n    -5\n\
    \    >>> ceil(5)\n    5\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n    -5\n   \
    \ >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(-5)\n\
    \    -5\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\nfloat sqrt(float x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(-5)\n    -5\n    >>> sqrt(5)\n    1.41421356237\n    \n*/\nlong double\
    \ sqrt(long double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(-5)\n    -5\n    >>> sqrt(5)\n    1.41421356237\n\
    \    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the\
    \ square root of a number\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw0vn3yqo.d(131): Error: use `real` instead of `long double`\\\
    n/tmp/tmpw0vn3yqo.d(131): Error: use `real` instead of `long double`\\n/tmp/tmpw0vn3yqo.d(147):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpw0vn3yqo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor of a number\n    >>> floor(5)\n\
    \    5\n    >>> floor(5.5)\n    6\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? 0 : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(5)\n    6\n\
    \    >>> ceil(5.5)\n    6\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ?\
    \ x : x;\n}\n/*\nGet the remainder of a number divided by another\n    >>> remainder(10,\
    \ 3)\n    2\n    >>> remainder(10, 5)\n    1\n    \n*/\nlong remainder(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the remainder of a number divided\
    \ by another and multiplied by a constant\n    >>> remainder(10, 3, 2)\n    6\n\
    \    \n*/\nlong remainder(long x, long y, long z) \n{\n    return x % y * z;\n\
    }\n/*\nGet the absolute value of a number multiplied by a constant\n    >>> abs(-5)\n\
    \    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x, long y) \n{\n    return\
    \ x < 0 ? -y : y;\n}\n/*\nGet the absolute value of a number multiplied by a constant\n\
    \    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x, long\
    \ y) \n{\n    return x < 0 ? -y : y;\n}\n/*\nGet the absolute value of a number\
    \ multiplied by a constant\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n  \
    \  \n*/\nlong abs(long x, long y) \n{\n    return x < 0 ? -y : y;\n}\n/*\nGet\
    \ the absolute value of a number multiplied by a constant\n    >>> abs(-5)\n \
    \   5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x, long y) \n{\n    return\
    \ x < 0 ? -y : y;\n}\n/*\nGet the absolute value \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt0vdeodu.d(145): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0vdeodu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder of dividing x by\
    \ y\n    >>> remainder(2, 3)\n    1\n    >>> remainder(5, 7)\n    3\n    \n*/\n\
    long remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x >= 0 ? x : -x;\n}\n/*\nGet the absolute value of x\n  \
    \  >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n\
    \    return x >= 0 ? x : -x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n\
    \    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x >=\
    \ 0 ? x : -x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n  \
    \  >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x >= 0 ? x :\
    \ -x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n\
    \    5\n    \n*/\nlong abs(long x) \n{\n    return x >= 0 ? x : -x;\n}\n/*\nGet\
    \ the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n   \
    \ \n*/\nlong abs(long x) \n{\n    return x >= 0 ? x : -x;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x >= 0 ? x : -x;\n}\n/*\nGet the absolute value of x\n  \
    \  >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n\
    \    return x >= 0 ? x : -x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n\
    \    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x >=\
    \ 0 ? x : -x;\n}\n/*\nGet the absolute value of x\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_p4zh414.d(159): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_p4zh414.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    3\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    1\n    >>> divide(5, 7)\n    3\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the modulus of two numbers x and\
    \ y\n    >>> modulus(2, 3)\n    1\n    >>> modulus(5, 7)\n    3\n    \n*/\nlong\
    \ modulus(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the remainder of\
    \ x divided by y\n    >>> remainder(2, 3)\n    1\n    >>> remainder(5, 7)\n  \
    \  2\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\n\
    Get the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n \
    \   \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n   \
    \ >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n\
    \    5\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x <\
    \ 0 ? -x : x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n  \
    \  >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x :\
    \ x;\n}\n/*\nGet the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n\
    \    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the absolute value of x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n   \
    \ \n*/\nlong abs(long x) \n{\n    return \nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) ==\
    \ 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) ==\
    \ 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvaf7997k.d(158): Error: expression expected, not `unittest`\\\
    n/tmp/tmpvaf7997k.d(159): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvaf7997k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
