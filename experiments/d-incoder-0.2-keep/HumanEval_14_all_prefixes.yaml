name: HumanEval_14_all_prefixes
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
  \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n  \
  \  ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n"
tests: "unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
  \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
  , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
  WWW\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}", "{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \     result[i] = string.substr(0, i);\n    return result;\n}", "{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i\
    \ + 1, string.Length - i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substring", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', '", "{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result", "{\n    int len = string.length();\n    \n   \
    \ string[] result = new string[len];\n    \n    for (int i = 0; i < len; ++i)\n\
    \    {\n        result[i] = string.substr(0, i);\n    }\n    \n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    int i = 0;\n   \
    \ while (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(0, i);\n    return result;\n}", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substring", "{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, i);\n    return result;\n}", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', '", "{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(start, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step) \n{\n", "{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.substr(0, i);\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i++] = string.Substring(startIndex, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(startIndex, endIndex);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step) \n{\n    string[] result = new string[string.length];\n    int i =\
    \ 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(startIndex,\
    \ endIndex, step);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n", "{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = ", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc']\n    \n*/\nstring[] ", "{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', '", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int length) \n{\n", "{\n    string[] result = new string[string.Length];\n \
    \   for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b',\
    \ 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ '", "{\n    string[] result = new string[string.length];\n    for(int i = 0;\
    \ i < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', '", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < string.length; i++)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.substr(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> ", "{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[string.Length - 1 - i] = string.Substring(i);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest ", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[string.Length - 1 - i] = string.Substring(i);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring", "{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab',\
    \ 'abc', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'ab', 'abc', 'bc', 'c', 'abc']\n    ", "{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(0, i);\n    return result;\n}", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = string.Length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc', 'b',\
    \ 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    for(int\
    \ i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', '", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i - start,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + length - start);\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + length - start);\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, ", "{\n    string[] result = new string[string.length];\n    int\
    \ i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b',\
    \ 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    for(; i <\
    \ string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', '", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n \
    \   return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab',\
    \ 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc", "{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.Length];\n    int i = 0;\n   \
    \ while (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n\
    \        i++;\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substring", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i++] =\
    \ string.substr(0, i);\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) ", "{\n    string[] result = new string[string.Length];\n    int i =\
    \ 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substring", "{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int length, int start, int end) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start, int end,\
    \ int step) \n{\n    string[] result = new string", "{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n \
    \   return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b',\
    \ 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i +=\
    \ 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest ", "{\n    int len = string.length();\n    string[]\
    \ result = new string[len];\n    for(int i = 0; i < len; ++i)\n    {\n       \
    \ result[i] = string.substr(0, i);\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(0, i);\n    return result;\n}", "{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc", "{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n \
    \   \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = string.Length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int length, int start, int end) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start, int end,\
    \ int step) \n{\n    string[] result = ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc', 'b',\
    \ 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', '", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n \
    \   return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i++] =\
    \ string.substr(0, i);\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substring", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> ", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = string.Length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n",
  "{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i + 1);\n \
    \       i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', '", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc', 'b',\
    \ 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2, 3)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2, 3)\n\
    \    ['', 'a', 'ab', '", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \        result[i] = string.Substring(start, i - start);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < start + length; ++i)\n\
    \        result[i] = string.Substring(start, i - start);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < start + length;\
    \ ++i)\n        result[i] = string.Substring(start, i - start);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end, int end2) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = ", "{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int length", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n \
    \   \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.", "{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\
    \ \n    {\n        result[i] = string.Substring(0, i);\n        i++;\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = string.Length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 3)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int start)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 3)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 3)\n\
    \    ['', 'a', 'ab', 'abc', 'b', '", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(0, length);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(",
  "{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['',\
    \ 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substring", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n{\n    string", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string prefix) \n{", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) ", "{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ and suffixes from shortest to longest of the input string\n    >>> all_suffixes_prefixes('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_suffixes_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \       result[i] += string.substr(i, string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all prefixes and suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes_prefixes('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_suffixes_prefixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(i, string.length);\n        result[i]\
    \ += string.substr(0, i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ prefixes and suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes_prefixes_reverse('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\n\
    string[] all_suffixes_prefixes_reverse_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(i, string.length);\n        result[i]\
    \ += string.substr(0, i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ prefixes and suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes_prefixes_reverse('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\n\
    string[] all_suffixes_prefixes_reverse_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < ", "{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) ", "{\n    string[] result = new string[string.length];\n    int i =\
    \ 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string ", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int end2) \n", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    ", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = string.Length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.substr(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n", "{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n", "{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substring", "{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ end - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ end - start, step);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n \
    \   \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(0, i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(0, i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')",
  "{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.substr(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.substr(i, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(i, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(i, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(i, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.substr(i, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest ", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i + 1, string.Length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n\
    */\nstring[] all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, i);\n        i += 1;\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab',\
    \ 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int start, int length, int end) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n", "{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')", "{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int length) \n{\n    ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    int len = string.length();\n   \
    \ \n    string[] result = new string[len];\n    \n    for (int i = 0; i < len;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n    \n    return\
    \ result;\n}", "{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n ", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \        result[i] = string.substr(i, string.length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, length);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n        result[i] = string.substr(start, length);\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2, 3)\n    ['', 'a', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    int i =\
    \ 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2, 3)\n    ['',\
    \ 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string", "{\n \
    \   string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i,string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(0,i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', '", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Sub", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < start + length; ++i)\n\
    \        result[i] = string.Substring(i - start, length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int step) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < start + length;\
    \ i += step)\n        result[i] = string.Substring(i - start, length);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int length, int step,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < ", "{\n    string[] result = new string[string.length];\n   \
    \ int i = 0;\n    while (i < string.length) \n    {\n        result[i++] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length) \n   \
    \ {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length) \n   \
    \ {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length) \n   \
    \ {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length) \n   \
    \ {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length) \n   \
    \ {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab',\
    \ 'abc']\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2, 3)\n    ['', 'abc']\n    \n*/\n\
    string[] all_substrings(string string, int length, int start, int end) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2, 3)\n    ['', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start, int end,\
    \ int step) \n{\n    string[] result = new string", "{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n}",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length, int end) \n{\n    string[] result = new string[string.length];\n   \
    \ for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length, int end, int step) ", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{",
  "{\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ end - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ end - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(", "{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes and suffixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes_suffixes('abc')\n\
    \    ['a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'bc', 'abc', 'bc', 'c', 'abc',\
    \ 'c', 'bc', 'abc', 'abc']\n    \n*/\nstring[] all_prefixes_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n      \
    \  result[i++] = string.substr(i, string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all prefixes and suffixes from shortest to longest of the\
    \ input string\n    >>> all_prefixes_suffixes('abc')\n    ['a', 'ab', 'abc', 'ab',\
    \ 'ac', 'abc', 'ac', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'bc', 'abc', 'abc']\n\
    \    \n*/\nstring[] all_prefixes_suffixes_2(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0, i);\n        result[i++] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ and suffixes from shortest to longest of the input string\n    >>> all_prefixes_suffixes_2('abc')\n\
    \    ['a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'bc', 'abc', 'bc', 'c', 'abc',\
    \ 'c', 'bc', 'abc', 'abc']\n    \n*/\nstring[] all_prefixes_suffixes_3(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n\
    \        result[i++] = string.substr(i, string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all prefixes ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'b']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n    \n\
    */\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(0, length);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc',\
    \ 2)\n    ['', 'ab', 'abc", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    int len = string.length();\n    string[] result = new string[len];\n\
    \    for(int i = 0; i < len; ++i)\n        result[i] = string.substr(0, i);\n\
    \    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[string.Length - 1 - i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')", "{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; ++i)\n        result[i]\
    \ = string.Substring(i);\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i += step, ++length)", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = ", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(0, i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc',\
    \ 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string string, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all ", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes('abc')\n    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc', 2)\n\
    \    ['', 'a', '", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Sub",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.Length];\n    for(int\
    \ i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = string.Length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n", "{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(0, i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['', 'c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', 'b', 'bc', 'c', 'abc']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a',\
    \ 'ab', 'abc', '", "{\n    string[] result = new string[string.length];\n    int\
    \ i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['', 'c', 'b']\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = string.Length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a', 'ab', 'abc']\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc', 2)\n    ['', 'a',\
    \ 'ab', 'abc']\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
