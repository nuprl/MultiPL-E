name: HumanEval_8_sum_product
language: humaneval_to_dlang.py
results:
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\n    {\n     \
    \   sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ntj5eoi.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp3ntj5eoi.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp3ntj5eoi.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp3ntj5eoi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpj90fm58f.d(21):\
    \ Error: template instance `tmpj90fm58f.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj90fm58f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long n, numbers) {\n\t\tsum += n;\n\t\t\
    product *= n;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphy6llflw.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmphy6llflw.d(16): Error: found `)` when expecting `;`\\n/tmp/tmphy6llflw.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmphy6llflw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ugplkez.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp6ugplkez.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp6ugplkez.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp6ugplkez.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9egsr9ut.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp9egsr9ut.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9egsr9ut.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\t\t\
    product *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6muxv27i.d(16): Error: no identifier for declarator `i`\\n/tmp/tmp6muxv27i.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6muxv27i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number, numbers) {\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0d9_exv8.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp0d9_exv8.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp0d9_exv8.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp0d9_exv8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long i, numbers)\n\t{\n\t\tsum += i;\n\t\
    \tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzondytk.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpzzondytk.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpzzondytk.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpzzondytk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6pwhb68a.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp6pwhb68a.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp6pwhb68a.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp6pwhb68a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmw9j5hwn.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpmw9j5hwn.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpmw9j5hwn.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpmw9j5hwn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsqlckl31.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpsqlckl31.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqlckl31.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2r9r3l0i.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp2r9r3l0i.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2r9r3l0i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpb342c809.d(21):\
    \ Error: template instance `tmpb342c809.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb342c809.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpov2s28yy.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpov2s28yy.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpov2s28yy.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpov2s28yy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpg5mzvqyl.d(21):\
    \ Error: template instance `tmpg5mzvqyl.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5mzvqyl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp7y8tiehu.d(21):\
    \ Error: template instance `tmp7y8tiehu.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7y8tiehu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp17tbi0g_.d(16): Error: semicolon expected, not `:`\\n/tmp/tmp17tbi0g_.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmp17tbi0g_.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp17tbi0g_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfqtm7vht.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpfqtm7vht.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfqtm7vht.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu08nm5oh.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpu08nm5oh.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu08nm5oh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiwar23ha.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpiwar23ha.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpiwar23ha.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpiwar23ha.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers) {\n\t\tsum += x;\n\t\t\
    product *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvexl473b.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpvexl473b.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpvexl473b.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpvexl473b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpmvg4x6jn.d(21):\
    \ Error: template instance `tmpmvg4x6jn.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvg4x6jn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmphw7c_omj.d(21):\
    \ Error: template instance `tmphw7c_omj.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphw7c_omj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpcrm00ild.d(21):\
    \ Error: template instance `tmpcrm00ild.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrm00ild.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([-1,\
    \ 2, -3, 4])\n    (-1, -6)\n*/\nTuple!(long, long) sum_product(List<long> numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([-1,\
    \ 2, -3, 4])\n    (-1, -6)\n*/\nTuple!(long, long) sum_product(List<int> numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([-1,\
    \ 2, -3, 4])\n    (-1, -6)\n*/\nTuple!(long, long) sum_product(List<short> numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([-1,\
    \ 2, -3, 4])\n    (-1, -6)\n*/\nTuple!(long, long) sum_product(List<char> numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_\n\
    unittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([]) ==\
    \ tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n   \
    \ assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfnksodc4.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpfnksodc4.d(16): Error: found `in` when expecting `;`\\n/tmp/tmpfnksodc4.d(29):\
    \ Error: found `<` when expecting `)`\\n/tmp/tmpfnksodc4.d(29): Error: semicolon\
    \ expected following function declaration\\n/tmp/tmpfnksodc4.d(29): Error: no\
    \ identifier for declarator `long`\\n/tmp/tmpfnksodc4.d(29): Error: declaration\
    \ expected, not `>`\\n/tmp/tmpfnksodc4.d(33): Error: declaration expected, not\
    \ `foreach`\\n/tmp/tmpfnksodc4.d(36): Error: no identifier for declarator `product`\\\
    n/tmp/tmpfnksodc4.d(36): Error: declaration expected, not `*=`\\n/tmp/tmpfnksodc4.d(37):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfnksodc4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long i, numbers)\n\t{\n\t\tsum += i;\n\t\
    \tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ej912os.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp4ej912os.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp4ej912os.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp4ej912os.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\t\t\
    product *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7h_knxi2.d(16): Error: no identifier for declarator `i`\\n/tmp/tmp7h_knxi2.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp7h_knxi2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaiuo7kcu.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpaiuo7kcu.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaiuo7kcu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7tg5drvc.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp7tg5drvc.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7tg5drvc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpq71x0op4.d(21):\
    \ Error: template instance `tmpq71x0op4.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq71x0op4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2o1ykrbi.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp2o1ykrbi.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2o1ykrbi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm10mwwu6.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpm10mwwu6.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm10mwwu6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpckyla5b4.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpckyla5b4.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpckyla5b4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpxhh7ikrb.d(21):\
    \ Error: template instance `tmpxhh7ikrb.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhh7ikrb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpw_4955t8.d(21):\
    \ Error: template instance `tmpw_4955t8.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_4955t8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number, numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9quouv5t.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp9quouv5t.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp9quouv5t.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp9quouv5t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\t\t\
    product *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_7fjvjv7.d(16): Error: no identifier for declarator `i`\\n/tmp/tmp_7fjvjv7.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_7fjvjv7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptxwljg0l.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmptxwljg0l.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxwljg0l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1jgf0tha.d(16): Error: semicolon expected, not `:`\\n/tmp/tmp1jgf0tha.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmp1jgf0tha.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1jgf0tha.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmzomsop7.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpmzomsop7.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmzomsop7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpge5vr707.d(21):\
    \ Error: template instance `tmpge5vr707.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpge5vr707.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpsoryf8fw.d(21):\
    \ Error: template instance `tmpsoryf8fw.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsoryf8fw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4d5u0hd.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpt4d5u0hd.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmpt4d5u0hd.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpt4d5u0hd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\t\tsum += x;\n\t\
    \tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi7k3efk4.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpi7k3efk4.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpi7k3efk4.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpi7k3efk4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa56yy9yl.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpa56yy9yl.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa56yy9yl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2werdv2n.d(16): Error: no identifier for declarator `i`\\n/tmp/tmp2werdv2n.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2werdv2n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers)\n    {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzejskr7v.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpzejskr7v.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzejskr7v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgg4nmb82.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpgg4nmb82.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmpgg4nmb82.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgg4nmb82.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpan490k2l.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpan490k2l.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpan490k2l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\n    {\n     \
    \   sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvlz7fdf8.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpvlz7fdf8.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpvlz7fdf8.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpvlz7fdf8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(int, int) sum_product(int[]\
    \ numbers) \n{\n    int sum = 0;\n    int product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(int,\
    \ int) sum_product(long[] numbers) \n{\n    int sum = 0;\n    int product = 1;\n\
    \    for (long i : numbers)\n    {\n        sum += i;\n        product *= i;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(int, int) sum_product(float[] numbers) \n{\n    int sum\
    \ = 0;\n    int product = 1;\n    for (long i : numbers)\n    {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(int, int) sum_product(double[]\
    \ numbers) \n{\n    int sum = 0;\n    int product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty \nunittest\n{\n    alias candidate = sum_product;\n\n \
    \   assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6cb_nczn.d(16): Error: semicolon expected, not `:`\\n/tmp/tmp6cb_nczn.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmp6cb_nczn.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\n/tmp/tmp6cb_nczn.d(36): Error:\
    \ semicolon expected, not `:`\\n/tmp/tmp6cb_nczn.d(36): Error: expression expected,\
    \ not `:`\\n/tmp/tmp6cb_nczn.d(36): Error: found `numbers` when expecting `;`\
    \ following `for` condition\\n/tmp/tmp6cb_nczn.d(56): Error: semicolon expected,\
    \ not `:`\\n/tmp/tmp6cb_nczn.d(56): Error: expression expected, not `:`\\n/tmp/tmp6cb_nczn.d(56):\
    \ Error: found `numbers` when expecting `;` following `for` condition\\n/tmp/tmp6cb_nczn.d(76):\
    \ Error: semicolon expected, not `:`\\n/tmp/tmp6cb_nczn.d(76): Error: expression\
    \ expected, not `:`\\n/tmp/tmp6cb_nczn.d(76): Error: found `numbers` when expecting\
    \ `;` following `for` condition\\n/tmp/tmp6cb_nczn.d(96): Error: semicolon expected,\
    \ not `:`\\n/tmp/tmp6cb_nczn.d(96): Error: expression expected, not `:`\\n/tmp/tmp6cb_nczn.d(96):\
    \ Error: found `numbers` when expecting `;` following `for` condition\\n/tmp/tmp6cb_nczn.d(103):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6cb_nczn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp401tlu91.d(21):\
    \ Error: template instance `tmp401tlu91.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp401tlu91.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length; ++i)\n\t{\n\
    \t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpa161j9vm.d(21):\
    \ Error: template instance `tmpa161j9vm.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa161j9vm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hawx0gd.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp4hawx0gd.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hawx0gd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpe62f3ukb.d(21):\
    \ Error: template instance `tmpe62f3ukb.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe62f3ukb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp00hoz3nu.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp00hoz3nu.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp00hoz3nu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8suhv691.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp8suhv691.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8suhv691.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers) {\n\t\tsum += i;\n\t\tproduct\
    \ *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate\
    \ = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqgdyh2el.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpqgdyh2el.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqgdyh2el.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\n    {\n     \
    \   sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7c09saql.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp7c09saql.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp7c09saql.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp7c09saql.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ikwz_lu.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp6ikwz_lu.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp6ikwz_lu.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp6ikwz_lu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8tehoep8.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp8tehoep8.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8tehoep8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpu0eae3jf.d(21):\
    \ Error: template instance `tmpu0eae3jf.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0eae3jf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppu7oi2yg.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmppu7oi2yg.d(16): Error: found `)` when expecting `;`\\n/tmp/tmppu7oi2yg.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmppu7oi2yg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([-1, 0, 1])\n    (2, 0)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0;\
    \ i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given\
    \ list of integers, return a tuple consisting of a sum and a product of all the\
    \ integers in a list.\n    Empty sum should be equal to 0 and empty product should\
    \ be equal to 1.\n    >>> sum_product([-1, 0, 1])\n    (2, 0)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([-1, 0, 1])\n    (2, 0)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum =\
    \ 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n \
    \   {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n   \
    \ return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a\
    \ tuple consisting of a sum and a product of all the integers in a list.\n   \
    \ Empty sum should be equal to 0 and empty product should be equal to 1.\n   \
    \ >>> sum_product([-1, 0, 1])\n    (2, 0)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0;\
    \ i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given\
    \ list of integers, return a tuple consisting of a sum and a product of all the\
    \ integers in a list.\n    Empty sum should be equal to 0 and empty product should\
    \ be equal to 1.\n\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeeqm7kme.d(95): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeeqm7kme.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product \nunittest\n{\n    alias candidate = sum_product;\n\n  \
    \  assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoaay1_uw.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpoaay1_uw.d(16): Error: found `in` when expecting `;`\\n/tmp/tmpoaay1_uw.d(36):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmpoaay1_uw.d(36): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmpoaay1_uw.d(56): Error: no identifier\
    \ for declarator `number`\\n/tmp/tmpoaay1_uw.d(56): Error: found `in` when expecting\
    \ `;`\\n/tmp/tmpoaay1_uw.d(76): Error: no identifier for declarator `number`\\\
    n/tmp/tmpoaay1_uw.d(76): Error: found `in` when expecting `;`\\n/tmp/tmpoaay1_uw.d(96):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmpoaay1_uw.d(96): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmpoaay1_uw.d(103): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoaay1_uw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa86nirmf.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpa86nirmf.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa86nirmf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\t\tsum += x;\n\t\
    \tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7277d0q.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpr7277d0q.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpr7277d0q.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpr7277d0q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integer\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmputlhs7g3.d(103): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmputlhs7g3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprkt_kr3h.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmprkt_kr3h.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprkt_kr3h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length; ++i)\n\t{\n\
    \t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp7pb_w2l7.d(21):\
    \ Error: template instance `tmp7pb_w2l7.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pb_w2l7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long number, numbers) {\n     \
    \   sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ee0b_tg.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp_ee0b_tg.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp_ee0b_tg.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp_ee0b_tg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpovdmkus6.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpovdmkus6.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpovdmkus6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(double, double) sum_product(double[]\
    \ numbers) \n{\n    double sum = 0;\n    double product = 1;\n    foreach(double\
    \ n, numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(int,\
    \ int) sum_product(int[] numbers) \n{\n    int sum = 0;\n    int product = 1;\n\
    \    foreach(int n, numbers) {\n        sum += n;\n        product *= n;\n   \
    \ }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(short, short) sum_product(short[] numbers) \n{\n    short\
    \ sum = 0;\n    short product = 1;\n    foreach(short n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(char, char) sum_product(char[]\
    \ numbers) \n{\n    char sum = 0;\n    char product = 1;\n    foreach(char n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ \nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf9yqbhek.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpf9yqbhek.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpf9yqbhek.d(20):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpf9yqbhek.d(35): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmpf9yqbhek.d(35): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmpf9yqbhek.d(39): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmpf9yqbhek.d(54): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpf9yqbhek.d(54): Error: found `)` when expecting `;`\\n/tmp/tmpf9yqbhek.d(58):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpf9yqbhek.d(73): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmpf9yqbhek.d(73): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmpf9yqbhek.d(77): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmpf9yqbhek.d(92): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpf9yqbhek.d(92): Error: found `)` when expecting `;`\\n/tmp/tmpf9yqbhek.d(96):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpf9yqbhek.d(98): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9yqbhek.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers)\n    {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnov3donx.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpnov3donx.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpnov3donx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplhrmh9rx.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmplhrmh9rx.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhrmh9rx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm1i7in3b.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpm1i7in3b.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1i7in3b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6pw4fj1.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpt6pw4fj1.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpt6pw4fj1.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpt6pw4fj1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers) {\n\t\tsum += i;\n\t\tproduct\
    \ *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate\
    \ = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjehflcw8.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpjehflcw8.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpjehflcw8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\t\tsum += x;\n\t\
    \tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplk264zkh.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmplk264zkh.d(16): Error: found `)` when expecting `;`\\n/tmp/tmplk264zkh.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmplk264zkh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppy9j4il5.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmppy9j4il5.d(16): Error: found `)` when expecting `;`\\n/tmp/tmppy9j4il5.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmppy9j4il5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ta5qq7d.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp3ta5qq7d.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ta5qq7d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2kcbmge0.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp2kcbmge0.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2kcbmge0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpliyh692k.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpliyh692k.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpliyh692k.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpliyh692k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmsthe7oo.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpmsthe7oo.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmsthe7oo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(double, double) sum_product(double[]\
    \ numbers) \n{\n    double sum = 0;\n    double product = 1;\n    foreach(double\
    \ n, numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(int,\
    \ int) sum_product(int[] numbers) \n{\n    int sum = 0;\n    int product = 1;\n\
    \    foreach(int n, numbers) {\n        sum += n;\n        product *= n;\n   \
    \ }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(bool, bool) sum_product(bool[] numbers) \n{\n    bool\
    \ sum = false;\n    bool product = true;\n    foreach(bool n, numbers) {\n   \
    \     sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(string, string)\
    \ sum_product(string[] numbers) \n{\n    string sum = \"\";\n    string product\
    \ = \"\";\n    foreach(string n, numbers) {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and \nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptxdzaud3.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmptxdzaud3.d(16): Error: found `)` when expecting `;`\\n/tmp/tmptxdzaud3.d(20):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmptxdzaud3.d(35): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmptxdzaud3.d(35): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmptxdzaud3.d(39): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmptxdzaud3.d(54): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmptxdzaud3.d(54): Error: found `)` when expecting `;`\\n/tmp/tmptxdzaud3.d(58):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmptxdzaud3.d(73): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmptxdzaud3.d(73): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmptxdzaud3.d(77): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmptxdzaud3.d(92): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmptxdzaud3.d(92): Error: found `)` when expecting `;`\\n/tmp/tmptxdzaud3.d(96):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmptxdzaud3.d(98): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxdzaud3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\t\t\
    product *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvmvl66gp.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpvmvl66gp.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpvmvl66gp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long n, numbers) {\n\t\tsum += n;\n\t\t\
    product *= n;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm_7d8192.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpm_7d8192.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpm_7d8192.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpm_7d8192.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long n, numbers) {\n\t\tsum += n;\n\t\t\
    product *= n;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2jvi1rn2.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp2jvi1rn2.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp2jvi1rn2.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp2jvi1rn2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsmuf6u0q.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpsmuf6u0q.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmuf6u0q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0yichf_m.d(16): Error: semicolon expected, not `:`\\n/tmp/tmp0yichf_m.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmp0yichf_m.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0yichf_m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnv38hfwr.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpnv38hfwr.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpnv38hfwr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_sidkkx4.d(16): Error: no identifier for declarator `i`\\n/tmp/tmp_sidkkx4.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_sidkkx4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptuci6h_p.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmptuci6h_p.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuci6h_p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpch4ghkhm.d(21):\
    \ Error: template instance `tmpch4ghkhm.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpch4ghkhm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product_recursive(long[]\
    \ numbers) \n{\n    if (numbers.length == 0)\n    {\n        return Tuple!(0,1);\n\
    \    }\n    else\n    {\n        return Tuple!(numbers[0] + sum_product_recursive(Array!long.from(numbers,\
    \ 1, numbers.length)), numbers[0] * numbers[0]);\n    }\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product_iterative([])\n    (0, 1)\n    >>> sum_product_iterative([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product_iterative(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0;\
    \ i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given\
    \ list of integers, return a tuple consisting of a sum and a product of all the\
    \ integers in a list.\n    Empty sum should be equal to 0 and empty product should\
    \ be equal to 1.\n    >>> sum_product_iterative_recursive([])\n    (0, 1)\n  \
    \  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n    (10, 24)\n    \n*/\n\
    Tuple!(long, long) sum_product_iterative_recursive(long[] numbers) \n{\n    if\
    \ (numbers.length == 0)\n    {\n        return Tuple!(0,1);\n    }\n    else\n\
    \    {\n        long sum = 0;\n        long product = 1;\n        for (long i\
    \ = 0; i < numbers.length; ++i)\n        {\n            sum += numbers[i];\n \
    \           product *= numbers[i];\n        }\n        return Tuple!(sum, product);\n\
    \    }\n}\n/*\n For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative_recursive2([])\n\
    \    (0, 1)\n    >>> sum_product_iterative_recursive2([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmphb_kgisa.d(21):\
    \ Error: template instance `tmphb_kgisa.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(490):\
    \ Error: static assert:  \"Attempted to instantiate Tuple with an invalid argument:\
    \ 0\"\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \        instantiated from here: `parseSpecs!(0, 1)`\\n/tmp/tmphb_kgisa.d(36):\
    \        instantiated from here: `Tuple!(0, 1)`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmphb_kgisa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprez2vmly.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmprez2vmly.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprez2vmly.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long i, numbers) {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpefo55adc.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpefo55adc.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpefo55adc.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpefo55adc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnllmyo_6.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpnllmyo_6.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpnllmyo_6.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpnllmyo_6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp59ooh6bq.d(21):\
    \ Error: template instance `tmp59ooh6bq.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59ooh6bq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\t\t\
    product *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphl30tooo.d(16): Error: no identifier for declarator `i`\\n/tmp/tmphl30tooo.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphl30tooo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfqcy27gz.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpfqcy27gz.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfqcy27gz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpm38kp0wq.d(21):\
    \ Error: template instance `tmpm38kp0wq.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm38kp0wq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzxwuand1.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpzxwuand1.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxwuand1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp479c5vcw.d(21):\
    \ Error: template instance `tmp479c5vcw.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp479c5vcw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([-1, -2, -3, -4])\n    (-4, -4)\n    \n*/\nTuple!(long, long)\
    \ sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([-1, -2, -3, -4])\n    (-4,\
    \ -4)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([-1, -2, -3, -4])\n    (-4, -4)\n    \n*/\nTuple!(long, long)\
    \ sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([-1, -2, -3, -4])\n    (-4,\
    \ -4)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the \nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxweo_uj8.d(95): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxweo_uj8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product_recursive([])\n    (0, 1)\n\
    \    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product_recursive(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(long x, numbers) {\n        sum += x;\n        product\
    \ *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product_iterative([])\n    (0, 1)\n    >>> sum_product_iterative([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product_iterative(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x,\
    \ numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative_iterate([])\n\
    \    (0, 1)\n    >>> sum_product_iterative_iterate([1, 2, 3, 4])\n    (10, 24)\n\
    \    \n*/\nTuple!(long, long) sum_product_iterative_iterate(long[] numbers) \n\
    {\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n\
    \        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product_iterative_iterate_recurse([])\n\
    \    (0, 1)\n    >>> sum_product_iterative_iterate_recurse([1, 2, 3, 4])\n   \
    \ (10, 24)\n    \n*/\nTuple!(long, long) sum_product_iterative_iterate_recurse(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x,\
    \ numbers) {\n        sum += x;\n        product *= \nunittest\n{\n    alias candidate\
    \ = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdm7n0472.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpdm7n0472.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpdm7n0472.d(20):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpdm7n0472.d(35): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmpdm7n0472.d(35): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmpdm7n0472.d(39): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmpdm7n0472.d(54): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpdm7n0472.d(54): Error: found `)` when expecting `;`\\n/tmp/tmpdm7n0472.d(58):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpdm7n0472.d(73): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmpdm7n0472.d(73): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmpdm7n0472.d(77): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmpdm7n0472.d(92): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpdm7n0472.d(92): Error: found `)` when expecting `;`\\n/tmp/tmpdm7n0472.d(95):\
    \ Error: expression expected, not `unittest`\\n/tmp/tmpdm7n0472.d(96): Error:\
    \ found `{` when expecting `;` following statement\\n/tmp/tmpdm7n0472.d(105):\
    \ Error: found `void` when expecting `)`\\n/tmp/tmpdm7n0472.d(105): Error: found\
    \ `{` when expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdm7n0472.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp9h53o71n.d(21):\
    \ Error: template instance `tmp9h53o71n.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9h53o71n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp9eaze6md.d(21):\
    \ Error: template instance `tmp9eaze6md.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eaze6md.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmphhyzhhpe.d(21):\
    \ Error: template instance `tmphhyzhhpe.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhyzhhpe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long i, numbers) {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptjof58uv.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmptjof58uv.d(16): Error: found `)` when expecting `;`\\n/tmp/tmptjof58uv.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmptjof58uv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpl3tlshcu.d(21):\
    \ Error: template instance `tmpl3tlshcu.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3tlshcu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2mhuk8p8.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp2mhuk8p8.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2mhuk8p8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers) {\n\t\tsum += x;\n\t\t\
    product *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoilv1i05.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpoilv1i05.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpoilv1i05.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpoilv1i05.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([-1,\
    \ -2, -3, 4])\n    (4, -6)\n    \n*/\nTuple!(long, long) sum_product(List<long>\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in\
    \ numbers)\n    {\n        sum += number;\n        product *= number;\n    }\n\
    \    return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([-1, -2, -3, 4])\n    (4, -6)\n    \n*/\nTuple!(long, long)\
    \ sum_product(List<int> numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([-1, -2, -3, 4])\n    (4, -6)\n    \n*/\nTuple!(long,\
    \ long) sum_product(List<short> numbers) \n{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n      \
    \  product *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([-1, -2, -3, 4])\n    (4, -6)\n \
    \   \n*/\nTuple!(long, long) sum_product(List<char> numbers) \n{\n    long sum\
    \ = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n       \
    \ sum += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ \nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuy2f5lk4.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpuy2f5lk4.d(16): Error: found `in` when expecting `;`\\n/tmp/tmpuy2f5lk4.d(30):\
    \ Error: found `<` when expecting `)`\\n/tmp/tmpuy2f5lk4.d(30): Error: semicolon\
    \ expected following function declaration\\n/tmp/tmpuy2f5lk4.d(30): Error: no\
    \ identifier for declarator `long`\\n/tmp/tmpuy2f5lk4.d(30): Error: declaration\
    \ expected, not `>`\\n/tmp/tmpuy2f5lk4.d(34): Error: declaration expected, not\
    \ `foreach`\\n/tmp/tmpuy2f5lk4.d(37): Error: no identifier for declarator `product`\\\
    n/tmp/tmpuy2f5lk4.d(37): Error: declaration expected, not `*=`\\n/tmp/tmpuy2f5lk4.d(38):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpuy2f5lk4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpait0q6lh.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpait0q6lh.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpait0q6lh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk78ty671.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpk78ty671.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmpk78ty671.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpk78ty671.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7dctbka.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpx7dctbka.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7dctbka.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkljabx93.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpkljabx93.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmpkljabx93.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkljabx93.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsb9pdqkx.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpsb9pdqkx.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmpsb9pdqkx.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsb9pdqkx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxc0qgag0.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpxc0qgag0.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxc0qgag0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdo_tedeh.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpdo_tedeh.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpdo_tedeh.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpdo_tedeh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\t\t\
    product *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuz8q96gc.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpuz8q96gc.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpuz8q96gc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpwjnfaeur.d(21):\
    \ Error: template instance `tmpwjnfaeur.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjnfaeur.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number, numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbjbyobn1.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpbjbyobn1.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpbjbyobn1.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpbjbyobn1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpr2azhm5j.d(21):\
    \ Error: template instance `tmpr2azhm5j.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr2azhm5j.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length; ++i)\n\t{\n\
    \t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpzhbxkc93.d(21):\
    \ Error: template instance `tmpzhbxkc93.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzhbxkc93.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(long n, numbers) {\n        sum += n;\n        product *= n;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ \nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpllx7hrt9.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpllx7hrt9.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpllx7hrt9.d(20):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpllx7hrt9.d(35): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmpllx7hrt9.d(35): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmpllx7hrt9.d(39): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmpllx7hrt9.d(54): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpllx7hrt9.d(54): Error: found `)` when expecting `;`\\n/tmp/tmpllx7hrt9.d(58):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpllx7hrt9.d(73): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmpllx7hrt9.d(73): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmpllx7hrt9.d(77): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmpllx7hrt9.d(92): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpllx7hrt9.d(92): Error: found `)` when expecting `;`\\n/tmp/tmpllx7hrt9.d(96):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmpllx7hrt9.d(98): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpllx7hrt9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0f8jmxh.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpu0f8jmxh.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpu0f8jmxh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxpj2_vks.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpxpj2_vks.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxpj2_vks.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk6d_ide8.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpk6d_ide8.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6d_ide8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk4wcsne9.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpk4wcsne9.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4wcsne9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc_sscvi4.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpc_sscvi4.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpc_sscvi4.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpc_sscvi4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\n    {\n     \
    \   sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr9ylxzah.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpr9ylxzah.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpr9ylxzah.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpr9ylxzah.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number, numbers) {\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoak67402.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpoak67402.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpoak67402.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpoak67402.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp4rx_5_0y.d(21):\
    \ Error: template instance `tmp4rx_5_0y.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rx_5_0y.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\n    {\n     \
    \   sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqtagmgw.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpeqtagmgw.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpeqtagmgw.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpeqtagmgw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length; ++i)\n\t{\n\
    \t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpavl5cjzz.d(21):\
    \ Error: template instance `tmpavl5cjzz.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpavl5cjzz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp56vl2cyi.d(16): Error: semicolon expected, not `:`\\n/tmp/tmp56vl2cyi.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmp56vl2cyi.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp56vl2cyi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number, numbers) {\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bbd4daq.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp7bbd4daq.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp7bbd4daq.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp7bbd4daq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp2ax3857b.d(21):\
    \ Error: template instance `tmp2ax3857b.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ax3857b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoojksa6j.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpoojksa6j.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpoojksa6j.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpoojksa6j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long i, numbers)\n\t{\n\t\tsum += i;\n\t\
    \tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf1n57z27.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpf1n57z27.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpf1n57z27.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpf1n57z27.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpa0yzghdt.d(21):\
    \ Error: template instance `tmpa0yzghdt.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0yzghdt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers) {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn1_a1u8j.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpn1_a1u8j.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmpn1_a1u8j.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpn1_a1u8j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length; ++i)\n\t{\n\
    \t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmprweca6s5.d(21):\
    \ Error: template instance `tmprweca6s5.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprweca6s5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpclfb8n6u.d(21):\
    \ Error: template instance `tmpclfb8n6u.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpclfb8n6u.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcbphsrkm.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpcbphsrkm.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpcbphsrkm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc3x9vyeh.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpc3x9vyeh.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpc3x9vyeh.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpc3x9vyeh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8kuwd3o_.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp8kuwd3o_.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8kuwd3o_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integer\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdz08qq4_.d(103): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdz08qq4_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqf8c6v7i.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpqf8c6v7i.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqf8c6v7i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long number, numbers) {\n     \
    \   sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqe6b2m8p.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpqe6b2m8p.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpqe6b2m8p.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpqe6b2m8p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\n    {\n     \
    \   sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product_recursive([])\n   \
    \ (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \n*/\n\
    Tuple!(long, long) sum_product_recursive(long[] numbers) \n{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(long n, numbers)\n    {\n        sum += n;\n\
    \        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product_iterative([])\n    (0, 1)\n    >>>\
    \ sum_product_iterative([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long)\
    \ sum_product_iterative(long[] numbers) \n{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(long n, numbers)\n    {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product_iterative_recursive([])\n    (0, 1)\n    >>> sum_product_iterative_recursive([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product_iterative_recursive(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative_recursive2([])\n\
    \    (0, 1)\n    >>> sum_product_iterative_recursive2([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product_iterative_recursive2(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\n\
    \    {\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4brwy62a.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp4brwy62a.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp4brwy62a.d(21):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmp4brwy62a.d(36): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmp4brwy62a.d(36): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmp4brwy62a.d(41): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmp4brwy62a.d(56): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp4brwy62a.d(56): Error: found `)` when expecting `;`\\n/tmp/tmp4brwy62a.d(61):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmp4brwy62a.d(76): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmp4brwy62a.d(76): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmp4brwy62a.d(81): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmp4brwy62a.d(96): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp4brwy62a.d(96): Error: found `)` when expecting `;`\\n/tmp/tmp4brwy62a.d(98):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmp4brwy62a.d(108): Error:\
    \ found `void` when expecting `)`\\n/tmp/tmp4brwy62a.d(108): Error: found `{`\
    \ when expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp4brwy62a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpc73v2t_7.d(21):\
    \ Error: template instance `tmpc73v2t_7.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc73v2t_7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers) {\n\t\tsum += i;\n\t\tproduct\
    \ *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate\
    \ = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpytlskrf7.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpytlskrf7.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpytlskrf7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long i, numbers) {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfcnepftj.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpfcnepftj.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpfcnepftj.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpfcnepftj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp957pcqgm.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp957pcqgm.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp957pcqgm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe6i4kmo0.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpe6i4kmo0.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe6i4kmo0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpplnf1l8v.d(21):\
    \ Error: template instance `tmpplnf1l8v.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpplnf1l8v.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpm53696wl.d(21):\
    \ Error: template instance `tmpm53696wl.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm53696wl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product \nunittest\n{\n    alias candidate = sum_product;\n\n  \
    \  assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgtkp39_4.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpgtkp39_4.d(16): Error: found `in` when expecting `;`\\n/tmp/tmpgtkp39_4.d(36):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmpgtkp39_4.d(36): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmpgtkp39_4.d(56): Error: no identifier\
    \ for declarator `number`\\n/tmp/tmpgtkp39_4.d(56): Error: found `in` when expecting\
    \ `;`\\n/tmp/tmpgtkp39_4.d(76): Error: no identifier for declarator `number`\\\
    n/tmp/tmpgtkp39_4.d(76): Error: found `in` when expecting `;`\\n/tmp/tmpgtkp39_4.d(96):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmpgtkp39_4.d(96): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmpgtkp39_4.d(103): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgtkp39_4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(long n, numbers) {\n        sum += n;\n        product *= n;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ \nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3vdkehn5.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp3vdkehn5.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp3vdkehn5.d(20):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmp3vdkehn5.d(35): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmp3vdkehn5.d(35): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmp3vdkehn5.d(39): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmp3vdkehn5.d(54): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp3vdkehn5.d(54): Error: found `)` when expecting `;`\\n/tmp/tmp3vdkehn5.d(58):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmp3vdkehn5.d(73): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmp3vdkehn5.d(73): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmp3vdkehn5.d(77): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmp3vdkehn5.d(92): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp3vdkehn5.d(92): Error: found `)` when expecting `;`\\n/tmp/tmp3vdkehn5.d(96):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmp3vdkehn5.d(98): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vdkehn5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\n    {\n     \
    \   sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv8cwaksb.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpv8cwaksb.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpv8cwaksb.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpv8cwaksb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long)\
    \ sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    foreach(number in numbers) {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers) {\n\
    \        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers) {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers) {\n\
    \        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ \nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe53x3cye.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpe53x3cye.d(16): Error: found `in` when expecting `;`\\n/tmp/tmpe53x3cye.d(35):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmpe53x3cye.d(35): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmpe53x3cye.d(54): Error: no identifier\
    \ for declarator `number`\\n/tmp/tmpe53x3cye.d(54): Error: found `in` when expecting\
    \ `;`\\n/tmp/tmpe53x3cye.d(73): Error: no identifier for declarator `number`\\\
    n/tmp/tmpe53x3cye.d(73): Error: found `in` when expecting `;`\\n/tmp/tmpe53x3cye.d(92):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmpe53x3cye.d(92): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmpe53x3cye.d(98): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe53x3cye.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp0gop3joz.d(21):\
    \ Error: template instance `tmp0gop3joz.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gop3joz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwz47y7md.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpwz47y7md.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwz47y7md.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7cp17nd_.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp7cp17nd_.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cp17nd_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long n, numbers)\n\t{\n\t\tsum += n;\n\t\
    \tproduct *= n;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg0n9_ntt.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpg0n9_ntt.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpg0n9_ntt.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpg0n9_ntt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmprqyrvp3d.d(21):\
    \ Error: template instance `tmprqyrvp3d.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqyrvp3d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\t\tsum += x;\n\t\
    \tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc9hfpe7i.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpc9hfpe7i.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpc9hfpe7i.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpc9hfpe7i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpba9_h_ab.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpba9_h_ab.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpba9_h_ab.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpnv968930.d(21):\
    \ Error: template instance `tmpnv968930.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnv968930.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number, numbers) \n    {\n    \
    \    sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptc8nxo5u.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmptc8nxo5u.d(16): Error: found `)` when expecting `;`\\n/tmp/tmptc8nxo5u.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmptc8nxo5u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpoxxik7qv.d(21):\
    \ Error: template instance `tmpoxxik7qv.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxxik7qv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers) {\n\t\tsum += x;\n\t\t\
    product *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9999g7kr.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp9999g7kr.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp9999g7kr.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp9999g7kr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpel31je0j.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpel31je0j.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpel31je0j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(long n, numbers) {\n        sum += n;\n        product *= n;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ \nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp56j_rhv6.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp56j_rhv6.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp56j_rhv6.d(20):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmp56j_rhv6.d(35): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmp56j_rhv6.d(35): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmp56j_rhv6.d(39): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmp56j_rhv6.d(54): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp56j_rhv6.d(54): Error: found `)` when expecting `;`\\n/tmp/tmp56j_rhv6.d(58):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmp56j_rhv6.d(73): Error: no\
    \ identifier for declarator `numbers`\\n/tmp/tmp56j_rhv6.d(73): Error: found `)`\
    \ when expecting `;`\\n/tmp/tmp56j_rhv6.d(77): Error: found `return` when expecting\
    \ `)`\\n/tmp/tmp56j_rhv6.d(92): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp56j_rhv6.d(92): Error: found `)` when expecting `;`\\n/tmp/tmp56j_rhv6.d(96):\
    \ Error: found `return` when expecting `)`\\n/tmp/tmp56j_rhv6.d(98): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56j_rhv6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product \nunittest\n{\n    alias candidate = sum_product;\n\n  \
    \  assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvjbnrvdc.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpvjbnrvdc.d(16): Error: found `in` when expecting `;`\\n/tmp/tmpvjbnrvdc.d(36):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmpvjbnrvdc.d(36): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmpvjbnrvdc.d(56): Error: no identifier\
    \ for declarator `number`\\n/tmp/tmpvjbnrvdc.d(56): Error: found `in` when expecting\
    \ `;`\\n/tmp/tmpvjbnrvdc.d(76): Error: no identifier for declarator `number`\\\
    n/tmp/tmpvjbnrvdc.d(76): Error: found `in` when expecting `;`\\n/tmp/tmpvjbnrvdc.d(96):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmpvjbnrvdc.d(96): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmpvjbnrvdc.d(103): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvjbnrvdc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\t\tsum += x;\n\t\
    \tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdh_qxjc3.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpdh_qxjc3.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpdh_qxjc3.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpdh_qxjc3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long)\
    \ sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    for (long i : numbers)\n    {\n        sum += i;\n        product *= i;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long)\
    \ sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    for (long i : numbers)\n    {\n        sum += i;\n        product *= i;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqdn_cqac.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpqdn_cqac.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmpqdn_cqac.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\n/tmp/tmpqdn_cqac.d(36): Error:\
    \ semicolon expected, not `:`\\n/tmp/tmpqdn_cqac.d(36): Error: expression expected,\
    \ not `:`\\n/tmp/tmpqdn_cqac.d(36): Error: found `numbers` when expecting `;`\
    \ following `for` condition\\n/tmp/tmpqdn_cqac.d(56): Error: semicolon expected,\
    \ not `:`\\n/tmp/tmpqdn_cqac.d(56): Error: expression expected, not `:`\\n/tmp/tmpqdn_cqac.d(56):\
    \ Error: found `numbers` when expecting `;` following `for` condition\\n/tmp/tmpqdn_cqac.d(76):\
    \ Error: semicolon expected, not `:`\\n/tmp/tmpqdn_cqac.d(76): Error: expression\
    \ expected, not `:`\\n/tmp/tmpqdn_cqac.d(76): Error: found `numbers` when expecting\
    \ `;` following `for` condition\\n/tmp/tmpqdn_cqac.d(96): Error: semicolon expected,\
    \ not `:`\\n/tmp/tmpqdn_cqac.d(96): Error: expression expected, not `:`\\n/tmp/tmpqdn_cqac.d(96):\
    \ Error: found `numbers` when expecting `;` following `for` condition\\n/tmp/tmpqdn_cqac.d(103):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqdn_cqac.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long i, numbers) {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk_vquhbq.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpk_vquhbq.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpk_vquhbq.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpk_vquhbq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmgu3209h.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpmgu3209h.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmgu3209h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number, numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvbmv93k0.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpvbmv93k0.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpvbmv93k0.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpvbmv93k0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqpamv2y9.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpqpamv2y9.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpqpamv2y9.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpqpamv2y9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(int,\
    \ int) sum_product(int[] numbers) \n{\n    int sum = 0;\n    int product = 1;\n\
    \    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(double, double) sum_product(double[] numbers)\
    \ \n{\n    double sum = 0;\n    double product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(bool,\
    \ bool) sum_product(bool[] numbers) \n{\n    bool sum = false;\n    bool product\
    \ = true;\n    foreach(number in numbers)\n    {\n        sum += number;\n   \
    \     product *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For\
    \ a given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(string, string) sum_product(string[]\
    \ numbers) \n{\n    string sum = \"\";\n    string product = \"\";\n    foreach(number\
    \ in numbers)\n    {\n        sum += number;\n        product *= number;\n   \
    \ }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of \nunittest\n{\n    alias candidate\
    \ = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ffft9wp.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp1ffft9wp.d(16): Error: found `in` when expecting `;`\\n/tmp/tmp1ffft9wp.d(36):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmp1ffft9wp.d(36): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmp1ffft9wp.d(56): Error: no identifier\
    \ for declarator `number`\\n/tmp/tmp1ffft9wp.d(56): Error: found `in` when expecting\
    \ `;`\\n/tmp/tmp1ffft9wp.d(76): Error: no identifier for declarator `number`\\\
    n/tmp/tmp1ffft9wp.d(76): Error: found `in` when expecting `;`\\n/tmp/tmp1ffft9wp.d(96):\
    \ Error: no identifier for declarator `number`\\n/tmp/tmp1ffft9wp.d(96): Error:\
    \ found `in` when expecting `;`\\n/tmp/tmp1ffft9wp.d(103): Error: unterminated\
    \ /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ffft9wp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpalxu5oqp.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpalxu5oqp.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpalxu5oqp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgw5k9hng.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpgw5k9hng.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgw5k9hng.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers) {\n\t\tsum += x;\n\t\t\
    product *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8w3e0ejl.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmp8w3e0ejl.d(16): Error: found `)` when expecting `;`\\n/tmp/tmp8w3e0ejl.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp8w3e0ejl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp7ivhxcco.d(21):\
    \ Error: template instance `tmp7ivhxcco.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ivhxcco.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaxcrg81_.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpaxcrg81_.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxcrg81_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `sum`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(sum, product)` cannot use local `product`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpyab_ejap.d(21):\
    \ Error: template instance `tmpyab_ejap.sum_product.Tuple!(sum, product)` error\
    \ instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyab_ejap.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaarai25c.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpaarai25c.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaarai25c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcobuhh56.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpcobuhh56.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmpcobuhh56.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcobuhh56.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj5pgdx9l.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpj5pgdx9l.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pgdx9l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\t\tsum += x;\n\t\
    \tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppctfjwkp.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmppctfjwkp.d(16): Error: found `)` when expecting `;`\\n/tmp/tmppctfjwkp.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmppctfjwkp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number, numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn_z2v688.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpn_z2v688.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpn_z2v688.d(20):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpn_z2v688.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(i : numbers)\n    {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpys28t71_.d(16): Error: no identifier for declarator `i`\\n/tmp/tmpys28t71_.d(16):\
    \ Error: found `:` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpys28t71_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpowpvanap.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpowpvanap.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowpvanap.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number, numbers) \n    {\n    \
    \    sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjfyq3bwv.d(16): Error: no identifier for declarator `numbers`\\\
    n/tmp/tmpjfyq3bwv.d(16): Error: found `)` when expecting `;`\\n/tmp/tmpjfyq3bwv.d(21):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpjfyq3bwv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpslzyzpi1.d(16): Error: semicolon expected, not `:`\\n/tmp/tmpslzyzpi1.d(16):\
    \ Error: expression expected, not `:`\\n/tmp/tmpslzyzpi1.d(16): Error: found `numbers`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpslzyzpi1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
