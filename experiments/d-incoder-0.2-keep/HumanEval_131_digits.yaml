name: HumanEval_131_digits
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return\
  \ the product of the odd digits.\n    Return 0 if all digits are even.\n    For\
  \ example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n  \
  \  \n*/\nlong digits(long n) \n"
tests: "unittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) ==\
  \ 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n\
  \    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n \
  \   assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n\
  }\nvoid main(){}"
completions: ["{\n    long product = 1;\n    while (n > 0)\n    {\n        if (n %\
    \ 2 == 1)\n        {\n            product *= n % 10;\n        }\n        n = n\
    \ / 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long result = 0;\n    long remainder;\n    \n    while\
    \ (n) {\n        remainder = n % 10;\n        result += remainder * remainder;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: I didn't see that requirement in the question. I'll update\
    \ the answer accordingly.\n<|/ c |>\n<| c |>\nI see that now. Thanks.\n<|/ c |>\n\
    <| c |>\n: I added a solution for negative numbers. I hope it helps.\n<|/ c |>\n\
    <| c |>\n: I added a solution for negative numbers. I hope it helps.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\n#include <stdio.h>", "{\n    long result = 0;\n    long\
    \ remainder;\n    \n    while (n>0) {\n        remainder = n % 10;\n        result\
    \ = result * 10 + remainder;\n        n = n / 10;\n    }\n    \n    return result;\n\
    }", "{\n    long product = 1;\n    \n    while(n > 0)\n    {\n        long digit\
    \ = n % 10;\n        \n        if(digit % 2 == 1)\n        {\n            product\
    \ *= digit;\n        }\n        \n        n /= 10;\n    }\n    \n    return product;\n\
    }", "{\n    long result = 0;\n    for(long i = n; i > 0; i /= 10)\n    {\n   \
    \     result *= i % 10;\n    }\n    return result;\n}", "{\n    long product =\
    \ 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    return product;\n}", "{\n\
    \    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n    \
    \    digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| c |>\nThis doesn't work. Try with digits(235).\n<|/ c |>\n<| c |>\n:\
    \ I didn't say it wouldn't work. I said it wouldn't produce the correct result.\
    \ Try it with digits(235).\n<|/ c |>\n<| c |>\n: I see what you mean. I've edited\
    \ my answer to include a solution that does produce the correct result.\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that does produce the correct result.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that does produce the correct result.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n  \
    \  long product = 1;\n    long digit;\n    \n    for(; n > 0; n /= 10)\n    {\n\
    \        digit = n % 10;\n        product *= (digit % 2 == 1) ? digit : 1;\n \
    \   }\n    \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n\
    <| c |>\nThis doesn't work for negative numbers. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: I didn't see that requirement in the question. I'll leave\
    \ it as an exercise for the reader to figure out how to handle negative numbers.\
    \ :-)\n<|/ c |>\n<| c |>\nI see that now. Thanks for pointing it out. I'll leave\
    \ my answer here in case someone else needs it.\n<|/ c |>\n<| c |>\n: I added\
    \ a version that handles negative numbers. :-)\n<|/ c |>\n<| a tags=c++,algorithm,math\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long product = 1;\n    \n    while (n > 0)\n    {\n        if (n % 2 == 1)\n\
    \        {\n            product *= n % 10;\n        }\n        n /= 10;\n    }\n\
    \    \n    return product;\n}", "{\n    long product = 1;\n    while (n > 0)\n\
    \    {\n        long remainder = n % 10;\n        product = product * remainder;\n\
    \        n = n / 10;\n    }\n    return product;\n}", "{\n    long product = 1;\n\
    \    while (n > 0) {\n        product *= n % 10;\n        n /= 10;\n    }\n  \
    \  return product;\n}", "{\n    long product = 1;\n    long digit = 0;\n    \n\
    \    while (n > 0)\n    {\n        digit = n % 10;\n        product *= digit;\n\
    \        n /= 10;\n    }\n    \n    return product;\n}", "{\n    long product\
    \ = 1;\n    \n    while (n > 0)\n    {\n        long digit = n % 10;\n       \
    \ \n        if (digit % 2 == 1)\n        {\n            product *= digit;\n  \
    \      }\n        \n        n /= 10;\n    }\n    \n    return product;\n}", "{\n\
    \    long product = 1;\n    long digit;\n    \n    while (n != 0) {\n        digit\
    \ = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n    \n    return\
    \ product;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it\
    \ with `digits(235)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a\
    \ test case to my answer.\n<|/ c |>\n<| c |>\nThe OP wants the product of the\
    \ odd digits, not of the digits in reverse order.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I edited my answer to reflect that.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to reflect your comment. Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    long result = 0;\n    long remainder;\n    \n    while (n != 0) {\n    \
    \    remainder = n % 10;\n        result += remainder * remainder;\n        n\
    \ /= 10;\n    }\n    \n    return result;\n}", "{\n    long product = 1;\n   \
    \ while (n > 0)\n    {\n        long digit = n % 10;\n        product *= digit;\n\
    \        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis code does not work. Try it with `digits(235)`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `digits(235)`. `digits(235)` returns `15`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `digits(235)`. `digits(235)` returns\
    \ `15`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `digits(235)`. `digits(235)`\
    \ returns `15`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `digits(235)`. `digits(235)`\
    \ returns `15`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n\tlong product = 1;\n\twhile (n != 0) {\n\t\tlong digit\
    \ = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n\
    }", "{\n    long product = 1;\n    long digit;\n    \n    while (n) {\n      \
    \  digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with n = 123,\
    \ which should return 123, but your code returns 0.\n<|/ c |>\n<| c |>\nI tested\
    \ it with n = 123 and it returns 123. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. Maybe I misunderstood your question.\
    \ Are you trying to find the product of the odd digits of a number? If so, then\
    \ the product of the odd digits is just the product of the digits divided by 2.\n\
    <|/ c |>\n<| c |>\nYes, that's exactly what I'm trying to do. Thanks for your\
    \ help!\n<|/ c |>\n<| c |>\nI added a solution that uses no loops.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "{\n    long product = 1;\n    while (n > 0)\n    {\n\
    \        long digit = n % 10;\n        product *= digit;\n        n /= 10;\n \
    \   }\n    return product;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if n is negative.\n<|/ c |>\n<| c |>\nIt works fine for me. Can you give\
    \ an example where it fails?\n<|/ c |>\n<| c |>\nIt fails for negative numbers.\
    \ Try `digits(-10)`.\n<|/ c |>\n<| c |>\nIt works for me on negative numbers.\
    \ What is the error you are getting?\n<|/ c |>\n<| c |>\nIt works for me on negative\
    \ numbers. What is the error you are getting?\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "{\n    long product = 1;\n    \n    while (n != 0) {\n        long digit = n %\
    \ 10;\n        \n        if (digit % 2 != 0) {\n            product *= digit;\n\
    \        }\n        \n        n /= 10;\n    }\n    \n    return product;\n}",
  "{\n    long product = 1;\n    long digit = n;\n    while(digit > 0)\n    {\n  \
    \      product *= digit;\n        digit /= 10;\n    }\n    return product;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm,c |>\n<code>\n#include <stdio.h>\n\
    #include <math.h>", "{\n    long product = 1;\n    long digit;\n    \n    for(digit\
    \ = n / 10; digit > 0; digit /= 10)\n    {\n        if(digit % 2 == 1)\n     \
    \   {\n            product *= digit;\n        }\n    }\n    \n    return product;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis does not work. Try it with\
    \ n = 235.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting. Try it\
    \ yourself.\n<|/ c |>\n<| c |>\nIt doesn't work for n = 235. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: It works for me. Try it yourself.\n<|/ c |>\n<| c |>\nIt\
    \ works for me too. Try it yourself. It returns 15 for 235.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nlong long digits(long long n) {\n    long long product = 1;\n  \
    \  long long digit;\n    \n    for(digit = n / 10; digit > 0; digit /= 10)\n \
    \   {\n        if(digit % 2 == 1)\n        {\n            product *= digit;\n\
    \        }\n    }\n    \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis does not work. Try it with n = 235.\n<|/ c |>\n<| c |>\nIt\
    \ works for me. Try it yourself. It returns 15 for 235.\n<|/ c |>\n<| c |>\nIt\
    \ works for me too. Try it yourself. It returns 15 for 235.\n<|/ c |>\n<| c |>\n\
    It works for me too. Try it yourself. It returns 15 for 235.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nlong long digits(long long n) {\n    long long product = 1;\n  \
    \  long long digit;\n    \n    for(digit = n / 10; digit > 0; digit /= 10)\n \
    \   {\n        if(digit % 2 == 1)\n        {\n            product *= digit;\n\
    \        }\n    }\n    \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis does not work. Try it with n = 235.\n<|/ c |>\n<| c |>\nIt\
    \ works for me. Try it yourself. It returns 15 for 235.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n", "{\n    long product = 1;\n    while (n > 0)\n    {\n        long digit\
    \ = n % 10;\n        product = product * digit;\n        n = n / 10;\n    }\n\
    \    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work if n is negative.\n<|/ c |>\n<| c |>\nIt works fine for negative numbers.\
    \ I tested it before posting.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. Try with -12345.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ I tested it before posting. Try with -12345.\n<|/ c |>\n<| c |>\nIt works for\
    \ negative numbers. I tested it before posting. Try with -12345.\n<|/ c |>\n<|\
    \ a tags=c++,algorithm |>\n<code>", "{\n    long product = 1;\n    long digit\
    \ = n % 10;\n    long rest = n % 10;\n    \n    while(digit != 0)\n    {\n   \
    \     product *= digit;\n        digit = rest / 10;\n        rest = rest % 10;\n\
    \    }\n    \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<|\
    \ c |>\nThis code will fail for input `0` because `n % 10` will be `0` and the\
    \ loop will never be entered.\n<|/ c |>\n<| c |>\nI agree, thanks for pointing\
    \ that out. I've edited the code accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long result = 0;\n    while\
    \ (n > 0)\n    {\n        result *= 10;\n        result += (n % 10);\n       \
    \ n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis is not the correct answer. Try with n = 235.\n<|/ c |>\n<| c |>\n\
    : I tested it and it works. I even tested it on `n = 235` before posting my answer.\
    \ `digits(235)` returns `15`.\n<|/ c |>\n<| c |>\n: I added a test case to my\
    \ answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "{\n    long result = 0;\n    long digit;\n    \n    while (n > 0)\n    {\n    \
    \    digit = n % 10;\n        result *= 2;\n        result += digit;\n       \
    \ n /= 10;\n    }\n    \n    return result;\n}", "{\n\tlong product = 1;\n\twhile\
    \ (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 ==\
    \ 1)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n}", "{\n\t\
    long product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong remainder = n % 10;\n\t\tn =\
    \ n / 10;\n\t\tproduct = product * remainder;\n\t}\n\treturn product;\n}", "{\n\
    \    long product = 1;\n    long digit = n % 10;\n    long remainder = n % 10;\n\
    \    \n    while (remainder != 0)\n    {\n        product = product * digit;\n\
    \        remainder = remainder / 10;\n        digit = digit * 10;\n    }\n   \
    \ \n    return product;\n}", "{\n    long product = 1;\n    long digit;\n    \n\
    \    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n) {\n        digit = n % 10;\n        product *= digit;\n \
    \       n /= 10;\n    }\n    \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis is not the right solution. `digits(235)` returns `15`, not\
    \ `0`.\n<|/ c |>\n<| c |>\nI believe that `digits(235)` returns `15` because `235`\
    \ is `1*2*3*5` and then `15` is `1*2*3*5*5`.\n<|/ c |>\n<| c |>\nYes, but `1*2*3*5*5`\
    \ is `15`.\n<|/ c |>\n<| c |>\nYes, but `1*2*3*5*5` is `15`.\n<|/ c |>\n<| c |>\n\
    Yes, but `1*2*3*5*5` is `15`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n\
    #include <cmath>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;",
  "{\n    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n   \
    \     digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long product = 1;\n    long digit\
    \ = n % 10;\n    while (digit != 0)\n    {\n        product *= digit;\n      \
    \  n /= 10;\n        digit = n % 10;\n    }\n    return product;\n}", "{\n   \
    \ long result = 0;\n    long remainder;\n    \n    while (n>0)\n    {\n      \
    \  remainder = n%10;\n        result = result * 10 + remainder;\n        n = n/10;\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<|\
    \ c |>\nThe question asks for an algorithm, not an implementation. Also, this\
    \ doesn't answer the question of how to find the product of odd digits. Also,\
    \ `digits(235) == 15` but `digits(235) == 16`.\n<|/ c |>\n<| c |>\nThe question\
    \ asks for an algorithm, not an implementation. Also, this doesn't answer the\
    \ question of how to find the product of odd digits. Also, `digits(235) == 15`\
    \ but `digits(235) == 16`.\n<|/ c |>\n<| c |>\nI agree, my answer is not the best\
    \ one. I just wanted to show how it can be done with some basic math.\n<|/ c |>\n\
    <| c |>\nI agree with you. Your answer is the best one. Just wanted to point out\
    \ that your answer doesn't answer the question of how to find the product of odd\
    \ digits. Also, `digits(235) == 15` but `digits(235) == 16`.\n<|/ c |>\n<| c |>\n\
    I agree with you. Your answer is the best one. Just wanted to point out that your\
    \ answer doesn't answer the question of how to find the product of odd digits.\
    \ Also, `digits(235) == 15` but `digits(235) == 16`.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long product = 1;\n    long digit;\n    \n    while (n) {\n        digit\
    \ = n % 10;\n        product = product * digit;\n        n = n / 10;\n    }\n\
    \    \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `digits(235)`.\n<|/ c |>\n<| c |>\n: I didn't test\
    \ it but I think it works. I tested it on `digits(235)` and it returned `15`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `digits(235)`.\n<|/ c |>\n<| c\
    \ |>\n: I tested it on `digits(235)` and it returned `15`.\n<|/ c |>\n<| c |>\n\
    : I tested it on `digits(235)` and it returned `15`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long product = 1;\n    long digit;\n    \n    while\
    \ (n) {\n        digit = n % 10;\n        product *= digit;\n        n /= 10;\n\
    \    }\n    \n    return product;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n    \
    \    digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n>0) {\n        digit = n % 10;\n        product = product *\
    \ digit;\n        n = n / 10;\n    }\n    \n    return product;\n}", "{\n    long\
    \ product = 1;\n    \n    while (n > 0)\n    {\n        if (n % 2 == 1)\n    \
    \    {\n            product *= n % 10;\n        }\n        n /= 10;\n    }\n \
    \   \n    return product;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try\
    \ it with `digits(235)` which should return `15`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `digits(235)` which should return `15`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `digits(235)` which should return `15`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `digits(235)` which should return `15`.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `digits(235)` which should return `15`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n\
    #include <string.h>\n#include <math.h>\n#include <stdint.h>\n#include <inttypes.h>",
  "{\n    long product = 1;\n    long digit;\n    \n    while(n>0)\n    {\n      \
    \  digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product *= digit;\n\
    \        n /= 10;\n    }\n    \n    return product;\n}", "{\n    long product\
    \ = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nI like your solution, but I believe it can\
    \ be optimized a little bit more. For example, you can get rid of multiplication\
    \ by `digit` variable and just multiply `product` by `digit` right away.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. Thanks for pointing that out. I will update\
    \ the answer.\n<|/ c |>\n<| c |>\nThe `digits` function can be simplified to `return\
    \ n / 10 * (n % 10 != 0 ? 1 : 0);`\n<|/ c |>\n<| c |>\nThanks for your comment.\
    \ I updated my answer accordingly.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long product = 1;\n    long\
    \ digit = n % 10;\n    while (digit != 0)\n    {\n        product = product *\
    \ digit;\n        digit = n / 10;\n    }\n    return product;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n\
    #include <string.h>\n#include <math.h>", "{\n    long product = 1;\n    long digit\
    \ = n % 10;\n    long remainder = n % 10;\n    \n    while(digit>0)\n    {\n \
    \       product *= digit;\n        digit /= 10;\n    }\n    \n    while(remainder>0)\n\
    \    {\n        product *= remainder;\n        remainder /= 10;\n    }\n    \n\
    \    return product;\n}", "{\n    long product = 1;\n    long digit;\n    \n \
    \   for(digit = n % 10; digit > 0; digit /= 10)\n    {\n        if(digit % 2 ==\
    \ 1)\n        {\n            product *= digit;\n        }\n    }\n    \n    return\
    \ product;\n}", "{\n    long product = 1;\n    \n    while(n > 0)\n    {\n   \
    \     long digit = n % 10;\n        \n        if(digit % 2 == 1)\n        {\n\
    \            product *= digit;\n        }\n        \n        n /= 10;\n    }\n\
    \    \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c\
    \ |>\n`digits(235) == 15` but `digits(235) == 16`\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. Fixed now.\n<|/ c |>\n<| a dscore=2 |>\nThe simplest way\
    \ is to use logarithms:\n<code>\nlong long digits(long long n) {\n    long long\
    \ product = 1;\n    long long logn = log(n);\n    long long digit = logn % 10;\n\
    \    long long remainder = logn / 10;\n    \n    while (remainder > 0) {\n   \
    \     product *= digit;\n        remainder--;\n        digit = remainder % 10;\n\
    \        remainder = remainder / 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nThis doesn't work. `digits(235) ==\
    \ 16` but `digits(235) == 15`\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\nlong long\
    \ digits(long long n) {\n    long long product = 1;\n    long long digit = n %\
    \ 10;\n    long long remainder = n / 10;\n    \n    while (remainder > 0) {\n\
    \        product *= digit;\n        remainder--;\n        digit = remainder %\
    \ 10;\n        remainder = remainder / 10;\n    }\n    \n    return product;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,algorithm,math |>\n<code>\nlong long\
    \ digits(long long n) {\n    long long product = 1;\n    long long digit = n %\
    \ 10;\n    long long remainder = n / 10;\n    \n    while (remainder > 0) {\n\
    \        product *= digit;\n        remainder--;\n        digit = remainder %\
    \ 10;\n        remainder = remainder / 10;\n    }\n    \n    return product;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c ", "{\n    long result = 0;\n    long\
    \ temp;\n    while (n > 0)\n    {\n        temp = n % 10;\n        if (temp %\
    \ 2 != 0)\n        {\n            result += temp;\n        }\n        n = n /\
    \ 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `digits(235)` returns `1` instead of `15`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thanks for pointing it out. Now it works.\n<|/ c |>\n<| a |>\n\
    <code>\npublic class Solution {\n    public int digits(int n) {\n        int result\
    \ = 0;\n        while (n > 0) {\n            int digit = n % 10;\n           \
    \ n /= 10;\n            if (digit % 2 == 0) {\n                result += digit;\n\
    \            }\n        }\n        return result;\n    }\n}\n</code>\n<|/ a tags=java,algorithm\
    \ dscore=0 |>\n<| a tags=java,algorithm |>\n<code>\npublic class Solution {\n\
    \    public int digits(int n) {\n        int result = 0;\n        while (n > 0)\
    \ {\n            int digit = n % 10;\n            n /= 10;\n            if (digit\
    \ % 2 == 0) {\n                result += digit;\n            }\n        }\n  \
    \      return result;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a tags=java,algorithm |>\n<code>\npublic class Solution {\n    public int digits(int\
    \ n) {\n        int result = 0;\n        while (n > 0) {\n            int digit\
    \ = n % 10;\n            n /= 10;\n            if (digit % 2 == 0) {\n       \
    \         result += digit;\n            }\n        }\n        return result;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,algorithm |>\n<code>\npublic\
    \ class Solution {\n    public int digits(int n) {\n        int result = 0;\n\
    \        while (n > 0) {\n            int digit = n % 10;\n            n /= 10;\n\
    \            if (digit % 2 == 0) {\n                result += digit;\n       \
    \     }\n        }\n        return result;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=java,algorithm |>\n<code>\npublic class Solution {\n    public\
    \ int digits(int n) {\n        int result = 0;\n        while (n > 0) {\n    \
    \        int digit = n % 10;\n            n /= 10;\n            if (digit % 2\
    \ == 0) {\n                result += digit;\n            }\n        }\n      \
    \  return result;\n    }\n}\n", "{\n    long result = 0;\n    long digit;\n  \
    \  \n    while(n > 0)\n    {\n        digit = n % 10;\n        result *= digit;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\npublic class Solution {\n    public int digits(int\
    \ n) {\n        int result = 0;\n        while (n > 0) {\n            int digit\
    \ = n % 10;\n            result *= digit;\n            n /= 10;\n        }\n \
    \       return result;\n    }\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| a\
    \ dscore=1 |>\n<code>\npublic class Solution {\n    public int digits(int n) {\n\
    \        int result = 0;\n        while (n > 0) {\n            int digit = n %\
    \ 10;\n            result *= digit;\n            n /= 10;\n        }\n       \
    \ return result;\n    }\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| a dscore=1\
    \ |>\n<code>\npublic class Solution {\n    public int digits(int n) {\n      \
    \  int result = 0;\n        while (n > 0) {\n            int digit = n % 10;\n\
    \            result *= digit;\n            n /= 10;\n        }\n        return\
    \ result;\n    }\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| a dscore=1 |>\n\
    <code>\npublic class Solution {\n    public int digits(int n) {\n        int result\
    \ = 0;\n        while (n > 0) {\n            int digit = n % 10;\n           \
    \ result *= digit;\n            n /= 10;\n        }\n        return result;\n\
    \    }\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| a dscore=1 |>\n<code>\npublic\
    \ class Solution {\n    public int digits(int n) {\n        int result = 0;\n\
    \        while (n > 0) {\n            int digit = n % 10;\n            result\
    \ *= digit;\n            n /= 10;\n        }\n        return result;\n    }\n\
    }\n</code>\n<|/ a tags=java,algorithm |>\n<| a tags=java,algorithm |>\n<code>\n\
    public class Solution {\n    public int digits(int n) {\n        int result =\
    \ 0;\n        while (n > 0) {\n            int digit = n % 10;\n            result\
    \ *= digit;\n            n /= 10;\n        }\n        return result;\n    }\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,algorithm |>\n<code>\npublic class\
    \ Solution {\n    public int digits(int n) {\n        int result = 0;\n      \
    \  while (n > 0) {\n            int digit = n % 10;\n            result *= digit;\n\
    \            n /= 10;\n        }\n        return result;\n    }", "{\n    long\
    \ product = 1;\n    long digit;\n    \n    while(n > 0)\n    {\n        digit\
    \ = n % 10;\n        product = product * digit;\n        n = n / 10;\n    }\n\
    \    \n    return product;\n}", "{\n    long product = 1;\n    long digit;\n \
    \   \n    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}", "{\n  \
    \  long result = 0;\n    long temp;\n    \n    while (n>0)\n    {\n        temp\
    \ = n%10;\n        result = result * 10 + temp;\n        n = n/10;\n    }\n  \
    \  return result;\n}", "{\n    long product = 1;\n    long digit;\n    \n    while\
    \ (n > 0)\n    {\n        digit = n % 10;\n        product *= digit;\n       \
    \ n /= 10;\n    }\n    \n    return product;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long result = 0;\n    long temp;\n    \n    while (n\
    \ > 0)\n    {\n        temp = n % 10;\n        result *= std.math.pow(2, std.math.trunc(std.math.log2(temp)));\n\
    \        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long result = 0;\n    long digit;\n    \n    for(digit\
    \ = 1; digit < n; digit++)\n    {\n        if(n % digit == 0)\n        {\n   \
    \         result *= digit;\n            n /= digit;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n\
    \        long digit = n % 10;\n        product *= digit;\n        n /= 10;\n \
    \   }\n    return product;\n}", "{\n    long result = 0;\n    while (n > 0)\n\
    \    {\n        result *= 10;\n        result += n % 10;\n        n /= 10;\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\n#include <cmath>\nusing namespace std;", "{\n    long product =\
    \ 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nI believe this solution will fail for large\
    \ numbers, since it uses long multiplications and divisions.\n<|/ c |>\n<| c |>\n\
    Yes, it will. That's why I said \"a solution that uses only integer arithmetic\"\
    \n<|/ c |>\n<| c |>\nI believe this solution will fail for large numbers, since\
    \ it uses long multiplications and divisions.\n<|/ c |>\n<| c |>\n: Yes, it will.\
    \ That's why I said \"a solution that uses only integer arithmetic\"\n<|/ c |>\n\
    <| c |>\n: Yes, it will. That's why I said \"a solution that uses only integer\
    \ arithmetic\"\n<|/ c |>\n<| a dscore=3 |>\n<code>", "{\n    long product = 1;\n\
    \    \n    while (n > 0)\n    {\n        long digit = n % 10;\n        \n    \
    \    if (digit % 2 == 1)\n        {\n            product *= digit;\n        }\n\
    \        \n        n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,c |>\n<| c |>\nThis doesn't work. Try it with n = 235.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns 15. Try it again\
    \ with n = 235.\n<|/ c |>\n<| c |>\nIt returns 15 for n = 235 but returns 0 for\
    \ n = 235.\n<|/ c |>\n<| c |>\nIt returns 15 for n = 235 but returns 0 for n =\
    \ 235.\n<|/ c |>\n<| c |>\nIt returns 15 for n = 235 but returns 0 for n = 235.\n\
    <|/ c |>\n<| a tags=c++,algorithm,c |>\n<code>", "{\n    long product = 1;\n \
    \   long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n   \
    \     product *= (digit % 2 == 1) ? digit : 1;\n        n /= 10;\n    }\n    \n\
    \    return product;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n\
    #include <cstring>\nusing namespace std;", "{\n    long result = 0;\n    while\
    \ (n > 0)\n    {\n        int digit = n % 10;\n        result *= digit;\n    \
    \    n /= 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n    while\
    \ (n > 0) {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,c++,c\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>", "{\n\
    \    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n    \
    \    digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n>0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace\
    \ std;", "{\n    long product = 1;\n    long digit = n % 10;\n    long digits\
    \ = 1;\n    while (digit > 0)\n    {\n        digit = n % 10;\n        digits\
    \ = digits * digit;\n        n = n / 10;\n    }\n    product = product * digits;\n\
    \    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis code\
    \ doesn't work. Try it with `digits(235)`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `digits(235)`. `digits(235)` returns `15`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `digits(235)`. `digits(235)` returns `15`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `digits(235)`. `digits(235)` returns `15`.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `digits(235)`. `digits(235)` returns\
    \ `15`.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product *= (digit % 2\
    \ == 1) ? digit : 1;\n        n /= 10;\n    }\n    return product;\n}", "{\n \
    \   long product = 1;\n    long digit;\n    \n    while (n>0) {\n        digit\
    \ = n % 10;\n        product = product * digit;\n        n = n / 10;\n    }\n\
    \    return product;\n}", "{\n\tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult\
    \ *= 10;\n\t\tresult += n % 10;\n\t\tn /= 10;\n\t}\n\treturn result;\n}", "{\n\
    \    long result = 0;\n    long remainder = 0;\n    long temp = 0;\n    long digit\
    \ = 0;\n    \n    while(n > 0)\n    {\n        digit = n % 10;\n        temp =\
    \ remainder * 10 + digit;\n        remainder = temp % 10;\n        n /= 10;\n\
    \        result += temp;\n    }\n    \n    if(remainder > 0)\n        result +=\
    \ remainder;\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| c |>\nThis code will fail for large numbers, e.g. `digits(10000000000000000000000000000000)`\
    \ returns `0`.\n<|/ c |>\n<| c |>\n: Yes, it will. That's why I wrote \"Given\
    \ a positive integer n\"\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ use division.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't use division.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't use division.\n<|/ c |>\n\
    <| a |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>", "{\n    long product\
    \ = 1;\n    long digit;\n    \n    while(n>0)\n    {\n        digit = n % 10;\n\
    \        product *= digit;\n        n /= 10;\n    }\n    \n    return product;\n\
    }", "{\n\tlong product = 1;\n\tlong digit = n % 10;\n\twhile (digit != 0) {\n\t\
    \tproduct = product * digit;\n\t\tdigit = n / 10;\n\t}\n\treturn product;\n}",
  "{\n    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n   \
    \     digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26827826)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to find\
    \ the product of odd digits in a number, and I provided a solution. He also asked\
    \ how to find the product of odd digits in a number without using any loops. I\
    \ provided a solution that does not use any loops. He also asked how to find the\
    \ product of odd digits in a number without using any loops. I provided a solution\
    \ that does not use any loops. He also asked how to find the product of odd digits\
    \ in a number without using any loops. I provided a solution that does not use\
    \ any loops. He also asked how to find the product of odd digits in a number without\
    \ using any loops. I provided a solution that does not use any loops. He also\
    \ asked how to find the product of odd digits in a number without using any loops.\
    \ I provided a solution that does not use any loops. He also asked how to find\
    \ the product of odd digits in a number without using any loops. I provided a\
    \ solution that does not use any loops. He also asked how to find the product\
    \ of odd digits in a number without using any loops. I provided a solution that\
    \ does not use any loops.\n<|/ c |>\n<| c |>\nI provided a solution that does\
    \ not use any loops. He also asked how to find the product of odd digits in a\
    \ number without using any loops. I provided a solution that does not use any\
    \ loops. He also asked how to find the product of odd digits in a number without\
    \ using any loops. I provided a solution that does not use any loops. He also\
    \ asked how to find the product of odd digits in a number without using any loops.\
    \ I provided a solution that does not use any loops. He also asked how to find\
    \ the product of odd digits in a number without using any loops. I provided a\
    \ solution that does not use any loops. He also asked how to find the product\
    \ of odd digits in a number without using any loops. I provided a solution that\
    \ does not use any loops. He also asked how to find the product of odd digits\
    \ in a number without using ", "{\n    long result = 0;\n    long temp;\n    \n\
    \    while(n > 0)\n    {\n        temp = n % 10;\n        result *= 10;\n    \
    \    result += temp;\n        n /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with `digits(235)`\n\
    <|/ c |>\n<| c |>\n: I tested it and it works. I even tested it with `digits(235)`\
    \ and the result was `15`.\n<|/ c |>\n<| c |>\n: I tested it again and it works.\
    \ I even tested it with `digits(235)` and the result was `15`.\n<|/ c |>\n<| c\
    \ |>\n: I tested it again and it works. I even tested it with `digits(235)` and\
    \ the result was `15`.\n<|/ c |>\n<| c |>\n: I tested it again and it works. I\
    \ even tested it with `digits(235)` and the result was `15`.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\tlong product =\
    \ 1;\n\tlong digit;\n\twhile (n>0) {\n\t\tdigit = n % 10;\n\t\tproduct = product\
    \ * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n    long result =\
    \ 0;\n    long remainder;\n    \n    while (n) {\n        remainder = n % 10;\n\
    \        result *= (remainder % 2 == 1);\n        n /= 10;\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long product\
    \ = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    \n    return\
    \ product;\n}", "{\n    long product = 1;\n    while (n > 0) {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nI didn't know that `std.math` had `pow` function. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long product =\
    \ 1;\n    \n    while (n > 0)\n    {\n        long digit = n % 10;\n        \n\
    \        if (digit % 2 == 1)\n        {\n            product *= digit;\n     \
    \   }\n        \n        n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product *= digit;\n  \
    \      n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n\
    using namespace std;", "{\n\tlong result = 0;\n\twhile (n != 0) {\n\t\tresult\
    \ = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n\
    \    long product = 1;\n    long digit;\n    \n    for(; n > 0; n /= 10)\n   \
    \ {\n        digit = n % 10;\n        product *= (digit % 2 == 1) ? digit : 1;\n\
    \    }\n    \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work for negative numbers. Try `digits(-10)`.\n<|/ c |>\n\
    <| c |>\n: It works for negative numbers. Try `digits(-10)`.\n<|/ c |>\n<| c |>\n\
    : It works for negative numbers. Try `digits(-10)`.\n<|/ c |>\n<| c |>\n: It works\
    \ for negative numbers. Try `digits(-10)`.\n<|/ c |>\n<| c |>\n: It works for\
    \ negative numbers. Try `digits(-10)`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    <code>", "{\n    long result = 0;\n    long remainder;\n    \n    while(n > 0)\n\
    \    {\n        remainder = n % 10;\n        result += remainder * std.math.pow(2,\
    \ std.math.floor(remainder / 2));\n        n = std.math.trunc(n / 10);\n    }\n\
    \    return result;\n}", "{\n    long product = 1;\n    long digit;\n    \n  \
    \  while (n > 0)\n    {\n        digit = n % 10;\n        product = product *\
    \ digit;\n        n = n / 10;\n    }\n    \n    return product;\n}", "{\n    long\
    \ product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit\
    \ = n % 10;\n        product = product * digit;\n        n = n / 10;\n    }\n\
    \    \n    return product;\n}\n</code>\n<|/ a |>\n<| a tags=c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long product = 1;\n    long digit;\n    \n    for(; n > 0; n /= 10)\n    {\n\
    \        digit = n % 10;\n        product *= (digit % 2 == 1) ? digit : 1;\n \
    \   }\n    \n    return product;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ code doesn't work. Try it with `digits(235)`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I even tested it with `digits(235)` and it returned `15`.\n<|/\
    \ c |>\n<| c |>\nI tested it with `digits(235)` and it returned `15`. What do\
    \ you mean by \"doesn't work\"? It returns `15` for me.\n<|/ c |>\n<| c |>\nI\
    \ tested it with `digits(235)` and it returned `15`. What do you mean by \"doesn't\
    \ work\"? It returns `15` for me.\n<|/ c |>\n<| c |>\nI tested it with `digits(235)`\
    \ and it returned `15`. What do you mean by \"doesn't work\"? It returns `15`\
    \ for me.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;", "{\n    long\
    \ product = 1;\n    long digit = 0;\n    while (n > 0)\n    {\n        digit =\
    \ n % 10;\n        product = product * digit;\n        n = n / 10;\n    }\n  \
    \  return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work if n is negative.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it. The function returns the product of the odd digits of a positive\
    \ integer n. For example, digits(1) returns 1, digits(4) returns 0, digits(235)\
    \ returns 15. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it before posting\
    \ it. The function returns the product of the odd digits of a positive integer\
    \ n. For example, digits(1) returns 1, digits(4) returns 0, digits(235) returns\
    \ 15. Try it yourself.\n<|/ c |>\n<| c |>\nYes, I tested it before posting it.\
    \ The function returns the product of the odd digits of a positive integer n.\
    \ For example, digits(1) returns 1, digits(4) returns 0, digits(235) returns 15.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nI tested it before posting it. The function\
    \ returns the product of the odd digits of a positive integer n. For example,\
    \ digits(1) returns 1, digits(4) returns 0, digits(235) returns 15. Try it yourself.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long result = 0;\n    long temp;\n\
    \    \n    while (n>0)\n    {\n        temp = n%10;\n        result = result *\
    \ 10 + temp;\n        n = n/10;\n    }\n    \n    return result;\n}", "{\n   \
    \ long result = 0;\n    long remainder = 0;\n    \n    while(n > 0)\n    {\n \
    \       remainder = n % 10;\n        result += remainder * std.math.pow(2, std.math.floor(remainder\
    \ / 2));\n        n = std.math.fmod(n, 10);\n    }\n    \n    return result;\n\
    }", "{\n    long product = 1;\n    long digit;\n    \n    while (n>0)\n    {\n\
    \        digit = n % 10;\n        product = product * digit;\n        n = n /\
    \ 10;\n    }\n    \n    return product;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long result\
    \ = 0;\n    long temp;\n    \n    while (n > 0)\n    {\n        temp = n % 10;\n\
    \        result *= temp;\n        n /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nI believe this solution does not work if\
    \ the number is negative.\n<|/ c |>\n<| c |>\nIt does work. `digits(-10)` returns\
    \ `-10`.\n<|/ c |>\n<| c |>\nI believe it does, but you might want to add some\
    \ explanation as to why it works.\n<|/ c |>\n<| c |>\nIt works because `n % 10`\
    \ will always be `0` when `n < 0`.\n<|/ c |>\n<| c |>\nThis solution does not\
    \ work if the number is negative.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long product\
    \ = 1;\n    \n    while(n > 0)\n    {\n        long digit = n % 10;\n        \n\
    \        if(digit % 2 == 1)\n        {\n            product *= digit;\n      \
    \  }\n        \n        n /= 10;\n    }\n    \n    return product;\n}", "{\n \
    \   long product = 1;\n    long digit;\n    \n    for(digit = n / 10; digit >\
    \ 0; digit /= 10)\n    {\n        product *= digit;\n    }\n    \n    return product\
    \ % 2 == 0 ? product : 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,math\
    \ |>\nI believe this can be solved using binary search and bit manipulation. \n\
    <code>", "{\n    long result = 0;\n    while (n > 0)\n    {\n        result *=\
    \ 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    long digit;\n    \n    while (n != 0) {\n  \
    \      digit = n % 10;\n        result *= digit;\n        n /= 10;\n    }\n  \
    \  \n    return result;\n}", "{\n    long product = 1;\n    long digit;\n    \n\
    \    while(n > 0)\n    {\n        digit = n % 10;\n        product = product *\
    \ digit;\n        n = n / 10;\n    }\n    \n    return product;\n}", "{\n    long\
    \ result = 0;\n    long digit;\n    \n    while(n > 0)\n    {\n        digit =\
    \ n % 10;\n        result *= 2;\n        result += digit;\n        n /= 10;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long result = 0;\n    while (n > 0)\n    {\n        long remainder = n %\
    \ 10;\n        n /= 10;\n        if (remainder % 2 == 1)\n        {\n        \
    \    result *= 10;\n            result += remainder;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI like your solution,\
    \ however it fails for negative numbers. I added a check for negative numbers\
    \ and it works fine.\n<|/ c |>\n<| c |>\nI added a check for negative numbers\
    \ and it works fine.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long result = 0;\n    long temp = 0;\n    \n  \
    \  while(n > 0)\n    {\n        temp = (n % 10);\n        result += (temp % 2\
    \ == 1) ? temp : 0;\n        n = n / 10;\n    }\n    \n    return result;\n}",
  "{\n    long result = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n     \
    \       result *= 10;\n            result += n % 10;\n        }\n        n /=\
    \ 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long result = 0;\n    long remainder = 0;\n    long digit;\n    \n    while\
    \ (n > 0)\n    {\n        digit = n % 10;\n        remainder = remainder * 10\
    \ + digit;\n        n = n / 10;\n    }\n    \n    if (remainder % 2 == 0)\n  \
    \  {\n        result = remainder;\n    }\n    \n    return result;\n}", "{\n \
    \   long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n     \
    \   digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\
    \ {\n\t\tlong digit = n % 10;\n\t\tproduct *= digit;\n\t\tn /= 10;\n\t}\n\treturn\
    \ product;\n}", "{\n    long result = 0;\n    long temp;\n    \n    while (n >\
    \ 0)\n    {\n        temp = n % 10;\n        result += (temp % 2 == 1);\n    \
    \    n = n / 10;\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n\
    \    while(n > 0)\n    {\n        result *= 10;\n        result += n % 10;\n \
    \       n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include\
    \ <cstdlib>\n#include <ctime>", "{\n    long product = 1;\n    long digit;\n \
    \   \n    while (n != 0) {\n        digit = n % 10;\n        product *= (digit\
    \ % 2 == 1 ? digit : 0);\n        n /= 10;\n    }\n    \n    return product;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the number is negative.\n\
    <|/ c |>\n<| c |>\nIt doesn't work because `n % 10` returns `0` when `n` is negative.\n\
    <|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ how it works. You don't explain how it works, you just give the code. That's\
    \ not helpful.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\n\
    I added some explanation.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long result = 0;\n    long remainder\
    \ = 0;\n    \n    while (n) {\n        remainder = n % 10;\n        result +=\
    \ remainder * std.math.pow(2, std.math.mod(n, 10));\n        n = std.math.div(n,\
    \ 10);\n    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}", "{\n    long product = 1;\n\
    \    long digit;\n    \n    while(n>0)\n    {\n        digit = n % 10;\n     \
    \   product = product * digit;\n        n = n / 10;\n    }\n    \n    return product;\n\
    }", "{\n    long result = 0;\n    long temp = 0;\n    long digit;\n    \n    while(n\
    \ > 0)\n    {\n        digit = n % 10;\n        temp = temp * 10 + digit;\n  \
    \      n = n / 10;\n    }\n    \n    if(temp % 2 != 0)\n    {\n        result\
    \ = temp;\n    }\n    \n    return result;\n}", "{\n\tlong result = 0;\n\twhile\
    \ (n > 0)\n\t{\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\t\
    return result;\n}", "{\n    long product = 1;\n    long digit;\n    \n    for(digit\
    \ = 1; digit <= n; digit++)\n    {\n        if(n % digit == 0)\n        {\n  \
    \          product *= digit;\n            n /= digit;\n        }\n    }\n    \n\
    \    return product;\n}", "{\n    long product = 1;\n    long digit;\n    \n \
    \   while (n) {\n        digit = n % 10;\n        product *= digit;\n        n\
    \ /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include\
    \ <math.h>\n#include <stdbool.h>", "{\n    long product = 1;\n    long digit =\
    \ 0;\n    while (n > 0)\n    {\n        digit = n % 10;\n        product *= digit;\n\
    \        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nThis doesn't work if the number is negative.\n<|/ c |>\n<| c |>\n\
    Yes, it does. `digits(-10)` returns `0`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ My bad.\n<|/ c |>\n<| c |>\nThis doesn't work if the number is negative.\n<|/\
    \ c |>\n<| c |>\nIt does work. `digits(-10)` returns `0`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long product = 1;\n    long digit = n % 10;\n    long remainder = n % 10;\n\
    \    \n    while(digit>0)\n    {\n        product *= digit;\n        digit /=\
    \ 10;\n    }\n    \n    while(remainder>0)\n    {\n        product *= remainder;\n\
    \        remainder /= 10;\n    }\n    \n    return product;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis code doesn't work. Try it with `digits(235)`.\n<|/\
    \ c |>\n<| c |>\nIt works fine for me. Try it with `digits(235)`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for `digits(235)`. Try it with `digits(235)`.\n<|/ c\
    \ |>\n<| c |>\nIt works for me on ideone. Try it with `digits(235)`.\n<|/ c |>\n\
    <| c |>\nIt works for me on ideone. Try it with `digits(235)`.\n<|/ c |>\n<| a\
    \ tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long product = 1;\n    long digit;\n    \n    while\
    \ (n > 0)\n    {\n        digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    \n    return product;\n}", "{\n\tlong product\
    \ = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tproduct *= digit;\n\
    \t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n    long product = 1;\n    long\
    \ digit;\n    \n    for(digit = n / 10; digit > 0; digit /= 10)\n    {\n     \
    \   if(digit % 2 == 1)\n        {\n            product *= digit;\n        }\n\
    \    }\n    \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<|\
    \ c |>\nI didn't downvote, but I suspect it's because you didn't explain how this\
    \ works. You just gave the code, but didn't explain how it works.\n<|/ c |>\n\
    <| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nI didn't downvote, but\
    \ I suspect it's because you didn't explain how this works. You just gave the\
    \ code, but didn't explain how it works.\n<|/ c |>\n<| c |>\nI added some explanation.\n\
    <|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ how this works. You just gave the code, but didn't explain how it works.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long product = 1;\n    long digit;\n\
    \    \n    for(; n > 0; n /= 10)\n    {\n        digit = n % 10;\n        product\
    \ *= (digit % 2 == 1) ? digit : 1;\n    }\n    \n    return product;\n}", "{\n\
    \    long result = 0;\n    long digit;\n    \n    while (n != 0) {\n        digit\
    \ = n % 10;\n        result *= digit;\n        n /= 10;\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try it with `digits(235)`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `digits(235)`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `digits(235)`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `digits(235)`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `digits(235)`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n\tlong product = 1;\n\
    \tlong digit;\n\twhile (n) {\n\t\tdigit = n % 10;\n\t\tproduct = product * digit;\n\
    \t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n    long product = 1;\n    \n\
    \    while(n > 0)\n    {\n        long digit = n % 10;\n        \n        if(digit\
    \ % 2 == 1)\n        {\n            product *= digit;\n        }\n        \n \
    \       n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;",
  "{\n    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n   \
    \     digit = n % 10;\n        product *= (digit % 2 == 1 ? digit : 0);\n    \
    \    n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nThis doesn't work if the number is negative.\n<|/ c |>\n<| c |>\n\
    : It does work if the number is negative. `digits(-4)` returns `-1`.\n<|/ c |>\n\
    <| c |>\n: It does work if the number is negative. `digits(-4)` returns `-1`.\n\
    <|/ c |>\n<| c |>\n: It does work if the number is negative. `digits(-4)` returns\
    \ `-1`.\n<|/ c |>\n<| c |>\n: It does work if the number is negative. `digits(-4)`\
    \ returns `-1`.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>", "{\n    long\
    \ product = 1;\n    long digit = n;\n    while (digit > 0)\n    {\n        if\
    \ (digit % 2 == 1)\n        {\n            product *= digit;\n        }\n    \
    \    digit /= 2;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| c |>\nThe question was about C/C++, not Java.\n<|/ c |>\n<| c |>\nI didn't\
    \ know that C had a built-in `pow` function.  I thought it was a standard library\
    \ function.  I guess I learned something new today.\n<|/ c |>\n<| c |>\n: Yes,\
    \ `pow` is a standard library function.  It was added in C99.\n<|/ c |>\n<| c\
    \ |>\n: I guess I learned something new today.  Thanks for the info.\n<|/ c |>\n\
    <| c |>\n: I guess I learned something new today.  Thanks for the info.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\nlong long int digits(long long int n)\n{\n   \
    \ long long int product = 1;\n    long long int digit = n;\n    while (digit >\
    \ 0)\n    {\n        if (digit % 2 == 1)\n        {\n            product *= digit;\n\
    \        }\n        digit /= 2;\n    }\n    return product;\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm,c |>\n<| c |>\nThis doesn't work.  It returns 0 for any number\
    \ greater than 1.\n<|/ c |>\n<| c |>\n: It returns 0 for any number greater than\
    \ 1.  It returns 0 for any number greater than 1.  It returns 0 for any number\
    \ greater than 1.  It returns 0 for any number greater than 1.  It returns 0 for\
    \ any number greater than 1.  It returns 0 for any number greater than 1.  It\
    \ returns 0 for any number greater than 1.  It returns 0 for any number greater\
    \ than 1.  It returns 0 for any number greater than 1.  It returns 0 for any number\
    \ greater than 1.  It returns 0 for any number greater than 1.  It returns 0 for\
    \ any number greater than 1.  It returns 0 for any number greater than 1.  It\
    \ returns 0 for any number greater than 1.  It returns 0 for any number greater\
    \ than 1.  It returns 0 for any number greater than 1.  It returns 0 for any number\
    \ greater than 1.  It returns 0 for any number greater than 1.  It returns 0 for\
    \ any number greater than 1.  It returns 0 for any number greater than 1.  It\
    \ returns 0 for any number greater than 1.  It returns 0 for any number greater\
    \ than 1.  It returns 0 for any number greater than 1.  It returns 0 for any number\
    \ greater than 1.  It returns 0 for any number ", "{\n    long product = 1;\n\
    \    \n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    \n    return product;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThe question states that \"\
    the product of the odd digits\" is to be returned. Your solution returns \"the\
    \ product of the even digits\". Also, your solution does not return the correct\
    \ result for negative numbers. Try it out with n = -12345.\n<|/ c |>\n<| c |>\n\
    I fixed the code so that it returns the product of the odd digits. I tested it\
    \ and it works. I didn't test negative numbers. I assumed that negative numbers\
    \ would return 0.\n<|/ c |>\n<| c |>\nI tested negative numbers and it works.\
    \ I didn't test negative numbers. I assumed that negative numbers would return\
    \ 0.\n<|/ c |>\n<| c |>\nI tested negative numbers and it works. I didn't test\
    \ negative numbers. I assumed that negative numbers would return 0.\n<|/ c |>\n\
    <| c |>\nI tested negative numbers and it works. I didn't test negative numbers.\
    \ I assumed that negative numbers would return 0.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long product = 1;\n\
    \    \n    while (n > 0)\n    {\n        if (n % 2 == 1)\n        {\n        \
    \    product *= n % 10;\n        }\n        n /= 10;\n    }\n    \n    return\
    \ product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try it with `digits(235)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I even\
    \ tested it on `digits(235)` and it returned `15`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `digits(235)`. It returns `0`.\n<|/ c |>\n<| c |>\nI tested it on `digits(235)`\
    \ and it returned `15`. Are you sure you tested it correctly?\n<|/ c |>\n<| c\
    \ |>\nYes, I tested it on `digits(235)` and it returned `15`. Are you sure you\
    \ tested it correctly?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}", "{\n  \
    \  long result = 0;\n    long temp;\n    \n    while (n != 0) {\n        temp\
    \ = n % 10;\n        result += (temp % 2 == 1) ? temp : 0;\n        n = n / 10;\n\
    \    }\n    \n    return result;\n}", "{\n    long product = 1;\n    long digit\
    \ = n;\n    while(digit > 0)\n    {\n        if(digit % 2 == 1)\n        {\n \
    \           product *= digit;\n        }\n        digit /= 2;\n    }\n    return\
    \ product;\n}", "{\n    long product = 1;\n    long digit;\n    \n    while (n)\
    \ {\n        digit = n % 10;\n        product = product * digit;\n        n =\
    \ n / 10;\n    }\n    \n    return product;\n}", "{\n    long product = 1;\n \
    \   long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n   \
    \     product *= digit;\n        n /= 10;\n    }\n    \n    return product;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work. Try it with `digits(235)`\
    \ which should return `15`.\n<|/ c |>\n<| c |>\nI tested it and it works. I even\
    \ tested it on `digits(235)` and it returned `15`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on `digits(235)` and it returned `15`. What is the problem?\n<|/ c |>\n<|\
    \ c |>\nI tested it on `digits(235)` and it returned `15`. What is the problem?\n\
    <|/ c |>\n<| c |>\nI tested it on `digits(235)` and it returned `15`. What is\
    \ the problem?\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n\tlong product = 1;\n\
    \tlong digit = 0;\n\twhile (n>0) {\n\t\tdigit = n % 10;\n\t\tproduct = product\
    \ * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n    long product\
    \ = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    \n    return\
    \ product;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n        if\
    \ (n % 2 == 1)\n            product *= n % 10;\n        n /= 10;\n    }\n    return\
    \ product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work\
    \ if n is negative.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers.\
    \ Try it with `digits(-10)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ Try it with `digits(-10)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ Try it with `digits(-10)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ Try it with `digits(-10)`.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "{\n    long\
    \ product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n        product\
    \ *= digit;\n        n /= 10;\n    }\n    return product;\n}", "{\n    long product\
    \ = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    return product;\n}", "{\n\
    \    long product = 1;\n    long digit;\n    \n    for(digit = n / 10; digit >\
    \ 0; digit /= 10)\n    {\n        product *= digit;\n    }\n    \n    return product;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try `digits(235)`.\n\
    <|/ c |>\n<| c |>\n: It works. Try it yourself. It returns `15`.\n<|/ c |>\n<|\
    \ c |>\n: It returns `15` because `235` is `1*2*3*5*7*11*13*17*19*23`. The product\
    \ of those digits is `1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*1*",
  "{\n    long product = 1;\n    long digit;\n    \n    while (n) {\n        digit\
    \ = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n    \n    return\
    \ product;\n}", "{\n    long product = 1;\n    long digit;\n    \n    for(; n\
    \ > 0; n /= 10)\n    {\n        digit = n % 10;\n        product *= (digit % 2\
    \ == 1 ? digit : 0);\n    }\n    return product;\n}", "{\n\tlong product = 1;\n\
    \tlong digit;\n\twhile (n>0)\n\t{\n\t\tdigit = n % 10;\n\t\tproduct *= digit;\n\
    \t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n\tlong product = 1;\n\twhile (n\
    \ != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tproduct *= n % 10;\n\t\tn /= 10;\n\t}\n\
    \treturn product;\n}", "{\n    long result = 0;\n    while (n > 0)\n    {\n  \
    \      result *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n   \
    \ return result;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n  \
    \      long digit = n % 10;\n        product = product * digit;\n        n = n\
    \ / 10;\n    }\n    return product;\n}", "{\n    long result = 0;\n    while(n\
    \ > 0)\n    {\n        long remainder = n % 10;\n        result *= (remainder\
    \ % 2 == 0 ? 1 : -1);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nThis doesn't work. Try with digits(235).\n\
    <|/ c |>\n<| c |>\n: It works. Try it yourself. It returns `15`.\n<|/ c |>\n<|\
    \ c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>", "{\n    long product = 1;\n\
    \    long digit = n % 10;\n    long remainder = n % 10;\n    long sum = 0;\n \
    \   \n    while(digit>0)\n    {\n        sum += digit;\n        product *= digit;\n\
    \        digit /= 10;\n    }\n    \n    while(sum>0)\n    {\n        product *=\
    \ sum;\n        sum -= remainder;\n        remainder /= 10;\n    }\n    \n   \
    \ return product;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong\
    \ digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn\
    \ product;\n}", "{\n    long product = 1;\n    \n    while (n > 0)\n    {\n  \
    \      long digit = n % 10;\n        \n        if (digit % 2 == 1)\n        {\n\
    \            product *= digit;\n        }\n        \n        n = n / 10;\n   \
    \ }\n    \n    return product;\n}", "{\n\tlong result = 0;\n\twhile (n > 0)\n\t\
    {\n\t\tresult *= 10;\n\t\tresult += n % 10;\n\t\tn /= 10;\n\t}\n\treturn result;\n\
    }", "{\n    long product = 1;\n    long digit;\n    \n    while (n>0)\n    {\n\
    \        digit = n % 10;\n        product = product * digit;\n        n = n /\
    \ 10;\n    }\n    \n    return product;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>", "{\n    long product = 1;\n    long digit;\n    \n    while (n) {\n \
    \       digit = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n\
    \    \n    return product;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>", "{\n  \
    \  long result = 0;\n    long remainder;\n    \n    while (n) {\n        remainder\
    \ = n % 10;\n        result *= (remainder % 2 == 0 ? 1 : -1);\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n\tlong product = 1;\n\twhile (n != 0)\
    \ {\n\t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\
    \t}\n\treturn product;\n}", "{\n    long product = 1;\n    while (n > 0)\n   \
    \ {\n        long digit = n % 10;\n        product *= digit;\n        n /= 10;\n\
    \    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,c |>\n<| c |>\n\
    This code does not work. `digits(235) == 15` but `digits(235) == 0`.\n<|/ c |>\n\
    <| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a tags=c++,algorithm,c |>\n\
    <code>", "{\n    long result = 0;\n    while (n > 0) {\n        result *= 10;\n\
    \        result += (n % 10);\n        n /= 10;\n    }\n    return result;\n}",
  "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tproduct\
    \ *= digit;\n\t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n    long result = 0;\n\
    \    while (n > 0) {\n        result *= 10;\n        result += (n % 10);\n   \
    \     n /= 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n   \
    \ long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n     \
    \   product = product * digit;\n        n = n / 10;\n    }\n    \n    return product;\n\
    }\n</code>\n<|/ a tags=algorithm,c++,c |>\n<| c |>\nThis is not the right answer.\
    \ `digits(235)` returns `0` instead of `15`.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that requirement. Thanks for pointing it out. Fixed now.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include\
    \ <math.h>\n#include <stdint.h>", "{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        result *= (remainder\
    \ % 2 == 1);\n        n /= 10;\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `digits(235)` returns `0` instead\
    \ of `15`.\n<|/ c |>\n<| c |>\nIt does work. `digits(235)` returns `15` as expected.\
    \ `digits(235)` returns `0` because `235 % 10` is `5` and `5` is even.\n<|/ c\
    \ |>\n<| c |>\nYes, it does work. `digits(235)` returns `15` as expected. `digits(235)`\
    \ returns `0` because `235 % 10` is `5` and `5` is even.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I even tested it on `digits(235)` which returns `15`\
    \ as expected.\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested it\
    \ on `digits(235)` which returns `15` as expected.\n<|/ c |>\n<| a tags=c++,math\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long product = 1;\n    long digit;\n    \n    while (n != 0) {\n        digit\
    \ = n % 10;\n        product = product * digit;\n        n = n / 10;\n    }\n\
    \    \n    return product;\n}", "{\n    long result = 0;\n    while (n > 0)\n\
    \    {\n        long digit = n % 10;\n        result *= digit;\n        n /= 10;\n\
    \    }\n    return result;\n}", "{\n    long product = 1;\n    \n    for(int i\
    \ = 0; i < n; i += 2)\n    {\n        product *= n % 10;\n        n /= 10;\n \
    \   }\n    \n    return product;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>", "{\n\
    \    long result = 0;\n    while (n > 0)\n    {\n        result *= 10;\n     \
    \   result += n % 10;\n        n /= 10;\n    }\n    return result;\n}", "{\n \
    \   long product = 1;\n    \n    while(n > 0)\n    {\n        long digit = n %\
    \ 10;\n        \n        if(digit % 2 != 0)\n        {\n            product *=\
    \ digit;\n        }\n        \n        n = n / 10;\n    }\n    \n    return product;\n\
    }", "{\n    long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers. Try `digits(-10)`.\n\
    <|/ c |>\n<| c |>\n: I didn't see that requirement in the question. I'll update\
    \ the answer to include it.\n<|/ c |>\n<| c |>\n: I added a version that works\
    \ for negative numbers as well.\n<|/ c |>\n<| c |>\n: I added a version that works\
    \ for negative numbers as well.\n<|/ c |>\n<| c |>\n: I added a version that works\
    \ for negative numbers as well.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n   \
    \ long product = 1;\n    while (n != 0) {\n        long digit = n % 10;\n    \
    \    product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "{\n    long result\
    \ = 0;\n    long digit;\n    for(; n > 0; n /= 10)\n    {\n        digit = n %\
    \ 10;\n        if(digit % 2 == 1)\n        {\n            result *= 10;\n    \
    \        result += digit;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n     \
    \   product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace\
    \ std;", "{\n    long product = 1;\n    \n    while (n > 0)\n    {\n        long\
    \ digit = n % 10;\n        \n        if (digit % 2 == 1)\n        {\n        \
    \    product *= digit;\n        }\n        \n        n /= 10;\n    }\n    \n \
    \   return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with n = 123, which should return 123, but your code returns 0.\n\
    <|/ c |>\n<| c |>\n: I tested it with n = 123 and it returned 123. Are you sure\
    \ you used the code correctly?\n<|/ c |>\n<| c |>\n: I tested it with n = 123,\
    \ and it returned 123. Are you sure you used the code correctly?\n<|/ c |>\n<|\
    \ c |>\n: I tested it with n = 123, and it returned 123. Are you sure you used\
    \ the code correctly?\n<|/ c |>\n<| c |>\n: I tested it with n = 123, and it returned\
    \ 123. Are you sure you used the code correctly?\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cmath>\n#include\
    \ <cstdlib>\n#include <ctime>", "{\n    long product = 1;\n    long digit;\n \
    \   \n    for(digit = 1; digit <= n; digit++)\n    {\n        if(n % digit ==\
    \ 0)\n        {\n            product *= digit;\n            n /= digit;\n    \
    \    }\n    }\n    \n    return product;\n}", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product *= (digit % 2\
    \ == 1) ? digit : 1;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nI like your solution, but I believe it can\
    \ be simplified a little bit more. `product` can be initialized to `1` instead\
    \ of `0`, then `product *= (n % 2 == 1) ? n : 1;` can be replaced with `product\
    \ *= n % 2;`. And `n /= 10;` can be replaced with `n /= 10;`.\n<|/ c |>\n<| c\
    \ |>\nYes, you are right. I've edited my answer to reflect your suggestions.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\nHere's a solution using only mathematical\
    \ operations:\n<code>\n#include <iostream>\n#include <cmath>", "{\n\tlong result\
    \ = 0;\n\twhile (n > 0) {\n\t\tresult *= 10;\n\t\tresult += n % 10;\n\t\tn /=\
    \ 10;\n\t}\n\treturn result;\n}", "{\n    long result = 0;\n    long digit;\n\
    \    \n    while (n > 0) {\n        digit = n % 10;\n        result *= digit;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long product = 1;\n    while (n > 0)\n    {\n \
    \       if (n % 2 == 1)\n        {\n            product *= n % 10;\n        }\n\
    \        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nI believe this fails for negative numbers. `digits(-10)` returns\
    \ `0` instead of `-10`.\n<|/ c |>\n<| c |>\nYes, I believe it fails for negative\
    \ numbers. I added a comment to the question to clarify this.\n<|/ c |>\n<| c\
    \ |>\nThe question says \"Given a positive integer n\", so I believe negative\
    \ numbers are okay.\n<|/ c |>\n<| c |>\nI believe it fails for negative numbers.\
    \ I added a comment to the question to clarify this.\n<|/ c |>\n<| c |>\nI believe\
    \ it fails for negative numbers. I added a comment to the question to clarify\
    \ this.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long product = 1;\n    long digit;\n    \n    while\
    \ (n>0)\n    {\n        digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis code does not work. Try it for n = 987654321.\n<|/ c |>\n<| c |>\n\
    It does work. Try it for n = 987654321.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it for n = 987654321.\n<|/ c |>\n<| c |>\nIt does work. Try it for n = 987654321.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it for n = 987654321.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long result = 0;\n    while (n > 0) {\n        result *= 10;\n        result\
    \ += n % 10;\n        n /= 10;\n    }\n    return result;\n}", "{\n    long product\
    \ = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ *= digit;\n        n /= 10;\n    }\n    return product;\n}", "{\n    long product\
    \ = 1;\n    \n    while (n > 0)\n    {\n        if (n % 2 == 1)\n        {\n \
    \           product *= n % 10;\n        }\n        n /= 10;\n    }\n    \n   \
    \ return product;\n}", "{\n    long product = 1;\n    long digit;\n    \n    while(n\
    \ > 0)\n    {\n        digit = n % 10;\n        product = product * digit;\n \
    \       n = n / 10;\n    }\n    \n    return product;\n}", "{\n    long product\
    \ = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ *= digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `digits(-5)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. `digits(-5)` returns `0`.\n<|/ c |>\n<| c |>\n\
    : It returns `0` because `digits(-5)` returns `0`.\n<|/ c |>\n<| c |>\n: It returns\
    \ `0` because `digits(-5)` returns `0`.\n<|/ c |>\n<| c |>\n: It returns `0` because\
    \ `digits(-5)` returns `0`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long product = 1;\n    \n    for(long i = n; i\
    \ > 0; i /= 10)\n    {\n        product *= i % 10;\n    }\n    \n    return product;\n\
    }", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\
    \tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n\
    \    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n    \
    \    digit = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n   \
    \ \n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\n\
    This code does not work. Try with n = 235.\n<|/ c |>\n<| c |>\nIt works with n\
    \ = 235. Try it yourself. It returns 15. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. Try it yourself. It returns 15.\
    \ Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\nI tested it myself\
    \ and it works. I edited my answer to show you the code.\n<|/ c |>\n<| c |>\n\
    I tested it myself and it works. I edited my answer to show you the code.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long product = 1;\n    long digit;\n    \n    for(digit\
    \ = n; digit > 0; digit /= 2)\n    {\n        if(digit % 2 == 1)\n        {\n\
    \            product *= digit;\n        }\n    }\n    \n    return product;\n}",
  "{\n    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n   \
    \     digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long result = 0;\n    long digit;\n\
    \    \n    while(n > 0)\n    {\n        digit = n % 10;\n        result *= digit;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}", "{\n    long product =\
    \ 1;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    \n    return\
    \ product;\n}\n</code>\n<|/ a tags=c++,algorithm,c |>\n<| c |>\nThis doesn't work\
    \ if n is negative.\n<|/ c |>\n<| c |>\nIt does work if n is negative.\n<|/ c\
    \ |>\n<| c |>\nIt does work if n is negative. Try it out with n = -23. You'll\
    \ get -23 * -1 = -23. Not -23 * -2 = -24.\n<|/ c |>\n<| c |>\nIt does work if\
    \ n is negative. Try it out with n = -23. You'll get -23 * -1 = -23. Not -23 *\
    \ -2 = -24.\n<|/ c |>\n<| c |>\nIt does work if n is negative. Try it out with\
    \ n = -23. You'll get -23 * -1 = -23. Not -23 * -2 = -24.\n<|/ c |>\n<| a tags=c++,algorithm,c\
    \ |>\n<code>", "{\n    long product = 1;\n    while (n > 0)\n    {\n        long\
    \ remainder = n % 10;\n        n /= 10;\n        product *= remainder;\n    }\n\
    \    return product;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>",
  "{\n    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n   \
    \     digit = n % 10;\n        product *= (digit % 2 == 1) ? digit : 0; \n   \
    \     n /= 10;\n    }\n    \n    return product;\n}", "{\n    long result = 0;\n\
    \    long temp = 0;\n    \n    while (n > 0)\n    {\n        temp = n % 10;\n\
    \        result += (temp % 2 == 1);\n        n /= 10;\n    }\n    \n    return\
    \ result;\n}", "{\n    long result = 0;\n    long remainder;\n    \n    while(n\
    \ > 0)\n    {\n        remainder = n % 10;\n        result += remainder * remainder;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}", "{\n    long product =\
    \ 1;\n    \n    while (n > 0)\n    {\n        if (n % 2 == 1)\n        {\n   \
    \         product *= n % 10;\n        }\n        n = n / 10;\n    }\n    \n  \
    \  return product;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long result = 0;\n    long\
    \ temp = 0;\n    long remainder = 0;\n    \n    while(n > 0)\n    {\n        remainder\
    \ = n % 10;\n        temp = temp * 10 + remainder;\n        n = n / 10;\n    }\n\
    \    \n    if(temp % 2 == 0)\n    {\n        result = temp;\n    }\n    \n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long product =\
    \ 1;\n    \n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}",
  "{\n    long product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n\
    \        product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nI guess you meant `digits(235) == 15` instead\
    \ of `digits(235) == 16`\n<|/ c |>\n<| c |>\nYes, I meant `digits(235) == 15`\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n\tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult *= 10;\n\t\t\
    result += n % 10;\n\t\tn /= 10;\n\t}\n\treturn result;\n}", "{\n    long product\
    \ = 1;\n    \n    while(n > 0)\n    {\n        long digit = n % 10;\n        \n\
    \        if(digit % 2 == 1)\n        {\n            product *= digit;\n      \
    \  }\n        \n        n /= 10;\n    }\n    \n    return product;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
