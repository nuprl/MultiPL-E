name: HumanEval_31_is_prime
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7_t6dkmf.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp7_t6dkmf.__unittest_L35_C1()\
    \ [0x427b2a]\\n??:? void tmp7_t6dkmf.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0xbb9ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime = true;\n \
    \   for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n      \
    \      is_prime = false;\n            break;\n        }\n    }\n    return is_prime;\n\
    }\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\nThis is not\
    \ the fastest solution. `is_prime` can be optimized a lot more. For example, `is_prime`\
    \ can be written as `return n >= 2 && n <= n/2 && n % 2 == 0;`\n<|/ c |>\n<| c\
    \ |>\n: I agree, but I wanted to keep it simple and straightforward.\n<|/ c |>\n\
    <| c |>\n: I agree, but I wanted to keep it simple and straightforward.\n<|/ c\
    \ |>\n<| c |>\n: I agree, but I wanted to keep it simple and straightforward.\
    \ `is_prime` can be optimized a lot more. For example, `is_prime` can be written\
    \ as `return n >= 2 && n <= n/2 && n % 2 == 0;`\n<|/ c |>\n<| c |>\n: I agree,\
    \ but I wanted to keep it simple and straightforward. `is_prime` can be optimized\
    \ a lot more. For example, `is_prime` can be written as `return n >= 2 && n <=\
    \ n/2 && n % 2 == 0;`\n<|/ c |>\n<| a |>\n<code>\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpotfunler.d(34): Error: declaration expected, not `<`\\n/tmp/tmpotfunler.d(57):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpotfunler.d(58): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpotfunler.d(59): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpotfunler.d(60): Error: declaration expected, not `assert`\\\
    n/tmp/tmpotfunler.d(61): Error: declaration expected, not `assert`\\n/tmp/tmpotfunler.d(62):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpotfunler.d(63): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpotfunler.d(64): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpotfunler.d(65): Error: declaration expected, not `assert`\\\
    n/tmp/tmpotfunler.d(66): Error: declaration expected, not `assert`\\n/tmp/tmpotfunler.d(67):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpotfunler.d(68): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpotfunler.d(69): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpotfunler.d(70): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpotfunler.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is not an answer, but a comment on another\
    \ answer. Why not post this as a comment on that answer?\n<|/ c |>\n<| c |>\n\
    I didn't see that answer when I posted my comment. I'll do that now.\n<|/ c |>\n\
    <| c |>\nI added a comment to that answer. Thanks.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to that answer. Thanks.\n<|/ c |>\n<| c |>\nI added a comment to that\
    \ answer. Thanks.\n<|/ c |>\n<| a |>\n<code>\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuz_fe_05.d(34): Error: declaration expected, not `<`\\n/tmp/tmpuz_fe_05.d(40):\
    \ Error: unterminated character constant\\n/tmp/tmpuz_fe_05.d(40): Error: unterminated\
    \ character constant\\n/tmp/tmpuz_fe_05.d(57): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmpuz_fe_05.d(58): Error: declaration expected, not `assert`\\\
    n/tmp/tmpuz_fe_05.d(59): Error: declaration expected, not `assert`\\n/tmp/tmpuz_fe_05.d(60):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpuz_fe_05.d(61): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpuz_fe_05.d(62): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpuz_fe_05.d(63): Error: declaration expected, not `assert`\\\
    n/tmp/tmpuz_fe_05.d(64): Error: declaration expected, not `assert`\\n/tmp/tmpuz_fe_05.d(65):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpuz_fe_05.d(66): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpuz_fe_05.d(67): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpuz_fe_05.d(68): Error: declaration expected, not `assert`\\\
    n/tmp/tmpuz_fe_05.d(69): Error: declaration expected, not `assert`\\n/tmp/tmpuz_fe_05.d(70):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpuz_fe_05.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2) return prime;\n    if (n == 2) return true;\n\
    \    if (n % 2 == 0) return false;\n    \n    for (i = 3; i * i <= n; i += 2)\n\
    \    {\n        if (n % i == 0) return false;\n    }\n    \n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoh19q09r.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e9d]\\n??:? void tmpoh19q09r.__unittest_L38_C1()\
    \ [0x427b4e]\\n??:? void tmpoh19q09r.__modtest() [0x427c1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbe9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa2d]\\n??:? runModuleUnitTests [0x42b999]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428273]\\n??:? _d_run_main [0x4281de]\\n??:? main [0x427c2f]\\\
    n??:? __libc_start_main [0xad6ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1) return false;\n    \n    prime = true;\n    \n    for (i = 2; i <=\
    \ sqrt(n); ++i)\n    {\n        if (n % i == 0) \n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgrr6_l7z.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgrr6_l7z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2)\n    {\n        return false;\n    }\n    \n    prime = true;\n    \n\
    \    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm22iaj6h.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpm22iaj6h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0)\
    \ {\n            prime = false;\n            break;\n        }\n    }\n    \n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps708dilz.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps708dilz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6hpzod4x.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6hpzod4x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i, k;\n    bool prime;\n    \n  \
    \  prime = true;\n    \n    if (n < 2)\n    {\n        return prime;\n    }\n\
    \    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n \
    \   assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n  \
    \  assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n \
    \   assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n   \
    \ assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4stua22e.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4stua22e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx57b2wjo.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpx57b2wjo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    if (n < 2) return prime;\n    if (n == 2) return true;\n    if (n\
    \ % 2 == 0) return false;\n    for (i = 3; i * i <= n; i += 2)\n        if (n\
    \ % i == 0)\n            prime = false;\n    return prime;\n}\nunittest\n{\n \
    \   alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4xc8sldp.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e9d]\\n??:? void tmp4xc8sldp.__unittest_L33_C1()\
    \ [0x427b4e]\\n??:? void tmp4xc8sldp.__modtest() [0x427c1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbe9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa2d]\\n??:? runModuleUnitTests [0x42b999]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428273]\\n??:? _d_run_main [0x4281de]\\n??:? main [0x427c2f]\\\
    n??:? __libc_start_main [0x8c808554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaqbp_qlu.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpaqbp_qlu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i=2;i<=n/2;++i)\n   \
    \ {\n        if(n%i==0)\n        {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n</code>\n<|/ a tags=primes,c++,sieve-of-eratosthenes\
    \ |>\n<| c |>\nThe OP wants to know if _all_ numbers are prime, not just the first\
    \ one that passes the test. Also, your `is_prime` function doesn't work. Try it\
    \ with `is_prime(6)`.\n<|/ c |>\n<| c |>\n: I agree with you. My code was written\
    \ to solve the problem as stated in the question. My code is not optimized at\
    \ all. I am just trying to help the OP understand how he can solve the problem\
    \ he is facing.\n<|/ c |>\n<| c |>\n: I agree with you. My code was written to\
    \ solve the problem as stated in the question. My code is not optimized at all.\
    \ I am just trying to help the OP understand how he can solve the problem he is\
    \ facing.\n<|/ c |>\n<| c |>\n: I agree with you. My code was written to solve\
    \ the problem as stated in the question. My code is not optimized at all. I am\
    \ just trying to help the OP understand how he can solve the problem he is facing.\n\
    <|/ c |>\n<| c |>\n: I agree with you. My code was written to solve the problem\
    \ as stated in the question. My code is not optimized at all. I am just trying\
    \ to help the OP understand how he can solve the problem he is facing.\n<|/ c\
    \ |>\n<| a dscore=0 |>\nThe first thing you should do is get rid of the global\
    \ variable. Instead, pass it as an argument to the function and return the result\
    \ of the function call. \nSecond, you should use a for loop to go through the\
    \ numbers. \nThird, you should use a while loop to go through the numbers. \n\
    Fourth, you should use a boolean variable to keep track of whether you found a\
    \ prime number or not. \nFifth, you should use a boolean variable to keep track\
    \ of whether you found a prime number or not. \nSixth, you should use a boolean\
    \ variable to keep track of whether you found a prime number or not. \nSeventh,\
    \ you should use a boolean variable to keep track of whether you found a prime\
    \ number or not. \nEighth, you should use a boolean variable to keep track of\
    \ whether you found a prime number or not. \nNinth, you should use a boolean variable\
    \ to keep track of whether you found a prime number or not. \nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp998p4gsp.d(32): Error: declaration expected, not `<`\\n/tmp/tmp998p4gsp.d(35):\
    \ Error: unterminated character constant\\n/tmp/tmp998p4gsp.d(63): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp998p4gsp.d(64): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp998p4gsp.d(65): Error: declaration expected, not `assert`\\\
    n/tmp/tmp998p4gsp.d(66): Error: declaration expected, not `assert`\\n/tmp/tmp998p4gsp.d(67):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp998p4gsp.d(68): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp998p4gsp.d(69): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp998p4gsp.d(70): Error: declaration expected, not `assert`\\\
    n/tmp/tmp998p4gsp.d(71): Error: declaration expected, not `assert`\\n/tmp/tmp998p4gsp.d(72):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp998p4gsp.d(73): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp998p4gsp.d(74): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp998p4gsp.d(75): Error: declaration expected, not `assert`\\\
    n/tmp/tmp998p4gsp.d(76): Error: unrecognized declaration\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp998p4gsp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i=2;i<=sqrt(n);i++)\n\
    \    {\n        if(n%i==0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp27fpajhq.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp27fpajhq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i, p, q;\n    bool prime;\n    \n\
    \    p = 2;\n    q = n;\n    prime = true;\n    \n    while (q > 0) {\n      \
    \  if (p % q == 0) {\n            prime = false;\n            break;\n       \
    \ }\n        p += 1;\n        q = p + (q / p);\n    }\n    \n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThe first one is a bit too slow, since it uses `sqrt` which\
    \ is not very efficient. `is_prime` can be implemented much more efficiently by\
    \ using a sieve.\n<|/ c |>\n<| c |>\nThe second one is not correct. `is_prime(6)`\
    \ returns `true`, but `is_prime(7)` returns `false`. `is_prime(7)` returns `true`\
    \ because `7` is divisible by `2` and `3`.\n<|/ c |>\n<| c |>\nThe first one is\
    \ not correct. `is_prime(6)` returns `true`, but `is_prime(7)` returns `false`.\
    \ `is_prime(7)` returns `true` because `7` is divisible by `2` and `3`.\n<|/ c\
    \ |>\n<| c |>\nThe first one is not correct. `is_prime(6)` returns `true`, but\
    \ `is_prime(7)` returns `false`. `is_prime(7)` returns `true` because `7` is divisible\
    \ by `2` and `3`.\n<|/ c |>\n<| c |>\nThe first one is not correct. `is_prime(6)`\
    \ returns `true`, but `is_prime(7)` returns `false`. `is_prime(7)` returns `true`\
    \ because `7` is divisible by `2` and `3`.\n<|/ c |>\n<| a tags=c++,primes,algorithm\
    \ |>\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgwa1z_oz.d(34): Error: declaration expected, not `<`\\n/tmp/tmpgwa1z_oz.d(57):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpgwa1z_oz.d(58): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpgwa1z_oz.d(59): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpgwa1z_oz.d(60): Error: declaration expected, not `assert`\\\
    n/tmp/tmpgwa1z_oz.d(61): Error: declaration expected, not `assert`\\n/tmp/tmpgwa1z_oz.d(62):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpgwa1z_oz.d(63): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpgwa1z_oz.d(64): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpgwa1z_oz.d(65): Error: declaration expected, not `assert`\\\
    n/tmp/tmpgwa1z_oz.d(66): Error: declaration expected, not `assert`\\n/tmp/tmpgwa1z_oz.d(67):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpgwa1z_oz.d(68): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpgwa1z_oz.d(69): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpgwa1z_oz.d(70): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwa1z_oz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI agree with your analysis. But I believe that `is_prime`\
    \ should return `true` if the number is prime and `false` otherwise. `is_prime(6)`\
    \ should return `false` because `6` is not a prime number.\n<|/ c |>\n<| c |>\n\
    I agree with you. I just wanted to show that you can use a `bool` variable and\
    \ set it to `true` or `false` depending on the result of the `is_prime` function.\n\
    <|/ c |>\n<| c |>\nI agree with you. I just wanted to show that you can use a\
    \ `bool` variable and set it to `true` or `false` depending on the result of the\
    \ `is_prime` function.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to\
    \ show that you can use a `bool` variable and set it to `true` or `false` depending\
    \ on the result of the `is_prime` function.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ I just wanted to show that you can use a `bool` variable and set it to `true`\
    \ or `false` depending on the result of the `is_prime` function.\n<|/ c |>\n<|\
    \ a dscore=2 |>\nI agree with others that you shouldn't use recursion for this.\
    \ However, if you really want to use recursion, here's a solution:\n<code>\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa2x9ydxc.d(34): Error: declaration expected, not `<`\\n/tmp/tmpa2x9ydxc.d(52):\
    \ Error: unterminated character constant\\n/tmp/tmpa2x9ydxc.d(52): Error: unterminated\
    \ character constant\\n/tmp/tmpa2x9ydxc.d(58): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmpa2x9ydxc.d(59): Error: declaration expected, not `assert`\\\
    n/tmp/tmpa2x9ydxc.d(60): Error: declaration expected, not `assert`\\n/tmp/tmpa2x9ydxc.d(61):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpa2x9ydxc.d(62): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpa2x9ydxc.d(63): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpa2x9ydxc.d(64): Error: declaration expected, not `assert`\\\
    n/tmp/tmpa2x9ydxc.d(65): Error: declaration expected, not `assert`\\n/tmp/tmpa2x9ydxc.d(66):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpa2x9ydxc.d(67): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpa2x9ydxc.d(68): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpa2x9ydxc.d(69): Error: declaration expected, not `assert`\\\
    n/tmp/tmpa2x9ydxc.d(70): Error: declaration expected, not `assert`\\n/tmp/tmpa2x9ydxc.d(71):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpa2x9ydxc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= n/2; ++i)\n    {\n        if (n % i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4rpdjdkc.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp4rpdjdkc.__unittest_L38_C1()\
    \ [0x427b2a]\\n??:? void tmp4rpdjdkc.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x67d88554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime = true;\n \
    \   for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n%i == 0)\n        {\n  \
    \          is_prime = false;\n            break;\n        }\n    }\n    return\
    \ is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptfjr24co.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptfjr24co.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1)\n    {\n        prime = false;\n    }\n    else\n    {\n        prime\
    \ = true;\n        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if (n\
    \ % i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis is not an answer to the question. He is asking for a way to\
    \ find prime numbers, not how to find prime numbers. He is also asking for a way\
    \ to find prime numbers, not how to find prime numbers.\n<|/ c |>\n<| c |>\nThis\
    \ is not an answer to the question. He is asking for a way to find prime numbers,\
    \ not how to find prime numbers. He is also asking for a way to find prime numbers,\
    \ not how to find prime numbers.\n<|/ c |>\n<| c |>\nThe question was \"how to\
    \ find prime numbers\" and the answer is \"use Sieve of Eratosthenes\". The OP\
    \ has already implemented the Sieve of Eratosthenes and he is asking how to find\
    \ prime numbers. He has also implemented the Sieve of Eratosthenes and he is asking\
    \ how to find prime numbers. He has also implemented the Sieve of Eratosthenes\
    \ and he is asking how to find prime numbers. He has also implemented the Sieve\
    \ of Eratosthenes and he is asking how to find prime numbers. He has also implemented\
    \ the Sieve of Eratosthenes and he is asking how to find prime numbers. He has\
    \ also implemented the Sieve of Eratosthenes and he is asking how to find prime\
    \ numbers. He has also implemented the Sieve of Eratosthenes and he is asking\
    \ how to find prime numbers. He has also implemented the Sieve of Eratosthenes\
    \ and he is asking how to find prime numbers. He has also implemented the Sieve\
    \ of Eratosthenes and he is asking how to find prime numbers. He has also implemented\
    \ the Sieve of Eratosthenes and he is asking how to find prime numbers. He has\
    \ also implemented the Sieve of Eratosthenes and he is asking how to find prime\
    \ numbers.\n<|/ c |>\n<| c |>\nThe OP has already implemented the Sieve of Er\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp80_vlkes.d(43): Error: declaration expected, not `<`\\n/tmp/tmp80_vlkes.d(60):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp80_vlkes.d(61): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp80_vlkes.d(62): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp80_vlkes.d(63): Error: declaration expected, not `assert`\\\
    n/tmp/tmp80_vlkes.d(64): Error: declaration expected, not `assert`\\n/tmp/tmp80_vlkes.d(65):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp80_vlkes.d(66): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp80_vlkes.d(67): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp80_vlkes.d(68): Error: declaration expected, not `assert`\\\
    n/tmp/tmp80_vlkes.d(69): Error: declaration expected, not `assert`\\n/tmp/tmp80_vlkes.d(70):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp80_vlkes.d(71): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp80_vlkes.d(72): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp80_vlkes.d(73): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80_vlkes.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any library functions. I only have to implement the is_prime\
    \ function myself.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't use any\
    \ library functions.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your\
    \ code, but I got an infinite loop. I am not sure why.\n<|/ c |>\n<| c |>\n: I\
    \ added a version that doesn't use any library functions. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got an infinite\
    \ loop. I am not sure why.\n<|/ c |>\n<| a tags=c++,primes |>\n<code>\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplf2vzohd.d(34): Error: declaration expected, not `<`\\n/tmp/tmplf2vzohd.d(40):\
    \ Error: unterminated character constant\\n/tmp/tmplf2vzohd.d(46): Error: unterminated\
    \ character constant\\n/tmp/tmplf2vzohd.d(57): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmplf2vzohd.d(58): Error: declaration expected, not `assert`\\\
    n/tmp/tmplf2vzohd.d(59): Error: declaration expected, not `assert`\\n/tmp/tmplf2vzohd.d(60):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmplf2vzohd.d(61): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmplf2vzohd.d(62): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmplf2vzohd.d(63): Error: declaration expected, not `assert`\\\
    n/tmp/tmplf2vzohd.d(64): Error: declaration expected, not `assert`\\n/tmp/tmplf2vzohd.d(65):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmplf2vzohd.d(66): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmplf2vzohd.d(67): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmplf2vzohd.d(68): Error: declaration expected, not `assert`\\\
    n/tmp/tmplf2vzohd.d(69): Error: declaration expected, not `assert`\\n/tmp/tmplf2vzohd.d(70):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmplf2vzohd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n == 2)\n    {\n        prime = false;\n    }\n    else\
    \ if (n % 2 == 0)\n    {\n        prime = false;\n    }\n    else\n    {\n   \
    \     for (i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n\
    \            {\n                prime = false;\n                break;\n     \
    \       }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxcpurit7.d(37): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxcpurit7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    \n\
    \    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\n\
    Thanks for your answer. I'm still a beginner at C++ and I didn't know that there\
    \ was a library for that. I'll look into it right away.\n<|/ c |>\n<| c |>\nI\
    \ added a link to an implementation of a sieve of Eratosthenes in C++.\n<|/ c\
    \ |>\n<| c |>\nThanks for your help. I implemented the code and it works perfectly.\
    \ Thanks again.\n<|/ c |>\n<| c |>\nThe code you posted is wrong. `is_prime(6)`\
    \ returns `true` because `6` is prime, `is_prime(101)` returns `false` because\
    \ `101` is prime, `is_prime(11)` returns `false` because `11` is prime, `is_prime(13441)`\
    \ returns `false` because `13441` is prime, `is_prime(61)` returns `true` because\
    \ `61` is prime, and `is_prime(4)` returns `false` because `4` is prime. `is_prime(1)`\
    \ returns `false` because `1` is prime. `is_prime(2)` returns `false` because\
    \ `2` is prime. `is_prime(7)` returns `false` because `7` is prime. `is_prime(8)`\
    \ returns `false` because `8` is prime. `is_prime(9)` returns `false` because\
    \ `9` is prime. `is_prime(10)` returns `false` because `10` is prime. `is_prime(11)`\
    \ returns `false` because `11` is prime. `is_prime(12)` returns `false` because\
    \ `12` is prime. `is_prime(13)` returns `false` because `13` is prime. `is_prime(14)`\
    \ returns `false` because `14` is prime. `is_prime(15)` returns `false` because\
    \ `15` is prime. `is_prime(16)` returns `false` because `16` is prime. `is_prime(17)`\
    \ returns `false` because `17` is prime. `is_prime(18)` returns `false` because\
    \ `18` is prime. `is_prime(19)` returns `false` because `19` is prime. `is_prime(20)`\
    \ returns `false` because `20\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpztii9owm.d(35): Error: declaration expected, not `<`\\n/tmp/tmpztii9owm.d(38):\
    \ Error: unterminated character constant\\n/tmp/tmpztii9owm.d(38): Error: unterminated\
    \ character constant\\n/tmp/tmpztii9owm.d(38): Error: unterminated character constant\\\
    n/tmp/tmpztii9owm.d(47): Error: unterminated string constant starting at /tmp/tmpztii9owm.d(47)\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztii9owm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2; i <= sqrt(n); ++i) \n        {\n            if (n\
    \ % i == 0) \n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdwi_7g3x.d(33): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdwi_7g3x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    \n\
    \    if (n <= 1)\n    {\n        return false;\n    }\n    \n    for (i = 2; i\
    \ <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprm2nkafj.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprm2nkafj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2)\n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if (n %\
    \ i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0jr5k0ew.d(33): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0jr5k0ew.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    \n\
    \    if (n <= 1)\n        return prime;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps_vxdqmd.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps_vxdqmd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6jezu008.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6jezu008.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i ==\
    \ 0)\n        {\n            prime = false;\n            break;\n        }\n \
    \   }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpivg2nyok.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpivg2nyok.__unittest_L38_C1()\
    \ [0x427b2a]\\n??:? void tmpivg2nyok.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x6a2b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    if (n == 2) return true;\n    \n    prime = true;\n\
    \    for (i = 3; prime && i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\
    \ prime = false;\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzqzhdeed.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzqzhdeed.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqdpegfq2.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqdpegfq2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    if (n < 2)\n    {\n        prime = false;\n    }\n    else\n    {\n\
    \        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if (n % i == 0)\n\
    \            {\n                prime = false;\n                break;\n     \
    \       }\n        }\n    }\n    return prime;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    The `sqrt` function should be `sqrtl` on 64-bit platforms.\n<|/ c |>\n<| c |>\n\
    `sqrt` on 64-bit platforms returns `double`, not `long double`.\n<|/ c |>\n<|\
    \ c |>\n: Yes, I know. My comment was meant as a general remark, not as a criticism.\
    \ `sqrtl` would be the correct function to use on 64-bit platforms.\n<|/ c |>\n\
    <| c |>\n: I agree with you. `sqrtl` would be the correct function to use on 64-bit\
    \ platforms.\n<|/ c |>\n<| c |>\n: I agree with you. `sqrtl` would be the correct\
    \ function to use on 64-bit platforms.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ewj3xbm.d(42): Error: declaration expected, not `<`\\n/tmp/tmp4ewj3xbm.d(65):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp4ewj3xbm.d(66): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp4ewj3xbm.d(67): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp4ewj3xbm.d(68): Error: declaration expected, not `assert`\\\
    n/tmp/tmp4ewj3xbm.d(69): Error: declaration expected, not `assert`\\n/tmp/tmp4ewj3xbm.d(70):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp4ewj3xbm.d(71): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp4ewj3xbm.d(72): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp4ewj3xbm.d(73): Error: declaration expected, not `assert`\\\
    n/tmp/tmp4ewj3xbm.d(74): Error: declaration expected, not `assert`\\n/tmp/tmp4ewj3xbm.d(75):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp4ewj3xbm.d(76): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp4ewj3xbm.d(77): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp4ewj3xbm.d(78): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ewj3xbm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    if (n < 2) return prime;\n    if (n == 2) return true;\n    for (i\
    \ = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            prime = false;\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4ulsz4rw.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e85]\\n??:? void tmp4ulsz4rw.__unittest_L32_C1()\
    \ [0x427a7a]\\n??:? void tmp4ulsz4rw.__modtest() [0x427c04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa3e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa15]\\n??:? runModuleUnitTests [0x42b981]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42825b]\\n??:? _d_run_main [0x4281c6]\\n??:? main [0x427c17]\\\
    n??:? __libc_start_main [0x9bcd4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuzpfxl5r.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpuzpfxl5r.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpuzpfxl5r.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xfc490554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxv6d4d0r.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxv6d4d0r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbzovugji.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpbzovugji.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpbzovugji.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xdc80c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| a |>\n<code>\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1zk9_fvi.d(35): Error: declaration expected, not `<`\\n/tmp/tmp1zk9_fvi.d(43):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1zk9_fvi.d(44): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1zk9_fvi.d(45): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1zk9_fvi.d(46): Error: declaration expected, not `assert`\\\
    n/tmp/tmp1zk9_fvi.d(47): Error: declaration expected, not `assert`\\n/tmp/tmp1zk9_fvi.d(48):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1zk9_fvi.d(49): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1zk9_fvi.d(50): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1zk9_fvi.d(51): Error: declaration expected, not `assert`\\\
    n/tmp/tmp1zk9_fvi.d(52): Error: declaration expected, not `assert`\\n/tmp/tmp1zk9_fvi.d(53):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1zk9_fvi.d(54): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1zk9_fvi.d(55): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1zk9_fvi.d(56): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1zk9_fvi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\n\
    I believe that your `is_prime` function will fail to detect prime numbers that\
    \ are divisible by `2`.\n<|/ c |>\n<| c |>\n: Yes, you're right. I've edited my\
    \ answer to fix that.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly for small numbers but when I try it on large numbers it takes forever\
    \ to finish. Do you know why that is?\n<|/ c |>\n<| c |>\n: It takes forever to\
    \ finish because you're not using the Sieve of Eratosthenes properly. You're using\
    \ a sieve of Eratosthenes that only works for numbers up to `sqrt(n)`. You're\
    \ also not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the sieve properly, and you're not using the sieve properly,\
    \ and you're not using the si\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ncioi32.d(35): Error: declaration expected, not `<`\\n/tmp/tmp3ncioi32.d(41):\
    \ Error: unterminated character constant\\n/tmp/tmp3ncioi32.d(41): Error: unterminated\
    \ character constant\\n/tmp/tmp3ncioi32.d(47): Error: unterminated character constant\\\
    n/tmp/tmp3ncioi32.d(47): Error: unterminated character constant\\n/tmp/tmp3ncioi32.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmp3ncioi32.d(47): Error: unterminated\
    \ character constant\\n/tmp/tmp3ncioi32.d(47): Error: unterminated character constant\\\
    n/tmp/tmp3ncioi32.d(47): Error: unterminated character constant\\n/tmp/tmp3ncioi32.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmp3ncioi32.d(47): Error: unterminated\
    \ character constant\\n/tmp/tmp3ncioi32.d(47): Error: unterminated character constant\\\
    n/tmp/tmp3ncioi32.d(47): Error: unterminated character constant\\n/tmp/tmp3ncioi32.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmp3ncioi32.d(47): Error: unterminated\
    \ character constant\\n/tmp/tmp3ncioi32.d(47): Error: unterminated character constant\\\
    n/tmp/tmp3ncioi32.d(47): Error: unterminated character constant\\n/tmp/tmp3ncioi32.d(47):\
    \ Error: unterminated character constant\\n/tmp/tmp3ncioi32.d(47): Error: unterminated\
    \ character constant\\n/tmp/tmp3ncioi32.d(47): Error: unterminated character constant\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ncioi32.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i, k;\n    bool prime;\n    \n  \
    \  if (n < 2)\n    {\n        return false;\n    }\n    \n    prime = true;\n\
    \    \n    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n   \
    \ assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1)\n    {\n        return false;\n    }\n    \n    prime = true;\n   \
    \ \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n     \
    \   {\n            prime = false;\n            break;\n        }\n    }\n    \n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_kl_e9jx.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_kl_e9jx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\nThe `sqrt` function should\
    \ be `std::sqrt`.\n<|/ c |>\n<| c |>\n`sqrt` isn't a function in C++, it's a macro.\n\
    <|/ c |>\n<| c |>\n: It's a macro in C++11 and later. http://en.cppreference.com/w/cpp/numeric/math/sqrt\n\
    <|/ c |>\n<| c |>\n: Thanks, I didn't know that. I've edited my answer.\n<|/ c\
    \ |>\n<| c |>\n: Thanks, I didn't know that. I've edited my answer.\n<|/ c |>\n\
    <| a tags=c++,primes,algorithm |>\n<code>\nunittest\n{\n    alias candidate =\
    \ is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxapuwz5d.d(34): Error: declaration expected, not `<`\\n/tmp/tmpxapuwz5d.d(40):\
    \ Error: unterminated character constant\\n/tmp/tmpxapuwz5d.d(40): Error: unterminated\
    \ character constant\\n/tmp/tmpxapuwz5d.d(43): Error: unterminated character constant\\\
    n/tmp/tmpxapuwz5d.d(46): Error: unterminated character constant\\n/tmp/tmpxapuwz5d.d(46):\
    \ Error: unterminated character constant\\n/tmp/tmpxapuwz5d.d(49): Error: unterminated\
    \ character constant\\n/tmp/tmpxapuwz5d.d(49): Error: unterminated character constant\\\
    n/tmp/tmpxapuwz5d.d(57): Error: declaration expected, not `assert`\\n/tmp/tmpxapuwz5d.d(58):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpxapuwz5d.d(59): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpxapuwz5d.d(60): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpxapuwz5d.d(61): Error: declaration expected, not `assert`\\\
    n/tmp/tmpxapuwz5d.d(62): Error: declaration expected, not `assert`\\n/tmp/tmpxapuwz5d.d(63):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpxapuwz5d.d(64): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpxapuwz5d.d(65): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpxapuwz5d.d(66): Error: declaration expected, not `assert`\\\
    n/tmp/tmpxapuwz5d.d(67): Error: declaration expected, not `assert`\\n/tmp/tmpxapuwz5d.d(68):\
    \ Error: declaration expected, not `assert`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxapuwz5d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_xz9bmv.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpf_xz9bmv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprnfpd1z1.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnfpd1z1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy8qzf6hx.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpy8qzf6hx.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpy8qzf6hx.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xf4046554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i=2;i<=sqrt(n);i++)\n\
    \    {\n        if(n%i==0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\n`sqrt(n)`\
    \ should be `sqrt(n)+1`\n<|/ c |>\n<| c |>\nYes, I missed that one. Thanks.\n\
    <|/ c |>\n<| c |>\n`sqrt(n)` should be `sqrt(n+1)`\n<|/ c |>\n<| c |>\n`sqrt(n)`\
    \ should be `sqrt(n+1)`\n<|/ c |>\n<| c |>\n`sqrt(n)` should be `sqrt(n+1)`\n\
    <|/ c |>\n<| a tags=c++,primes |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvf6irt0_.d(32): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvf6irt0_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1a8u71lb.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp1a8u71lb.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp1a8u71lb.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xe9489554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9s1fyq5o.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9s1fyq5o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; i++)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphbhbrbmd.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmphbhbrbmd.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmphbhbrbmd.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xcb2fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\n</code>\n\
    <|/ a tags=c++,primes |>\n<| c |>\nThis code doesn't work. `is_prime(6)` returns\
    \ `true` but `is_prime(101)` returns `false`\n<|/ c |>\n<| c |>\nThe code works\
    \ fine for me. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes,\
    \ I copied it correctly. I'm running it on ideone.com.\n<|/ c |>\n<| c |>\nI ran\
    \ it on ideone.com, too. Works fine. Are you sure you copied it correctly?\n<|/\
    \ c |>\n<| c |>\nYes, I copied it correctly. I'm running it on ideone.com. Works\
    \ fine. Are you sure you copied it correctly?\n<|/ c |>\n<| a tags=c++,primes\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4swol_2n.d(34): Error: declaration expected, not `<`\\n/tmp/tmp4swol_2n.d(37):\
    \ Error: unterminated character constant\\n/tmp/tmp4swol_2n.d(43): Error: unterminated\
    \ character constant\\n/tmp/tmp4swol_2n.d(49): Error: unterminated character constant\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4swol_2n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7vqzjnyl.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp7vqzjnyl.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp7vqzjnyl.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xb2691554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2)\n    {\n        return false;\n    }\n    \n    prime = true;\n    \n\
    \    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n\
    \    {\n        if(n%i == 0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvby4wb1u.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpvby4wb1u.__unittest_L32_C1()\
    \ [0x427b1e]\\n??:? void tmpvby4wb1u.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0x5fd8d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ik5_ak_.d(34): Error: declaration expected, not `<`\\n/tmp/tmp1ik5_ak_.d(42):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1ik5_ak_.d(43): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1ik5_ak_.d(44): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1ik5_ak_.d(45): Error: declaration expected, not `assert`\\\
    n/tmp/tmp1ik5_ak_.d(46): Error: declaration expected, not `assert`\\n/tmp/tmp1ik5_ak_.d(47):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1ik5_ak_.d(48): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1ik5_ak_.d(49): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1ik5_ak_.d(50): Error: declaration expected, not `assert`\\\
    n/tmp/tmp1ik5_ak_.d(51): Error: declaration expected, not `assert`\\n/tmp/tmp1ik5_ak_.d(52):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1ik5_ak_.d(53): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1ik5_ak_.d(54): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1ik5_ak_.d(55): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ik5_ak_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2) return prime;\n    if (n == 2) return true;\n\
    \    \n    for (i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n    \
    \        prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu97d96jt.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e85]\\n??:? void tmpu97d96jt.__unittest_L39_C1()\
    \ [0x427a7a]\\n??:? void tmpu97d96jt.__modtest() [0x427c04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa3e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa15]\\n??:? runModuleUnitTests [0x42b981]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42825b]\\n??:? _d_run_main [0x4281c6]\\n??:? main [0x427c17]\\\
    n??:? __libc_start_main [0x9395b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2) \n    {\n        prime = false;\n    }\n    else\
    \ \n    {\n        for (i = 2; i <= n; ++i) \n        {\n            if (n % i\
    \ == 0) \n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\n</code>\n<|/ a tags=primes,c++,algorithm,math\
    \ |>\n<| c |>\nThis is not the fastest algorithm for prime number checking, but\
    \ it is very easy to understand.\n<|/ c |>\n<| c |>\n: I agree, it's easy to understand,\
    \ but it's also very slow.\n<|/ c |>\n<| c |>\n: I agree, it's easy to understand,\
    \ but it's also very slow.\n<|/ c |>\n<| c |>\n: I agree, it's easy to understand,\
    \ but it's also very slow.\n<|/ c |>\n<| c |>\n: I agree, it's easy to understand,\
    \ but it's also very slow.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcswkgdg9.d(45): Error: declaration expected, not `<`\\n/tmp/tmpcswkgdg9.d(51):\
    \ Error: unterminated character constant\\n/tmp/tmpcswkgdg9.d(51): Error: unterminated\
    \ character constant\\n/tmp/tmpcswkgdg9.d(54): Error: unterminated character constant\\\
    n/tmp/tmpcswkgdg9.d(54): Error: unterminated character constant\\n/tmp/tmpcswkgdg9.d(57):\
    \ Error: unterminated character constant\\n/tmp/tmpcswkgdg9.d(57): Error: unterminated\
    \ character constant\\n/tmp/tmpcswkgdg9.d(60): Error: unterminated character constant\\\
    n/tmp/tmpcswkgdg9.d(60): Error: unterminated character constant\\n/tmp/tmpcswkgdg9.d(68):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpcswkgdg9.d(69): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpcswkgdg9.d(70): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpcswkgdg9.d(71): Error: declaration expected, not `assert`\\\
    n/tmp/tmpcswkgdg9.d(72): Error: declaration expected, not `assert`\\n/tmp/tmpcswkgdg9.d(73):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpcswkgdg9.d(74): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpcswkgdg9.d(75): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpcswkgdg9.d(76): Error: declaration expected, not `assert`\\\
    n/tmp/tmpcswkgdg9.d(77): Error: declaration expected, not `assert`\\n/tmp/tmpcswkgdg9.d(78):\
    \ Error: declaration expected, not `assert`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcswkgdg9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1)\n    {\n        prime = true;\n    }\n    else\n    {\n        prime\
    \ = false;\n        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if\
    \ (n % i == 0)\n            {\n                prime = true;\n               \
    \ break;\n            }\n        }\n    }\n    return prime;\n}\n</code>\n<|/\
    \ a tags=c++,primes |>\n<| c |>\nI like your solution, but I believe that it is\
    \ more efficient to check only odd numbers. You also don't need to check even\
    \ numbers, because they are already primes.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I just wanted to give the OP the idea of how to solve the problem. Thanks for\
    \ your comment!\n<|/ c |>\n<| c |>\nThe first for loop should be `for (i = 2;\
    \ i <= sqrt(n); ++i)`\n<|/ c |>\n<| c |>\nThanks for your comment! I edited my\
    \ answer.\n<|/ c |>\n<| a tags=c++,primes |>\n<code>\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3g3rhf1l.d(43): Error: declaration expected, not `<`\\n/tmp/tmp3g3rhf1l.d(46):\
    \ Error: unterminated character constant\\n/tmp/tmp3g3rhf1l.d(63): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp3g3rhf1l.d(64): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp3g3rhf1l.d(65): Error: declaration expected, not `assert`\\\
    n/tmp/tmp3g3rhf1l.d(66): Error: declaration expected, not `assert`\\n/tmp/tmp3g3rhf1l.d(67):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp3g3rhf1l.d(68): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp3g3rhf1l.d(69): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp3g3rhf1l.d(70): Error: declaration expected, not `assert`\\\
    n/tmp/tmp3g3rhf1l.d(71): Error: declaration expected, not `assert`\\n/tmp/tmp3g3rhf1l.d(72):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp3g3rhf1l.d(73): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp3g3rhf1l.d(74): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp3g3rhf1l.d(75): Error: declaration expected, not `assert`\\\
    n/tmp/tmp3g3rhf1l.d(76): Error: unrecognized declaration\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g3rhf1l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoc76tbpr.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpoc76tbpr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0) return\
    \ false;\n    if (n % 3 == 0) return false;\n    \n    prime = true;\n    \n \
    \   for (i = 3; prime && i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\
    \ prime = false;\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfr_ofgfy.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfr_ofgfy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= n/2; ++i)\n    {\n        if (n % i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaohoki3c.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpaohoki3c.__unittest_L38_C1()\
    \ [0x427b2a]\\n??:? void tmpaohoki3c.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0xc609c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n\tlong i;\n\tbool prime = true;\n\t\n\tfor(i\
    \ = 2; i <= sqrt(n); ++i)\n\t{\n\t\tif(n % i == 0)\n\t\t{\n\t\t\tprime = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb49rskb2.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpb49rskb2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime = true;\n \
    \   \n    if (n < 2) \n    {\n        is_prime = false;\n    }\n    else if (n\
    \ == 2) \n    {\n        is_prime = true;\n    }\n    else if (n % 2 == 0) \n\
    \    {\n        is_prime = false;\n    }\n    else if (n % 3 == 0) \n    {\n \
    \       is_prime = false;\n    }\n    else if (n % 5 == 0) \n    {\n        is_prime\
    \ = false;\n    }\n    else if (n % 7 == 0) \n    {\n        is_prime = false;\n\
    \    }\n    else if (n % 11 == 0) \n    {\n        is_prime = false;\n    }\n\
    \    else if (n % 13 == 0) \n    {\n        is_prime = false;\n    }\n    else\
    \ if (n % 17 == 0) \n    {\n        is_prime = false;\n    }\n    else if (n %\
    \ 19 == 0) \n    {\n        is_prime = false;\n    }\n    else if (n % 23 == 0)\
    \ \n    {\n        is_prime = false;\n    }\n    else if (n % 29 == 0) \n    {\n\
    \        is_prime = false;\n    }\n    else if (n % 31 == 0) \n    {\n       \
    \ is_prime = false;\n    }\n    else if (n % 37 == 0) \n    {\n        is_prime\
    \ = false;\n    }\n    else if (n % 41 == 0) \n    {\n        is_prime = false;\n\
    \    }\n    else if (n % 43 == 0) \n    {\n        is_prime = false;\n    }\n\
    \    else if (n % 47 == 0) \n    {\n        is_prime = false;\n    }\n    else\
    \ if (n % 53 == 0) \n    {\n        is_prime = false;\n    }\n    else if (n %\
    \ 59 == 0) \n    {\n        is_prime = false;\n    }\n    else if (n % 61 == 0)\
    \ \n    {\n        is_prime = false;\n    }\n    else if (n % 67 == 0) \n    {\n\
    \        is_prime = false;\n    }\n    else if (n % 71 == 0) \n    {\n       \
    \ is_prime = false;\n    }\n    else if (n % 73 == 0) \n    {\n        is_prime\
    \ = false;\n    }\n    else if (n % 79 == 0) \n    {\n        is_prime = false;\n\
    \    }\n    else if (n % 83 == 0) \n    {\n        is_prime = false;\n    }\n\
    \    else if (n % 89 == 0) \n    {\n        is_prime = false;\n    }\n    else\
    \ if (n % 97 == 0) \n    {\n        is_prime = false;\n    }\n    else if (n %\
    \ 101 == 0) \n    {\n        is_prime = false;\n    }\n    else if (n % 103 ==\
    \ 0) \n    {\n        is_prime = false;\n    }\n    else if (n % 107 == 0) \n\
    \    {\n        is_prime = false;\n    }\n    else if (n % 111 == 0) \n    {\n\
    \        is_prime = false;\n    }\n    else if (n % 113 == 0) \n    {\n      \
    \  is_prime = false;\n    }\n    else if (n % 121 == 0) \n    {\n        is_prime\
    \ = false;\n    }\n    else if (n % 123 == 0) \n    {\n        is_prime = false;\n\
    \    }\n    else if (n % 127 == 0) \n    {\n        is_prime = false;\n    }\n\
    \    else if (n % 131 == 0) \n    {\n        is_prime = false;\n    }\n\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbsq_ok99.d(170): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsq_ok99.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n\
    \    {\n        if(n%i == 0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw1qx8rc1.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpw1qx8rc1.__unittest_L32_C1()\
    \ [0x427b1e]\\n??:? void tmpw1qx8rc1.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0x31b6e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpscgd3y6q.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpscgd3y6q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long j;\n    bool prime;\n\
    \    \n    prime = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n  \
    \      if (n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwa4rab8b.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwa4rab8b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1pp8072s.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1pp8072s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=primes,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp338w1n6m.d(34): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp338w1n6m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpus0l5dpk.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpus0l5dpk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplyuew38k.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmplyuew38k.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmplyuew38k.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xc4c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1) return false;\n    if (n == 2) return true;\n    \n    for (i = 3;\
    \ i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n\
    \    \n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe first one\
    \ doesn't work. `is_prime(6)` returns true.\n<|/ c |>\n<| c |>\nI didn't test\
    \ it, but I believe it works. I tested it on `is_prime(6)` returning `true`.\n\
    <|/ c |>\n<| c |>\nYes, it works. But it takes too much time for big numbers.\
    \ And it also doesn't work for `is_prime(101)` returning `true`.\n<|/ c |>\n<|\
    \ c |>\nI tested it on `is_prime(101)` returning `true` and the first one took\
    \ less than a second. How much time did it take for you?\n<|/ c |>\n<| c |>\n\
    I tested it on `is_prime(101)` returning `true` and the first one took less than\
    \ a second. How much time did it take for you?\n<|/ c |>\n<| a tags=c++,primes,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpikg0trdm.d(35): Error: declaration expected, not `<`\\n/tmp/tmpikg0trdm.d(38):\
    \ Error: unterminated character constant\\n/tmp/tmpikg0trdm.d(41): Error: unterminated\
    \ character constant\\n/tmp/tmpikg0trdm.d(44): Error: unterminated character constant\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikg0trdm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    \n\
    \    if (n <= 1)\n    {\n        return false;\n    }\n    \n    for (i = 2; i\
    \ <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfaq4kuej.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfaq4kuej.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyect_lcy.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyect_lcy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqr0hcqhw.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqr0hcqhw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1) return false;\n    if (n <= 3) return true;\n    \n    prime = true;\n\
    \    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0) prime\
    \ = false;\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpagch_jw3.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpagch_jw3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i = 2; i <= limit; ++i)\n    {\n        if(n % i == 0)\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmvhngolw.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvhngolw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not the most efficient\
    \ way to test if a number is prime. `sqrt(n)` will take O(log n) time. Better\
    \ would be to test `n % i == 0` for all `i` up to `sqrt(n)`.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I wanted to keep it simple and easy to understand.\n<|/\
    \ c |>\n<| c |>\nI agree with you too, but I wanted to keep it simple and easy\
    \ to understand.\n<|/ c |>\n<| c |>\nI agree with you too, but I wanted to keep\
    \ it simple and easy to understand.\n<|/ c |>\n<| c |>\nI agree with you too,\
    \ but I wanted to keep it simple and easy to understand.\n<|/ c |>\n<| a tags=c++,primes,c\
    \ |>\n<code>\n#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphupaxw43.d(35): Error: declaration expected, not `<`\\n/tmp/tmphupaxw43.d(61):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmphupaxw43.d(62): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmphupaxw43.d(63): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmphupaxw43.d(64): Error: declaration expected, not `assert`\\\
    n/tmp/tmphupaxw43.d(65): Error: declaration expected, not `assert`\\n/tmp/tmphupaxw43.d(66):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmphupaxw43.d(67): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmphupaxw43.d(68): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmphupaxw43.d(69): Error: declaration expected, not `assert`\\\
    n/tmp/tmphupaxw43.d(70): Error: declaration expected, not `assert`\\n/tmp/tmphupaxw43.d(71):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmphupaxw43.d(72): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmphupaxw43.d(73): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmphupaxw43.d(74): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphupaxw43.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime;\n    \n  \
    \  is_prime = true;\n    \n    if (n == 1)\n    {\n        is_prime = false;\n\
    \    }\n    else\n    {\n        for (i = 2; i <= n; i++)\n        {\n       \
    \     if (n % i == 0)\n            {\n                is_prime = false;\n    \
    \            break;\n            }\n        }\n    }\n    \n    return is_prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi575kjq7.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpi575kjq7.__unittest_L45_C1()\
    \ [0x427a8f]\\n??:? void tmpi575kjq7.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x288f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes |>\n\
    <| c |>\nThis code doesn't work. `is_prime(6)` returns `true` but `is_prime(7)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. I just tested it again and it returns `true` for `is_prime(7)` as well.\n\
    <|/ c |>\n<| c |>\nI tested it again and it returns `true` for `is_prime(7)` as\
    \ well.\n<|/ c |>\n<| c |>\nI tested it again and it returns `true` for `is_prime(7)`\
    \ as well.\n<|/ c |>\n<| c |>\nI tested it again and it returns `true` for `is_prime(7)`\
    \ as well.\n<|/ c |>\n<| a tags=c++,primes,sieve-of-eratosthenes |>\n<code>\n\
    #include <iostream>\n#include <vector>\nusing namespace std;\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdeur5wzk.d(35): Error: declaration expected, not `<`\\n/tmp/tmpdeur5wzk.d(38):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpdeur5wzk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\n</code>\n\
    <|/ a tags=c++,primes |>\n<| c |>\nThe first two lines of `is_prime` can be replaced\
    \ with `return n % 2 == 0;`\n<|/ c |>\n<| c |>\nYes, but that would make the code\
    \ more complicated and less efficient.\n<|/ c |>\n<| c |>\nYes, but that would\
    \ make the code more complicated and less efficient.\n<|/ c |>\n<| c |>\nYes,\
    \ but that would make the code more complicated and less efficient.\n<|/ c |>\n\
    <| c |>\nYes, but that would make the code more complicated and less efficient.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ytm41pw.d(34): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ytm41pw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2)\n    {\n        return false;\n    }\n    \n    prime = true;\n    \n\
    \    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxnh30fw.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmplxnh30fw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return\
    \ false;\n    \n    prime = true;\n    \n    for (i = 3; i * i <= n; i += 2)\n\
    \    {\n        if (n % i == 0) \n        {\n            prime = false;\n    \
    \        break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n \
    \   alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1)\n    {\n        prime = false;\n    }\n    else\n    {\n        prime\
    \ = true;\n        for (i = 2; i <= n / 2; ++i)\n        {\n            if (n\
    \ % i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpioyb09ed.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpioyb09ed.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpioyb09ed.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x8ce6f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2)\n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if (n %\
    \ i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8_140qq.d(33): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpm8_140qq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq9qmd2dl.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpq9qmd2dl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2)\n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2; i <= sqrt(n); i++)\n        {\n            if (n %\
    \ i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkkmvqt4a.d(33): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpkkmvqt4a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpug3dm96f.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpug3dm96f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1reym4fo.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp1reym4fo.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp1reym4fo.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xf2557554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n\
    \    {\n        if(n % i == 0)\n        {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<| c |>\nThe `is_prime` function does not return `true` if the number is\
    \ prime. `is_prime(6)` returns `false` because `6` is not divisible by `2`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed it.\n<|/ c |>\n<| c |>\n\
    `is_prime(6)` returns `false` because `6` is not divisible by `2`. `is_prime(6)`\
    \ returns `false` because `6` is not divisible by `2`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed it.\n<|/ c |>\n<| c |>\n`is_prime(6)` returns\
    \ `false` because `6` is not divisible by `2`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ruyl5tp.d(32): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ruyl5tp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1)\n    {\n        return false;\n    }\n    \n    prime = true;\n   \
    \ \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n     \
    \   {\n            prime = false;\n            break;\n        }\n    }\n    \n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkkp7ddj1.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpkkp7ddj1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfthfg7u4.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfthfg7u4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpid7c_2z1.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpid7c_2z1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyfovn1o9.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpyfovn1o9.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpyfovn1o9.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xa23db554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n <= 1) \n    {\n        return prime;\n    }\n    \n\
    \    for (i = 2; i <= n / 2; ++i) \n    {\n        if (n % i == 0) \n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmx98kilb.d(53): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e7d]\\n??:? void tmpmx98kilb.__unittest_L43_C1()\
    \ [0x427b32]\\n??:? void tmpmx98kilb.__modtest() [0x427c00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bba3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa0d]\\n??:? runModuleUnitTests [0x42b979]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428253]\\n??:? _d_run_main [0x4281be]\\n??:? main [0x427c13]\\\
    n??:? __libc_start_main [0xc0aec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    \n    prime = true;\n    \n    for (i = 2; i <= sqrt(n);\
    \ ++i)\n    {\n        if (n % i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9uomc897.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9uomc897.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i, j, k;\n    bool prime;\n    prime\
    \ = true;\n    \n    for (i = 2; i <= n / 2; ++i)\n    {\n        prime = prime\
    \ && (n % i == 0);\n    }\n    \n    if (prime)\n    {\n        for (i = 2; i\
    \ <= n / 2; ++i)\n        {\n            prime = prime && (n % i == 0);\n    \
    \    }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate =\
    \ is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8o4ftxfo.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ed5]\\n??:? void tmp8o4ftxfo.__unittest_L41_C1()\
    \ [0x427aca]\\n??:? void tmp8o4ftxfo.__modtest() [0x427c54]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbfb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa8e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc21]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa65]\\n??:? runModuleUnitTests [0x42b9d1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428324]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282ab]\\n??:? _d_run_main [0x428216]\\n??:? main [0x427c67]\\\
    n??:? __libc_start_main [0x541d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4rxhbajv.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rxhbajv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg_o80rjk.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpg_o80rjk.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpg_o80rjk.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xc5cda554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return\
    \ false;\n    \n    prime = true;\n    \n    for (i = 3; i * i <= n; i += 2)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    \n    prime = true;\n    for (i = 2; i <= sqrt(n);\
    \ ++i)\n    {\n        if (n % i == 0) prime = false;\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdfzkk889.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdfzkk889.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    if (n < 2) return prime;\n    if (n == 2) return true;\n    if (n\
    \ % 2 == 0) return false;\n    for (i = 3; i * i <= n; i += 2) {\n        if (n\
    \ % i == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjonny1qq.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e9d]\\n??:? void tmpjonny1qq.__unittest_L33_C1()\
    \ [0x427b4e]\\n??:? void tmpjonny1qq.__modtest() [0x427c1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbe9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa2d]\\n??:? runModuleUnitTests [0x42b999]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428273]\\n??:? _d_run_main [0x4281de]\\n??:? main [0x427c2f]\\\
    n??:? __libc_start_main [0xee994554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsmtxn52b.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsmtxn52b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; i++)\n    {\n        if(n\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4j2cp9oa.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j2cp9oa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq0ac0_4e.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpq0ac0_4e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0_zjwiq8.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0_zjwiq8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwxcfttz8.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwxcfttz8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i, limit = (long) sqrt(n);\n    bool\
    \ prime = true;\n    \n    for (i = 2; i <= limit; i++)\n    {\n        if (n\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvfgq73l.d(22): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvfgq73l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2)\n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if (n %\
    \ i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd_to1ion.d(33): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpd_to1ion.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nI believe this algorithm\
    \ is O(n^2) (worst case) since it checks every number up to sqrt(n).\n<|/ c |>\n\
    <| c |>\nYes, but it's only a problem for large numbers. A number that has only\
    \ two factors is a prime number.\n<|/ c |>\n<| c |>\nYes, but it's only a problem\
    \ for large numbers. A number that has only two factors is a prime number.\n<|/\
    \ c |>\n<| c |>\nYes, but it's only a problem for large numbers. A number that\
    \ has only two factors is a prime number.\n<|/ c |>\n<| c |>\nYes, but it's only\
    \ a problem for large numbers. A number that has only two factors is a prime number.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92fb44mf.d(35): Error: declaration expected, not `<`\\n/tmp/tmp92fb44mf.d(41):\
    \ Error: unterminated character constant\\n/tmp/tmp92fb44mf.d(44): Error: unterminated\
    \ character constant\\n/tmp/tmp92fb44mf.d(47): Error: unterminated character constant\\\
    n/tmp/tmp92fb44mf.d(50): Error: unterminated character constant\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92fb44mf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n        {\n          \
    \  prime = false;\n            break;\n        }\n    }\n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_c5ltpls.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp_c5ltpls.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp_c5ltpls.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xfd370554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyot2tn5c.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyot2tn5c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprn_mua65.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprn_mua65.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer to the\
    \ question. He is asking for a way to find prime numbers, not just testing if\
    \ they are prime.\n<|/ c |>\n<| c |>\n: I agree. My answer was more of a \"how\
    \ do I do it\" than an \"how do I do it\" answer. I'll update my answer to reflect\
    \ that.\n<|/ c |>\n<| c |>\n: I updated my answer to include a link to an algorithm\
    \ that does this in C++.\n<|/ c |>\n<| c |>\n: I updated my answer to include\
    \ a link to an algorithm that does this in C++.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer to include a link to an algorithm that does this in C++.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzx4jpzrq.d(35): Error: declaration expected, not `<`\\n/tmp/tmpzx4jpzrq.d(41):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpzx4jpzrq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n\tlong i;\n\tbool prime = true;\n\tfor(i =\
    \ 2; i <= n/2; ++i)\n\t{\n\t\tif(n % i == 0)\n\t\t{\n\t\t\tprime = false;\n\t\t\
    \tbreak;\n\t\t}\n\t}\n\treturn prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoa62x12_.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpoa62x12_.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpoa62x12_.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x8e5cf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_sujpbzp.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_sujpbzp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n\
    \    {\n        if(n % i == 0)\n        {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw54nlxql.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpw54nlxql.__unittest_L32_C1()\
    \ [0x427b1e]\\n??:? void tmpw54nlxql.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0xb9820554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n == 1) return prime;\n    \n    for (i = 2; i <= sqrt(n);\
    \ ++i)\n    {\n        if (n % i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa71ua0iv.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpa71ua0iv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n <= 1) return prime;\n    \n    for (i = 2; i <= sqrt(n);\
    \ ++i)\n    {\n        if (n % i == 0) \n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbeacx652.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbeacx652.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2)\n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if (n %\
    \ i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl85iv6t7.d(33): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpl85iv6t7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i=2;i<n;i++)\n    {\n\
    \        if(n%i==0)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\nThis\
    \ is not the fastest way to test if a number is prime. There are faster ways to\
    \ do this.\n<|/ c |>\n<| c |>\n: I agree, however I wanted to give an answer that\
    \ would not require any additional libraries.\n<|/ c |>\n<| c |>\n: I agree, however\
    \ I wanted to give an answer that would not require any additional libraries.\n\
    <|/ c |>\n<| c |>\n: I agree, however I wanted to give an answer that would not\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\n: I agree, however I wanted\
    \ to give an answer that would not require any additional libraries.\n<|/ c |>\n\
    <| a |>\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1ym8cc1.d(32): Error: declaration expected, not `<`\\n/tmp/tmpp1ym8cc1.d(55):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpp1ym8cc1.d(56): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpp1ym8cc1.d(57): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpp1ym8cc1.d(58): Error: declaration expected, not `assert`\\\
    n/tmp/tmpp1ym8cc1.d(59): Error: declaration expected, not `assert`\\n/tmp/tmpp1ym8cc1.d(60):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpp1ym8cc1.d(61): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpp1ym8cc1.d(62): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpp1ym8cc1.d(63): Error: declaration expected, not `assert`\\\
    n/tmp/tmpp1ym8cc1.d(64): Error: declaration expected, not `assert`\\n/tmp/tmpp1ym8cc1.d(65):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpp1ym8cc1.d(66): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpp1ym8cc1.d(67): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpp1ym8cc1.d(68): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1ym8cc1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2)\n    {\n        return false;\n    }\n    \n    prime = true;\n    \n\
    \    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv22_zgrc.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpv22_zgrc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) \n    {\n        return false;\n    }\n    \n    prime = true;\n   \
    \ \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0) \n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n   \
    \ assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp128cklqi.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp128cklqi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj88uh7xo.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpj88uh7xo.__unittest_L35_C1()\
    \ [0x427b2a]\\n??:? void tmpj88uh7xo.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x918c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i = 2; i <= limit; i++)\n    {\n        if(n % i == 0)\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=c++,primes,algorithm |>\n<| c |>\nThe OP wants to know if `n` is prime,\
    \ not if `n` is divisible by any number between 2 and `n`.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought that would be enough to solve the problem.\n<|/ c |>\n\
    <| c |>\n: I know, but I thought that would be enough to solve the problem.\n\
    <|/ c |>\n<| c |>\n: I know, but I thought that would be enough to solve the problem.\n\
    <|/ c |>\n<| c |>\n: I know, but I thought that would be enough to solve the problem.\n\
    <|/ c |>\n<| a tags=c++,primes,algorithm |>\n<code>\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbm15k_ar.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    n/tmp/tmpbm15k_ar.d(33): Error: declaration expected, not `<`\\n/tmp/tmpbm15k_ar.d(56):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpbm15k_ar.d(57): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpbm15k_ar.d(58): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpbm15k_ar.d(59): Error: declaration expected, not `assert`\\\
    n/tmp/tmpbm15k_ar.d(60): Error: declaration expected, not `assert`\\n/tmp/tmpbm15k_ar.d(61):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpbm15k_ar.d(62): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpbm15k_ar.d(63): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpbm15k_ar.d(64): Error: declaration expected, not `assert`\\\
    n/tmp/tmpbm15k_ar.d(65): Error: declaration expected, not `assert`\\n/tmp/tmpbm15k_ar.d(66):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpbm15k_ar.d(67): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpbm15k_ar.d(68): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpbm15k_ar.d(69): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbm15k_ar.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long) sqrt(n);\n\
    \    bool prime = true;\n    \n    for (i = 2; i <= limit; i++)\n    {\n     \
    \   if (n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo8r9814n.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo8r9814n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1)\n    {\n        prime = false;\n    }\n    else\n    {\n        prime\
    \ = true;\n        for (i = 2; i <= n / 2; ++i)\n        {\n            if (n\
    \ % i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5rguejcl.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5rguejcl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzt8s0ggj.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpzt8s0ggj.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpzt8s0ggj.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xb1325554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i=2;i<=sqrt(n);i++)\n\
    \    {\n        if(n%i==0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nThis\
    \ code is not correct. `is_prime(61)` returns `true` but `is_prime(6)` returns\
    \ `false`. `is_prime(6)` should be `is_prime(61)` but `is_prime(61)` returns `true`\
    \ but `is_prime(6)` returns `false`.\n<|/ c |>\n<| c |>\nI fixed the code by changing\
    \ the `for` loop to `for(i=2;i*i<=n;i++)`\n<|/ c |>\n<| c |>\nThis code is not\
    \ correct. `is_prime(61)` returns `true` but `is_prime(6)` returns `false`. `is_prime(6)`\
    \ should be `is_prime(61)` but `is_prime(61)` returns `true` but `is_prime(6)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nI fixed the code by changing the `for`\
    \ loop to `for(i=2;i*i<=n;i++)`\n<|/ c |>\n<| c |>\nThis code is not correct.\
    \ `is_prime(61)` returns `true` but `is_prime(6)` returns `false`. `is_prime(6)`\
    \ should be `is_prime(61)` but `is_prime(61)` returns `true` but `is_prime(6)`\
    \ returns `false`.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <math.h>\n\
    using namespace std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwho32aoj.d(32): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwho32aoj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    \n\
    \    if (n <= 1)\n    {\n        return false;\n    }\n    \n    for (i = 2; i\
    \ <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjl3dwnrc.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjl3dwnrc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_94jl14g.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp_94jl14g.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp_94jl14g.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xf3206554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n\tlong i;\n\tbool prime = true;\n\tfor(i =\
    \ 2; i <= sqrt(n); ++i)\n\t{\n\t\tif(n % i == 0)\n\t\t{\n\t\t\tprime = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2wmjps3g.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2wmjps3g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2atnxfs9.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2atnxfs9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i = 2; i <= limit; i++)\n    {\n        if(n % i == 0)\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9pvrv0b_.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9pvrv0b_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp35a31gv8.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp35a31gv8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n\tlong i;\n\tbool prime;\n\t\n\tif (n <= 1)\
    \ return false;\n\t\n\tprime = true;\n\t\n\tfor (i = 2; i <= sqrt(n); i++) {\n\
    \t\tif (n % i == 0) {\n\t\t\tprime = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t\
    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnw4a_2wv.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpnw4a_2wv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n\
    \    {\n        if(n%i == 0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp70zpyxxq.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmp70zpyxxq.__unittest_L32_C1()\
    \ [0x427b1e]\\n??:? void tmp70zpyxxq.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0x4e5b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i=2; i<=limit; i++)\n    {\n        if(n % i == 0)\n        {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp2dg1wy2.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2dg1wy2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI appreciate your efforts, but the question was\
    \ about a specific algorithm that can solve this problem in O(logN) time. Your\
    \ solution will take O(N) time to find out if N is prime. Also, the question was\
    \ about a specific algorithm that can solve this problem in O(logN) time. Your\
    \ solution will take O(N) time to find out if N is prime. Also, the question was\
    \ about a specific algorithm that can solve this problem in O(logN) time. Your\
    \ solution will take O(N) time to find out if N is prime. Also, the question was\
    \ about a specific algorithm that can solve this problem in O(logN) time. Your\
    \ solution will take O(N) time to find out if N is prime.\n<|/ c |>\n<| c |>\n\
    I appreciate your efforts, but the question was about a specific algorithm that\
    \ can solve this problem in O(logN) time. Your solution will take O(N) time to\
    \ find out if N is prime. Also, the question was about a specific algorithm that\
    \ can solve this problem in O(logN) time. Your solution will take O(N) time to\
    \ find out if N is prime. Also, the question was about a specific algorithm that\
    \ can solve this problem in O(logN) time. Your solution will take O(N) time to\
    \ find out if N is prime.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but the\
    \ question was about a specific algorithm that can solve this problem in O(logN)\
    \ time. Your solution will take O(N) time to find out if N is prime. Also, the\
    \ question was about a specific algorithm that can solve this problem in O(logN)\
    \ time. Your solution will take O(N) time to find out if N is prime. Also, the\
    \ question was about a specific algorithm that can solve this problem in O(logN)\
    \ time. Your solution will take O(N) time to find out if N is prime.\n<|/ c |>\n\
    <| c |>\nI appreciate your efforts, but the question was about a specific algorithm\
    \ that can solve this problem in O(logN) time. Your solution will take O(N) time\
    \ to find out \nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb19yv7mo.d(35): Error: declaration expected, not `<`\\n/tmp/tmpb19yv7mo.d(52):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpb19yv7mo.d(53): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpb19yv7mo.d(54): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpb19yv7mo.d(55): Error: declaration expected, not `assert`\\\
    n/tmp/tmpb19yv7mo.d(56): Error: declaration expected, not `assert`\\n/tmp/tmpb19yv7mo.d(57):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpb19yv7mo.d(58): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpb19yv7mo.d(59): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpb19yv7mo.d(60): Error: declaration expected, not `assert`\\\
    n/tmp/tmpb19yv7mo.d(61): Error: declaration expected, not `assert`\\n/tmp/tmpb19yv7mo.d(62):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpb19yv7mo.d(63): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpb19yv7mo.d(64): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpb19yv7mo.d(65): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb19yv7mo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1)\n    {\n        prime = false;\n    }\n    else\n    {\n        prime\
    \ = true;\n        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if (n\
    \ % i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppvfsg6cw.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppvfsg6cw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\n</code>\n\
    <|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\nThis is not the Sieve\
    \ of Eratosthenes (which I believe is what OP wants). Sieve of Eratosthenes is\
    \ about finding prime numbers up to a certain limit.\n<|/ c |>\n<| c |>\nThe question\
    \ was about finding prime numbers, not sieve of eratosthenes.\n<|/ c |>\n<| c\
    \ |>\nThe question was about finding prime numbers, not sieve of eratosthenes.\n\
    <|/ c |>\n<| c |>\nThe question was about finding prime numbers, not sieve of\
    \ eratosthenes.\n<|/ c |>\n<| c |>\nThe question was about finding prime numbers,\
    \ not sieve of eratosthenes.\n<|/ c |>\n<| a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48qununm.d(34): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48qununm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a\
    \ tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\nThis doesn't work. Try it\
    \ with `is_prime(6)`.\n<|/ c |>\n<| c |>\nIt works, I tested it on `is_prime(6)`\
    \ which returns `false`. Please try it yourself.\n<|/ c |>\n<| c |>\nIt works\
    \ on my machine. Try it yourself with `is_prime(6)`.\n<|/ c |>\n<| c |>\nIt works\
    \ on my machine. Try it yourself with `is_prime(6)`.\n<|/ c |>\n<| c |>\nIt works\
    \ on my machine. Try it yourself with `is_prime(6)`.\n<|/ c |>\n<| a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu2iijp5w.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    n/tmp/tmpu2iijp5w.d(33): Error: declaration expected, not `<`\\n/tmp/tmpu2iijp5w.d(36):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpu2iijp5w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe first two lines of `is_prime` can\
    \ be replaced with `return n % 2 == 0;`\n<|/ c |>\n<| c |>\nYes, I agree. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=c++,primes,algorithm |>\n<code>\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4nxaoesq.d(34): Error: declaration expected, not `<`\\n/tmp/tmp4nxaoesq.d(48):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp4nxaoesq.d(49): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp4nxaoesq.d(50): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp4nxaoesq.d(51): Error: declaration expected, not `assert`\\\
    n/tmp/tmp4nxaoesq.d(52): Error: declaration expected, not `assert`\\n/tmp/tmp4nxaoesq.d(53):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp4nxaoesq.d(54): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp4nxaoesq.d(55): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp4nxaoesq.d(56): Error: declaration expected, not `assert`\\\
    n/tmp/tmp4nxaoesq.d(57): Error: declaration expected, not `assert`\\n/tmp/tmp4nxaoesq.d(58):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp4nxaoesq.d(59): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp4nxaoesq.d(60): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp4nxaoesq.d(61): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nxaoesq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj39qyzg8.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpj39qyzg8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i=2; i<=n/2; i++) \n\
    \    {\n        if(n%i==0) \n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nThis\
    \ is not the fastest solution. Try it on `is_prime(101)` for example. Also the\
    \ complexity is O(n^2)\n<|/ c |>\n<| c |>\n: I agree with you. But the OP asked\
    \ for \"fastest\" solution. He didn't ask for \"the fastest\" solution. He asked\
    \ for \"the fastest solution\". And I believe that \"fastest\" solution is \"\
    the fastest solution\".\n<|/ c |>\n<| c |>\n: I agree with you. But the OP asked\
    \ for \"fastest\" solution. He didn't ask for \"the fastest\" solution. He asked\
    \ for \"the fastest solution\". And I believe that \"fastest\" solution is \"\
    the fastest solution\".\n<|/ c |>\n<| c |>\n: I agree with you. But the OP asked\
    \ for \"fastest\" solution. He didn't ask for \"the fastest\" solution. He asked\
    \ for \"the fastest solution\". And I believe that \"fastest\" solution is \"\
    the fastest solution\".\n<|/ c |>\n<| c |>\n: I agree with you. But the OP asked\
    \ for \"fastest\" solution. He didn't ask for \"the fastest\" solution. He asked\
    \ for \"the fastest solution\". And I believe that \"fastest\" solution is \"\
    the fastest solution\".\n<|/ c |>\n<| a dscore=3 |>\n<code>\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0_8blaak.d(32): Error: declaration expected, not `<`\\n/tmp/tmp0_8blaak.d(38):\
    \ Error: unterminated character constant\\n/tmp/tmp0_8blaak.d(41): Error: unterminated\
    \ character constant\\n/tmp/tmp0_8blaak.d(44): Error: unterminated character constant\\\
    n/tmp/tmp0_8blaak.d(47): Error: unterminated character constant\\n/tmp/tmp0_8blaak.d(55):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp0_8blaak.d(56): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp0_8blaak.d(57): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp0_8blaak.d(58): Error: declaration expected, not `assert`\\\
    n/tmp/tmp0_8blaak.d(59): Error: declaration expected, not `assert`\\n/tmp/tmp0_8blaak.d(60):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp0_8blaak.d(61): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp0_8blaak.d(62): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp0_8blaak.d(63): Error: declaration expected, not `assert`\\\
    n/tmp/tmp0_8blaak.d(64): Error: declaration expected, not `assert`\\n/tmp/tmp0_8blaak.d(65):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp0_8blaak.d(66): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp0_8blaak.d(67): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp0_8blaak.d(68): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_8blaak.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmkim2vcj.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmkim2vcj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return\
    \ false;\n    \n    prime = true;\n    \n    for (i = 3; i * i <= n; i += 2) {\n\
    \        if (n % i == 0) {\n            prime = false;\n            break;\n \
    \       }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n <= 1) return prime;\n    \n    for (i = 2; i <= sqrt(n);\
    \ i++) {\n        if (n % i == 0) {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8fikqqf7.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8fikqqf7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return\
    \ false;\n    \n    prime = true;\n    \n    for (i = 3; i * i <= n; i += 2)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprxxtcxrw.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmprxxtcxrw.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmprxxtcxrw.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x1d0cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\nI like your solution,\
    \ but I believe it can be improved. For example `is_prime(6)` returns `true` but\
    \ `is_prime(7)` returns `false`. You can fix this by changing the condition to\
    \ `i <= sqrt(n)`. Also you can change the `for` loop to `for(i = 2; i*i <= n;\
    \ ++i)` which makes it more efficient.\n<|/ c |>\n<| c |>\nThanks for your comment.\
    \ I think I fixed the issue you mentioned.\n<|/ c |>\n<| c |>\nThe `for` loop\
    \ can be simplified to `for(i = 2; i*i <= n; ++i)` which makes it more efficient.\n\
    <|/ c |>\n<| c |>\nThanks for your comment. I fixed the issue you mentioned.\n\
    <|/ c |>\n<| a tags=c++,primes,algorithm |>\nThe best way to find out if a number\
    \ is prime is by using the Sieve of Eratosthenes algorithm. \nThe algorithm works\
    \ by finding all numbers which are less than or equal to the square root of the\
    \ number you are checking, and marking them as being composite. \nThe algorithm\
    \ is as follows:\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\n   \
    \ assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbu7bd502.d(34): Error: declaration expected, not `<`\\n/tmp/tmpbu7bd502.d(57):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpbu7bd502.d(58): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpbu7bd502.d(59): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpbu7bd502.d(60): Error: declaration expected, not `assert`\\\
    n/tmp/tmpbu7bd502.d(61): Error: declaration expected, not `assert`\\n/tmp/tmpbu7bd502.d(62):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpbu7bd502.d(63): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpbu7bd502.d(64): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpbu7bd502.d(65): Error: declaration expected, not `assert`\\\
    n/tmp/tmpbu7bd502.d(66): Error: declaration expected, not `assert`\\n/tmp/tmpbu7bd502.d(67):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpbu7bd502.d(68): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpbu7bd502.d(69): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpbu7bd502.d(70): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbu7bd502.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5vek98ej.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp5vek98ej.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp5vek98ej.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x9a94a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long) sqrt(n);\n\
    \    for(i = 2; i <= limit; ++i)\n    {\n        if(n % i == 0)\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptgla_jo5.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgla_jo5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28krjzyg.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp28krjzyg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime;\n    \n  \
    \  if (n < 2)\n    {\n        is_prime = false;\n    }\n    else if (n == 2)\n\
    \    {\n        is_prime = true;\n    }\n    else\n    {\n        for (i = 3;\
    \ i * i <= n; i += 2)\n        {\n            if (n % i == 0)\n            {\n\
    \                is_prime = false;\n                break;\n            }\n  \
    \      }\n    }\n    return is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpez6q_l4u.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e85]\\n??:? void tmpez6q_l4u.__unittest_L46_C1()\
    \ [0x427a9b]\\n??:? void tmpez6q_l4u.__modtest() [0x427c04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa3e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa15]\\n??:? runModuleUnitTests [0x42b981]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42825b]\\n??:? _d_run_main [0x4281c6]\\n??:? main [0x427c17]\\\
    n??:? __libc_start_main [0x8e66f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2) return prime;\n    if (n == 2) return true;\n\
    \    if (n % 2 == 0) return false;\n    \n    for (i = 3; i * i <= n; i += 2)\
    \ {\n        if (n % i == 0) return false;\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpck6_7qmg.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e9d]\\n??:? void tmpck6_7qmg.__unittest_L37_C1()\
    \ [0x427b4e]\\n??:? void tmpck6_7qmg.__modtest() [0x427c1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbe9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa2d]\\n??:? runModuleUnitTests [0x42b999]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428273]\\n??:? _d_run_main [0x4281de]\\n??:? main [0x427c2f]\\\
    n??:? __libc_start_main [0xa761f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf47gatql.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpf47gatql.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppb7d9amf.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppb7d9amf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return\
    \ false;\n    \n    prime = true;\n    for (i = 3; i * i <= n; i += 2)\n    {\n\
    \        if (n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6nnrcqtr.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6nnrcqtr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp665x4u_f.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp665x4u_f.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp665x4u_f.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x7862d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long a = 1;\n    long b =\
    \ 2;\n    long c = 2;\n    long d = 2;\n    long e = 2;\n    long f = 2;\n   \
    \ long g = n;\n    \n    for(i = 2; i <= n; i++) {\n        g = g * i;\n    }\n\
    \    \n    for(i = 2; i <= n; i++) {\n        if(g % i == 0) {\n            return\
    \ false;\n        }\n    }\n    \n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp82378mmk.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmp82378mmk.__unittest_L43_C1()\
    \ [0x427aaf]\\n??:? void tmp82378mmk.__modtest() [0x427c18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbe1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa25]\\n??:? runModuleUnitTests [0x42b991]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42826b]\\n??:? _d_run_main [0x4281d6]\\n??:? main [0x427c2b]\\\
    n??:? __libc_start_main [0x73de9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    \n\
    \    if (n <= 1) return false;\n    if (n == 2) return true;\n    \n    for (i\
    \ = 3; i * i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n      \
    \      prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzbr8pq64.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e7d]\\n??:? void tmpzbr8pq64.__unittest_L39_C1()\
    \ [0x427a76]\\n??:? void tmpzbr8pq64.__modtest() [0x427c00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bba3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa0d]\\n??:? runModuleUnitTests [0x42b979]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428253]\\n??:? _d_run_main [0x4281be]\\n??:? main [0x427c13]\\\
    n??:? __libc_start_main [0xf84b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2vhqod2.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpl2vhqod2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime = true;\n \
    \   \n    if (n < 2)\n    {\n        is_prime = false;\n    }\n    else\n    {\n\
    \        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if (n % i == 0)\n\
    \            {\n                is_prime = false;\n                break;\n  \
    \          }\n        }\n    }\n    return is_prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcx7lhkq3.d(31): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcx7lhkq3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_vih_9_9.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp_vih_9_9.__unittest_L35_C1()\
    \ [0x427b2a]\\n??:? void tmp_vih_9_9.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x5b6d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n <= 1) return false;\n    if (n <= 3) return true;\n    \n    prime = true;\n\
    \    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0) \n \
    \       {\n            prime = false;\n            break;\n        }\n    }\n\
    \    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcz1stqbg.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcz1stqbg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2) return prime;\n    \n    for (i = 2; i <= sqrt(n);\
    \ ++i)\n    {\n        if (n % i == 0) \n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8kxnbk11.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8kxnbk11.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n        {\n          \
    \  prime = false;\n            break;\n        }\n    }\n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpthheudvm.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpthheudvm.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpthheudvm.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xe0e09554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n == 2)\n    {\n        prime = false;\n    }\n    else\
    \ if (n % 2 == 0)\n    {\n        prime = false;\n    }\n    else\n    {\n   \
    \     for (i = 3; i * i <= n; i += 2)\n        {\n            if (n % i == 0)\n\
    \            {\n                prime = false;\n                break;\n     \
    \       }\n        }\n    }\n    \n    return prime;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<| c |>\nI believe this algorithm is wrong. `is_prime(13)` returns `true`\
    \ but `is_prime(14)` returns `false`\n<|/ c |>\n<| c |>\nI believe this algorithm\
    \ is wrong. `is_prime(13)` returns `true` but `is_prime(14)` returns `false`\n\
    <|/ c |>\n<| c |>\nThe algorithm is correct. `is_prime(13)` returns `true` because\
    \ `13` is divisible by `3` and `13` is divisible by `5`. `is_prime(14)` returns\
    \ `false` because `14` is not divisible by `3` and `14` is not divisible by `5`.\n\
    <|/ c |>\n<| c |>\nI believe this algorithm is wrong. `is_prime(13)` returns `true`\
    \ but `is_prime(14)` returns `false`\n<|/ c |>\n<| c |>\nI believe this algorithm\
    \ is wrong. `is_prime(13)` returns `true` but `is_prime(14)` returns `false`\n\
    <|/ c |>\n<| a dscore=5 |>\nThe Sieve of Eratosthenes is very easy to implement\
    \ in C++.\n<code>\n#include <iostream>\n#include <vector>\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnb3k7iqm.d(49): Error: declaration expected, not `<`\\n/tmp/tmpnb3k7iqm.d(75):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpnb3k7iqm.d(76): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpnb3k7iqm.d(77): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpnb3k7iqm.d(78): Error: declaration expected, not `assert`\\\
    n/tmp/tmpnb3k7iqm.d(79): Error: declaration expected, not `assert`\\n/tmp/tmpnb3k7iqm.d(80):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpnb3k7iqm.d(81): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpnb3k7iqm.d(82): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpnb3k7iqm.d(83): Error: declaration expected, not `assert`\\\
    n/tmp/tmpnb3k7iqm.d(84): Error: declaration expected, not `assert`\\n/tmp/tmpnb3k7iqm.d(85):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpnb3k7iqm.d(86): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpnb3k7iqm.d(87): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpnb3k7iqm.d(88): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnb3k7iqm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn_qcsfl2.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpn_qcsfl2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime = true;\n \
    \   \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n   \
    \     {\n            is_prime = false;\n            break;\n        }\n    }\n\
    \    \n    return is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphpgk5m4j.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphpgk5m4j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0tz6vksk.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0tz6vksk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvb4sguj3.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb4sguj3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpclmft9bn.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpclmft9bn.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpclmft9bn.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x1116e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb8icn3xd.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpb8icn3xd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime = true;\n \
    \   for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n      \
    \      is_prime = false;\n            break;\n        }\n    }\n    return is_prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7ut1xjh0.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp7ut1xjh0.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp7ut1xjh0.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x5a410554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb6qj6gxv.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpb6qj6gxv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a |>\n<| c |>\nThe OP wants to know if `n` is prime\
    \ or not. Your code returns `true` if the number is prime and `false` otherwise.\n\
    <|/ c |>\n<| c |>\nYes, I know. My code returns `true` if the number is prime\
    \ and `false` otherwise. My code returns `true` if the number is prime and `false`\
    \ otherwise. My code returns `true` if the number is prime and `false` otherwise.\
    \ My code returns `true` if the number is prime and `false` otherwise. My code\
    \ returns `true` if the number is prime and `false` otherwise. My code returns\
    \ `true` if the number is prime and `false` otherwise. My code returns `true`\
    \ if the number is prime and `false` otherwise. My code returns `true` if the\
    \ number is prime and `false` otherwise. My code returns `true` if the number\
    \ is prime and `false` otherwise. My code returns `true` if the number is prime\
    \ and `false` otherwise. My code returns `true` if the number is prime and `false`\
    \ otherwise. My code returns `true` if the number is prime and `false` otherwise.\
    \ My code returns `true` if the number is prime and `false` otherwise. My code\
    \ returns `true` if the number is prime and `false` otherwise. My code returns\
    \ `true` if the number is prime and `false` otherwise. My code returns `true`\
    \ if the number is prime and `false` otherwise. My code returns `true` if the\
    \ number is prime and `false` otherwise. My code returns `true` if the number\
    \ is prime and `false` otherwise. My code returns `true` if the number is prime\
    \ and `false` otherwise. My code returns `true` if the number is prime and `false`\
    \ otherwise. My code returns `true` if the number is prime and `false` otherwise.\
    \ My code returns `true` if the number is prime and `false` otherwise. My code\
    \ returns `true` if the number is prime and `false` otherwise. My code returns\
    \ `true` if the number is prime and `false` otherwise. My code returns `true`\
    \ if the number is prime and `false` otherwise. My code returns `true` if the\
    \ number is prime and `false` otherwise. My code returns `true` if the number\
    \ is prime and `false` otherwise. My code returns `true` if the number is prime\
    \ and `false` otherwise. My code returns `true` if the number is prime and `false`\
    \ otherwise. My code returns `true` if the number is prime and `false` otherwise.\
    \ My code returns `true` if the number is prime and `false` otherwise. My code\
    \ returns `true` if the number is \nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcx72o5jv.d(35): Error: declaration expected, not `<`\\n/tmp/tmpcx72o5jv.d(46):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpcx72o5jv.d(47): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpcx72o5jv.d(48): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpcx72o5jv.d(49): Error: declaration expected, not `assert`\\\
    n/tmp/tmpcx72o5jv.d(50): Error: declaration expected, not `assert`\\n/tmp/tmpcx72o5jv.d(51):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpcx72o5jv.d(52): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpcx72o5jv.d(53): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpcx72o5jv.d(54): Error: declaration expected, not `assert`\\\
    n/tmp/tmpcx72o5jv.d(55): Error: declaration expected, not `assert`\\n/tmp/tmpcx72o5jv.d(56):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpcx72o5jv.d(57): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpcx72o5jv.d(58): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpcx72o5jv.d(59): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcx72o5jv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n\tlong i;\n\tbool prime;\n\t\n\tprime = true;\n\
    \t\n\tfor(i = 2; i <= sqrt(n); ++i)\n\t{\n\t\tif(n % i == 0)\n\t\t{\n\t\t\tprime\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjsm1elpp.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjsm1elpp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_5dyq2v3.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp_5dyq2v3.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp_5dyq2v3.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xe6552554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i, j, k;\n    bool prime;\n    prime\
    \ = true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        for(j = i*i; j <\
    \ n; j += i)\n        {\n            prime = false;\n            break;\n    \
    \    }\n        if(prime)\n            break;\n    }\n    return prime;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe first for loop should start at `i = 2`, not `i\
    \ = 2`.\n<|/ c |>\n<| c |>\n: I agree. Thanks for pointing that out.\n<|/ c |>\n\
    <| c |>\nThe first for loop should start at `i = 2`, not `i = 2`.\n<|/ c |>\n\
    <| c |>\n: Thanks for pointing that out. I've edited my answer.\n<|/ c |>\n<|\
    \ c |>\n: Thanks for pointing that out. I've edited my answer.\n<|/ c |>\n<| a\
    \ tags=c++,primes,algorithm |>\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpij_qlfro.d(37): Error: declaration expected, not `<`\\n/tmp/tmpij_qlfro.d(49):\
    \ Error: unterminated character constant\\n/tmp/tmpij_qlfro.d(52): Error: unterminated\
    \ character constant\\n/tmp/tmpij_qlfro.d(60): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmpij_qlfro.d(61): Error: declaration expected, not `assert`\\\
    n/tmp/tmpij_qlfro.d(62): Error: declaration expected, not `assert`\\n/tmp/tmpij_qlfro.d(63):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpij_qlfro.d(64): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpij_qlfro.d(65): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpij_qlfro.d(66): Error: declaration expected, not `assert`\\\
    n/tmp/tmpij_qlfro.d(67): Error: declaration expected, not `assert`\\n/tmp/tmpij_qlfro.d(68):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpij_qlfro.d(69): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpij_qlfro.d(70): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpij_qlfro.d(71): Error: declaration expected, not `assert`\\\
    n/tmp/tmpij_qlfro.d(72): Error: declaration expected, not `assert`\\n/tmp/tmpij_qlfro.d(73):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpij_qlfro.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n\tlong i;\n\tbool is_prime;\n\t\n\tis_prime\
    \ = true;\n\t\n\tif (n == 1)\n\t\treturn true;\n\t\n\tfor(i = 2; i <= sqrt(n);\
    \ ++i)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\tis_prime = false;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\t\n\treturn is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5tukfcv5.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5tukfcv5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return\
    \ false;\n    \n    prime = true;\n    \n    for (i = 3; prime && i <= sqrt(n);\
    \ i += 2)\n    {\n        if (n % i == 0) prime = false;\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2owe_4wn.d(31): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2owe_4wn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcj2zo0x2.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcj2zo0x2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjlqg00e2.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpjlqg00e2.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpjlqg00e2.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x9a415554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_fngp3f.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1_fngp3f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2)\n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2; i <= sqrt(n); i++)\n        {\n            if (n %\
    \ i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_42co_ok.d(33): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_42co_ok.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n        \
    \    prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n\
    #include <math.h>\n#include <stdlib.h>\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpypqp2kji.d(34): Error: declaration expected, not `<`\\n/tmp/tmpypqp2kji.d(45):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpypqp2kji.d(46): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpypqp2kji.d(47): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpypqp2kji.d(48): Error: declaration expected, not `assert`\\\
    n/tmp/tmpypqp2kji.d(49): Error: declaration expected, not `assert`\\n/tmp/tmpypqp2kji.d(50):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpypqp2kji.d(51): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpypqp2kji.d(52): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpypqp2kji.d(53): Error: declaration expected, not `assert`\\\
    n/tmp/tmpypqp2kji.d(54): Error: declaration expected, not `assert`\\n/tmp/tmpypqp2kji.d(55):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpypqp2kji.d(56): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpypqp2kji.d(57): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpypqp2kji.d(58): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypqp2kji.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i, j, k;\n    bool prime;\n    \n\
    \    prime = true;\n    \n    for (i = 2; i <= n / 2; ++i)\n    {\n        if\
    \ (n % i == 0)\n        {\n            prime = false;\n            break;\n  \
    \      }\n    }\n    \n    if (prime)\n    {\n        for (i = 2; i <= n / 2;\
    \ ++i)\n        {\n            k = n % i;\n            if (k > 0)\n          \
    \  {\n                prime = false;\n                break;\n            }\n\
    \        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg06t9rti.d(56): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427eb5]\\n??:? void tmpg06t9rti.__unittest_L51_C1()\
    \ [0x427acb]\\n??:? void tmpg06t9rti.__modtest() [0x427c34]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbdb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa6e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc01]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa45]\\n??:? runModuleUnitTests [0x42b9b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428304]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42828b]\\n??:? _d_run_main [0x4281f6]\\n??:? main [0x427c47]\\\
    n??:? __libc_start_main [0x93208554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return\
    \ false;\n    \n    prime = true;\n    \n    for (i = 3; i * i <= n; i += 2)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) \n    {\n        return false;\n    }\n    \n    prime = true;\n   \
    \ \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0) \n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n   \
    \ assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt91ja8g9.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpt91ja8g9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return\
    \ false;\n    \n    prime = true;\n    \n    for (i = 3; i * i <= n; i += 2) {\n\
    \        if (n % i == 0) {\n            prime = false;\n            break;\n \
    \       }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; i++)\n    {\n        if(n%i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzqdvmqdj.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqdvmqdj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb_di3ba0.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpb_di3ba0.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpb_di3ba0.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x8c627554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    \n\
    \    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\n</code>\n<|/ a |>\n<| c |>\nThe `sqrt` function isn't guaranteed\
    \ to return a `double` so this isn't a good solution. `sqrt` should be replaced\
    \ with `std::sqrt`.\n<|/ c |>\n<| c |>\nThe `sqrt` function isn't guaranteed to\
    \ return a `double` so this isn't a good solution. `sqrt` should be replaced with\
    \ `std::sqrt`.\n<|/ c |>\n<| c |>\n: I agree with you. `sqrt` should be replaced\
    \ with `std::sqrt`. But I didn't want to change OP's code too much. He can always\
    \ change it back.\n<|/ c |>\n<| c |>\n: I agree with you. `sqrt` should be replaced\
    \ with `std::sqrt`. But I didn't want to change OP's code too much. He can always\
    \ change it back.\n<|/ c |>\n<| c |>\n: I agree with you. `sqrt` should be replaced\
    \ with `std::sqrt`. But I didn't want to change OP's code too much. He can always\
    \ change it back.\n<|/ c |>\n<| a tags=c++,primes,algorithm |>\n<code>\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0v486wm6.d(36): Error: declaration expected, not `<`\\n/tmp/tmp0v486wm6.d(39):\
    \ Error: unterminated character constant\\n/tmp/tmp0v486wm6.d(39): Error: unterminated\
    \ character constant\\n/tmp/tmp0v486wm6.d(42): Error: unterminated character constant\\\
    n/tmp/tmp0v486wm6.d(42): Error: unterminated character constant\\n/tmp/tmp0v486wm6.d(45):\
    \ Error: unterminated character constant\\n/tmp/tmp0v486wm6.d(45): Error: unterminated\
    \ character constant\\n/tmp/tmp0v486wm6.d(48): Error: unterminated character constant\\\
    n/tmp/tmp0v486wm6.d(48): Error: unterminated character constant\\n/tmp/tmp0v486wm6.d(51):\
    \ Error: unterminated character constant\\n/tmp/tmp0v486wm6.d(51): Error: unterminated\
    \ character constant\\n/tmp/tmp0v486wm6.d(59): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmp0v486wm6.d(60): Error: declaration expected, not `assert`\\\
    n/tmp/tmp0v486wm6.d(61): Error: declaration expected, not `assert`\\n/tmp/tmp0v486wm6.d(62):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp0v486wm6.d(63): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp0v486wm6.d(64): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp0v486wm6.d(65): Error: declaration expected, not `assert`\\\
    n/tmp/tmp0v486wm6.d(66): Error: declaration expected, not `assert`\\n/tmp/tmp0v486wm6.d(67):\
    \ Error: declaration expected, not `assert`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0v486wm6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwp8_0ixy.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpwp8_0ixy.__unittest_L35_C1()\
    \ [0x427b2a]\\n??:? void tmpwp8_0ixy.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x403b8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    \n    prime\
    \ = true;\n    \n    if (n < 2)\n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2; i <= sqrt(n); ++i)\n        {\n            if (n %\
    \ i == 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdt8tcarf.d(33): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdt8tcarf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; i++)\n    {\n        if(n\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwrfr_27d.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrfr_27d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n    prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdf2e_kzr.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdf2e_kzr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n        {\n          \
    \  prime = false;\n            break;\n        }\n    }\n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyh0ftzbv.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpyh0ftzbv.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpyh0ftzbv.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x907a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
