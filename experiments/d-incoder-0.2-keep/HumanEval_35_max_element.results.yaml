name: HumanEval_35_max_element
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n \
    \           max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max;\n\
    \    \n    max = l[0];\n    for (i = 1; i < l.length; i++) \n        if (l[i]\
    \ > max) \n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max_val\
    \ = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    foreach(long x, l) \n    {\n        if (x > max) \n      \
    \  {\n            max = x;\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuyapzrhm.d(15): Error: no identifier for declarator `l`\\n/tmp/tmpuyapzrhm.d(15):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpuyapzrhm.d(22): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyapzrhm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i=1; i<l.length; i++)\n        if(l[i] > max)\n           \
    \ max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++) \n        if (l[i] > max) \n   \
    \         max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate =\
    \ max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max =\
    \ 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; ++i)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max) \n \
    \       {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max =\
    \ l[0];\n    for (i = 1; i < l.length; i++) \n        if (l[i] > max) \n     \
    \       max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n\
    \    int i;\n    long min = l[0];\n    for (i = 1; i < l.length; i++) \n     \
    \   if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    int i;\n    long sum = 0;\n    for (i = 0; i < l.length; i++) \n  \
    \      sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[] l) \n{\n\
    \    int i;\n    long prod = 1;\n    for (i = 0; i < l.length; i++) \n       \
    \ prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list\
    \ that are less than the given value.\n    >>> sum([1, 2, 3], 1)\n    3\n    >>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n    -10\n    \n*/\nlong sum(long[]\
    \ l, long x) \n{\n    int i;\n    long sum = 0;\n    for (i = 0; i < l.length;\
    \ i++) \n        if (l[i] < x) \n            sum += l[i];\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list that are less than the given value.\n\
    \    >>> product([1, 2, 3], 1)\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10], -10)\n    -10\n    \n*/\nlong product(long[] l, long x) \n\
    {\n    int i;\n    long prod = 1;\n    for (i = 0; i < l.length; i++) \n     \
    \   if (l[i] < x) \n            prod *= l[i];\n    return prod;\n}\n/*\nReturn\
    \ sum of all elements in the list that are greater than the given value.\n   \
    \ >>> sum([1, 2, 3], 2)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10], 10)\n    60\n    \n*/\nlong sum(long\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzx3o4o_9.d(111): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzx3o4o_9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n    >>> abs([1, 2, 3])\n    [1, 2, 3]\n\
    \    >>> abs([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10]\n    \n*/\nlong[] abs(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n\
    \        result[i] = l[i] < 0 ? -l[i] : l[i];\n    }\n    return result;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n    >>> abs([1, 2, 3])\n\
    \    [1, 2, 3]\n    >>> abs([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n    \n*/\ndouble[] abs(double[] l) \n{\n\
    \    double[] result = new double[l.length];\n    double i;\n    for(i = 0; i\
    \ < l.length; ++i)\n    {\n        result[i] = l[i] < 0 ? -l[i] : l[i];\n    }\n\
    \    return result;\n}\n/*\n\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzkd3e8va.d(112): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkd3e8va.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n\
    \    long min = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        if\
    \ (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n\
    */\nfloat sum(float[] l) \n{\n    float sum = 0;\n    long i;\n    for (i = 0;\
    \ i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all\
    \ elements in the list with specified type.\n    >>> sum([1, 2, 3], int)\n   \
    \ 6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n    -123\n   \
    \ \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n    long i;\n   \
    \ for(i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list with specified type.\n\
    \    >>> product([1, 2, 3], int)\n    6\n    >>> product([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10], int)\n    -123\n    \n*/\nlong product(long[] l, int type)\
    \ \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n  \
    \  {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all\
    \ elements in the list with specified type.\n    >>> sum([1, 2, 3], float)\n \
    \   6.000000\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], float)\n  \
    \  -12\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeif25nnh.d(112): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeif25nnh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i] > max) \n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max) \n \
    \       {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i] > max) \n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i=1; i<l.length; i++)\n        if(l[i] > max)\n           \
    \ max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max;\n\
    \    max = l[0];\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n \
    \           max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max =\
    \ 0;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_pos = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_value)\n        {\n            max_value = l[i];\n           \
    \ max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxzm25vmb.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmpxzm25vmb.__unittest_L24_C1()\
    \ [0x427e03]\\n??:? void tmpxzm25vmb.__modtest() [0x427ea4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afed]\\n??:? runModuleUnitTests [0x42bf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427eb7]\\\
    n??:? __libc_start_main [0x710cd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ min_element(long[] l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i\
    \ < l.length; i++) \n    {\n        if(l[i] < min) \n        {\n            min\
    \ = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[] l) \n{\n    long\
    \ product = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble product(double[] l) \n{\n\
    \    double product = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n  \
    \  {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoi7yzwgz.d(125): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi7yzwgz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_index = -1;\n    for(int i = 1; i < l.length; ++i)\n    {\n    \
    \    if(l[i] > max_value)\n        {\n            max_value = l[i];\n        \
    \    max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphfxk90mf.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmphfxk90mf.__unittest_L24_C1()\
    \ [0x427e07]\\n??:? void tmphfxk90mf.__modtest() [0x427ea8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afed]\\n??:? runModuleUnitTests [0x42bf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427ebb]\\\
    n??:? __libc_start_main [0xdabd6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max =\
    \ 0;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n    max = l[0];\n\
    \    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n           \
    \ max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; i++) \n    {\n      \
    \  if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; i++) \n    {\n        if(l[i] < min_val)\n        {\n        \
    \    min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1, 2, 3], int)\n    6\n    >>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n    -10\n    \n*/\nlong sum(long[]\
    \ l, int type) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list with specified type.\n    >>> product([1, 2, 3], int)\n\
    \    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n    -10\n\
    \    \n*/\nlong product(long[] l, int type) \n{\n    long prod = 1;\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        prod *= l[i];\n    }\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1, 2, 3], float)\n    6.5\n    >>> sum([5, \nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcz490h3s.d(114): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcz490h3s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] > max_val)\n\
    \        {\n            max_val = l[i];\n        }\n    }\n    return max_val;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1, 2, 3])\n \
    \   1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min_val = l[0];\n    for (int\
    \ i = 1; i < l.length; ++i)\n    {\n        if (l[i] < min_val)\n        {\n \
    \           min_val = l[i];\n        }\n    }\n    return min_val;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n    \
    \    sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -1231\n    \n*/\nlong product(long[] l) \n\
    {\n    long prod = 1;\n    for (int i = 0; i < l.length; ++i)\n    {\n       \
    \ prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in\
    \ the list that are less than n.\n    >>> sum([1, 2, 3], 3)\n    3\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n    3\n    \n*/\nlong sum(long[] l,\
    \ long n) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n   \
    \ {\n        if (l[i] < n)\n        {\n            sum += l[i];\n        }\n \
    \   }\n    return sum;\n}\n/*\nReturn product of all elements in the list that\
    \ are less than n.\n    >>> product([1, 2, 3], 3)\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n    -1231\n    \n*/\nlong product(long[]\
    \ l, long n) \n{\n    long prod = 1;\n    for (int i = 0; i < l.length; ++i)\n\
    \    {\n        if (l[i] < n)\n        {\n            prod *= l[i];\n        }\n\
    \    }\n    return prod;\n}\n/*\nReturn sum of all elements in the list that are\
    \ less than or equal to n.\n    >>> sum([1, 2, 3], 3)\n    3\n    >>> sum([5,\
    \ 3, -\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprrjcaqg7.d(116): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrjcaqg7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_index = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n     \
    \   if(l[i] > max_value)\n        {\n            max_value = l[i];\n         \
    \   max_index = i;\n        }\n    }\n    return max_value;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n\
    \    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\n     \
    \   if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n  \
    \      sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\ndouble sum(double[] l) \n{\n    double sum\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i, max_idx = 0;\n\
    \    long max_val = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max_val) {\n            max_idx = i;\n            max_val = l[i];\n      \
    \  }\n    }\n    return max_idx;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp55h7nfzf.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmp55h7nfzf.__unittest_L22_C1()\
    \ [0x427dff]\\n??:? void tmp55h7nfzf.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c17b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b00e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43012d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afe5]\\n??:? runModuleUnitTests [0x42bf51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428567]\\n??:? _d_run_main [0x4284d2]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x5d6fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max_val\
    \ = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max_val\
    \ = l[0];\n    for(i = 1; i < l.length; ++i)\n        if(l[i] > max_val)\n   \
    \         max_val = l[i];\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max) max = l[i];\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max_val)\n     \
    \       max_val = l[i];\n    }\n    return max_val;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    for (int i = 1; i < l.length; ++i) {\n\
    \        if (l[i] < min_val)\n            min_val = l[i];\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\ndouble sum(double[] l) \n{\n    double sum\
    \ = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n\
    */\nfloat sum(float[] l) \n{\n    float sum = 0;\n    for (int i = 0; i < l.length;\
    \ ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max) \n \
    \       {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++) \n        if (l[i] > max) \n   \
    \         max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate =\
    \ max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max_val\
    \ = l[0];\n    for (i = 1; i < l.length; i++)\n    {\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max =\
    \ l[0];\n    for (i = 1; i < l.length; i++) \n        if (l[i] > max) \n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_pos = 0;\n    \n    for(int i = 1; i < l.length; i++){\n       \
    \ if(l[i] > max_value){\n            max_value = l[i];\n            max_pos =\
    \ i;\n        }\n    }\n    \n    return max_value;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < min_val)\n        {\n         \
    \   min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble sum(double[] l) \n\
    {\n    double sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n       \
    \ sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l) \n{\n    float sum =\
    \ 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n   \
    \ }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2m1sqwdw.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmp2m1sqwdw.__unittest_L24_C1()\
    \ [0x427e03]\\n??:? void tmp2m1sqwdw.__modtest() [0x427ea4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afed]\\n??:? runModuleUnitTests [0x42bf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427eb7]\\\
    n??:? __libc_start_main [0xeeee0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while(i < l.length) {\n        if(l[i] > max) {\n        \
    \    max = l[i];\n        }\n        i++;\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; ++i)\n        if(l[i] > max)\n       \
    \     max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    \n    while (i < l.length && l[i] > max) \n   \
    \ {\n        max = l[i];\n        i++;\n    }\n    \n    while (j < l.length &&\
    \ l[j] > max) \n    {\n        max = l[j];\n        j++;\n    }\n    \n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdedzzdj8.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpdedzzdj8.__unittest_L30_C1()\
    \ [0x427ec0]\\n??:? void tmpdedzzdj8.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b046]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430688]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430165]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b01d]\\n??:? runModuleUnitTests [0x42bf89]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x9547c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max =\
    \ l[0];\n    for (i = 1; i < l.length; i++) \n        if (l[i] > max) \n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n    max = l[0];\n\
    \    for(int i = 1; i < l.length; i++){\n        if(l[i] > max){\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; i++) \n    {\n      \
    \  if(l[i] > max_val) \n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; i++) \n    {\n        if(l[i] < min_val) \n        {\n       \
    \     min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return\
    \ min_val;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2,\
    \ 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list that are less than the given value.\n    >>> sum([1, 2,\
    \ 3], 3)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n \
    \   -10\n    \n*/\nlong sum(long[] l, long val) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] < val) \n        {\n    \
    \        sum += l[i];\n        }\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list that are less than the given value.\n    >>> product([1,\
    \ 2, 3], 3)\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n\
    \    -10\n    \n*/\nlong product(long[] l, long val) \n{\n    long product = 1;\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] < val) \n    \
    \    {\n            product *= l[i];\n        }\n    }\n    return product;\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7sbsx110.d(119): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7sbsx110.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n    max = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n           \
    \ max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n \
    \   >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n   \
    \ long min;\n    min = l[0];\n    for (int i = 1; i < l.length; ++i)\n       \
    \ if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n\
    \    for (int i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat\
    \ sum(float[] l) \n{\n    float sum = 0;\n    for (int i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l, int start) \n{\n    long\
    \ sum = 0;\n    for (int i = start; i < l.length; ++i)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\ndouble sum(double[] l, int start) \n{\n    double sum = 0;\n    for\
    \ (int i = start; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnzeebbrj.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnzeebbrj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i] > max) \n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] > max_val)\n        {\n            max_val = l[i];\n       \
    \     max_idx = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n\
    \    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n     \
    \   if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n  \
    \      sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[] l) \n{\n\
    \    long prod = 1;\n    long i;\n    for (i = 0; i < l.length; i++)\n       \
    \ prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list\
    \ excluding zero.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum_excl(long l) \n{\n    long\
    \ sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list excluding\
    \ zero.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product_excl(long l) \n{\n \
    \   long prod = 1;\n    long i;\n    for (i = 0; i < l.length; i++)\n        prod\
    \ *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list excluding\
    \ zero.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum_excl(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4heeiyr0.d(114): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4heeiyr0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < min_val)\n        {\n         \
    \   min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble sum(double[] l) \n\
    {\n    double sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n       \
    \ sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l) \n{\n    float sum =\
    \ 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n   \
    \ }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while(i < l.length) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n        i++;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max_val\
    \ = l[0];\n    long max_pos = 0;\n    \n    for (i = 1; i < l.length; ++i) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n            max_pos\
    \ = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeonue0gj.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpeonue0gj.__unittest_L24_C1()\
    \ [0x427e0b]\\n??:? void tmpeonue0gj.__modtest() [0x427eac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c18b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430660]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43013d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff5]\\n??:? runModuleUnitTests [0x42bf61]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428577]\\n??:? _d_run_main [0x4284e2]\\n??:? main [0x427ebf]\\\
    n??:? __libc_start_main [0x6376f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_pos = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_value)\n        {\n            max_value = l[i];\n           \
    \ max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjygb26go.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmpjygb26go.__unittest_L24_C1()\
    \ [0x427e03]\\n??:? void tmpjygb26go.__modtest() [0x427ea4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afed]\\n??:? runModuleUnitTests [0x42bf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427eb7]\\\
    n??:? __libc_start_main [0x548a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max;\n\
    \    max = l[0];\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < min_val)\n        {\n         \
    \   min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\ndouble sum(double[] l) \n\
    {\n    double sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n       \
    \ sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -123\n    \n*/\nfloat sum(float[] l) \n{\n    float sum =\
    \ 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n   \
    \ }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -123\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_pos = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_value)\n        {\n            max_value = l[i];\n           \
    \ max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp96oqvnrp.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmp96oqvnrp.__unittest_L24_C1()\
    \ [0x427e03]\\n??:? void tmp96oqvnrp.__modtest() [0x427ea4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afed]\\n??:? runModuleUnitTests [0x42bf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427eb7]\\\
    n??:? __libc_start_main [0x62fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\nfloat sum(float[] l) \n{\n\
    \    float sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n \
    \       sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -123\n    \n*/\nlong sum(long[] l, int start) \n{\n\
    \    long sum = 0;\n    long i;\n    for(i = start; i < l.length; ++i)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -123\n    \n*/\ndouble sum(double[] l, int start) \n\
    \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn0mfh02e.d(122): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0mfh02e.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_el = 0;\n   \
    \ long max_val = l[0];\n    for(int i = 1; i < l.length; i++){\n        if(l[i]\
    \ > max_val){\n            max_el = i;\n            max_val = l[i];\n        }\n\
    \    }\n    return max_el;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj_zs2owx.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpj_zs2owx.__unittest_L22_C1()\
    \ [0x427dfb]\\n??:? void tmpj_zs2owx.__modtest() [0x427e9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c17b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b00e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43012d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afe5]\\n??:? runModuleUnitTests [0x42bf51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428567]\\n??:? _d_run_main [0x4284d2]\\n??:? main [0x427eaf]\\\
    n??:? __libc_start_main [0xb089b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i, max_idx = 0;\n\
    \    long max_val = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max_val) {\n            max_idx = i;\n            max_val = l[i];\n      \
    \  }\n    }\n    return max_idx;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgn_kxz37.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpgn_kxz37.__unittest_L22_C1()\
    \ [0x427dff]\\n??:? void tmpgn_kxz37.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c17b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b00e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43012d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afe5]\\n??:? runModuleUnitTests [0x42bf51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428567]\\n??:? _d_run_main [0x4284d2]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0xaf88e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max) \n \
    \       {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    \n    while (i < l.length && l[i] > max) \n   \
    \ {\n        max = l[i];\n        i++;\n    }\n    \n    while (j < l.length &&\
    \ l[j] > max) \n    {\n        max = l[j];\n        j++;\n    }\n    \n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7ukvhvmj.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp7ukvhvmj.__unittest_L30_C1()\
    \ [0x427ec0]\\n??:? void tmp7ukvhvmj.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b046]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430688]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430165]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b01d]\\n??:? runModuleUnitTests [0x42bf89]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xcaf4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n \
    \           max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_pos = 0;\n    for(long i = 1; i < l.length; ++i)\n    {\n      \
    \  if(l[i] > max_value)\n        {\n            max_value = l[i];\n          \
    \  max_pos = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(long i =\
    \ 1; i < l.length; ++i)\n    {\n        if(l[i] < min_value)\n        {\n    \
    \        min_value = l[i];\n            min_pos = i;\n        }\n    }\n    return\
    \ min_pos;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2,\
    \ 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(long i = 0; i <\
    \ l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list with specified precision.\n    >>> sum([1,\
    \ 2, 3], 1)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n\
    \    -10\n    \n*/\nlong sum(long[] l, long precision) \n{\n    long sum = 0;\n\
    \    for(long i = 0; i < l.length; ++i)\n    {\n        sum += l[i] * precision;\n\
    \    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ precision.\n    >>> sum([1, 2, 3], 1)\n    6\n    >>> sum([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10], 1)\n    -10\n    \n*/\ndouble sum(double[] l, long precision)\
    \ \n{\n    double sum = 0;\n    for(long i = 0; i < l.length; ++i)\n    {\n  \
    \      sum += l[i] * precision;\n    }\n    return sum;\n}\n/*\nReturn sum of\
    \ all elements in the list with specified precision.\n    >>> sum([1, 2, 3], 1)\n\
    \    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n    -10\n   \
    \ \n*/\nfloat sum(float[] l, long precision) \n{\n    float sum = 0;\n    for(long\
    \ i = 0; i < l.length; ++i)\n    {\n        sum += l[i] * precision;\n    }\n\
    \    return sum;\n}\n/*\nReturn sum of \nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9p9eau4m.d(114): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9p9eau4m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i, j, max = l[0];\n\
    \    for (i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1l0dnpy.d(12): Error: cannot implicitly convert expression `l[0]`\
    \ of type `long` to `int`\\n/tmp/tmpa1l0dnpy.d(15): Error: cannot implicitly convert\
    \ expression `l[cast(ulong)i]` of type `long` to `int`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1l0dnpy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n    max = l[0];\n\
    \    for(int i = 1; i < l.length; i++){\n        if(l[i] > max){\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; ++i)\n        if(l[i] > max)\n       \
    \     max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_index = -1;\n    for(int i = 1; i < l.length; i++) \n    {\n   \
    \     if(l[i] > max_value) \n        {\n            max_value = l[i];\n      \
    \      max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo2wktigg.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpo2wktigg.__unittest_L24_C1()\
    \ [0x427dff]\\n??:? void tmpo2wktigg.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c17b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b00e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43012d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afe5]\\n??:? runModuleUnitTests [0x42bf51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428567]\\n??:? _d_run_main [0x4284d2]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x84ba2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] > max_val)\n        {\n            max_val = l[i];\n       \
    \     max_idx = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n    max = l[0];\n\
    \    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n           \
    \ max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i, j, max = l[0];\n\
    \    for (i = 1; i < l.length; ++i) {\n        for (j = 0; j < i; ++j) {\n   \
    \         if (l[j] > max) {\n                max = l[j];\n            }\n    \
    \    }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprpj5l6i_.d(12): Error: cannot implicitly convert expression `l[0]`\
    \ of type `long` to `int`\\n/tmp/tmprpj5l6i_.d(16): Error: cannot implicitly convert\
    \ expression `l[cast(ulong)j]` of type `long` to `int`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmprpj5l6i_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; i++)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l) \n{\n\
    \    float sum = 0;\n    float i;\n    for(i = 0; i < l.length; i++)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp80cqkqz7.d(72): Error: cannot implicitly convert expression `i`\
    \ of type `double` to `ulong`\\n/tmp/tmp80cqkqz7.d(90): Error: cannot implicitly\
    \ convert expression `i` of type `float` to `ulong`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp80cqkqz7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; ++i)\n        if(l[i] > max)\n       \
    \     max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] > max_val)\n        {\n            max_val = l[i];\n       \
    \     max_idx = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_pos = 0;\n    for(int i = 1; i < l.length; i++)\n    {\n       \
    \ if(l[i] > max_value)\n        {\n            max_value = l[i];\n           \
    \ max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr4k1c9k5.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpr4k1c9k5.__unittest_L24_C1()\
    \ [0x427dfb]\\n??:? void tmpr4k1c9k5.__modtest() [0x427e9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c17b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b00e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43012d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afe5]\\n??:? runModuleUnitTests [0x42bf51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428567]\\n??:? _d_run_main [0x4284d2]\\n??:? main [0x427eaf]\\\
    n??:? __libc_start_main [0x6240c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i, j, max = l[0];\n\
    \    for (i = 1; i < l.length; ++i) {\n        for (j = 0; j < i; ++j) {\n   \
    \         if (l[j] > max) {\n                max = l[j];\n            }\n    \
    \    }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48aw3gts.d(12): Error: cannot implicitly convert expression `l[0]`\
    \ of type `long` to `int`\\n/tmp/tmp48aw3gts.d(16): Error: cannot implicitly convert\
    \ expression `l[cast(ulong)j]` of type `long` to `int`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp48aw3gts.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    long n = l.length;\n    \n    while (i < n) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < min_val)\n        {\n         \
    \   min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    for(int i = 0; i < l.length; ++i)\n    {\n \
    \       prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements\
    \ in the list that are greater than zero.\n    >>> sum([1, 2, 3])\n    6\n   \
    \ >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum_greaterequal(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      if(l[i] > 0)\n        {\n            sum += l[i];\n        }\n    }\n \
    \   return sum;\n}\n/*\nReturn sum of all elements in the list that are less than\
    \ zero.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum_lessequal(long[] l) \n{\n    long\
    \ sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] < 0)\n\
    \        {\n            sum += l[i];\n        }\n    }\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list that are \nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_49cfal.d(120): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_49cfal.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max_val\
    \ = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i=1; i<l.length; i++){\n        if(l[i] > max){\n         \
    \   max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyotopzvi.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpyotopzvi.__unittest_L24_C1()\
    \ [0x427dfb]\\n??:? void tmpyotopzvi.__modtest() [0x427e9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c17b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b00e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43012d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afe5]\\n??:? runModuleUnitTests [0x42bf51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428567]\\n??:? _d_run_main [0x4284d2]\\n??:? main [0x427eaf]\\\
    n??:? __libc_start_main [0xd6bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n    max = l[0];\n\
    \    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n           \
    \ max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n \
    \   >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n   \
    \ long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n       \
    \ if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong product(long[] l) \n{\n    long prod\
    \ = 1;\n    for (int i = 0; i < l.length; i++)\n        prod *= l[i];\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1, 2, 3], int)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10], int)\n    -10\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n \
    \           max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; i++){\n        if(l[i] > max){\n     \
    \       max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n \
    \           max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    long i = 0;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i = 0;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list with specified type.\n    >>> sum([1, 2, 3],\
    \ int)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n   \
    \ -10\n    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(type == int)\n\
    \            sum += l[i];\n        else if(type == float)\n            sum +=\
    \ l[i] * l[i];\n        else if(type == double)\n            sum += l[i] * l[i]\
    \ * l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list with specified type.\n    >>> product([1, 2, 3], int)\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n    -10\n    \n*/\nlong product(long[]\
    \ l, int type) \n{\n    long product = 1;\n    long i = 0;\n    for(i = 0; i <\
    \ l.length; i++)\n    {\n        if(type == int)\n            product *= l[i];\n\
    \        else if(type == float)\n            product *= l[i] * l[i];\n       \
    \ else if(type == \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmxep3npe.d(90): Error: found `)` when expecting `.` following\
    \ int\\n/tmp/tmpmxep3npe.d(91): Error: found `;` when expecting `)`\\n/tmp/tmpmxep3npe.d(92):\
    \ Error: found `else` without a corresponding `if`, `version` or `debug` statement\\\
    n/tmp/tmpmxep3npe.d(94): Error: found `)` when expecting `.` following double\\\
    n/tmp/tmpmxep3npe.d(95): Error: found `;` when expecting `)`\\n/tmp/tmpmxep3npe.d(96):\
    \ Error: found `}` instead of statement\\n/tmp/tmpmxep3npe.d(113): Error: found\
    \ `)` when expecting `.` following int\\n/tmp/tmpmxep3npe.d(114): Error: found\
    \ `;` when expecting `)`\\n/tmp/tmpmxep3npe.d(115): Error: found `else` without\
    \ a corresponding `if`, `version` or `debug` statement\\n/tmp/tmpmxep3npe.d(118):\
    \ Error: expression expected, not `unittest`\\n/tmp/tmpmxep3npe.d(119): Error:\
    \ found `{` when expecting `)`\\n/tmp/tmpmxep3npe.d(125): Error: found `End of\
    \ File` when expecting `}` following compound statement\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxep3npe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_index = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n     \
    \   if(l[i] > max_value)\n        {\n            max_value = l[i];\n         \
    \   max_index = i;\n        }\n    }\n    return max_value;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_element = l[0];\n\
    \    long max_element_index = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max_element){\n            max_element = l[i];\n            max_element_index\
    \ = i;\n        }\n    }\n    return max_element;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max_val\
    \ = l[0];\n    for (i = 1; i < l.length; ++i)\n        if (l[i] > max_val)\n \
    \           max_val = l[i];\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; i++)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; ++i)\n        if(l[i] > max)\n       \
    \     max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] > max_val)\n        {\n            max_val = l[i];\n       \
    \     max_idx = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i=1; i<l.length; i++)\n    {\n        if(l[i] > max)\n    \
    \        max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max) max =\
    \ l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max_val\
    \ = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max_val\
    \ = l[0];\n    for (i = 1; i < l.length; ++i)\n        if (l[i] > max_val)\n \
    \           max_val = l[i];\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i, max_idx = 0;\n\
    \    long max_val = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max_val) {\n            max_idx = i;\n            max_val = l[i];\n      \
    \  }\n    }\n    return max_idx;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjl30s_br.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpjl30s_br.__unittest_L22_C1()\
    \ [0x427dff]\\n??:? void tmpjl30s_br.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c17b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b00e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43012d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afe5]\\n??:? runModuleUnitTests [0x42bf51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428567]\\n??:? _d_run_main [0x4284d2]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x6c457554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i, j, max = l[0];\n\
    \    for (i = 1; i < l.length; i++)\n    {\n        for (j = 0; j < i; j++)\n\
    \        {\n            if (l[j] > max)\n            {\n                max =\
    \ l[j];\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpda6uy770.d(12): Error: cannot implicitly convert expression `l[0]`\
    \ of type `long` to `int`\\n/tmp/tmpda6uy770.d(19): Error: cannot implicitly convert\
    \ expression `l[cast(ulong)j]` of type `long` to `int`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpda6uy770.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n \
    \           max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n\
    */\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i <\
    \ l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n  \
    \  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\n\
    long product(long[] l) \n{\n    long product = 1;\n    long i;\n    for(i = 0;\
    \ i < l.length; i++){\n        product *= l[i];\n    }\n    return product;\n\
    }\n/*\nReturn sum of all elements in the list with specified type.\n    >>> sum([1,\
    \ 2, 3], int)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n\
    \    -123\n    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n   \
    \ long i;\n    for(i = 0; i < l.length; i++){\n        if(type == int.class){\n\
    \            sum += (int)l[i];\n        }else if(type == long.class){\n      \
    \      sum += l[i];\n        }else if(type == double.class){\n            sum\
    \ += (double)l[i];\n        }else if(type == float.class){\n            sum +=\
    \ (float)l[i];\n        }else if(type == short.class){\n            sum += (short)l[i];\n\
    \        }else if(type == byte.class){\n            sum += (byte)l[i];\n     \
    \   }else if(type == char.class){\n            sum += (char)(int)l[i];\n     \
    \   }else if(type == boolean.class){\n            sum += (boolean)l[i];\n    \
    \    }\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the list\
    \ with specified type.\n    >>> product([1, 2, 3], int)\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfyrqmjam.d(87): Error: found `class` when expecting identifier\
    \ following `int`.\\n/tmp/tmpfyrqmjam.d(88): Error: C style cast illegal, use\
    \ `cast(int)l[i]`\\n/tmp/tmpfyrqmjam.d(89): Error: found `class` when expecting\
    \ identifier following `long`.\\n/tmp/tmpfyrqmjam.d(91): Error: found `class`\
    \ when expecting identifier following `double`.\\n/tmp/tmpfyrqmjam.d(92): Error:\
    \ C style cast illegal, use `cast(double)l[i]`\\n/tmp/tmpfyrqmjam.d(93): Error:\
    \ found `class` when expecting identifier following `float`.\\n/tmp/tmpfyrqmjam.d(94):\
    \ Error: C style cast illegal, use `cast(float)l[i]`\\n/tmp/tmpfyrqmjam.d(95):\
    \ Error: found `class` when expecting identifier following `short`.\\n/tmp/tmpfyrqmjam.d(96):\
    \ Error: C style cast illegal, use `cast(short)l[i]`\\n/tmp/tmpfyrqmjam.d(97):\
    \ Error: found `class` when expecting identifier following `byte`.\\n/tmp/tmpfyrqmjam.d(98):\
    \ Error: C style cast illegal, use `cast(byte)l[i]`\\n/tmp/tmpfyrqmjam.d(99):\
    \ Error: found `class` when expecting identifier following `char`.\\n/tmp/tmpfyrqmjam.d(100):\
    \ Error: C style cast illegal, use `cast(int)l[i]`\\n/tmp/tmpfyrqmjam.d(100):\
    \ Error: C style cast illegal, use `cast(char)cast(int)l[i]`\\n/tmp/tmpfyrqmjam.d(101):\
    \ Error: identifier expected following `.`, not `class`\\n/tmp/tmpfyrqmjam.d(102):\
    \ Error: C style cast illegal, use `cast(boolean)l[i]`\\n/tmp/tmpfyrqmjam.d(107):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfyrqmjam.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n \
    \           max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n\
    \    long min = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        if\
    \ (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[] l) \n{\n    long\
    \ product = 1;\n    long i;\n    for (i = 0; i < l.length; i++)\n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product([1,\
    \ 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  \
    \  -10\n    \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n  \
    \  long i;\n    for (i = 0; i < l.length; i++)\n        product *= l[i];\n   \
    \ return product;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> product([1, 2, 3])\n    6\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcsnepa7e.d(116): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsnepa7e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_pos = 0;\n    for(int i = 1; i < l.length; i++) \n    {\n      \
    \  if(l[i] > max_value) \n        {\n            max_value = l[i];\n         \
    \   max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvnvlbxmr.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpvnvlbxmr.__unittest_L24_C1()\
    \ [0x427dfb]\\n??:? void tmpvnvlbxmr.__modtest() [0x427e9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c17b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b00e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43012d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afe5]\\n??:? runModuleUnitTests [0x42bf51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428567]\\n??:? _d_run_main [0x4284d2]\\n??:? main [0x427eaf]\\\
    n??:? __libc_start_main [0x3a047554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    int i;\n    long max;\n\
    \    max = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ min_element(long[] l) \n{\n    int i;\n    long min;\n    min = l[0];\n    for\
    \ (i = 1; i < l.length; ++i) {\n        if (l[i] < min) {\n            min = l[i];\n\
    \        }\n    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -123\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    int\
    \ i;\n    for (i = 0; i < l.length; ++i) {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product([1,\
    \ 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  \
    \  -123\n    \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n    int i;\n\
    \    for (i = 0; i < l.length; ++i) {\n        prod *= l[i];\n    }\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1, 2, 3], int)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10], int)\n    -123\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; ++i)\n        if(l[i] > max)\n       \
    \     max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n\
    \    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; ++i)\n      \
    \  if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n   \
    \     sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[] l) \n{\n\
    \    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n        prod\
    \ *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list, excluding\
    \ zero.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum_excl(long l) \n{\n    long sum =\
    \ 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n        if(l[i] != 0)\n\
    \            sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list, excluding zero.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product_excl(long\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \        if(l[i] != 0)\n            prod *= l[i];\n    return prod;\n}\n/*\nReturn\
    \ sum of all elements in the list, excluding zero.\n    >>> sum([1, 2, 3])\n \
    \   6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\n\
    long sum_excl(long\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphl3jo59t.d(111): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphl3jo59t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ for (long i = 1; i < l.length; i++) \n        if (l[i] > max) \n           \
    \ max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] > max_val)\n        {\n            max_val = l[i];\n       \
    \     max_idx = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_pos = 0;\n    for(long i = 1; i < l.length; ++i)\n    {\n      \
    \  if(l[i] > max_value)\n        {\n            max_value = l[i];\n          \
    \  max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7iha0ima.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmp7iha0ima.__unittest_L24_C1()\
    \ [0x427e07]\\n??:? void tmp7iha0ima.__modtest() [0x427ea8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afed]\\n??:? runModuleUnitTests [0x42bf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427ebb]\\\
    n??:? __libc_start_main [0x308c6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i=1; i<l.length; i++) \n    {\n        if(l[i] > max) \n  \
    \      {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n    max = l[0];\n\
    \    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max) max = l[i];\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeegc_9u6.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmpeegc_9u6.__unittest_L24_C1()\
    \ [0x427e03]\\n??:? void tmpeegc_9u6.__modtest() [0x427ea4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afed]\\n??:? runModuleUnitTests [0x42bf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427eb7]\\\
    n??:? __libc_start_main [0x9801d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i] > max) \n\
    \        {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(long i = 1; i < l.length; ++i)\n    {\n      \
    \  if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpav3exlov.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmpav3exlov.__unittest_L24_C1()\
    \ [0x427e03]\\n??:? void tmpav3exlov.__modtest() [0x427ea4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c183]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b016]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430135]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afed]\\n??:? runModuleUnitTests [0x42bf59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427eb7]\\\
    n??:? __libc_start_main [0xdb058554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max) \n \
    \       {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < min_val)\n        {\n         \
    \   min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    for(int i = 0; i < l.length; ++i)\n    {\n \
    \       prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1, 2, 3], int)\n    6\n    >>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n    -10\n    \n*/\nlong sum(long[]\
    \ l, int type) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        if(type == int)\n        {\n            sum += l[i];\n       \
    \ }\n        else if(type == float)\n        {\n            sum += l[i] * l[i];\n\
    \        }\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list with specified type.\n    >>> product([1, 2, 3], int)\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n    -10\n    \n*/\nlong product(long[]\
    \ l, int type) \n{\n    long prod = 1;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        if(type == int)\n        {\n            prod *= l[i];\n      \
    \  }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjemj17gt.d(93): Error: found `)` when expecting `.` following\
    \ int\\n/tmp/tmpjemj17gt.d(94): Error: found `{` when expecting identifier following\
    \ `int`.\\n/tmp/tmpjemj17gt.d(95): Error: found `sum` when expecting `)`\\n/tmp/tmpjemj17gt.d(95):\
    \ Error: found `+=` instead of statement\\n/tmp/tmpjemj17gt.d(97): Error: found\
    \ `else` without a corresponding `if`, `version` or `debug` statement\\n/tmp/tmpjemj17gt.d(101):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjemj17gt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while(i < l.length) \n    {\n        if(l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n        i++;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n     \
    \       max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value = l[0];\n\
    \    long max_index = 0;\n    \n    for (long i = 0; i < l.length; i++) \n   \
    \ {\n        if (l[i] > max_value)\n        {\n            max_value = l[i];\n\
    \            max_index = i;\n        }\n    }\n    \n    return max_value;\n}\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n    max = l[0];\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] > max) \n  \
    \      {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ long i;\n    for(i=1; i<l.length; i++)\n        if(l[i] > max)\n           \
    \ max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
