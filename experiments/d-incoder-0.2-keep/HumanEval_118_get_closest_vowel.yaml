name: HumanEval_118_get_closest_vowel
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\nYou are given a word. Your task\
  \ is to find the closest vowel that stands between \n    two consonants from the\
  \ right side of the word (case sensitive).\n    \n    Vowels in the beginning and\
  \ ending doesn't count. Return empty string if you didn't\n    find any vowel met\
  \ the above condition. \n\n    You may assume that the given string contains English\
  \ letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n  \
  \  get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\
  \"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \n*/\nstring get_closest_vowel(string\
  \ word) \n"
tests: "unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
  yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
  easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
  ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
  most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
  ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
  anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
  Above\") == \"o\");\n}\nvoid main(){}"
completions: ["{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n\
    \    {\n        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o'\
    \ || word[i]=='u')\n        {\n            vowels[word[i]]++;\n        }\n   \
    \ }\n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==0)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code. Also, your code is O(n^2), which is not very\
    \ efficient.\n<|/ c |>\n<| c |>\nI didn't downvote either, but I think it's because\
    \ you didn't explain what was wrong with OP's code. Also, your code is O(n^2),\
    \ which is not very efficient.\n<|/ c |>\n<| c |>\nI didn't downvote either, but\
    \ I think it's because you didn't explain what was wrong with OP's code. Also,\
    \ your code is O(n^2), which is not very efficient.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote either, but I think it's because you didn't explain what was wrong\
    \ with OP's code. Also, your code is O(n^2), which is not very efficient.\n<|/\
    \ c |>\n<| c |>\nI didn't downvote either, but I think it's because you didn't\
    \ explain what was wrong with OP's code. Also, your code is O(n^2), which is not\
    \ very efficient.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    for(int\
    \ i = len-1; i >= 0; i--)\n    {\n        if(word.endsWith(vowels[i]))\n     \
    \   {\n            int index = word.lastIndexOf(vowels[i]);\n            if(index\
    \ > 0)\n            {\n                int start = index - 1;\n              \
    \  int end = index;\n                if(start < 0)\n                {\n      \
    \              start = 0;\n                    end = len;\n                }\n\
    \                if(end > len)\n                {\n                    end = len;\n\
    \                }\n                return word.substring(start, end);\n     \
    \       }\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    \n    string vowels = \"aeiouAEIOU\";\n    \n    for(int\
    \ i = word.length()-1; i >= 0; i--)\n    {\n        char c = word[i];\n      \
    \  if(vowels.find(c) != string::npos)\n        {\n            int index = vowels.find(c);\n\
    \            int index2 = vowels.find(c, index+1);\n            int index3 = vowels.find(c,\
    \ index+2);\n            \n            if(index2 != string::npos && index3 !=\
    \ string::npos)\n            {\n                string a = vowels.substr(index,\
    \ index2-index+1);\n                string b = vowels.substr(index2, index3-index2+1);\n\
    \                \n                if(a < b)\n                    return a;\n\
    \                else\n                    return b;\n            }\n        \
    \    else\n            {\n                string a = vowels.substr(index, index2-index+1);\n\
    \                \n                if(a < b)\n                    return a;\n\
    \                else\n                    return b;\n            }\n        }\n\
    \    }\n    \n    return \"\";\n}", "{\n    \n    map<string,int> vowels;\n  \
    \  \n    for(int i=0;i<word.length();i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,int>::iterator\
    \ it;\n    string vowel;\n    \n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==1)\n        {\n            vowel=it->first;\n \
    \           break;\n        }\n    }\n    \n    if(vowel==\"\")\n    {\n     \
    \   return \"\";\n    }\n    \n    int count=0;\n    \n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(isVowel(word[i]))\n        {\n            count++;\n      \
    \  }\n    }\n    \n    if(count>0)\n    {\n        int min=abs(count-word.length());\n\
    \        \n        for(int i=0;i<word.length();i++)\n        {\n            if(isVowel(word[i]))\n\
    \            {\n                if(abs(count-word.length())<min)\n           \
    \     {\n                    min=abs(count-word.length());\n                 \
    \   vowel=word[i];\n                }\n            }\n        }\n    }\n    \n\
    \    return vowel;\n}", "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n\
    \    {\n        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o'\
    \ || word[i]=='u')\n        {\n            vowels[word[i]]=vowels[word[i]]+1;\n\
    \        }\n    }\n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==0)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <map>\nusing namespace\
    \ std;", "{\n    int len = word.length();\n    for(int i = len-1; i >= 0; i--)\n\
    \    {\n        if(isVowel(word[i]))\n        {\n            int j = i+1;\n  \
    \          while(j < len && isVowel(word[j]))\n            {\n               \
    \ j++;\n            }\n            if(j-i == 1)\n            {\n             \
    \   return word[i];\n            }\n        }\n    }\n    return \"\";\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. Can you please explain how you came\
    \ up with the solution? I am not able to understand how you came up with the solution.\
    \ Thanks.\n<|/ c |>\n<| c |>\nI used a for loop to go through the string from\
    \ right to left. Whenever I find a vowel, I will start a for loop to go through\
    \ the string from right to left and find the next consonant that is not a vowel.\
    \ Once I find the next consonant that is not vowel, I will return the vowel that\
    \ is closest to the right side of the word.\n<|/ c |>\n<| c |>\nThanks for your\
    \ explanation. I understood your solution. Can you please explain how you came\
    \ up with the solution? I am not able to understand how you came up with the solution.\
    \ Thanks.\n<|/ c |>\n<| c |>\nI used a for loop to go through the string from\
    \ right to left. Whenever I find a vowel, I will start a for loop to go through\
    \ the string from right to left and find the next consonant that is not a vowel.\
    \ Once I find the next consonant that is not vowel, I will return the vowel that\
    \ is closest to the right side of the word.\n<|/ c |>\n<| c |>\nThanks for your\
    \ explanation. I understood your solution. Can you please explain how you came\
    \ up with the solution? I am not able to understand how you came up with the solution.\
    \ Thanks.\n<|/ c |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    int len = word.length();\n\
    \    int start = 0;\n    int end = 0;\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u')\n        {\n            start = i;\n        }\n  \
    \      if(word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O'\
    \ || word[i] == 'U')\n        {\n            end = i;\n        }\n    }\n    \n\
    \    if(start == end)\n    {\n        return \"\";\n    }\n    \n    int diff\
    \ = end - start;\n    \n    if(diff == 0)\n    {\n        return word[start];\n\
    \    }\n    \n    string vowel = \"\";\n    \n    for(int i = start; i <= end;\
    \ i++)\n    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u')\n        {\n            vowel += word[i];\n\
    \        }\n    }\n    \n    return vowel;\n}", "{\n    map<string, int> vowels;\n\
    \    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]] += 1;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 1)\n        {\n            return it->first;\n\
    \        }\n    }\n    \n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_reversed = vowels.rbegin();\n    \n    for(int i = 0; i <\
    \ word.length(); i++)\n    {\n        if(word[i] == vowels_reversed[i])\n    \
    \    {\n            int index = vowels.find(word[i]);\n            if(index !=\
    \ -1)\n            {\n                string vowel_before = vowels.substr(0, index);\n\
    \                string vowel_after = vowels.substr(index + 1, vowels.length()\
    \ - index - 1);\n                \n                if(vowel_before.length() >\
    \ 0 && vowel_after.length() > 0)\n                {\n                    return\
    \ vowel_before;\n                }\n            }\n        }\n    }\n    \n  \
    \  return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    for(int\
    \ i = word.length() - 1; i >= 0; i--)\n    {\n        if(vowels.find(word.substr(i,\
    \ 1)) != string::npos)\n        {\n            int index = word.find_last_of(vowels,\
    \ i);\n            int index2 = word.find_last_of(\"aeiouAEIOU\", i);\n      \
    \      \n            if(index != string::npos && index2 != string::npos)\n   \
    \         {\n                string temp = word.substr(index, index2 - index);\n\
    \                \n                if(temp == \"a\" || temp == \"e\" || temp ==\
    \ \"i\" || temp == \"o\" || temp == \"u\")\n                {\n              \
    \      return temp;\n                }\n            }\n        }\n    }\n    \n\
    \    return \"\";\n}\n</code>\n<|/ a tags=string,c++ |>\n<| a tags=string,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    map<string, int> vowels;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"A\"] = 1;\n    vowels[\"E\"] =\
    \ 1;\n    vowels[\"I\"] = 1;\n    vowels[\"O\"] = 1;\n    vowels[\"U\"] = 1;\n\
    \    vowels[\"Y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"A\"] = 1;\n    vowels[\"E\"] = 1;\n    vowels[\"I\"] = 1;\n\
    \    vowels[\"O\"] = 1;\n    vowels[\"U\"] = 1;\n    vowels[\"Y\"] = 1;\n    \n\
    \    for(int i = word.length() - 1; i >= 0; i--)\n    {\n        if(word[i] ==\
    \ 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\
    \ || word[i] == 'y' || word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i]\
    \ == 'O' || word[i] == 'U' || word[i] == 'Y')\n        {\n            int j =\
    \ word.length() - 1;\n            while(j > i)\n            {\n              \
    \  if(word[j] != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' &&\
    \ word[j] != 'u' && word[j] != 'y' && word[j] != 'A' && word[j] != 'E' && word[j]\
    \ != 'I' && word[j] != 'O' && word[j] != 'U' && word[j] != 'Y')\n            \
    \    {\n                    j--;\n                }\n                else\n  \
    \              {\n                    if(j > 0)\n                    {\n     \
    \                   if(word[j - 1] == 'a' || word[j - 1] == 'e' || word[j - 1]\
    \ == 'i' || word[j - 1] == 'o' || word[j - 1] == 'u' || word[j - 1] == 'y' ||\
    \ word[j - 1] == 'A' || word[j - 1] == 'E' || word[j - 1] == 'I' || word[j - 1]\
    \ == 'O' || word[j - 1] == 'U' || word[j - 1] == 'Y')\n                      \
    \  {\n                            j--;\n                        }\n          \
    \              else\n                        {\n                            if(j\
    \ > 0)\n                            {\n                                if(word[j\
    \ - 1] == 'a' || word[j - 1] == 'e' || word[j - 1] == 'i' || word[j - 1] == 'o'\
    \ || word[j - 1] == 'u' || word[j - 1] == 'y' || word[j - 1]", "{\n    map<string,int>\
    \ vowels;\n    vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n\
    \    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"\
    a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n  \
    \  vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"\
    e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n  \
    \  vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"\
    i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n  \
    \  vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"\
    o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n  \
    \  vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"\
    u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n  \
    \  vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"\
    y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n  \
    \  vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"\
    a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n  \
    \  vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"\
    e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n  \
    \  vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"\
    i\"]", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n   \
    \ int end = word.length() - 1;\n    \n    while (start < end)\n    {\n       \
    \ int mid = start + (end - start) / 2;\n        \n        if (word[mid] == vowels[mid])\n\
    \        {\n            end = mid - 1;\n        }\n        else if (word[mid]\
    \ == vowels[mid])\n        {\n            start = mid + 1;\n        }\n      \
    \  else\n        {\n            start = mid + 1;\n            end = mid - 1;\n\
    \        }\n    }\n    \n    return word[start];\n}", "{\n    map<string, int>\
    \ vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second == 1)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=c++,string |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    map<string, int> vowels;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"A\"] = 1;\n    vowels[\"E\"] =\
    \ 1;\n    vowels[\"I\"] = 1;\n    vowels[\"O\"] = 1;\n    vowels[\"U\"] = 1;\n\
    \    vowels[\"Y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"A\"] = 1;\n    vowels[\"E\"] = 1;\n    vowels[\"I\"] = 1;\n\
    \    vowels[\"O\"] = 1;\n    vowels[\"U\"] = 1;\n    vowels[\"Y\"] = 1;\n    \n\
    \    map<string, int> vowels_reverse;\n    vowels_reverse[\"a\"] = 1;\n    vowels_reverse[\"\
    e\"] = 1;\n    vowels_reverse[\"i\"] = 1;\n    vowels_reverse[\"o\"] = 1;\n  \
    \  vowels_reverse[\"u\"] = 1;\n    vowels_reverse[\"y\"] = 1;\n    vowels_reverse[\"\
    A\"] = 1;\n    vowels_reverse[\"E\"] = 1;\n    vowels_reverse[\"I\"] = 1;\n  \
    \  vowels_reverse[\"O\"] = 1;\n    vowels_reverse[\"U\"] = 1;\n    vowels_reverse[\"\
    Y\"] = 1;\n    \n    map<string, int> vowels_reverse2;\n    vowels_reverse2[\"\
    a\"] = 1;\n    vowels_reverse2[\"e\"] = 1;\n    vowels_reverse2[\"i\"] = 1;\n\
    \    vowels_reverse2[\"o\"] = 1;\n    vowels_reverse2[\"u\"] = 1;\n    vowels_reverse2[\"\
    y\"] = 1;\n    vowels_reverse2[\"A\"] = 1;\n    vowels_reverse2[\"E\"] = 1;\n\
    \    vowels_reverse2[\"I\"] = 1;\n    vowels_reverse2[\"O\"] = 1;\n    vowels_reverse2[\"\
    U\"] = 1;\n    vowels_reverse2[\"Y\"] = 1;\n    \n    map<string, int> vowels_reverse3;\n\
    \    vowels_reverse3[\"a\"] = 1;\n    vowels_reverse3[\"e\"] = 1;\n    vowels_reverse3[\"\
    i\"] = 1;\n    vowels_reverse3[\"o\"] = 1;\n    vowels_reverse3[\"u\"] = 1;\n\
    \    vowels_reverse3[\"y\"] = 1;\n    vowels_reverse3[\"A\"] = 1;", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    \n    int len = word.length();\n    \n    int\
    \ start = 0;\n    int end = 0;\n    \n    for(int i = 0; i < len; i++)\n    {\n\
    \        if(word[i] == vowels[start])\n        {\n            start = i;\n   \
    \     }\n        if(word[i] == vowels[end])\n        {\n            end = i;\n\
    \        }\n    }\n    \n    if(start == end)\n    {\n        return \"\";\n \
    \   }\n    \n    int diff = end - start;\n    \n    if(diff == 0)\n    {\n   \
    \     return word[start];\n    }\n    \n    int mid = start + (diff / 2);\n  \
    \  \n    if(word[mid] == vowels[mid])\n    {\n        return word[mid];\n    }\n\
    \    \n    if(word[mid] == vowels[mid+1])\n    {\n        return word[mid+1];\n\
    \    }\n    \n    if(word[mid] == vowels[mid-1])\n    {\n        return word[mid-1];\n\
    \    }\n    \n    return \"\";\n}", "{\n    int len = word.length();\n    int\
    \ start = 0;\n    int end = 0;\n    \n    for(int i = 0; i < len; i++)\n    {\n\
    \        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o'\
    \ || word[i] == 'u')\n        {\n            start = i;\n        }\n        if(word[i]\
    \ == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U')\n\
    \        {\n            end = i;\n        }\n    }\n    \n    if(start == end)\n\
    \    {\n        return \"\";\n    }\n    \n    int diff = end - start;\n    \n\
    \    if(diff == 0)\n    {\n        return \"\";\n    }\n    \n    string vowel\
    \ = \"\";\n    \n    for(int i = start; i < end; i++)\n    {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            vowel += word[i];\n        }\n    }\n    \n    return\
    \ vowel;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    int len = word.length();\n  \
    \  int i = 0;\n    int j = 0;\n    char c;\n    bool found = false;\n    \n  \
    \  while(i < len && found == false)\n    {\n        c = word[i];\n        \n \
    \       while(j < len && found == false)\n        {\n            if(c != word[j])\n\
    \            {\n                j++;\n            }\n            else\n      \
    \      {\n                if(j == len - 1)\n                {\n              \
    \      found = true;\n                }\n                else\n              \
    \  {\n                    j++;\n                }\n            }\n        }\n\
    \        \n        if(found == true)\n        {\n            i = j;\n        }\n\
    \        \n        i++;\n    }\n    \n    if(found == true)\n    {\n        return\
    \ word[i];\n    }\n    else\n    {\n        return \"\";\n    }\n}", "{\n    map<string,\
    \ int> vowels;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] =\
    \ 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] =\
    \ 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y", "{\n    map<string,int>\
    \ vowels;\n    for(int i=0;i<word.length();i++)\n    {\n        if(word[i]=='a'\
    \ || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u')\n        {\n\
    \            vowels[word[i]]++;\n        }\n    }\n    map<string,int>::iterator\
    \ it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n    {\n        if(it->second==0)\n\
    \        {\n            return it->first;\n        }\n    }\n    return \"\";\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis solution doesn't\
    \ work for \"ab\" as it will return \"a\" instead of \"\".\n<|/ c |>\n<| c |>\n\
    : It will work for \"ab\" because \"ab\" contains no vowels. \"ab\" contains two\
    \ vowels (\"a\" and \"b\"). Hence the algorithm will find \"a\" as the closest\
    \ vowel.\n<|/ c |>\n<| c |>\n: I didn't say it will not work, I said it will not\
    \ work for \"ab\". The algorithm will find \"a\" as the closest vowel because\
    \ \"ab\" contains two vowels. Hence the algorithm will find \"a\" as the closest\
    \ vowel.\n<|/ c |>\n<| c |>\n: I didn't say it will not work, I said it will not\
    \ work for \"ab\". The algorithm will find \"a\" as the closest vowel because\
    \ \"ab\" contains two vowels. Hence the algorithm will find \"a\" as the closest\
    \ vowel.\n<|/ c |>\n<| c |>\n: I didn't say it will not work, I said it will not\
    \ work for \"ab\". The algorithm will find \"a\" as the closest vowel because\
    \ \"ab\" contains two vowels. Hence the algorithm will find \"a\" as the closest\
    \ vowel.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    \n    for(int i = word.size()-1; i >= 0; i--)\n    {\n        if(word.at(i)\
    \ == vowels.at(word.size()-i))\n        {\n            return word.at(i);\n  \
    \      }\n    }\n    \n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_reverse = vowels.rbegin();\n    \n    size_t pos = 0;\n \
    \   size_t pos_reverse = 0;\n    size_t vowel_count = 0;\n    size_t vowel_reverse_count\
    \ = 0;\n    \n    for(size_t i = 0; i < word.length(); i++)\n    {\n        pos\
    \ = word.find_first_not_of(vowels, pos);\n        pos_reverse = word.find_last_not_of(vowels_reverse,\
    \ pos_reverse);\n        \n        if(pos != string::npos && pos_reverse != string::npos)\n\
    \        {\n            vowel_count++;\n            vowel_reverse_count++;\n \
    \       }\n        \n        if(pos == string::npos || pos_reverse == string::npos)\n\
    \        {\n            break;\n        }\n    }\n    \n    if(vowel_count > vowel_reverse_count)\n\
    \    {\n        return word.substr(0, pos);\n    }\n    else if(vowel_count <\
    \ vowel_reverse_count)\n    {\n        return word.substr(word.length() - 1, word.length());\n\
    \    }\n    \n    return \"\";\n}\n</code>\n<|/ a tags=string,c++ |>\n<| c |>\n\
    This doesn't work if the word is \"ab\". It returns \"a\" instead of \"\".\n<|/\
    \ c |>\n<| c |>\nThanks for pointing out. I fixed the bug. Now it works fine.\n\
    <|/ c |>\n<| c |>\nThis code doesn't work if the word is \"ab\". It returns \"\
    a\" instead of \"\".\n<|/ c |>\n<| c |>\nThanks for pointing out. I fixed the\
    \ bug. Now it works fine.\n<|/ c |>\n<| a tags=string,c++ |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    \n    int start = 0;\n    int end = word.length() - 1;\n\
    \    int mid = 0;\n    \n    while (start < end)\n    {\n        mid = (start\
    \ + end) / 2;\n        \n        if (word.at(mid) == vowels.at(mid))\n       \
    \ {\n            end = mid - 1;\n        }\n        else if (word.at(mid) == vowels.at(mid+1))\n\
    \        {\n            start = mid + 1;\n        }\n        else\n        {\n\
    \            start = mid;\n            end = mid - 1;\n        }\n    }\n    \n\
    \    return word.at(start);\n}", "{\n    \n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o'\
    \ || word[i]=='u')\n        {\n            int j=i;\n            while(j>0 &&\
    \ word[j]!='a' && word[j]!='e' && word[j]!='i' && word[j]!='o' && word[j]!='u')\n\
    \            {\n                j--;\n            }\n            int k=j;\n  \
    \          while(k<word.length() && word[k]!='a' && word[k]!='e' && word[k]!='i'\
    \ && word[k]!='o' && word[k]!='u')\n            {\n                k++;\n    \
    \        }\n            int l=j;\n            while(l>0 && word[l]!='a' && word[l]!='e'\
    \ && word[l]!='i' && word[l]!='o' && word[l]!='u')\n            {\n          \
    \      l--;\n            }\n            int m=l;\n            while(m<word.length()\
    \ && word[m]!='a' && word[m]!='e' && word[m]!='i' && word[m]!='o' && word[m]!='u')\n\
    \            {\n                m++;\n            }\n            if(j>k)\n   \
    \         {\n                return word[j];\n            }\n            if(l>k)\n\
    \            {\n                return word[l];\n            }\n            if(m>k)\n\
    \            {\n                return word[m];\n            }\n        }\n  \
    \  }\n    return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string vowels_right = vowels.substr(vowels.rfind('e')\
    \ + 1);\n    string vowels_left = vowels.substr(0, vowels.rfind('e'));\n    \n\
    \    string vowels_right_to_left = vowels_right.substr(vowels_right.rfind('e')\
    \ + 1);\n    string vowels_left_to_right = vowels_left.substr(0, vowels_left.rfind('e'));\n\
    \    \n    string vowels_right_to_left_to_right = vowels_right_to_left.substr(vowels_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left = vowels_left_to_right.substr(0,\
    \ vowels_left_to_right.rfind('e'));\n    \n    string vowels_right_to_left_to_right_to_left\
    \ = vowels_right_to_left_to_right.substr(vowels_right_to_left_to_right.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right = vowels_left_to_right_to_left.substr(0,\
    \ vowels_left_to_right_to_left.rfind('e'));\n    \n    string vowels_right_to_left_to_right_to_left_to_right\
    \ = vowels_right_to_left_to_right_to_left.substr(vowels_right_to_left_to_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right_to_left = vowels_left_to_right_to_left_to_right_to_left.substr(0,\
    \ vowels_left_to_right_to_left_to_right_to_left.rfind('e'));\n    \n    string\
    \ vowels_right_to_left_to_right_to_left_to_right_to_left = vowels_right_to_left_to_right_to_left_to_right_to_left.substr(vowels_right_to_left_to_right_to_left_to_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_left_to_right_to_left_to_right_to_left_to_right_to_left.substr(0, vowels_left_to_right_to_left_to_right_to_left_to_right_to_left.rfind('e'));\n\
    \    \n    string vowels_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left.substr(vowels_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left.substr(0,\
    \ vowels_left_to_right_to_left_to_right_to_left_to_right_to_left_", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 1)\n        {\n            int min = it->second;\n\
    \            string vowel = it->first;\n            int index = word.length()\
    \ - 1;\n            while(index >= 0)\n            {\n                if(isVowel(word[index]))\n\
    \                {\n                    if(it->second < vowels[word[index]])\n\
    \                    {\n                        vowels[word[index]]++;\n     \
    \                   min = it->second;\n                        vowel = it->first;\n\
    \                        index = word.length() - 1;\n                    }\n \
    \                   else\n                    {\n                        if(vowels[word[index]]\
    \ > min)\n                        {\n                            vowels[word[index]]++;\n\
    \                            min = vowels[word[index]];\n                    \
    \        vowel = it->first;\n                            index = word.length()\
    \ - 1;\n                        }\n                        else\n            \
    \            {\n                            vowels[word[index]]++;\n         \
    \                   min = vowels[word[index]];\n                            vowel\
    \ = it->first;\n                            index = word.length() - 1;\n     \
    \                   }\n                    }\n                }\n            \
    \    else\n                {\n                    if(vowels[word[index]] > min)\n\
    \                    {\n                        vowels[word[index]]++;\n     \
    \                   min = vowels[word[index]];\n                        vowel\
    \ = it->first;\n                        index = word.length() - 1;\n         \
    \           }\n                    else\n                    {\n             \
    \           vowels[word[index]]++;\n                        min = vowels[word[index]];\n\
    \                        vowel = it->first;\n                        index = word.length()\
    \ - 1;\n                    }\n                }\n            }\n            \n\
    \            if(vowel == \"\")\n            {\n                return \"\";\n\
    \            }\n            else\n            {\n                return vowel;\n\
    \            }\n        }\n    }\n    \n    return \"\";\n}", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        auto\
    \ it = vowels.find(word[i]);\n        if(it == vowels.end())\n        {\n    \
    \        vowels[word[i]] = 1;\n        }\n        else\n        {\n          \
    \  vowels[word[i]]++;\n        }\n    }\n    \n    map<string, int>::iterator\
    \ it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n       \
    \ if(it->second == 1)\n        {\n            return it->first;\n        }\n \
    \   }\n    return \"\";\n}", "{\n    map<string, int> vowels;\n    for(int i =\
    \ 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n        {\n\
    \            vowels[word[i]]++;\n        }\n    }\n    \n    map<string, int>::iterator\
    \ it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n       \
    \ if(it->second > 0)\n        {\n            string vowel = it->first;\n     \
    \       int count = it->second;\n            int index = word.length() - 1;\n\
    \            while(index >= 0 && isVowel(word[index]))\n            {\n      \
    \          count--;\n                index--;\n            }\n            if(count\
    \ > 0)\n            {\n                return vowel;\n            }\n        }\n\
    \    }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    \n\
    \    int left = 0;\n    int right = word.length() - 1;\n    \n    while(left <=\
    \ right)\n    {\n        int mid = (left + right) / 2;\n        \n        if(word.at(mid)\
    \ == vowels.at(mid))\n        {\n            left = mid;\n        }\n        else\n\
    \        {\n            right = mid;\n        }\n    }\n    \n    return word.at(left);\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int left = 0;\n    int\
    \ right = word.length() - 1;\n    \n    while(left < right) {\n        string\
    \ middle = word.substr(left, right - left + 1);\n        \n        if(middle.length()\
    \ == 0) {\n            return \"\";\n        }\n        \n        string middleVowel\
    \ = middle.substr(0, 1);\n        \n        if(middleVowel == vowels) {\n    \
    \        return middleVowel;\n        }\n        \n        string middleVowel2\
    \ = middle.substr(middleVowel.length(), 1);\n        \n        if(middleVowel2\
    \ == vowels) {\n            return middleVowel2;\n        }\n        \n      \
    \  left++;\n        right--;\n    }\n    \n    return \"\";\n}\n</code>\n<|/ a\
    \ tags=string,c++,algorithm |>\n<| c |>\nThis fails for \"ab\" because \"ab\"\
    \ contains no vowels.\n<|/ c |>\n<| c |>\nI didn't see that requirement in the\
    \ question. I've updated the answer to handle that case.\n<|/ c |>\n<| c |>\n\
    This fails for \"ab\" because \"ab\" contains no vowels.\n<|/ c |>\n<| c |>\n\
    I didn't see that requirement in the question. I've updated the answer to handle\
    \ that case.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            vowels[word[i]] = 1;\n        }\n    }\n    for(int i\
    \ = word.length() - 1; i >= 0; i--)\n    {\n        if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n \
    \           vowels[word[i]] = 1;\n        }\n    }\n    map<string, int>::iterator\
    \ it;\n    string result = \"\";\n    for(it = vowels.begin(); it != vowels.end();\
    \ it++)\n    {\n        if(it->second == 1)\n        {\n            result +=\
    \ it->first;\n            break;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis code does not work. Try it out with input \"ab\".\n<|/\
    \ c |>\n<| c |>\nIt works fine for me. Try it out with input \"ab\".\n<|/ c |>\n\
    <| c |>\nIt doesn't work for \"ab\" because \"ab\" contains no vowels.\n<|/ c\
    \ |>\n<| c |>\nIt works for me. Try it out with input \"ab\".\n<|/ c |>\n<| c\
    \ |>\nIt works for me too. Try it out with input \"ab\".\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <map>\nusing namespace\
    \ std;", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int len = word.length();\n\
    \    int start = 0;\n    int end = len - 1;\n    \n    while(start < end)\n  \
    \  {\n        string vowel = word.substr(start, 1);\n        \n        if(vowels.find(vowel)\
    \ != string::npos)\n        {\n            int index = vowels.find(vowel);\n \
    \           \n            if(index > 0)\n            {\n                start\
    \ = index - 1;\n            }\n            else\n            {\n             \
    \   end = index;\n            }\n        }\n        else\n        {\n        \
    \    start = end;\n            end = end - 1;\n        }\n    }\n    \n    return\
    \ word.substr(start, 1);\n}\n</code>\n<|/ a tags=c++,string |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    int start = 0;\n    int end = word.length() - 1;\n\
    \    while(start <= end)\n    {\n        int mid = start + (end - start) / 2;\n\
    \        if(word[mid] == 'a' || word[mid] == 'e' || word[mid] == 'i' || word[mid]\
    \ == 'o' || word[mid] == 'u')\n        {\n            end = mid - 1;\n       \
    \ }\n        else\n        {\n            start = mid + 1;\n        }\n    }\n\
    \    return word[start];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n    int end = word.length()\
    \ - 1;\n    \n    while(start < end)\n    {\n        if(word[start] == vowels[word[start].toUpper()]\
    \ && word[end] == vowels[word[end].toUpper()])\n        {\n            return\
    \ word[start];\n        }\n        \n        start++;\n        end--;\n    }\n\
    \    \n    return \"\";\n}", "{\n    int len = word.length();\n    for(int i =\
    \ len-1; i >= 0; i--)\n    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n            int j =\
    \ i+1;\n            while(j < len && word[j] != 'a' && word[j] != 'e' && word[j]\
    \ != 'i' && word[j] != 'o' && word[j] != 'u')\n            {\n               \
    \ j++;\n            }\n            if(j == len)\n            {\n             \
    \   return word[i];\n            }\n        }\n    }\n    return \"\";\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis code fails for \"ab\" as it\
    \ will return \"a\" instead of \"\"\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    int left = 0;\n    int right = word.length() - 1;\n    int mid\
    \ = 0;\n    int vowel_count = 0;\n    string vowel = \"\";\n    \n    while(left\
    \ < right)\n    {\n        mid = (left + right) / 2;\n        \n        if(word[mid]\
    \ == 'a' || word[mid] == 'e' || word[mid] == 'i' || word[mid] == 'o' || word[mid]\
    \ == 'u')\n        {\n            vowel_count++;\n        }\n        else if(word[mid]\
    \ == 'A' || word[mid] == 'E' || word[mid] == 'I' || word[mid] == 'O' || word[mid]\
    \ == 'U')\n        {\n            vowel_count++;\n        }\n        else if(word[mid]\
    \ == 'y' || word[mid] == 'u' || word[mid] == 'Y' || word[mid] == 'U')\n      \
    \  {\n            vowel_count++;\n        }\n        else if(word[mid] == 'o'\
    \ || word[mid] == 'O')\n        {\n            vowel_count++;\n        }\n   \
    \     else if(word[mid] == 'e' || word[mid] == 'E')\n        {\n            vowel_count++;\n\
    \        }\n        else if(word[mid] == 'i' || word[mid] == 'I')\n        {\n\
    \            vowel_count++;\n        }\n        else if(word[mid] == 'a' || word[mid]\
    \ == 'A')\n        {\n            vowel_count++;\n        }\n        else if(word[mid]\
    \ == 'f' || word[mid] == 'F')\n        {\n            vowel_count++;\n       \
    \ }\n        else if(word[mid] == 'l' || word[mid] == 'L')\n        {\n      \
    \      vowel_count++;\n        }\n        else if(word[mid] == 's' || word[mid]\
    \ == 'S')\n        {\n            vowel_count++;\n        }\n        else if(word[mid]\
    \ == 'd' || word[mid] == 'D')\n        {\n            vowel_count++;\n       \
    \ }\n        else if(word[mid] == 'c' || word[mid] == 'C')\n        {\n      \
    \      vowel_count++;\n        }\n        else if(word[mid] == 'k' || word[mid]\
    \ == 'K')\n        {\n            vowel_count++;\n        }\n        else if(word[mid]\
    \ == 'm' || word[mid] == 'M')\n        {\n            vowel_count++;\n       \
    \ }\n        else if(word[mid] == 'p' || word[mid] == 'P')\n        {\n      \
    \      vowel_count++;\n        }\n        else if(word[mid] == 't' || word[mid]\
    \ == 'T')\n        {\n            vowel_count++;\n        }\n        else if(word[mid]\
    \ == 'b' || word[mid] == 'B')\n        {\n            vowel_count++;\n       \
    \ }\n        else if(word[mid] == 'v' || word[", "{\n    string vowels = \"AEIOUaeiou\"\
    ;\n    \n    for(int i=word.length()-1;i>=0;i--)\n    {\n        if(vowels.find(word[i])\
    \ != string::npos)\n        {\n            int index = vowels.find(word[i]);\n\
    \            int index2 = word.length()-1;\n            int index3 = word.length()-2;\n\
    \            int index4 = word.length()-3;\n            int index5 = word.length()-4;\n\
    \            int index6 = word.length()-5;\n            int index7 = word.length()-6;\n\
    \            int index8 = word.length()-7;\n            int index9 = word.length()-8;\n\
    \            int index10 = word.length()-9;\n            int index11 = word.length()-10;\n\
    \            int index12 = word.length()-11;\n            int index13 = word.length()-12;\n\
    \            int index14 = word.length()-13;\n            int index15 = word.length()-14;\n\
    \            int index16 = word.length()-15;\n            int index17 = word.length()-16;\n\
    \            int index18 = word.length()-17;\n            int index19 = word.length()-18;\n\
    \            int index20 = word.length()-19;\n            int index21 = word.length()-20;\n\
    \            int index22 = word.length()-21;\n            int index23 = word.length()-22;\n\
    \            int index24 = word.length()-23;\n            int index25 = word.length()-24;\n\
    \            int index26 = word.length()-25;\n            int index27 = word.length()-26;\
    \ \n            int index28 = word.length()-27;\n            int index29 = word.length()-28;\n\
    \            int index30 = word.length()-29;\n            int index31 = word.length()-30;\n\
    \            int index32 = word.length()-31;\n            int index33 = word.length()-32;\n\
    \            int index34 = word.length()-33;\n            int index35 = word.length()-34;\n\
    \            int index36 = word.length()-35;\n            int index37 = word.length()-36;\n\
    \            int index38 = word.length()-37;\n            int index39 = word.length()-38;\n\
    \            int index40 = word.length()-39;\n            int index41 = word.length()-40;\n\
    \            int index42 = word.length()-41;\n            int index43 = ", "{\n\
    \    int len = word.length();\n    for(int i = len-1; i >= 0; i--)\n    {\n  \
    \      if(isVowel(word[i]))\n        {\n            int j = word.find_last_of(\"\
    aeiou\");\n            if(j != -1)\n            {\n                string a =\
    \ word.substr(0, j);\n                string b = word.substr(j+1);\n         \
    \       string c = word.substr(0, i);\n                string d = word.substr(i+1);\n\
    \                string e = word.substr(0, j+1);\n                string f = word.substr(j+2);\n\
    \                string g = word.substr(i+2);\n                string h = word.substr(0,\
    \ i+1);\n                string i = word.substr(i+2);\n                string\
    \ j = word.substr(i+3);\n                string k = word.substr(i+4);\n      \
    \          string l = word.substr(i+5);\n                string m = word.substr(i+6);\n\
    \                string n = word.substr(i+7);\n                string o = word.substr(i+8);\n\
    \                string p = word.substr(i+9);\n                string q = word.substr(i+10);\n\
    \                string r = word.substr(i+11);\n                string s = word.substr(i+12);\n\
    \                string t = word.substr(i+13);\n                string u = word.substr(i+14);\n\
    \                string v = word.substr(i+15);\n                string w = word.substr(i+16);\n\
    \                string x = word.substr(i+17);\n                string y = word.substr(i+18);\n\
    \                string z = word.substr(i+19);\n                string A = word.substr(i+20);\n\
    \                string B = word.substr(i+21);\n                string C = word.substr(i+22);\n\
    \                string D = word.substr(i+23);\n                string E = word.substr(i+24);\n\
    \                string F = word.substr(i+25);\n                string G = word.substr(i+26);\n\
    \                string H = word.substr(i+27);\n                string I = word.substr(i+28);\n\
    \                string J = word.substr(i+29);\n                string K = word.substr(i+30);\n\
    \                string L = word.substr(i+31);\n                string M = word.substr(i+32);\n\
    \                string N = word.substr(i+33);\n                string O = word.substr(i+34);\n\
    \                string P = word.substr(i+35);\n                string Q = word.substr(i+36);\n\
    \                string R = word.substr(i+37);\n                string S = word.substr(i+38);\n\
    \                string T = word.substr(i+39);\n                string U = word.substr(i+40);\n\
    \                string V = word.substr(i+41);\n                string W = word.substr(i+42);\n\
    \                string X = word.substr(i+43);\n                string Y = word.substr(i+44);\n\
    \                string Z = word.substr(i+45);\n                string ", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.size()-1; i >=\
    \ 0; i--)\n    {\n        if(vowels.find(word[i]) != string::npos)\n        {\n\
    \            int index = vowels.find(word[i]);\n            int index2 = vowels.find(word[i+1],\
    \ index+1);\n            \n            if(index2 != string::npos)\n          \
    \  {\n                return word[i+2];\n            }\n        }\n    }\n   \
    \ \n    return \"\";\n}", "{\n    map<string, int> vowels;\n    for(int i = 0;\
    \ i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n        {\n  \
    \          vowels[word[i]]++;\n        }\n    }\n    \n    map<string, int>::iterator\
    \ it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n       \
    \ if(it->second > 1)\n        {\n            string vowel = it->first;\n     \
    \       int vowel_count = it->second;\n            int vowel_count_from_right\
    \ = vowel_count - 1;\n            int vowel_count_from_left = vowel_count + 1;\n\
    \            \n            int min_count = min(vowel_count_from_right, vowel_count_from_left);\n\
    \            int max_count = max(vowel_count_from_right, vowel_count_from_left);\n\
    \            \n            int min_vowel_distance = distance(vowel, word.substr(0,\
    \ i));\n            int max_vowel_distance = distance(vowel, word.substr(word.length()\
    \ - i));\n            \n            int min_vowel_distance = min(min_vowel_distance,\
    \ max_vowel_distance);\n            int max_vowel_distance = max(min_vowel_distance,\
    \ max_vowel_distance);\n            \n            if(min_count <= max_vowel_distance\
    \ && max_count >= min_vowel_distance)\n            {\n                return vowel;\n\
    \            }\n        }\n    }\n    \n    return \"\";\n}", "{\n    \n    string\
    \ vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length() - 1; i >= 0; i--)\n\
    \    {\n        if(vowels.find(word[i]) != string::npos)\n        {\n        \
    \    int index = word[i].toupper() - 'A';\n            int index = index - 1;\n\
    \            int index = index - 1;\n            int index = index - 1;\n    \
    \        int index = index - 1;\n            int index = index - 1;\n        \
    \    int index = index - 1;\n            int index = index - 1;\n            int\
    \ index = index - 1;\n            int index = index - 1;\n            int index\
    \ = index - 1;\n            int index = index - 1;\n            int index = index\
    \ - 1;\n            int index = index - 1;\n            int index = index - 1;\n\
    \            int index = index - 1;\n            int index = index - 1;\n    \
    \        int index = index - 1;\n            int index = index - 1;\n        \
    \    int index = index - 1;\n            int index = index - 1;\n            int\
    \ index = index - 1;\n            int index = index - 1;\n            int index\
    \ = index - 1;\n            int index = index - 1;\n            int index = index\
    \ - 1;\n            int index = index - 1;\n            int index = index - 1;\n\
    \            int index = index - 1;\n            int index = index - 1;\n    \
    \        int index = index - 1;\n            int index = index - 1;\n        \
    \    int index = index - 1;\n            int index = index - 1;\n            int\
    \ index = index - 1;\n            int index = index - 1;\n            int index\
    \ = index - 1;\n            int index = index - 1;\n            int index = index\
    \ - 1;\n            int index = index - 1;\n            int index = index - 1;\n\
    \            int index = index - 1;\n            int index = index - 1;\n    \
    \        int index = index - 1;\n            int index = index - 1;\n        \
    \    int index = index - 1;\n            int index = index - 1;\n            int\
    \ index = index - 1;\n            int index = index - 1;\n            int index\
    \ = index - 1;\n            int index = index - 1;\n            int index = index\
    \ - 1;\n            int index = index - 1;\n            int index = index - 1;\n\
    \            int index = index - 1;\n            int index = index - 1;\n    \
    \        int index = index - 1;\n            int index = index - 1;\n        \
    \    int index = index - 1;\n            int index = index - 1;\n            int\
    \ index = index - 1;\n            int index = index - 1;\n            int index\
    \ = index - 1;\n            int index = index - 1;\n            int index = index\
    \ - 1;\n            int index = index - ", "{\n    map<string, int> vowels;\n\
    \    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 0)\n        {\n            int min = it->second;\n\
    \            string vowel = it->first;\n            for(int i = word.length()\
    \ - 1; i >= 0; i--)\n            {\n                if(isVowel(word[i]))\n   \
    \             {\n                    if(it->second < vowels[word[i]])\n      \
    \              {\n                        vowels[word[i]] = it->second;\n    \
    \                    vowel = word[i];\n                    }\n               \
    \ }\n            }\n            if(vowel != \"\")\n            {\n           \
    \     return vowel;\n            }\n        }\n    }\n    return \"\";\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n    int end =\
    \ word.length() - 1;\n    \n    while(start < end)\n    {\n        if(word[start]\
    \ == vowels[word[start].toUpper()] && word[end] == vowels[word[end].toUpper()])\n\
    \        {\n            return word[start];\n        }\n        \n        start++;\n\
    \        end--;\n    }\n    \n    return \"\";\n}", "{\n    map<string, int> vowels;\n\
    \    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 0)\n        {\n            int min = it->second;\n\
    \            string vowel = it->first;\n            \n            for(int i =\
    \ word.length() - 1; i >= 0; i--)\n            {\n                if(isVowel(word[i]))\n\
    \                {\n                    if(vowels[word[i]] > min)\n          \
    \          {\n                        min = vowels[word[i]];\n               \
    \         vowel = word[i];\n                    }\n                }\n       \
    \     }\n            \n            return vowel;\n        }\n    }\n    \n   \
    \ return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start\
    \ = 0;\n    int end = word.length() - 1;\n    \n    while(start <= end)\n    {\n\
    \        if(word[start] == vowels[word[start].toInt()])\n        {\n         \
    \   start++;\n        }\n        else if(word[end] == vowels[word[end].toInt()])\n\
    \        {\n            end--;\n        }\n        else\n        {\n         \
    \   int mid = start + (end - start) / 2;\n            \n            if(word[mid]\
    \ == vowels[word[mid].toInt()])\n            {\n                end = mid - 1;\n\
    \            }\n            else\n            {\n                start = mid +\
    \ 1;\n            }\n        }\n    }\n    \n    return word[start];\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int vowel_found = 0;\n  \
    \  int consonant_found = 0;\n    string vowel_before = \"\";\n    string vowel_after\
    \ = \"\";\n    string consonant_before = \"\";\n    string consonant_after = \"\
    \";\n    \n    while(i < len && j < len) {\n        if(word[i] == vowels[k]) {\n\
    \            vowel_found = 1;\n            vowel_before = word.substr(0, i);\n\
    \            vowel_after = word.substr(i + 1, len - i);\n            consonant_before\
    \ = word.substr(0, j);\n            consonant_after = word.substr(j + 1, len -\
    \ j);\n            \n            i = j;\n            j = len;\n            k =\
    \ len - 1;\n        }\n        \n        if(word[j] == vowels[k]) {\n        \
    \    vowel_found = 1;\n            vowel_before = word.substr(0, j);\n       \
    \     vowel_after = word.substr(j + 1, len - j);\n            consonant_before\
    \ = word.substr(0, i);\n            consonant_after = word.substr(i + 1, len -\
    \ i);\n            \n            i = j;\n            j = len;\n            k =\
    \ len - 1;\n        }\n        \n        if(word[i] == consonant_before) {\n \
    \           consonant_found = 1;\n            consonant_before = word.substr(0,\
    \ i);\n            consonant_after = word.substr(i + 1, len - i);\n          \
    \  \n            i = j;\n            j = len;\n            k = len - 1;\n    \
    \    }\n        \n        if(word[j] == consonant_after) {\n            consonant_found\
    \ = 1;\n            consonant_before = word.substr(0, j);\n            consonant_after\
    \ = word.substr(j + 1, len - j);\n            \n            i = j;\n         \
    \   j = len;\n            k = len - 1;\n        }\n        \n        if(vowel_found\
    \ && consonant_found) {\n            break;\n        }\n        \n        i++;\n\
    \        j++;\n        k--;\n    }\n    \n    if(vowel_found == 0 && consonant_found\
    \ == 0) {\n        return \"\";\n    }\n    \n    if(vowel_found == 1) {\n   \
    \     return vowel_after;\n    }\n    \n    if(consonant_found == 1) {\n     \
    \   return consonant_after;\n    }\n    \n    return \"\";\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for your answer! I tried to implement it but I'm\
    \ getting a segmentation fault at `if(vowel_found == 1 && consonant_found == 1)`\
    \ line. Do ", "{\n    map<string, int> vowels;\n    for(int i = 0; i < word.length();\
    \ i++)\n    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u')\n        {\n            vowels[word[i]]++;\n\
    \        }\n    }\n    map<string, int>::iterator it;\n    string vowel;\n   \
    \ for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n        if(it->second\
    \ > 0)\n        {\n            vowel = it->first;\n            break;\n      \
    \  }\n    }\n    return vowel;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n\
    <| c |>\nThis code doesn't work. Try it on \"ab\" for example. It returns \"a\"\
    \ instead of \"\".\n<|/ c |>\n<| c |>\nIt works fine for me. Try it on \"ab\"\
    . It returns \"\".\n<|/ c |>\n<| c |>\nYes, it works fine for me. Try it on \"\
    ab\". It returns \"\".\n<|/ c |>\n<| c |>\nYes, it works fine for me. Try it on\
    \ \"ab\". It returns \"\".\n<|/ c |>\n<| c |>\nIt works fine for me. Try it on\
    \ \"ab\". It returns \"\".\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    map<string,\
    \ int> vowels;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] =\
    \ 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] =\
    \ 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string vowels_reversed = vowels.rbegin();\n  \
    \  string vowels_reversed_reversed = vowels_reversed.rbegin();\n    \n    string\
    \ vowels_reversed_reversed_reversed = vowels_reversed_reversed.rbegin();\n   \
    \ \n    string vowels_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n \
    \   \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reverse", "{\n    string vowels = \"AEIOUaeiou\";\n    \n\
    \    for(int i=word.length()-1;i>=0;i--)\n    {\n        for(int j=0;j<vowels.length();j++)\n\
    \        {\n            if(vowels[j] == word[i])\n            {\n            \
    \    if(j == 0)\n                {\n                    return word[i];\n    \
    \            }\n                else if(j == vowels.length()-1)\n            \
    \    {\n                    return word[i+1];\n                }\n           \
    \     else\n                {\n                    return word[i+1];\n       \
    \         }\n            }\n        }\n    }\n    return \"\";\n}", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        char\
    \ c = word[i];\n        if(isalpha(c))\n        {\n            if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n             \
    \   vowels[c] = 1;\n            }\n        }\n    }\n    \n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        char c = word[i];\n        if(isalpha(c))\n\
    \        {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u')\n            {\n                if(vowels.find(c) == vowels.end())\n  \
    \              {\n                    return \"\";\n                }\n      \
    \          else\n                {\n                    int index = vowels.find(c);\n\
    \                    if(index > 0)\n                    {\n                  \
    \      int diff = abs(index - word.length());\n                        if(diff\
    \ < vowels.size())\n                        {\n                            int\
    \ min = index;\n                            for(int j = index + 1; j < word.length();\
    \ j++)\n                            {\n                                char d\
    \ = word[j];\n                                if(isalpha(d))\n               \
    \                 {\n                                    if(d == 'a' || d == 'e'\
    \ || d == 'i' || d == 'o' || d == 'u')\n                                    {\n\
    \                                        vowels[d] = 1;\n                    \
    \                }\n                                }\n                      \
    \      }\n                            if(vowels.find(c) == vowels.end())\n   \
    \                         {\n                                return \"\";\n  \
    \                          }\n                            else\n             \
    \               {\n                                int min2 = vowels.find(c);\n\
    \                                if(min2 < vowels.size())\n                  \
    \              {\n                                    int min3 = min2;\n     \
    \                               for(int j = min2 + 1; j <word.length(); j++)\n\
    \                                    {\n                                     \
    \   char d = word[j];\n                                        if(isalpha(d))\n\
    \                                        {\n                                 \
    \           if(d == 'a' || d == 'e' || d == 'i' || d == 'o' || d == 'u')\n   \
    \                                         {\n                                \
    \                vowels[d] = 1;\n                                            }\n\
    \                                        }\n                                 \
    \   }\n                                    if(vowels.find(c) == vowels.end())\n\
    \                                    {\n                                     \
    \   return \"\";\n                                    }\n                    \
    \                else\n                                    {\n               \
    \                         int min4 = vowels.find(c);\n                       \
    \                 if(min4 < vowels.size())\n                                 \
    \       {\n                                            int min5 = min4;\n    \
    \                                        for(int j = min4 + 1; j <word.length();\
    \ j++)\n                                            {\n                      \
    \                          char d = word[j];\n                               \
    \                 if(isalpha(d))\n                                           \
    \     {\n                                                    if(d == 'a' || d\
    \ == 'e' || d == 'i' || d == 'o' || d == 'u')\n", "{\n    map<string, int> vowels;\n\
    \    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 0)\n        {\n            string vowel = it->first;\n\
    \            int count = it->second;\n            int index = word.length() -\
    \ 1;\n            while(index >= 0)\n            {\n                if(isVowel(word[index]))\n\
    \                {\n                    if(word[index] == vowel)\n           \
    \         {\n                        count--;\n                    }\n       \
    \             else\n                    {\n                        break;\n  \
    \                  }\n                }\n                index--;\n          \
    \  }\n            if(count > 0)\n            {\n                return vowel;\n\
    \            }\n        }\n    }\n    return \"\";\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    \n    for(int i = word.size()-1; i >= 0; i--)\n    {\n\
    \        if(word.at(i) == vowels.at(word.size()-i))\n        {\n            return\
    \ word.at(i);\n        }\n    }\n    \n    return \"\";\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    int left\
    \ = 0;\n    int right = word.length() - 1;\n    int mid = 0;\n    while(left <\
    \ right)\n    {\n        mid = (left + right) / 2;\n        if(word[mid] >= 'a'\
    \ && word[mid] <= 'z')\n        {\n            right = mid;\n        }\n     \
    \   else if(word[mid] >= 'A' && word[mid] <= 'Z')\n        {\n            left\
    \ = mid + 1;\n        }\n        else\n        {\n            left = mid + 1;\n\
    \            right = mid - 1;\n        }\n    }\n    return word[mid];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\npublic String getVowel(String word) {\n  \
    \  char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n    char[] consonants = { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n    char[] letters = word.toCharArray();\n    int start\
    \ = 0;\n    int end = 0;\n    int mid = 0;\n    int index = 0;\n    int vowelCount\
    \ = 0;\n    int consonantCount = 0;\n    int letterCount = 0;\n    int vowelIndex\
    \ = 0;\n    int consonantIndex = 0;\n    int letterIndex = 0;\n    while (start\
    \ < letters.length) {\n        while (end < letters.length) {\n            mid\
    \ = (start + end) / 2;\n            if (letters[mid] >= 'a' && letters[mid] <=\
    \ 'z') {\n                end = mid + 1;\n            } else if (letters[mid]\
    \ >= 'A' && letters[mid] <= 'Z') {\n                start = mid + 1;\n       \
    \     } else {\n                start = mid + 1;\n                end = mid -\
    \ 1;\n            }\n        }\n        if (letters[start] == 'a' || letters[start]\
    \ == 'e' || letters[start] == 'i' || letters[start] == 'o' || letters[start] ==\
    \ 'u') {\n            vowelCount++;\n            vowelIndex++;\n        }\n  \
    \      if (letters[end] == 'a' || letters[end] == 'e' || letters[end] == 'i' ||\
    \ letters[end] == 'o' || letters[end] == 'u') {\n            vowelCount++;\n \
    \           vowelIndex++;\n        }\n        if (letters[start] == 'b' || letters[start]\
    \ == 'c' || letters[start] == 'd' || letters[start] == 'f' || letters[start] ==\
    \ 'g' || letters[start] == 'h' || letters[start] == 'j' || letters[start] == 'k'\
    \ || letters[start] == 'l' || letters[start] == 'm' || letters[start] == 'n' ||\
    \ letters[start] == 'p' || letters[start] == '", "{\n    map<string, int> vowels;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y", "{\n    map<string, int> vowels;\n \
    \   vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    \n    map<string, int> consonants;\n  \
    \  consonants[\"b\"] = 1;\n    consonants[\"c\"] = 1;\n    consonants[\"d\"] =\
    \ 1;\n    consonants[\"f\"] = 1;\n    consonants[\"g\"] = 1;\n    consonants[\"\
    h\"] = 1;\n    consonants[\"j\"] = 1;\n    consonants[\"k\"] = 1;\n    consonants[\"\
    l\"] = 1;\n    consonants[\"m\"] = 1;\n    consonants[\"n\"] = 1;\n    consonants[\"\
    p\"] = 1;\n    consonants[\"q\"] = 1;\n    consonants[\"r\"] = 1;\n    consonants[\"\
    s\"] = 1;\n    consonants[\"t\"] = 1;\n    consonants[\"v\"] = 1;\n    consonants[\"\
    w\"] = 1;\n    consonants[\"x\"] = 1;\n    consonants[\"y\"] = 1;\n    consonants[\"\
    z\"] = 1;\n    \n    map<string, int> consonants2;\n    consonants2[\"c\"] = 1;\n\
    \    consonants2[\"d\"] = 1;\n    consonants2[\"f\"] = 1;\n    consonants2[\"\
    g\"] = 1;\n    consonants2[\"h\"] = 1;\n    consonants2[\"j\"] = 1;\n    consonants2[\"\
    k\"] = 1;\n    consonants2[\"l\"] = 1;\n    consonants2[\"m\"] = 1;\n    consonants2[\"\
    n\"] = 1;\n    consonants2[\"p\"] = 1;\n    consonants2[\"q\"] = 1;\n    consonants2[\"\
    r\"] = 1;\n    consonants2[\"s\"] = 1;\n    consonants2[\"t\"] = 1;\n    consonants2[\"\
    v\"] = 1;\n    consonants2[\"w\"] = 1;\n    consonants2[\"x\"] = 1;\n    consonants2[\"\
    y\"] = 1;\n    consonants2[\"z\"] = 1;\n    \n    map<string, int> consonants3;\n\
    \    consonants3[\"c\"] = 1;\n    consonants3[\"d\"] = 1;\n    consonants3[\"\
    f\"] = 1;\n    consonants3[\"g\"] = 1;\n    consonants3[\"h\"] = 1;\n    consonants3[\"\
    j\"] = 1;\n    consonants3[\"k\"] = 1;\n    consonants3[\"l\"] = 1;\n    consonants3[\"\
    m\"] = 1;\n", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        if(vowels.find(word[i]) != string::npos)\n\
    \        {\n            int index = vowels.find(word[i]);\n            int vowel_pos\
    \ = index - 1;\n            int vowel_len = vowels.length();\n            \n \
    \           while(vowel_pos >= 0 && vowel_pos < vowel_len)\n            {\n  \
    \              if(word[i] == vowels[vowel_pos])\n                {\n         \
    \           return word[i];\n                }\n                \n           \
    \     vowel_pos--;\n            }\n        }\n    }\n    \n    return \"\";\n}",
  "{\n    map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n \
    \   {\n        if(isVowel(word[i]))\n        {\n            vowels[word[i]] +=\
    \ 1;\n        }\n    }\n    \n    map<string, int>::iterator it;\n    for(it =\
    \ vowels.begin(); it != vowels.end(); it++)\n    {\n        if(it->second > 0)\n\
    \        {\n            int min = it->second;\n            string vowel = it->first;\n\
    \            \n            for(int i = word.length() - 1; i >= 0; i--)\n     \
    \       {\n                if(isVowel(word[i]))\n                {\n         \
    \           if(word[i] == vowel)\n                    {\n                    \
    \    min++;\n                    }\n                    else\n               \
    \     {\n                        break;\n                    }\n             \
    \   }\n            }\n            \n            if(min == it->second)\n      \
    \      {\n                return vowel;\n            }\n        }\n    }\n   \
    \ \n    return \"\";\n}", "{\n    map<string, int> vowels;\n    for(int i = 0;\
    \ i < word.length(); i++)\n    {\n        if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n        \
    \    vowels[word[i]]++;\n        }\n    }\n    map<string, int>::iterator it;\n\
    \    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n        if(it->second\
    \ > 0)\n        {\n            int min = it->second;\n            string minVowel\
    \ = it->first;\n            for(int j = word.length() - 1; j >= 0; j--)\n    \
    \        {\n                if(word[j] == 'a' || word[j] == 'e' || word[j] ==\
    \ 'i' || word[j] == 'o' || word[j] == 'u')\n                {\n              \
    \      if(it->second > min)\n                    {\n                        min\
    \ = it->second;\n                        minVowel = it->first;\n             \
    \       }\n                }\n            }\n            if(minVowel != \"\")\n\
    \            {\n                return minVowel;\n            }\n        }\n \
    \   }\n    return \"\";\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThe OP\
    \ said \"You may assume that the given string contains English letter only.\"\n\
    <|/ c |>\n<| c |>\nI didn't see that part, but thanks for pointing it out. I'll\
    \ update the answer.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any\
    \ loops.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any loops.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any loops.\n<|/ c |>\n\
    <| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <map>\n#include <algorithm>\nusing namespace std;", "{\n    map<string, int>\
    \ vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); ++it)\n\
    \    {\n        if(it->second == 1)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_reversed = vowels.rbegin();\n    \n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        if(word[i] == vowels_reversed[i])\n      \
    \  {\n            return word[i];\n        }\n    }\n    \n    return \"\";\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string vowels_reverse = vowels.rbegin();\n\
    \    \n    int vowels_count = vowels.size();\n    int vowels_count_reverse = vowels_reverse.size();\n\
    \    \n    int vowels_count_diff = vowels_count - vowels_count_reverse;\n    \n\
    \    int vowels_count_diff_2 = vowels_count_diff / 2;\n    \n    int vowels_count_diff_3\
    \ = vowels_count_diff - vowels_count_diff_2;\n    \n    int vowels_count_diff_4\
    \ = vowels_count_diff - vowels_count_diff_3;\n    \n    int vowels_count_diff_5\
    \ = vowels_count_diff - vowels_count_diff_4;\n    \n    int vowels_count_diff_6\
    \ = vowels_count_diff - vowels_count_diff_5;\n    \n    int vowels_count_diff_7\
    \ = vowels_count_diff - vowels_count_diff_6;\n    \n    int vowels_count_diff_8\
    \ = vowels_count_diff - vowels_count_diff_7;\n    \n    int vowels_count_diff_9\
    \ = vowels_count_diff - vowels_count_diff_8;\n    \n    int vowels_count_diff_10\
    \ = vowels_count_diff - vowels_count_diff_9;\n    \n    int vowels_count_diff_11\
    \ = vowels_count_diff - vowels_count_diff_10;\n    \n    int vowels_count_diff_12\
    \ = vowels_count_diff - vowels_count_diff_11;\n    \n    int vowels_count_diff_13\
    \ = vowels_count_diff - vowels_count_diff_12;\n    \n    int vowels_count_diff_14\
    \ = vowels_count_diff - vowels_count_diff_13;\n    \n    int vowels_count_diff_15\
    \ = vowels_count_diff - vowels_count_diff_14;\n    \n    int vowels_count_diff_16\
    \ = vowels_count_diff - vowels_count_diff_15;\n    \n    int vowels_count_diff_17\
    \ = vowels_count_diff - vowels_count_diff_16;\n    \n    int vowels_count_diff_18\
    \ = vowels_count_diff - vowels_count_diff_17;\n    \n    int vowels_count_diff_19\
    \ = vowels_count_diff - vowels_count_diff_18;\n    \n    int vowels_count_diff_20\
    \ = vowels_count_diff - vowels_count_diff_19;\n    \n    int vowels_count_diff_21\
    \ = vowels_count_diff - vowels_count_diff_20;\n    \n    int vowels_count_diff_22\
    \ = vowels_count_diff - vowels_count_diff_21;\n    \n    int vowels_count_diff_23\
    \ = vowels_count_diff - vowels_count_diff_22;\n    \n    int vowels_count_diff_24\
    \ = vowels_count_diff - vowels_count_diff_", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    \n    for(int i=word.length()-1;i>=0;i--)\n    {\n        if(vowels.find(word.at(i))!=string::npos)\n\
    \        {\n            int index = vowels.find(word.at(i));\n            int\
    \ index = word.at(i).find_last_of(\"aeiouAEIOU\");\n            string result\
    \ = word.substr(0,index) + word.substr(index+1);\n            return result;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work if the word is \"ab\". It returns \"u\" instead of \"\".\n<|/\
    \ c |>\n<| c |>\nI edited my answer to fix the problem. Thanks for pointing out.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int len = word.length();\n\
    \    int i = 0;\n    int j = 0;\n    \n    while(i < len && j < len) \n    {\n\
    \        if(word.at(i) == vowels.at(j)) \n        {\n            i += 1;\n   \
    \         j += 1;\n        }\n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    \n    if(j == len) return \"\";\n    \n    return word.at(j);\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        if(vowels.find(word.at(i)) != string::npos)\n\
    \        {\n            int index = vowels.find(word.at(i));\n            int\
    \ index2 = word.find_last_of(\"aeiouAEIOU\");\n            \n            if(index\
    \ != string::npos && index2 != string::npos)\n            {\n                int\
    \ diff = abs(index - index2);\n                if(diff < 3)\n                {\n\
    \                    return word.substr(index2, 1);\n                }\n     \
    \       }\n        }\n    }\n    \n    return \"\";\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string vowels = \"AEIOUaeiou\"\
    ;\n    \n    int len = word.length();\n    \n    int start = 0;\n    int end =\
    \ len - 1;\n    \n    while(start < end) {\n        int mid = start + (end - start)\
    \ / 2;\n        \n        if(word.at(mid) == vowels.at(mid)) {\n            end\
    \ = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n    }\n\
    \    \n    return word.at(end);\n}", "{\n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o'\
    \ || word[i]=='u')\n        {\n            int j=word.length()-1;\n          \
    \  while(j>=0)\n            {\n                if(word[j]=='a' || word[j]=='e'\
    \ || word[j]=='i' || word[j]=='o' || word[j]=='u')\n                {\n      \
    \              if(j-i==1)\n                    {\n                        return\
    \ word[i];\n                    }\n                    else\n                \
    \    {\n                        break;\n                    }\n              \
    \  }\n                j--;\n            }\n        }\n    }\n    return \"\";\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    \n    for(int i=word.length()-1; i>=0; i--)\n    {\n\
    \        if(vowels.find(word[i]) == string::npos)\n        {\n            return\
    \ \"\";\n        }\n    }\n    \n    for(int i=word.length()-1; i>=0; i--)\n \
    \   {\n        if(vowels.find(word[i]) == string::npos)\n        {\n         \
    \   return \"\";\n        }\n    }\n    \n    return word[0];\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string vowels_right = vowels.substr(0, vowels.length()-1);\n\
    \    \n    int len = word.length();\n    int i = 0;\n    int j = 0;\n    int k\
    \ = 0;\n    \n    while(i < len && j < len) \n    {\n        if(word[i] == vowels_right[j])\
    \ \n        {\n            k = i;\n            i = i + 1;\n            j = j +\
    \ 1;\n        }\n        else if(word[i] == vowels_right[j+1]) \n        {\n \
    \           k = i;\n            i = i + 1;\n            j = j + 2;\n        }\n\
    \        else \n        {\n            i = i + 1;\n            j = j + 1;\n  \
    \      }\n    }\n    \n    if(k == 0) \n    {\n        return \"\";\n    }\n \
    \   \n    return word.substr(k, 1);\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_right = vowels.substr(vowels.rfind('e') + 1);\n    string\
    \ vowels_left = vowels.substr(0, vowels.rfind('e'));\n    \n    string vowels_right_to_left\
    \ = vowels_right.substr(vowels_right.rfind('e') + 1);\n    string vowels_left_to_right\
    \ = vowels_left.substr(0, vowels_left.rfind('e'));\n    \n    string vowels_right_to_left_to_right\
    \ = vowels_right_to_left.substr(vowels_right_to_left.rfind('e') + 1);\n    string\
    \ vowels_left_to_right_to_left = vowels_left_to_right.substr(0, vowels_left_to_right.rfind('e'));\n\
    \    \n    string vowels_right_to_left_to_right_to_left = vowels_right_to_left_to_right.substr(vowels_right_to_left_to_right.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right = vowels_left_to_right_to_left.substr(0,\
    \ vowels_left_to_right_to_left.rfind('e'));\n    \n    string vowels_right_to_left_to_right_to_left_to_right\
    \ = vowels_right_to_left_to_right_to_left.substr(vowels_right_to_left_to_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right_to_left = vowels_left_to_right_to_left_to_right_to_left.substr(0,\
    \ vowels_left_to_right_to_left_to_right_to_left.rfind('e'));\n    \n    string\
    \ vowels_right_to_left_to_right_to_left_to_right_to_left = vowels_right_to_left_to_right_to_left_to_right_to_left.substr(vowels_right_to_left_to_right_to_left_to_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_left_to_right_to_left_to_right_to_left_to_right_to_left.substr(0, vowels_left_to_right_to_left_to_right_to_left_to_right_to_left.rfind('e'));\n\
    \    \n    string vowels_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left.substr(vowels_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left.substr(0,\
    \ vowels_left_to_right_to_left_to_right_to_left_to_right_to_left_", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 0)\n        {\n            string vowel = it->first;\n\
    \            int count = it->second;\n            int index = word.length() -\
    \ 1;\n            while(index >= 0 && isVowel(word[index]))\n            {\n \
    \               count--;\n                index--;\n            }\n          \
    \  if(count > 0)\n            {\n                return vowel;\n            }\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution\
    \ does not work if the word is \"ab\". It returns \"a\" instead of \"\".\n<|/\
    \ c |>\n<| c |>\n, thanks for pointing that out. I've fixed the code now.\n<|/\
    \ c |>\n<| c |>\nThanks, this works perfectly! I appreciate your help.\n<|/ c\
    \ |>\n<| c |>\n, glad it helped. :)\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>",
  "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n    {\n \
    \       if(isVowel(word[i]))\n        {\n            string vowel = word[i];\n\
    \            vowels[vowel]++;\n        }\n    }\n    map<string,int>::iterator\
    \ it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n    {\n        if(it->second==1)\n\
    \        {\n            return it->first;\n        }\n    }\n    return \"\";\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `get_closest_vowel(\"\
    ab\")`\n<|/ c |>\n<| c |>\nIt works. I tested it before posting it. What do you\
    \ mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `get_closest_vowel(\"\
    ab\")`\n<|/ c |>\n<| c |>\nIt works. I tested it before posting it. What do you\
    \ mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `get_closest_vowel(\"\
    ab\")`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <map>\nusing namespace std;", "{\n    map<string,int> vowels;\n    for(int\
    \ i=0;i<word.length();i++)\n    {\n        if(isalpha(word[i]))\n        {\n \
    \           string vowel = word[i];\n            vowels[vowel] = vowels[vowel]\
    \ + 1;\n        }\n    }\n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second == 1)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}", "{\n    map<string,int> vowels;\n   \
    \ for(int i=0;i<word.length();i++)\n    {\n        if(isalpha(word[i]))\n    \
    \    {\n            string vowel = word[i];\n            vowels[vowel]++;\n  \
    \      }\n    }\n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==0)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    \n    for(int i = word.length() - 1; i >= 0; i--)\n    {\n        if(word[i]\
    \ == vowels[word.find_last_of(\"aeiouAEIOU\") - 1])\n        {\n            return\
    \ word[i];\n        }\n    }\n    \n    return \"\";\n}", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 0)\n        {\n            int min = it->second;\n\
    \            string vowel = it->first;\n            for(int i = word.length()\
    \ - 1; i >= 0; i--)\n            {\n                if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n            \
    \    {\n                    if(it->second > min)\n                    {\n    \
    \                    min = it->second;\n                        vowel = it->first;\n\
    \                    }\n                }\n            }\n            return vowel;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis solution doesn't work if the word is \"ab\". It returns \"\
    a\" instead of \"\".\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. I think\
    \ I missed that condition when writing the code.\n<|/ c |>\n<| c |>\nI added the\
    \ fix to the answer. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <map>\nusing namespace std;",
  "{\n    map<string, int> vowels;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    \n\
    \    map<string, int> consonants;\n    consonants[\"b\"] = 1;\n    consonants[\"\
    c\"] = 1;\n    consonants[\"d\"] = 1;\n    consonants[\"f\"] = 1;\n    consonants[\"\
    g\"] = 1;\n    consonants[\"h\"] = 1;\n    consonants[\"j\"] = 1;\n    consonants[\"\
    k\"] = 1;\n    consonants[\"l\"] = 1;\n    consonants[\"m\"] = 1;\n    consonants[\"\
    n\"] = 1;\n    consonants[\"p\"] = 1;\n    consonants[\"q\"] = 1;\n    consonants[\"\
    r\"] = 1;\n    consonants[\"s\"] = 1;\n    consonants[\"t\"] = 1;\n    consonants[\"\
    v\"] = 1;\n    consonants[\"w\"] = 1;\n    consonants[\"x\"] = 1;\n    consonants[\"\
    y\"] = 1;\n    consonants[\"z\"] = 1;\n    \n    map<string, int> consonants2;\n\
    \    consonants2[\"b\"] = 1;\n    consonants2[\"c\"] = 1;\n    consonants2[\"\
    d\"] = 1;\n    consonants2[\"f\"] = 1;\n    consonants2[\"g\"] = 1;\n    consonants2[\"\
    h\"] = 1;\n    consonants2[\"j\"] = 1;\n    consonants2[\"k\"] = 1;\n    consonants2[\"\
    l\"] = 1;\n    consonants2[\"m\"] = 1;\n    consonants2[\"n\"] = 1;\n    consonants2[\"\
    p\"] = 1;\n    consonants2[\"q\"] = 1;\n    consonants2[\"r\"] = 1;\n    consonants2[\"\
    s\"] = 1;\n    consonants2[\"t\"] = 1;\n    consonants2[\"v\"] = 1;\n    consonants2[\"\
    w\"] = 1;\n    consonants2[\"x\"] = 1;\n    consonants2[\"y\"] = 1;\n    consonants2[\"\
    z\"] = 1;\n    \n    map<string, int> consonants3;\n    consonants3[\"b\"] = 1;\n\
    \    consonants3[\"c\"] = 1;\n    consonants3[\"d\"] = 1;\n    consonants3[\"\
    f\"] = 1;\n    consonants3[\"g\"] = 1;\n    consonants3[\"h\"] = 1;\n    consonants3[\"\
    j\"] = 1;\n    consonants3[\"k\"] = 1;\n", "{\n    map<string, int> vowels;\n\
    \    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it = vowels.begin();\n    map<string, int>::iterator itEnd =\
    \ vowels.end();\n    \n    while(it != itEnd)\n    {\n        if(it->second >\
    \ 1)\n        {\n            it++;\n        }\n        else\n        {\n     \
    \       return it->first;\n        }\n    }\n    \n    return \"\";\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string vowels_right = vowels.substr(vowels.rfind('e')\
    \ + 1);\n    string vowels_left = vowels.substr(0, vowels.rfind('e'));\n    \n\
    \    string vowels_right_to_left = vowels_right.substr(vowels_right.rfind('e')\
    \ + 1);\n    string vowels_left_to_right = vowels_left.substr(0, vowels_left.rfind('e'));\n\
    \    \n    string vowels_right_to_left_to_right = vowels_right_to_left.substr(vowels_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left = vowels_left_to_right.substr(0,\
    \ vowels_left_to_right.rfind('e'));\n    \n    string vowels_right_to_left_to_right_to_left\
    \ = vowels_right_to_left_to_right.substr(vowels_right_to_left_to_right.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right = vowels_left_to_right_to_left.substr(0,\
    \ vowels_left_to_right_to_left.rfind('e'));\n    \n    string vowels_right_to_left_to_right_to_left_to_right\
    \ = vowels_right_to_left_to_right_to_left.substr(vowels_right_to_left_to_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right_to_left = vowels_left_to_right_to_left_to_right_to_left.substr(0,\
    \ vowels_left_to_right_to_left_to_right_to_left.rfind('e'));\n    \n    string\
    \ vowels_right_to_left_to_right_to_left_to_right_to_left = vowels_right_to_left_to_right_to_left_to_right_to_left.substr(vowels_right_to_left_to_right_to_left_to_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_left_to_right_to_left_to_right_to_left_to_right_to_left.substr(0, vowels_left_to_right_to_left_to_right_to_left_to_right_to_left.rfind('e'));\n\
    \    \n    string vowels_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left.substr(vowels_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left.rfind('e')\
    \ + 1);\n    string vowels_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left.substr(0,\
    \ vowels_left_to_right_to_left_to_right_to_left_to_right_to_left_", "{\n    map<string,int>\
    \ vowels;\n    for(int i=0;i<word.length();i++)\n    {\n        if(word[i]=='a'\
    \ || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u')\n        {\n\
    \            vowels[word[i]]=vowels[word[i]]+1;\n        }\n    }\n    map<string,int>::iterator\
    \ it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n    {\n        if(it->second==0)\n\
    \        {\n            return it->first;\n        }\n    }\n    return \"\";\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if\
    \ the word is \"ab\". It returns \"a\" instead of \"\".\n<|/ c |>\n<| c |>\n:\
    \ I didn't notice that case. Thanks for pointing out. Updated the answer.\n<|/\
    \ c |>\n<| c |>\n: Thanks for pointing out. Updated the answer.\n<|/ c |>\n<|\
    \ c |>\n: Thanks for pointing out. Updated the answer.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    map<string, int> vowels;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y", "{\n    map<string, int> vowels;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"\
    ] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] =\
    \ 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] =\
    \ 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length()-1; i\
    \ >= 0; i--)\n    {\n        if(vowels.find(word.at(i)) == string::npos)\n   \
    \     {\n            return \"\";\n        }\n    }\n    \n    return word.at(word.length()-1);\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n    int\
    \ end = word.length() - 1;\n    \n    while(start <= end) {\n        int mid =\
    \ start + (end - start) / 2;\n        \n        if(word[mid] == vowels[mid]) {\n\
    \            end = mid - 1;\n        } else {\n            start = mid + 1;\n\
    \        }\n    }\n    \n    return word[end];\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work if the word is \"ab\". It returns \"a\" instead of\
    \ \"\".\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out.\
    \ I've updated my answer.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    map<string,\
    \ int> vowels;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"\
    i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] =\
    \ 0;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    map<string,\
    \ int>::iterator it;\n    string vowel = \"\";\n    for(it = vowels.begin(); it\
    \ != vowels.end(); it++)\n    {\n        if(word[it->first] == 'a' || word[it->first]\
    \ == 'e' || word[it->first] == 'i' || word[it->first] == 'o' || word[it->first]\
    \ == 'u' || word[it->first] == 'y')\n        {\n            vowel = it->first;\n\
    \            break;\n        }\n    }\n    return vowel;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <map>\nusing namespace std;", "{\n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o'\
    \ || word[i]=='u')\n        {\n            return word[i];\n        }\n    }\n\
    \    return \"\";\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis solution\
    \ does not work for \"ab\" because \"ab\" does not contain any vowels.\n<|/ c\
    \ |>\n<| c |>\nI believe that \"ab\" should return an empty string since there\
    \ is no vowel between \"a\" and \"b\"\n<|/ c |>\n<| c |>\nIt should return an\
    \ empty string because there is no vowel between \"a\" and \"b\".\n<|/ c |>\n\
    <| c |>\nYes, you are right, I misunderstood the question. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    map<string,int> vowels;\n\
    \    for(int i=0;i<word.length();i++)\n    {\n        if(isVowel(word[i]))\n \
    \       {\n            vowels[word[i]]++;\n        }\n    }\n    map<string,int>::iterator\
    \ it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n    {\n        if(it->second==0)\n\
    \        {\n            return it->first;\n        }\n    }\n    return \"\";\n\
    }", "{\n    map<string, int> vowels;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"\
    ] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n\
    \    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"\
    i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] =\
    \ 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n\
    \    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"\
    a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] =\
    \ 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n\
    \    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"\
    u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] =\
    \ 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n\
    \    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"\
    i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] =\
    \ 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n\
    \    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"\
    a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] =\
    \ 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n\
    \    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"\
    u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] =\
    \ 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n\
    \    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"\
    i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y", "{\n\
    \    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n    {\n  \
    \      if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n     \
    \   }\n    }\n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==1)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution\
    \ doesn't work if there are multiple vowels in the same position in the string.\
    \ For example, `get_closest_vowel(\"ab\")` returns `\"a\"` instead of `\"U\"`.\n\
    <|/ c |>\n<| c |>\nI agree, my solution doesn't take that into account. I'll edit\
    \ my answer to include a solution that does.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that does take that into account.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int len = word.length();\n\
    \    int start = 0;\n    int end = len - 1;\n    \n    while(start < end) {\n\
    \        int mid = (start + end) / 2;\n        \n        if(word.at(mid) == vowels.at(mid))\
    \ {\n            start = mid + 1;\n            end = mid - 1;\n        }\n   \
    \     else if(word.at(mid) == vowels.at(mid-1)) {\n            end = mid - 1;\n\
    \        }\n        else {\n            start = mid + 1;\n        }\n    }\n \
    \   \n    return word.at(start);\n}", "{\n    map<string, int> vowels;\n    for(int\
    \ i = 0; i < word.length(); i++)\n    {\n        if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n \
    \           vowels[word[i]]++;\n        }\n    }\n    map<string, int>::iterator\
    \ it;\n    string vowel;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 0)\n        {\n            vowel = it->first;\n\
    \            break;\n        }\n    }\n    return vowel;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThis doesn't work if you have a word like \"abba\", which should\
    \ return \"a\" but returns \"b\".\n<|/ c |>\n<| c |>\nYes, you are right. I've\
    \ fixed it now. Thanks for pointing out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string vowels = \"aeiouAEIOU\";\n    string vowels_reverse =\
    \ vowels.rbegin();\n    \n    for(int i = 0; i < word.length(); i++)\n    {\n\
    \        if(word[i] == vowels_reverse)\n        {\n            int index = vowels.find(word[i]);\n\
    \            int index2 = vowels.rfind(word[i]);\n            int index3 = vowels.find_first_of(\"\
    aeiouAEIOU\", i);\n            int index4 = vowels.find_last_of(\"aeiouAEIOU\"\
    , i);\n            \n            int index5 = vowels.find_first_of(\"aeiouAEIOU\"\
    , i);\n            int index6 = vowels.find_last_of(\"aeiouAEIOU\", i);\n    \
    \        \n            int index7 = vowels.find_first_of(\"aeiouAEIOU\", i);\n\
    \            int index8 = vowels.find_last_of(\"aeiouAEIOU\", i);\n          \
    \  \n            int index9 = vowels.find_first_of(\"aeiouAEIOU\", i);\n     \
    \       int index10 = vowels.find_last_of(\"aeiouAEIOU\", i);\n            \n\
    \            int index11 = vowels.find_first_of(\"aeiouAEIOU\", i);\n        \
    \    int index12 = vowels.find_last_of(\"aeiouAEIOU\", i);\n            \n   \
    \         int index13 = vowels.find_first_of(\"aeiouAEIOU\", i);\n           \
    \ int index14 = vowels.find_last_of(\"aeiouAEIOU\", i);\n            \n      \
    \      int index15 = vowels.find_first_of(\"aeiouAEIOU\", i);\n            int\
    \ index16 = vowels.find_last_of(\"aeiouAEIOU\", i);\n            \n          \
    \  int index17 = vowels.find_first_of(\"aeiouAEIOU\", i);\n            int index18\
    \ = vowels.find_last_of(\"aeiouAEIOU\", i);\n            \n            int index19\
    \ = vowels.find_first_of(\"aeiouAEIOU\", i);\n            int index20 = vowels.find_last_of(\"\
    aeiouAEIOU\", i);\n            \n            int index21 = vowels.find_first_of(\"\
    aeiouAEIOU\", i);\n            int index22 = vowels.find_last_of(\"aeiouAEIOU\"\
    , i);\n            \n            int index23 = vowels.find_first_of(\"aeiouAEIOU\"\
    , i);\n            int index24 = vowels.find_last_of(\"aeiouAEIOU\", i);\n   \
    \         \n            int index25 = vowels.find_first_of(\"aeiouAEIO", "{\n\
    \    int len = word.length();\n    int vowel_start = len - 1;\n    int vowel_end\
    \ = len - 1;\n    for(int i = 0; i < len; i++)\n    {\n        if(word[i] == 'a'\
    \ || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n \
    \       {\n            vowel_start = i;\n        }\n        if(word[i] == 'A'\
    \ || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U')\n \
    \       {\n            vowel_end = i;\n        }\n    }\n    \n    if(vowel_start\
    \ >= 0 && vowel_end >= 0)\n    {\n        if(word[vowel_start] == 'a' || word[vowel_start]\
    \ == 'e' || word[vowel_start] == 'i' || word[vowel_start] == 'o' || word[vowel_start]\
    \ == 'u')\n        {\n            if(word[vowel_end] == 'a' || word[vowel_end]\
    \ == 'e' || word[vowel_end] == 'i' || word[vowel_end] == 'o' || word[vowel_end]\
    \ == 'u')\n            {\n                return word[vowel_start];\n        \
    \    }\n        }\n    }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_reverse = \"AEIOUaeiou\";\n    string vowels_reverse2 = \"\
    aeiouAEIOU\";\n    string vowels_reverse3 = \"AEIOUaeiou\";\n    string vowels_reverse4\
    \ = \"aeiouAEIOU\";\n    string vowels_reverse5 = \"AEIOUaeiou\";\n    string\
    \ vowels_reverse6 = \"aeiouAEIOU\";\n    string vowels_reverse7 = \"AEIOUaeiou\"\
    ;\n    string vowels_reverse8 = \"aeiouAEIOU\";\n    string vowels_reverse9 =\
    \ \"AEIOUaeiou\";\n    string vowels_reverse10 = \"AEIOUaeiou\";\n    string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    string vowels_reverse12 = \"AEIOUaeiou\";\n    string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    string vowels_reverse15 = \"AEIOUaeiou\";\n    string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    string vowels_reverse17 = \"AEIOUaeiou\";\n    string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    string vowels_reverse20 = \"AEIOUaeiou\";\n    string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    string vowels_reverse22 = \"AEIOUaeiou\";\n    string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    string vowels_reverse25 = \"AEIOUaeiou\";\n    string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    string vowels_reverse27 = \"AEIOUaeiou\";\n    string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    string vowels_reverse30 = \"AEIOUaeiou\";\n    string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    string vowels_reverse32 = \"AEIOUaeiou\";\n    string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    string vowels_reverse35 = \"AEIOUaeiou\";\n    string vowels_reverse36\
    \ = \"AE", "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n\
    \    {\n        if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n\
    \        }\n    }\n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==0)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThe question was about finding the closest vowel not about finding\
    \ the most common vowel.\n<|/ c |>\n<| c |>\nThe question was about finding the\
    \ closest vowel not about finding the most common vowel.\n<|/ c |>\n<| c |>\n\
    The question was about finding the closest vowel not about finding the most common\
    \ vowel.\n<|/ c |>\n<| c |>\nThe question was about finding the closest vowel\
    \ not about finding the most common vowel.\n<|/ c |>\n<| c |>\nThe question was\
    \ about finding the closest vowel not about finding the most common vowel.\n<|/\
    \ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string vowels\
    \ = \"AEIOUaeiou\";\n    string vowels_right = vowels.substr(vowels.length() -\
    \ 1);\n    \n    for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i]\
    \ == vowels_right[0])\n        {\n            int index = vowels.find(word[i]);\n\
    \            int index_right = vowels.find(word[i + 1], word.length() - 1);\n\
    \            \n            if(index == -1 || index_right == -1)\n            {\n\
    \                return \"\";\n            }\n            \n            int diff\
    \ = abs(index - index_right);\n            \n            if(diff == 0)\n     \
    \       {\n                return word[i];\n            }\n            \n    \
    \        if(diff > 0)\n            {\n                return word[i];\n      \
    \      }\n            \n            if(diff < 0)\n            {\n            \
    \    return \"\";\n            }\n        }\n    }\n    \n    return \"\";\n}",
  "{\n    map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n \
    \   {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u')\n        {\n            vowels[word[i]] = 1;\n   \
    \     }\n    }\n    \n    map<string, int>::iterator it;\n    for(it = vowels.begin();\
    \ it != vowels.end(); it++)\n    {\n        if(it->second == 1)\n        {\n \
    \           int index = word.length() - it->first.length();\n            string\
    \ vowel = word.substr(index, it->first.length());\n            if(vowel == \"\
    a\" || vowel == \"e\" || vowel == \"i\" || vowel == \"o\" || vowel == \"u\")\n\
    \            {\n                return it->first;\n            }\n        }\n\
    \    }\n    return \"\";\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c\
    \ |>\nThis code does not work. `get_closest_vowel(\"ab\")` returns `\"a\"` instead\
    \ of `\"\"`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've fixed the code.\
    \ Now it works.\n<|/ c |>\n<| c |>\nThis code does not work. `get_closest_vowel(\"\
    ab\")` returns `\"a\"` instead of `\"\"`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ out. I've fixed the code. Now it works.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <map>\nusing namespace\
    \ std;", "{\n    map<string, int> vowels;\n    for(int i = 0; i < word.length();\
    \ i++)\n    {\n        if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n\
    \        }\n    }\n    map<string, int>::iterator it = vowels.begin();\n    map<string,\
    \ int>::iterator it2 = vowels.end();\n    int min = 0;\n    while(it != it2)\n\
    \    {\n        if(it->second < min)\n        {\n            min = it->second;\n\
    \            it = vowels.erase(it);\n        }\n        else\n        {\n    \
    \        it++;\n        }\n    }\n    return it->first;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple vowels in the string. For\
    \ example, `get_closest_vowel(\"ab\")` returns `\"a\"`.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. I missed that case. Thanks for pointing out. I'll update my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    int len = word.length();\n    for(int\
    \ i = len-1; i >= 0; i--)\n    {\n        if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n        \
    \    int j = i+1;\n            while(j < len && word[j] != 'a' && word[j] != 'e'\
    \ && word[j] != 'i' && word[j] != 'o' && word[j] != 'u')\n            {\n    \
    \            j++;\n            }\n            if(j == len)\n            {\n  \
    \              return word[i];\n            }\n            else\n            {\n\
    \                i = j;\n            }\n        }\n    }\n    return \"\";\n}\n\
    </code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis fails for \"ab\" because\
    \ \"ab\" has two vowels right next to each other.\n<|/ c |>\n<| c |>\n: I didn't\
    \ see that requirement in the question. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\n: I added a solution that doesn't require a loop to find the next vowel.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't require a loop to find the\
    \ next vowel.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require a\
    \ loop to find the next vowel.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    map<string, int> vowels;\n \
    \   vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u", "{\n    map<string, int> vowels;\n \
    \   vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    \n    for(int i = word.size()-1; i >= 0;\
    \ i--)\n    {\n        if(vowels.find(word[i]) != vowels.end())\n        {\n \
    \           int index = vowels[word[i]];\n            int j = word.size()-1;\n\
    \            while(j >= 0 && vowels.find(word[j]) != vowels.end())\n         \
    \   {\n                if(word[j] == word[i])\n                {\n           \
    \         if(j == 0)\n                    {\n                        break;\n\
    \                    }\n                    else\n                    {\n    \
    \                    j--;\n                    }\n                }\n        \
    \        else\n                {\n                    j--;\n                }\n\
    \            }\n            if(j == 0)\n            {\n                break;\n\
    \            }\n            else\n            {\n                string result\
    \ = word[i];\n                for(int k = j; k >= 0; k--)\n                {\n\
    \                    result = word[k] + result;\n                }\n         \
    \       return result;\n            }\n        }\n    }\n    return \"\";\n}\n\
    </code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis solution doesn't work\
    \ if you have a word like \"abba\", it returns \"a\" instead of \"b\".\n<|/ c\
    \ |>\n<| c |>\nYeah, I noticed that and fixed it after I posted my answer. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\nThis solution\
    \ works in O(n) time and O(1) space:\n<code>\n#include <iostream>\n#include <string>\n\
    #include <map>\n#include <algorithm>\n#include <iterator>", "{\n    map<string,\
    \ int> vowels;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"\
    i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] =\
    \ 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n\
    \    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"\
    a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] =\
    \ 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n\
    \    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"\
    u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] =\
    \ 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n\
    \    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"\
    i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] =\
    \ 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n\
    \    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"\
    a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] =\
    \ 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n\
    \    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"\
    u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] =\
    \ 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n\
    \    vowels[\"y\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"\
    i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] =\
    \ 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n\
    \    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    \n    int left = 0;\n    int right = word.length()\
    \ - 1;\n    \n    while(left < right)\n    {\n        if(word[left] == vowels[left]\
    \ || word[right] == vowels[right])\n        {\n            int mid = left + (right\
    \ - left) / 2;\n            \n            if(word[mid] == vowels[mid])\n     \
    \       {\n                return word[mid];\n            }\n            else\
    \ if(word[mid] < vowels[mid])\n            {\n                left = mid + 1;\n\
    \            }\n            else\n            {\n                right = mid -\
    \ 1;\n            }\n        }\n        else\n        {\n            left++;\n\
    \            right--;\n        }\n    }\n    \n    return \"\";\n}", "{\n    \n\
    \    int start = 0;\n    int end = word.length() - 1;\n    \n    while(start <=\
    \ end)\n    {\n        if(word[start] == 'a' || word[start] == 'e' || word[start]\
    \ == 'i' || word[start] == 'o' || word[start] == 'u')\n        {\n           \
    \ int index = start;\n            while(index < end)\n            {\n        \
    \        if(word[index] == 'a' || word[index] == 'e' || word[index] == 'i' ||\
    \ word[index] == 'o' || word[index] == 'u')\n                {\n             \
    \       if(index == start)\n                    {\n                        break;\n\
    \                    }\n                    else if(index == end)\n          \
    \          {\n                        break;\n                    }\n        \
    \            else\n                    {\n                        index = index\
    \ + 1;\n                    }\n                }\n                else\n     \
    \           {\n                    index = index + 1;\n                }\n   \
    \         }\n            \n            if(index == end)\n            {\n     \
    \           return word[start];\n            }\n            else\n           \
    \ {\n                return \"\";\n            }\n        }\n        else if(word[start]\
    \ == 'A' || word[start] == 'E' || word[start] == 'I' || word[start] == 'O' ||\
    \ word[start] == 'U')\n        {\n            int index = start;\n           \
    \ while(index < end)\n            {\n                if(word[index] == 'A' ||\
    \ word[index] == 'E' || word[index] == 'I' || word[index] == 'O' || word[index]\
    \ == 'U')\n                {\n                    if(index == start)\n       \
    \             {\n                        break;\n                    }\n     \
    \               else if(index == end)\n                    {\n               \
    \         break;\n                    }\n                    else\n          \
    \          {\n                        index = index + 1;\n                   \
    \ }\n                }\n                else\n                {\n            \
    \        index = index + 1;\n                }\n            }\n            \n\
    \            if(index == end)\n            {\n                return word[start];\n\
    \            }\n            else\n            {\n                return \"\";\n\
    \            }\n        }\n        else if(word[start] == 'y' || word[start] ==\
    \ 'Y')\n        {\n            int index = start;\n            while(index < end)\n\
    \            {\n                if(word[index] == 'y' || word[index] == 'Y')\n\
    \                {\n                    if(index == start)\n                 \
    \   {\n                        break;\n                    }\n               \
    \     else if(index == end)\n                    {\n                        break;\n\
    \                    }\n                    else\n                    {\n    \
    \                    index = index + 1;\n                    }\n             \
    \   }\n                else\n                {\n                    index = index\
    \ + 1;\n                }\n            }\n            \n            if(index ==\
    \ end)\n            {\n                return word[start];\n            }\n  \
    \          else\n            {\n                return \"\";\n            }\n\
    \        }\n        else if(word[start] == 'o' || word[start] == 'O')\n      \
    \  {\n            int index = start;\n            while(index < end)\n       \
    \     {\n                if(word[index] == 'o' || word[index] == 'O')\n      \
    \          {\n                    ", "{\n    map<string, int> vowels;\n    for(int\
    \ i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n      \
    \  {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 1)\n        {\n            string vowel = it->first;\n\
    \            int vowel_count = it->second;\n            int vowel_pos = word.find_last_of(\"\
    aeiou\");\n            int vowel_pos_right = word.find_last_of(\"AEIOU\");\n \
    \           \n            int vowel_pos_left = word.find_last_of(\"aeiou\");\n\
    \            int vowel_pos_left_right = word.find_last_of(\"AEIOU\");\n      \
    \      \n            int vowel_pos_left_left = word.find_last_of(\"aeiou\");\n\
    \            int vowel_pos_left_left_right = word.find_last_of(\"AEIOU\");\n \
    \           \n            int vowel_pos_left_left_left = word.find_last_of(\"\
    aeiou\");\n            int vowel_pos_left_left_left_right = word.find_last_of(\"\
    AEIOU\");\n            \n            int vowel_pos_left_left_left_left = word.find_last_of(\"\
    aeiou\");\n            int vowel_pos_left_left_left_left_right = word.find_last_of(\"\
    AEIOU\");\n            \n            int vowel_pos_left_left_left_left_left =\
    \ word.find_last_of(\"aeiou\");\n            int vowel_pos_left_left_left_left_left_right\
    \ = word.find_last_of(\"AEIOU\");\n            \n            int vowel_pos_left_left_left_left_left_left\
    \ = word.find_last_of(\"aeiou\");\n            int vowel_pos_left_left_left_left_left_left_right\
    \ = word.find_last_of(\"AEIOU\");\n            \n            int vowel_pos_left_left_left_left_left_left_left\
    \ = word.find_last_of(\"aeiou\");\n            int vowel_pos_left_left_left_left_left_left_left_right\
    \ = word.find_last_of(\"AEIOU\");\n            \n            int vowel_pos_left_left_left_left_left_left_left_right\
    \ = word.find_last_of(\"AEIOU\");\n            \n            int vowel_pos_left_left_left_left_left_left_left_right_right\
    \ = word.find_last_of(\"AEIOU\");\n            \n            int vowel_pos_left_left_left_left_left_left_left_right_right_right\
    \ = word.find_last_of(\"AEIOU\");\n            \n            int vowel_pos_left_left_left_left_left_left_left_right_right_right_right\
    \ = word.find_last_of", "{\n    int len = word.length();\n    int start = 0;\n\
    \    int end = len - 1;\n    while(start < end)\n    {\n        char c = word.at(start);\n\
    \        char d = word.at(end);\n        if(isVowel(c))\n        {\n         \
    \   int index = find(word.begin(), word.end(), c);\n            if(index > 0 &&\
    \ index < len - 1)\n            {\n                char e = word.at(index + 1);\n\
    \                if(isVowel(e))\n                {\n                    if(d <\
    \ e)\n                    {\n                        start = index + 1;\n    \
    \                }\n                    else\n                    {\n        \
    \                end = index - 1;\n                    }\n                }\n\
    \            }\n        }\n        else if(isVowel(d))\n        {\n          \
    \  int index = find(word.begin(), word.end(), d);\n            if(index > 0 &&\
    \ index < len - 1)\n            {\n                char e = word.at(index + 1);\n\
    \                if(isVowel(e))\n                {\n                    if(c <\
    \ e)\n                    {\n                        start = index + 1;\n    \
    \                }\n                    else\n                    {\n        \
    \                end = index - 1;\n                    }\n                }\n\
    \            }\n        }\n        else\n        {\n            start = end +\
    \ 1;\n            end = end - 1;\n        }\n    }\n    return word.at(start);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `get_closest_vowel(\"\
    ab\") ==> \"\"`\n<|/ c |>\n<| c |>\nI tested it and it works. I edited my answer\
    \ to include a test case that fails.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I edited my answer to include a test case that fails.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I edited my answer to include a test case that fails.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I edited my answer to include a test\
    \ case that fails.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    string\
    \ vowel = \"\";\n    \n    for(auto it = vowels.rbegin(); it != vowels.rend();\
    \ ++it)\n    {\n        if(it->second > 0)\n        {\n            vowel += it->first;\n\
    \            it->second--;\n        }\n    }\n    \n    return vowel;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis code doesn't work if you input \"ab\" as input.\
    \ It returns \"a\" instead of \"\".\n<|/ c |>\n<| c |>\nYes, you are right. I\
    \ missed that case. Thanks for pointing it out. I will update my answer.\n<|/\
    \ c |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <map>\nusing namespace std;", "{\n    int len = word.length();\n    int\
    \ start = 0;\n    int end = 0;\n    int vowel = 0;\n    \n    for(int i = 0; i\
    \ < len; i++)\n    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n            vowel = i;\n\
    \            break;\n        }\n    }\n    \n    for(int i = len - 1; i >= 0;\
    \ i--)\n    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u')\n        {\n            vowel = i;\n     \
    \       break;\n        }\n    }\n    \n    for(int i = 0; i < len; i++)\n   \
    \ {\n        if(word[i] == word[vowel])\n        {\n            start = i;\n \
    \           break;\n        }\n    }\n    \n    for(int i = len - 1; i >= 0; i--)\n\
    \    {\n        if(word[i] == word[vowel])\n        {\n            end = i;\n\
    \            break;\n        }\n    }\n    \n    if(start == 0 && end == 0)\n\
    \    {\n        return \"\";\n    }\n    \n    string vowel_word = word.substr(start,\
    \ end - start + 1);\n    \n    for(int i = 0; i < vowel_word.length(); i++)\n\
    \    {\n        if(vowel_word[i] == 'a')\n        {\n            vowel_word =\
    \ vowel_word.substr(0, i);\n            break;\n        }\n    }\n    \n    return\
    \ vowel_word;\n}", "{\n    for(int i=word.length()-1;i>=0;i--)\n    {\n      \
    \  if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u')\n\
    \        {\n            return word[i];\n        }\n    }\n    return \"\";\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the word is \"ab\" for example\n\
    <|/ c |>\n<| c |>\nI didn't get you. Can you please elaborate?\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work if you call `get_closest_vowel(\"ab\")` for example\n<|/\
    \ c |>\n<| c |>\nI got it. Thanks for pointing out. Updated the answer\n<|/ c\
    \ |>\n<| c |>\nI believe this fails for \"ab\" because you return the first vowel\
    \ found, which is the same as the last vowel found. Try it out with your test\
    \ cases and you'll see what I mean.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    \n    for(int i=word.length()-1;i>=0;i--)\n    {\n        if(word[i]=='a'\
    \ || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u')\n        {\n\
    \            int j=i;\n            while(j>0 && word[j]!='a' && word[j]!='e' &&\
    \ word[j]!='i' && word[j]!='o' && word[j]!='u')\n            {\n             \
    \   j--;\n            }\n            int k=i;\n            while(k<word.length()\
    \ && word[k]!='a' && word[k]!='e' && word[k]!='i' && word[k]!='o' && word[k]!='u')\n\
    \            {\n                k++;\n            }\n            if(j<k)\n   \
    \         {\n                return word[i];\n            }\n        }\n    }\n\
    \    return \"\";\n}", "{\n    map<string, int> vowels;\n    for(int i = 0; i\
    \ < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n        {\n    \
    \        vowels[word[i]]++;\n        }\n    }\n    \n    map<string, int>::iterator\
    \ it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n       \
    \ if(it->second == 1)\n        {\n            return it->first;\n        }\n \
    \   }\n    return \"\";\n}", "{\n    map<string, int> vowels;\n    for(int i =\
    \ 0; i < word.length(); i++)\n    {\n        if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n        \
    \    vowels[word[i]]++;\n        }\n    }\n    \n    map<string, int>::iterator\
    \ it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n       \
    \ if(it->second > 0)\n        {\n            int min = it->second;\n         \
    \   string vowel = it->first;\n            \n            for(int i = word.length()\
    \ - 1; i >= 0; i--)\n            {\n                if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n            \
    \    {\n                    if(vowels[word[i]] < min)\n                    {\n\
    \                        min = vowels[word[i]];\n                        vowel\
    \ = word[i];\n                    }\n                }\n            }\n      \
    \      \n            if(vowel != \"\")\n            {\n                return\
    \ vowel;\n            }\n        }\n    }\n    \n    return \"\";\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <map>\nusing namespace std;", "{\n    map<string, int> vowels;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] =\
    \ 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] =\
    \ 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y", "{\n    map<string, int> vowels;\n    for(int i =\
    \ 0; i < word.length(); i++)\n    {\n        string vowel = word.substr(i, 1);\n\
    \        vowels[vowel] += 1;\n    }\n    map<string, int>::iterator it;\n    for(it\
    \ = vowels.begin(); it != vowels.end(); it++)\n    {\n        if(it->second >\
    \ 1)\n        {\n            string vowel = it->first;\n            int count\
    \ = it->second;\n            int index = word.length() - 1;\n            while(index\
    \ >= 0 && word[index] == vowel[0])\n            {\n                index--;\n\
    \            }\n            string result = word.substr(index + 1, 1);\n     \
    \       if(result != \"\")\n            {\n                return result;\n  \
    \          }\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI appreciate your efforts but this doesn't work. Try it on \"yogurt\"\
    \ for example. Your code returns \"y\" instead of \"u\"\n<|/ c |>\n<| c |>\nI\
    \ tested it on \"yogurt\" and it returns \"u\" as expected. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code correctly. Maybe\
    \ I misunderstood your question. Do you want the closest vowel from the right\
    \ side of the word? If so, my code should do that. Try it on \"yogurt\" for example.\
    \ Your code returns \"y\" instead of \"u\"\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that returns the closest vowel from the right side of\
    \ the word.\n<|/ c |>\n<| c |>\nThanks for your efforts. But I still don't understand\
    \ why my code doesn't work. Your code returns \"u\" instead of \"y\" on \"yogurt\"\
    \ for example. Maybe I misunderstood your question. Do you want the closest vowel\
    \ from the right side of the word? If so, my code should do that. Try it on \"\
    yogurt\" for example. Your code returns \"y\" instead of \"u\"\n<|/ c |>\n<| a\
    \ tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\n#include <cctype>\nusing namespace std;", "{\n    map<string, int>\
    \ vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it = vowels.begin();\n    map<string, int>::iterator it2 = vowels.end();\n\
    \    \n    while(it != it2)\n    {\n        if(it->second > 1)\n        {\n  \
    \          it2 = it;\n        }\n        it++;\n    }\n    \n    return it->first;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n    int\
    \ end = word.length() - 1;\n    \n    while (start < end) {\n        \n      \
    \  int mid = start + (end - start) / 2;\n        \n        if (word.at(mid) ==\
    \ vowels.at(mid)) {\n            end = mid - 1;\n        } else {\n          \
    \  start = mid + 1;\n        }\n    }\n    \n    return word.at(start);\n}", "{\n\
    \    map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n  \
    \  {\n        auto it = vowels.find(word[i]);\n        if(it != vowels.end())\n\
    \        {\n            it->second++;\n        }\n        else\n        {\n  \
    \          vowels[word[i]] = 1;\n        }\n    }\n    \n    map<string, int>::iterator\
    \ it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n       \
    \ if(it->second == 1)\n        {\n            return it->first;\n        }\n \
    \   }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    \n \
    \   int start = 0;\n    int end = word.length() - 1;\n    \n    while (start <=\
    \ end) {\n        int mid = (start + end) / 2;\n        \n        if (word[mid]\
    \ >= 'a' && word[mid] <= 'z') {\n            if (word[mid+1] >= 'a' && word[mid+1]\
    \ <= 'z') {\n                if (word[mid+2] >= 'a' && word[mid+2] <= 'z') {\n\
    \                    start = mid + 2;\n                } else {\n            \
    \        end = mid - 1;\n                }\n            } else {\n           \
    \     end = mid - 1;\n            }\n        } else {\n            start = mid\
    \ + 1;\n        }\n    }\n    \n    if (start > end) {\n        return \"\";\n\
    \    }\n    \n    return vowels[start];\n}", "{\n    int len = word.length();\n\
    \    int i = 0;\n    string vowels = \"aeiouAEIOU\";\n    \n    while(i < len\
    \ && word[i] != word[len-1])\n    {\n        i++;\n    }\n    \n    string result\
    \ = \"\";\n    \n    if(i < len && word[i] == word[len-1])\n    {\n        result\
    \ = word[i];\n    }\n    \n    while(i < len && word[i] != word[len-1])\n    {\n\
    \        if(vowels.find(word[i]) != string::npos)\n        {\n            result\
    \ += word[i];\n        }\n        \n        i++;\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if\
    \ the word is \"ab\". It returns \"a\".\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ out. I fixed the code. Now it works correctly.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n\
    \    {\n        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o'\
    \ || word[i]=='u')\n        {\n            vowels[word[i]]++;\n        }\n   \
    \ }\n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==1)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nI believe this fails for \"ab\" as it will return \"a\" instead\
    \ of \"\".\n<|/ c |>\n<| c |>\nYes, you are right. I missed that case. Thanks\
    \ for pointing out. I'll update my answer.\n<|/ c |>\n<| c |>\nI believe this\
    \ fails for \"ab\" as it will return \"a\" instead of \"\".\n<|/ c |>\n<| c |>\n\
    Yes, you are right. I missed that case. Thanks for pointing out. I'll update my\
    \ answer.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\nI believe this should\
    \ work:\n<code>\nstring get_closest_vowel(string word) \n{\n    map<string,int>\
    \ vowels;\n    for(int i=0;i<word.length();i++)\n    {\n        if(word[i]=='a'\
    \ || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u')\n        {\n\
    \            vowels[word[i]]++;\n        }\n    }\n    map<string,int>::iterator\
    \ it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n    {\n        if(it->second==1)\n\
    \        {\n            return it->first;\n        }\n    }\n    return \"\";\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this fails for \"ab\" as it\
    \ will return \"a\" instead of \"\".\n<|/ c |>\n<| c |>\nYes, you are right. I\
    \ missed that case. Thanks for pointing out. I'll update my answer.\n<|/ c |>\n\
    <| a tags=string,c++,algorithm |>\n<code>\nstring get_closest_vowel(string word)\
    \ \n{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n   \
    \ {\n        if(word[i]=='a' || ", "{\n    string vowels = \"aeiouAEIOU\";\n \
    \   \n    for(int i = word.length() - 1; i >= 0; i--)\n    {\n        if(vowels.find(word.substr(i,\
    \ 1)) != string::npos)\n        {\n            return word.substr(i, 1);\n   \
    \     }\n    }\n    return \"\";\n}", "{\n    string vowels = \"AEIOUaeiou\";\n\
    \    \n    int start = 0;\n    int end = word.length() - 1;\n    \n    while(start\
    \ < end)\n    {\n        int mid = start + (end - start) / 2;\n        \n    \
    \    if(word[mid] == vowels[mid])\n        {\n            end = mid - 1;\n   \
    \     }\n        else if(word[mid] == vowels[mid+1])\n        {\n            start\
    \ = mid + 1;\n        }\n        else\n        {\n            start = mid + 1;\n\
    \            end = mid - 1;\n        }\n    }\n    \n    return word[start];\n\
    }", "{\n    int vowel_counter = 0;\n    int consonant_counter = 0;\n    int consonant_index\
    \ = 0;\n    int vowel_index = 0;\n    for(int i=word.length()-1;i>=0;i--)\n  \
    \  {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u')\n        {\n            vowel_counter++;\n       \
    \ }\n        else\n        {\n            consonant_counter++;\n        }\n  \
    \      if(consonant_counter == 2)\n        {\n            consonant_index = i;\n\
    \        }\n        if(vowel_counter == 2)\n        {\n            vowel_index\
    \ = i;\n        }\n    }\n    if(consonant_index == vowel_index)\n    {\n    \
    \    return \"\";\n    }\n    else\n    {\n        return word[vowel_index];\n\
    \    }\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;", "{\n    map<string, int> vowels;\n    for(int i = 0; i < word.length();\
    \ i++)\n    {\n        if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n\
    \        }\n    }\n    \n    map<string, int>::iterator it;\n    string vowel\
    \ = \"\";\n    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n   \
    \     if(it->second > 0)\n        {\n            vowel += it->first;\n       \
    \     it->second--;\n        }\n    }\n    return vowel;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try get_closest_vowel(\"ab\") ==> \"\"\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added some examples to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added some examples to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added some examples to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added some examples to the answer.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\n#include <cctype>\nusing namespace std;", "{\n    map<string, int>\
    \ vowels;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"a\"] = 1;\n\
    \    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"\
    u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n\
    \    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    int len = word.length();\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n\
    \    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n\
    \    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n",
  "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n    int end =\
    \ word.length() - 1;\n    \n    while (start < end) {\n        int mid = start\
    \ + (end - start) / 2;\n        \n        if (word.substr(mid, 1).find_first_of(vowels)\
    \ != string::npos) {\n            end = mid - 1;\n        } else {\n         \
    \   start = mid + 1;\n        }\n    }\n    \n    return word.substr(start, 1);\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        if(vowels.find(word[i]) == string::npos)\n\
    \        {\n            return \"\";\n        }\n    }\n    \n    return word[word.length()\
    \ - 1];\n}", "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n\
    \    {\n        if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n\
    \        }\n    }\n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==1)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nI believe this solution will fail for \"ab\" since it returns \"\
    a\" instead of \"\".\n<|/ c |>\n<| c |>\nYes, you are right. I missed that case.\
    \ Thanks for pointing out. I will update my answer.\n<|/ c |>\n<| c |>\nThis solution\
    \ fails for \"ab\" since it returns \"a\" instead of \"\".\n<|/ c |>\n<| c |>\n\
    Yes, you are right. I missed that case. Thanks for pointing out. I will update\
    \ my answer.\n<|/ c |>\n<| c |>\nThis solution fails for \"ab\" since it returns\
    \ \"a\" instead of \"\".\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <map>\nusing namespace std;",
  "{\n    map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n \
    \   {\n        if(isalpha(word[i]))\n        {\n            string vowel = word[i];\n\
    \            vowels[vowel] += 1;\n        }\n    }\n    \n    map<string, int>::iterator\
    \ it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n       \
    \ if(it->second > 1)\n        {\n            string vowel = it->first;\n     \
    \       int vowel_count = it->second;\n            int vowel_count_to_right =\
    \ word.length() - vowel_count - 1;\n            int vowel_count_to_left = word.length()\
    \ - vowel_count;\n            int vowel_count_to_left_to_right = word.length()\
    \ - vowel_count - vowel_count_to_right - 1;\n            int vowel_count_to_right_to_left\
    \ = word.length() - vowel_count - vowel_count_to_left - 1;\n            \n   \
    \         int vowel_count_to_left_to_right_to_right = word.length() - vowel_count\
    \ - vowel_count_to_right - vowel_count_to_left_to_right - 1;\n            int\
    \ vowel_count_to_right_to_left_to_left = word.length() - vowel_count - vowel_count_to_left\
    \ - vowel_count_to_right_to_left - 1;\n            \n            int vowel_count_to_left_to_right_to_left_to_right\
    \ = word.length() - vowel_count - vowel_count_to_right - vowel_count_to_left_to_right_to_right\
    \ - 1;\n            int vowel_count_to_right_to_left_to_left_to_left = word.length()\
    \ - vowel_count - vowel_count_to_left - vowel_count_to_right_to_left_to_left -\
    \ 1;\n            \n            int vowel_count_to_left_to_right_to_left_to_left_to_right\
    \ = word.length() - vowel_count - vowel_count_to_right - vowel_count_to_left_to_right_to_left_to_right\
    \ - 1;\n            int vowel_count_to_right_to_left_to_left_to_left_to_left =\
    \ word.length() - vowel_count - vowel_count_to_left - vowel_count_to_right_to_left_to_left_to_left\
    \ - 1;\n            \n            int vowel_count_to_left_to_right_to_left_to_left_to_right_to_left\
    \ = word.length() - vowel_count - vowel_count_to_right - vowel_count_to_left_to_right_to_left_to_left_to_right\
    \ - 1;\n            int vowel_count_to_right_to_left_to_left_to_left_to_left_to_right\
    \ = word.length() - vowel_count - vowel_count_to_left - vowel_count_to_right_to_left_to_left_to_left_to_right\
    \ - 1;\n", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        if(word[i] == vowels[word.find_last_of(\"\
    aeiouAEIOU\") - 1])\n        {\n            return word[i];\n        }\n    }\n\
    \    \n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    \n \
    \   for(int i = word.length() - 1; i >= 0; i--)\n    {\n        if(vowels.find(word[i])\
    \ != string::npos)\n        {\n            int index = vowels.find(word[i]);\n\
    \            int index2 = word.length() - 1 - i;\n            int index3 = word.length()\
    \ - 1 - i;\n            int index4 = word.length() - 1 - i;\n            int index5\
    \ = word.length() - 1 - i;\n            int index6 = word.length() - 1 - i;\n\
    \            int index7 = word.length() - 1 - i;\n            int index8 = word.length()\
    \ - 1 - i;\n            int index9 = word.length() - 1 - i;\n            int index10\
    \ = word.length() - 1 - i;\n            int index11 = word.length() - 1 - i;\n\
    \            int index12 = word.length() - 1 - i;\n            int index13 = word.length()\
    \ - 1 - i;\n            int index14 = word.length() - 1 - i;\n            int\
    \ index15 = word.length() - 1 - i;\n            int index16 = word.length() -\
    \ 1 - i;\n            int index17 = word.length() - 1 - i;\n            int index18\
    \ = word.length() - 1 - i;\n            int index19 = word.length() - 1 - i;\n\
    \            int index20 = word.length() - 1 - i;\n            int index21 = word.length()\
    \ - 1 - i;\n            int index22 = word.length() - 1 - i;\n            int\
    \ index23 = word.length() - 1 - i;\n            int index24 = word.length() -\
    \ 1 - i;\n            int index25 = word.length() - 1 - i;\n            int index26\
    \ = word.length() - 1 - i;\n            int index27 = word.length() - 1 - i;\n\
    \            int index28 = word.length() - 1 - i;\n            int index29 = word.length()\
    \ - 1 - i;\n            int index30 = word.length() - 1 - i;\n            int\
    \ index31 = word.length() - 1 - i;\n            int index32 = word.length() -\
    \ 1 - i;\n            int index33 = word.length() - 1 - i;\n            int index34\
    \ = word.length() - 1 - i;\n            int index35 = word.length() - 1 - i;\n\
    \            int index36 = word.length() - 1 - i;\n            int index37 = word.length()\
    \ - 1 - i;\n            int index38 = word.length() - 1 - i;\n            int\
    \ index39 = word.length() - 1 - i;\n            int index40 = word.length() -\
    \ 1 - i;\n            int index41 = word.length() - 1 - i;\n            int index42\
    \ = word.length() - 1 - i;\n            int index43 = word.length() - 1 - i;\n\
    \            int index44 = word.length", "{\n    map<string, int> vowels;\n  \
    \  for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 1)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    \n    int start = 0;\n    int end = word.length() - 1;\n    \n    while(start\
    \ < end) {\n        string middle = word.substr(start, end - start);\n       \
    \ \n        if(middle.length() > 0) {\n            int index = vowels.find(middle);\n\
    \            if(index != -1) {\n                return vowels[index];\n      \
    \      }\n        }\n        \n        start++;\n        end--;\n    }\n    \n\
    \    return \"\";\n}", "{\n    map<string, int> vowels;\n    for(int i = 0; i\
    \ < word.length(); i++)\n    {\n        string vowel = word.substr(i, 1);\n  \
    \      if(vowels.find(vowel) == vowels.end())\n        {\n            vowels[vowel]\
    \ = 1;\n        }\n        else\n        {\n            vowels[vowel]++;\n   \
    \     }\n    }\n    map<string, int>::iterator it;\n    for(it = vowels.begin();\
    \ it != vowels.end(); it++)\n    {\n        if(it->second > 1)\n        {\n  \
    \          return it->first;\n        }\n    }\n    return \"\";\n}", "{\n   \
    \ map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n\
    \        if(isVowel(word[i]))\n        {\n            vowels[word[i]] += 1;\n\
    \        }\n    }\n    \n    map<string, int>::iterator it;\n    for(it = vowels.begin();\
    \ it != vowels.end(); ++it)\n    {\n        if(it->second > 0)\n        {\n  \
    \          int diff = abs(it->second - word.length());\n            if(diff <\
    \ 2)\n            {\n                return it->first;\n            }\n      \
    \  }\n    }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n \
    \   \n    int len = word.length();\n    \n    for(int i = len-1; i >= 0; i--)\n\
    \    {\n        if(word.endsWith(vowels[i]))\n        {\n            int index\
    \ = word.find(vowels[i]);\n            \n            if(index != -1)\n       \
    \     {\n                int index = word.find(vowels[i], index+1);\n        \
    \        \n                if(index != -1)\n                {\n              \
    \      int index = word.find(vowels[i], index+1);\n                    \n    \
    \                if(index != -1)\n                    {\n                    \
    \    int index = word.find(vowels[i], index+1);\n                        \n  \
    \                      if(index != -1)\n                        {\n          \
    \                  int index = word.find(vowels[i], index+1);\n              \
    \              \n                            if(index != -1)\n               \
    \             {\n                                int index = word.find(vowels[i],\
    \ index+1);\n                                \n                              \
    \  if(index != -1)\n                                {\n                      \
    \              int index = word.find(vowels[i], index+1);\n                  \
    \                  \n                                    if(index != -1)\n   \
    \                                 {\n                                        int\
    \ index = word.find(vowels[i], index+1);\n                                   \
    \     \n                                        if(index != -1)\n            \
    \                            {\n                                            int\
    \ index = word.find(vowels[i], index+1);\n                                   \
    \         \n                                            if(index != -1)\n    \
    \                                        {\n                                 \
    \               int index = word.find(vowels[i], index+1);\n                 \
    \                               \n                                           \
    \     if(index != -1)\n                                                {\n   \
    \                                                 int index = word.find(vowels[i],\
    \ index+1);\n                                                    \n          \
    \                                          if(index != -1)\n                 \
    \                                   {\n                                      \
    \                  int index = word.find(vowels[i], index+1);\n              \
    \                                          \n                                \
    \                        if(index != -1)\n                                   \
    \                     {\n                                                    \
    \        int index = word.find(vowels[i], index+1);\n                        \
    \                                    \n                                      \
    \                      if(index != -1)\n                                     \
    \                       {\n                                                  \
    \              int index = word.find(vowels[i], index+1);\n                  \
    \                                              \n                            \
    \                                    if(index != -1)\n                       \
    \                                         {\n                                \
    \                                    int index = word.find(vowels[i], index+1);\n\
    \                                                                    \n      \
    \                                                              if(index != -1)\n\
    \                                                                    {\n     \
    \                                                                   int index\
    \ = word.find(vowels[i], index+1);\n                                         \
    \                               \n                                           \
    \                             if(index != -1)\n                              \
    \                                          {\n                               \
    \                                             int index = word.find(vowels[i],\
    \ index+1);\n                                                                \
    \            \n                                                              \
    \              if(index != -1)\n                                             \
    \                               {\n                                          \
    \                                      int index = word.find(vowels[i], index+1);\n\
    \                                                                            \
    \    \n                                                                      \
    \          if(index != -1)\n                                                 \
    \                               {\n                                          \
    \                                          int index = word.find(vowels[i], index+1);\n\
    \                                                                            \
    \        \n                                                                  \
    \                  if(index != -1)\n                                         \
    \                                           {\n                              \
    \                                                          int index = word.find(vowels[i],\
    \ index+1);\n                                                                \
    \                        \n                                                  \
    \                                      if(index != -1)\n                     \
    \                                                                   {\n      \
    \                                                                            \
    \          int index = word.find(vowels[i], index+1);\n                      \
    \                                                                      \n", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length() - 1;\
    \ i >= 0; i--)\n    {\n        for(int j = 0; j < vowels.length(); j++)\n    \
    \    {\n            if(word[i] == vowels[j])\n            {\n                string\
    \ result = \"\";\n                \n                if(j == 0)\n             \
    \   {\n                    result = word[i];\n                }\n            \
    \    else if(j == vowels.length() - 1)\n                {\n                  \
    \  result = word[i] + word[i + 1];\n                }\n                else\n\
    \                {\n                    result = word[i] + word[i + 1];\n    \
    \            }\n                \n                return result;\n           \
    \ }\n        }\n    }\n    \n    return \"\";\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    \n    for(int i = word.length() - 1; i >= 0; i--)\n    {\n\
    \        if(vowels.find(word.at(i)) != string::npos)\n        {\n            int\
    \ index = vowels.find(word.at(i));\n            int j = word.at(i) - 'a';\n  \
    \          int k = word.at(i) + 1;\n            int l = word.at(i) + 2;\n    \
    \        int m = word.at(i) + 3;\n            int n = word.at(i) + 4;\n      \
    \      int o = word.at(i) + 5;\n            int p = word.at(i) + 6;\n        \
    \    int q = word.at(i) + 7;\n            int r = word.at(i) + 8;\n          \
    \  int s = word.at(i) + 9;\n            int t = word.at(i) + 10;\n           \
    \ int u = word.at(i) + 11;\n            int v = word.at(i) + 12;\n           \
    \ int w = word.at(i) + 13;\n            int x = word.at(i) + 14;\n           \
    \ int y = word.at(i) + 15;\n            int z = word.at(i) + 16;\n           \
    \ int A = word.at(i) + 17;\n            int B = word.at(i) + 18;\n           \
    \ int C = word.at(i) + 19;\n            int D = word.at(i) + 20;\n           \
    \ int E = word.at(i) + 21;\n            int F = word.at(i) + 22;\n           \
    \ int G = word.at(i) + 23;\n            int H = word.at(i) + 24;\n           \
    \ int I = word.at(i) + 25;\n            int J = word.at(i) + 26;\n           \
    \ int K = word.at(i) + 27;\n            int L = word.at(i) + 28;\n           \
    \ int M = word.at(i) + 29;\n            int N = word.at(i) + 30;\n           \
    \ int O = word.at(i) + 31;\n            int P = word.at(i) + 32;\n           \
    \ int Q = word.at(i) + 33;\n            int R = word.at(i) + 34;\n           \
    \ int S = word.at(i) + 35;\n            int T = word.at(i) + 36;\n           \
    \ int U = word.at(i) + 37;\n            int V = word.at(i) + 38;\n           \
    \ int W = word.at(i) + 39;\n            int X = word.at(i) + 40;\n           \
    \ int Y = word.at(i) + 41;\n            int Z = word.at(i) + 42;\n           \
    \ int a = word.at(i) + 43;\n            int b = word.at(i) + 44;\n           \
    \ int c = word.at(i) + 45;\n            int d = ", "{\n    map<string, int> vowels;\n\
    \    for(int i=word.length()-1; i>=0; i--)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            string vowel = word[i];\n            vowels[vowel] +=\
    \ 1;\n        }\n    }\n    \n    map<string, int>::iterator it;\n    for(it =\
    \ vowels.begin(); it != vowels.end(); it++)\n    {\n        if(it->second > 1)\n\
    \        {\n            return it->first;\n        }\n    }\n    \n    return\
    \ \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    for(int i = len-1; i >= 0; i--)\n    {\n        if(vowels.find(word.substr(i,\
    \ 1)) != string::npos)\n        {\n            int j = i+1;\n            while(j\
    \ < len && vowels.find(word.substr(j, 1)) != string::npos)\n            {\n  \
    \              j++;\n            }\n            if(j-i == 1)\n            {\n\
    \                return word.substr(i, 1);\n            }\n        }\n    }\n\
    \    return \"\";\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nI\
    \ believe this fails for \"ab\" because \"ab\" contains no vowels.\n<|/ c |>\n\
    <| c |>\nYes, you are right. Thanks for pointing out. Updated the answer.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I tried your solution and it works perfectly\
    \ for \"ab\" but fails for \"yogurt\". Can you please explain why it fails?\n\
    <|/ c |>\n<| c |>\nI believe it fails because \"yogurt\" contains no vowels. So\
    \ the function returns empty string and that's why it fails. I believe you can\
    \ fix it by adding \"if\" statement to check if \"word\" contains any vowels.\n\
    <|/ c |>\n<| c |>\nI added an if statement to check if \"word\" contains any vowels.\
    \ But it still fails for \"yogurt\". Can you please explain why it fails?\n<|/\
    \ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string vowels_reversed = vowels.rbegin();\n    \n   \
    \ for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i] == vowels_reversed[i])\n\
    \        {\n            int index = vowels.find(word[i]);\n            if(index\
    \ != -1)\n            {\n                string vowel_before = vowels.substr(0,\
    \ index);\n                string vowel_after = vowels.substr(index + 1, vowels.length());\n\
    \                \n                if(vowel_before.length() > vowel_after.length())\n\
    \                    return vowel_before;\n                else\n            \
    \        return vowel_after;\n            }\n        }\n    }\n    \n    return\
    \ \"\";\n}", "{\n    map<string, int> vowels;\n    vowels[\"a\"]=1;\n    vowels[\"\
    e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n  \
    \  vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"\
    i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n  \
    \  vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"\
    o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n  \
    \  vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"\
    u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n  \
    \  vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"\
    y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n  \
    \  vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"\
    a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n  \
    \  vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"\
    e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n  \
    \  vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"\
    i\"]=1;\n    vowels[\"o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n  \
    \  vowels[\"a\"]=1;\n    vowels[\"e\"]=1;\n    vowels[\"i\"]=1;\n    vowels[\"\
    o\"]=1;\n    vowels[\"u\"]=1;\n    vowels[\"y\"]=1;\n    vowels[\"a\"]=1;\n  \
    \  vowels[\"e\"]=1;\n    vowels[\"i\"]", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    \n    int start = 0;\n    int end = word.length() - 1;\n    \n    while(start\
    \ <= end) {\n        string vowel = word.substr(start, 1);\n        \n       \
    \ if(vowels.find(vowel) != string::npos) {\n            return vowel;\n      \
    \  }\n        \n        start += 1;\n        end -= 1;\n    }\n    \n    return\
    \ \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/27827812)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to find\
    \ the closest vowel between two consonants and I provided a solution. He also\
    \ asked how to find the closest vowel from the right side of the word and I provided\
    \ a solution. He also asked how to find the closest vowel from the left side of\
    \ the word and I provided a solution. He also asked how to find the closest vowel\
    \ from the left side of the word and I provided a solution. He also asked how\
    \ to find the closest vowel from the left side of the word and I provided a solution.\
    \ He also asked how to find the closest vowel from the left side of the word and\
    \ I provided a solution. He also asked how to find the closest vowel from the\
    \ left side of the word and I provided a solution. He also asked how to find the\
    \ closest vowel from the left side of the word and I provided a solution. He also\
    \ asked how to find the closest vowel from the left side of the word and I provided\
    \ a solution. He also asked how to find the closest vowel from the left side of\
    \ the word and I provided a solution. He also asked how to find the closest vowel\
    \ from the left side of the word and I provided a solution. He also asked how\
    \ to find the closest vowel from the left side of the word and I provided a solution.\
    \ He also asked how to find the closest vowel from the left side of the word and\
    \ I provided a solution. He also asked how to find the closest vowel from the\
    \ left side of the word and I provided a solution. He also asked how to find the\
    \ closest vowel from the left side of the word and I provided a solution. He also\
    \ asked how to find the closest vowel from the left side of the word and I provided\
    \ a solution. He also asked how to find the closest vowel from the left side ",
  "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n    int end =\
    \ word.length() - 1;\n    \n    while(start <= end)\n    {\n        int mid =\
    \ (start + end) / 2;\n        \n        if(word[mid] == vowels[mid])\n       \
    \ {\n            end = mid - 1;\n        }\n        else if(word[mid] == vowels[mid-1])\n\
    \        {\n            start = mid + 1;\n        }\n        else\n        {\n\
    \            start = mid + 1;\n            end = mid - 1;\n        }\n    }\n\
    \    \n    return word[start];\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n\
    <| c |>\nI believe this fails for `get_closest_vowel(\"ab\")` which should return\
    \ an empty string\n<|/ c |>\n<| c |>\nYes, you are right. Thanks for pointing\
    \ out. I've updated the answer.\n<|/ c |>\n<| c |>\nThis fails for `get_closest_vowel(\"\
    ab\")` which should return an empty string\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ Thanks for pointing out. I've updated the answer.\n<|/ c |>\n<| c |>\nThis fails\
    \ for `get_closest_vowel(\"ab\")` which should return an empty string\n<|/ c |>\n\
    <| a dscore=2 |>\nThe algorithm is quite simple:", "{\n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o'\
    \ || word[i]=='u')\n        {\n            return word[i];\n        }\n    }\n\
    \    return \"\";\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis\
    \ code does not work for the string \"ab\". It returns \"a\" instead of \"\".\n\
    <|/ c |>\n<| c |>\nI tested it and it returns \"\" for \"ab\" as well.\n<|/ c\
    \ |>\n<| c |>\nYes, it returns \"\" for \"ab\" as well. But the OP said \"You\
    \ may assume that the given string contains English letter only.\"\n<|/ c |>\n\
    <| c |>\nI didn't notice that part. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;",
  "{\n    for(int i=word.length()-1;i>=0;i--)\n    {\n        if(word[i]=='a' || word[i]=='e'\
    \ || word[i]=='i' || word[i]=='o' || word[i]=='u')\n        {\n            return\
    \ word[i];\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n/*\nYou are given a word. Your task is to find the closest\
    \ vowel that stands between \n    two consonants from the right side of the word\
    \ (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    find any vowel met the above condition. ",
  "{\n    \n    string vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        if(vowels.find(word.substr(i, 1)) != string::npos)\n\
    \        {\n            int index = vowels.find(word.substr(i, 1));\n        \
    \    int start = index - 1;\n            int end = index + 1;\n            \n\
    \            if(start < 0)\n                start = 0;\n            if(end > vowels.length())\n\
    \                end = vowels.length();\n            \n            string result\
    \ = word.substr(start, end - start);\n            \n            return result;\n\
    \        }\n    }\n    \n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_right = vowels.substr(vowels.rfind('e') + 1);\n    string\
    \ vowels_left = vowels.substr(0, vowels.rfind('e'));\n    \n    string vowels_right_start\
    \ = vowels_right.substr(0, vowels_right.rfind('e'));\n    string vowels_right_end\
    \ = vowels_right.substr(vowels_right.rfind('e') + 1);\n    \n    string vowels_left_start\
    \ = vowels_left.substr(0, vowels_left.rfind('e'));\n    string vowels_left_end\
    \ = vowels_left.substr(vowels_left.rfind('e') + 1);\n    \n    string vowels_right_start_index\
    \ = vowels_right_start.rfind('e');\n    string vowels_right_end_index = vowels_right_end.rfind('e');\n\
    \    \n    string vowels_left_start_index = vowels_left_start.rfind('e');\n  \
    \  string vowels_left_end_index = vowels_left_end.rfind('e');\n    \n    string\
    \ vowels_right_start_index = vowels_right_start.rfind('e');\n    string vowels_right_end_index\
    \ = vowels_right_end.rfind('e');\n    \n    string vowels_left_start_index = vowels_left_start.rfind('e');\n\
    \    string vowels_left_end_index = vowels_left_end.rfind('e');\n    \n    string\
    \ vowels_right_start_index = vowels_right_start.rfind('e');\n    string vowels_right_end_index\
    \ = vowels_right_end.rfind('e');\n    \n    string vowels_left_start_index = vowels_left_start.rfind('e');\n\
    \    string vowels_left_end_index = vowels_left_end.rfind('e');\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "{\n\
    \    int len = word.length();\n    int vowel_start = len - 1;\n    int vowel_end\
    \ = len - 1;\n    int vowel_mid = 0;\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u')\n        {\n            vowel_start = i;\n       \
    \ }\n        else if(word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i]\
    \ == 'O' || word[i] == 'U')\n        {\n            vowel_end = i;\n        }\n\
    \    }\n    \n    for(int i = vowel_start; i <= vowel_end; i++)\n    {\n     \
    \   vowel_mid = (vowel_start + vowel_end) / 2;\n        if(word[vowel_mid] ==\
    \ 'a' || word[vowel_mid] == 'e' || word[vowel_mid] == 'i' || word[vowel_mid] ==\
    \ 'o' || word[vowel_mid] == 'u')\n        {\n            return word[vowel_mid];\n\
    \        }\n    }\n    \n    return \"\";\n}", "{\n    map<string,int> vowels;\n\
    \    for(int i=0;i<word.length();i++)\n    {\n        if(isVowel(word[i]))\n \
    \       {\n            string vowel = word[i];\n            vowels[vowel]++;\n\
    \        }\n    }\n    \n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==1)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis solution doesn't work for \"ab\" because \"ab\" has two vowels.\n\
    <|/ c |>\n<| c |>\nI didn't see that requirement in the question. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <map>", "{\n    string vowels\
    \ = \"AEIOUaeiou\";\n    \n    int start = 0;\n    int end = word.length() - 1;\n\
    \    \n    while(start <= end)\n    {\n        string vowel = word.substr(start,\
    \ 1);\n        \n        if(vowels.find(vowel) != string::npos)\n        {\n \
    \           int index = vowels.find(vowel);\n            \n            if(index\
    \ > 0)\n            {\n                if(index == word.length() - 1)\n      \
    \          {\n                    if(word.substr(0, 1) == vowel)\n           \
    \         {\n                        return vowel;\n                    }\n  \
    \              }\n                else\n                {\n                  \
    \  if(word.substr(index + 1, 1) == vowel)\n                    {\n           \
    \             return vowel;\n                    }\n                }\n      \
    \      }\n        }\n        \n        start++;\n        end--;\n    }\n    \n\
    \    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string vowels_reversed\
    \ = vowels.rbegin();\n    \n    int vowel_index = distance(word.rbegin(), word.rend(),\
    \ vowels_reversed);\n    \n    if(vowel_index == 0)\n        return \"\";\n  \
    \  \n    int vowel_length = distance(word.rbegin(), word.rend(), vowels.rend());\n\
    \    \n    int vowel_start = vowel_index - vowel_length;\n    \n    if(vowel_start\
    \ < 0)\n        vowel_start = 0;\n    \n    int vowel_end = vowel_index + vowel_length;\n\
    \    \n    if(vowel_end > word.length())\n        vowel_end = word.length();\n\
    \    \n    return word.substr(vowel_start, vowel_end - vowel_start);\n}", "{\n\
    \    map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n  \
    \  {\n        if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n\
    \        }\n    }\n    \n    map<string, int>::iterator it;\n    for(it = vowels.begin();\
    \ it != vowels.end(); it++)\n    {\n        if(it->second > 0)\n        {\n  \
    \          string vowel = it->first;\n            int count = it->second;\n  \
    \          int index = word.length() - 1;\n            while(index >= 0)\n   \
    \         {\n                if(isVowel(word[index]))\n                {\n   \
    \                 if(word[index] == vowel)\n                    {\n          \
    \              count--;\n                    }\n                    else if(word[index]\
    \ != vowel)\n                    {\n                        break;\n         \
    \           }\n                    index--;\n                }\n             \
    \   else\n                {\n                    break;\n                }\n \
    \           }\n            if(count > 0)\n            {\n                return\
    \ vowel;\n            }\n        }\n    }\n    return \"\";\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    \n    int vowel_pos = word.find_first_not_of(vowels);\n\
    \    int vowel_end_pos = word.find_last_not_of(vowels);\n    \n    if(vowel_pos\
    \ == -1 || vowel_end_pos == -1)\n        return \"\";\n    \n    int vowel_start_pos\
    \ = word.find_last_of(vowels, vowel_end_pos);\n    \n    if(vowel_start_pos ==\
    \ -1)\n        return \"\";\n    \n    string vowel_str = word.substr(vowel_start_pos,\
    \ vowel_end_pos - vowel_start_pos);\n    \n    int vowel_pos = word.find_first_not_of(vowel_str);\n\
    \    \n    if(vowel_pos == -1)\n        return \"\";\n    \n    return word.substr(vowel_pos,\
    \ vowel_end_pos - vowel_pos);\n}", "{\n    int len = word.length();\n    for(int\
    \ i = len-1; i >= 0; i--)\n    {\n        if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n        \
    \    int j = i+1;\n            while(j < len && word[j] == 'a' || word[j] == 'e'\
    \ || word[j] == 'i' || word[j] == 'o' || word[j] == 'u')\n            {\n    \
    \            j++;\n            }\n            if(j-i == 1)\n            {\n  \
    \              return word[i];\n            }\n        }\n    }\n    return \"\
    \";\n}\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work. Try it on \"ab\" for\
    \ example. You'll get \"a\" instead of \"\".\n<|/ c |>\n<| c |>\nI tested it on\
    \ \"ab\" and it returned \"a\" as expected. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. Try it on \"ab\" for example. You'll\
    \ get \"a\" instead of \"\".\n<|/ c |>\n<| c |>\nI tested it on \"ab\" and it\
    \ returned \"a\" as expected. Are you sure you copied it correctly?\n<|/ c |>\n\
    <| c |>\nYes, I copied it correctly. Try it on \"ab\" for example. You'll get\
    \ \"a\" instead of \"\".\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    map<string, int> vowels;\n \
    \   vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"\
    o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"o\"] =\
    \ 0;\n    vowels[\"u\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n\
    \    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"\
    y\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"a\"] =\
    \ 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n\
    \    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"\
    u\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] =\
    \ 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n\
    \    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"\
    e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] =\
    \ 0;\n    vowels[\"y\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n\
    \    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"\
    o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"o\"] =\
    \ 0;\n    vowels[\"u\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n\
    \    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"\
    y\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"a\"] =\
    \ 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] = 0;\n    vowels[\"o\"] = 0;\n\
    \    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"\
    u\"] = 0;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"i\"] =\
    \ 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    vowels[\"y\"] = 0;\n\
    \    vowels[\"o\"] = 0;\n    vowels[\"u", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_right = vowels.substr(vowels.rfind('e') + 1);\n    string\
    \ vowels_left = vowels.substr(0, vowels.rfind('e'));\n    \n    for(int i = 0;\
    \ i < word.length(); i++)\n    {\n        if(word[i] == vowels_right[0] || word[i]\
    \ == vowels_right[1] || word[i] == vowels_right[2] || word[i] == vowels_right[3])\n\
    \        {\n            return word[i];\n        }\n    }\n    \n    for(int i\
    \ = 0; i < word.length(); i++)\n    {\n        if(word[i] == vowels_left[0] ||\
    \ word[i] == vowels_left[1] || word[i] == vowels_left[2] || word[i] == vowels_left[3])\n\
    \        {\n            return word[i];\n        }\n    }\n    \n    return \"\
    \";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string vowels_reversed =\
    \ vowels.rbegin();\n    \n    int vowels_count = vowels.size();\n    int vowels_count_reversed\
    \ = vowels_reversed.size();\n    \n    int consonants_count = word.size();\n \
    \   int consonants_count_reversed = consonants_count - 1;\n    \n    int consonant_count\
    \ = 0;\n    int consonant_count_reversed = 0;\n    \n    int consonant_count_minus_one\
    \ = 0;\n    int consonant_count_reversed_minus_one = 0;\n    \n    int consonant_count_minus_two\
    \ = 0;\n    int consonant_count_reversed_minus_two = 0;\n    \n    int consonant_count_minus_three\
    \ = 0;\n    int consonant_count_reversed_minus_three = 0;\n    \n    int consonant_count_minus_four\
    \ = 0;\n    int consonant_count_reversed_minus_four = 0;\n    \n    int consonant_count_minus_five\
    \ = 0;\n    int consonant_count_reversed_minus_five = 0;\n    \n    int consonant_count_minus_six\
    \ = 0;\n    int consonant_count_reversed_minus_six = 0;\n    \n    int consonant_count_minus_seven\
    \ = 0;\n    int consonant_count_reversed_minus_seven = 0;\n    \n    int consonant_count_minus_eight\
    \ = 0;\n    int consonant_count_reversed_minus_eight = 0;\n    \n    int consonant_count_minus_nine\
    \ = 0;\n    int consonant_count_reversed_minus_nine = 0;\n    \n    int consonant_count_minus_zero\
    \ = 0;\n    int consonant_count_reversed_minus_zero = 0;\n    \n    int consonant_count_minus_one\
    \ = 0;\n    int consonant_count_reversed_minus_one = 0;\n    \n    int consonant_count_minus_two\
    \ = 0;\n    int consonant_count_reversed_minus_two = 0;\n    \n    int consonant_count_minus_three\
    \ = 0;\n    int consonant_count_reversed_minus_three = 0;\n    \n    int consonant_count_minus_four\
    \ = 0;\n    int consonant_count_reversed_minus_four = 0;\n    \n    int consonant_count_minus_five\
    \ = 0;\n    int consonant_count_reversed_minus_five = 0;\n    \n    int consonant_count_minus_six\
    \ = 0;\n    int consonant_count_reversed_minus_six = 0;\n    \n    int consonant_count_minus_seven\
    \ = 0;\n    int consonant_count_reversed_minus_seven = 0;", "{\n    \n    string\
    \ vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length()-1; i >= 0; i--)\n\
    \    {\n        for(int j = 0; j < vowels.length(); j++)\n        {\n        \
    \    if(word[i] == vowels[j])\n            {\n                string vowel = vowels[j];\n\
    \                \n                string leftCons = word.substr(0, i);\n    \
    \            string rightCons = word.substr(i+1);\n                \n        \
    \        string leftVowel = leftCons.substr(0, leftCons.find_last_of(vowel));\n\
    \                string rightVowel = rightCons.substr(rightCons.find_last_of(vowel));\n\
    \                \n                if(leftVowel == rightVowel)\n             \
    \   {\n                    return vowel;\n                }\n            }\n \
    \       }\n    }\n    \n    return \"\";\n}", "{\n    \n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o'\
    \ || word[i]=='u')\n        {\n            int j=word.length()-1;\n          \
    \  while(j>0 && word[j]!='a' && word[j]!='e' && word[j]!='i' && word[j]!='o' &&\
    \ word[j]!='u')\n            {\n                j--;\n            }\n        \
    \    int k=word.length()-1;\n            while(k>0 && word[k]!='a' && word[k]!='e'\
    \ && word[k]!='i' && word[k]!='o' && word[k]!='u')\n            {\n          \
    \      k--;\n            }\n            if(j<k)\n            {\n             \
    \   return word[i];\n            }\n        }\n    }\n    return \"\";\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis does not work if the word is\
    \ \"a\" and the letter is \"e\".\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ before posting it. I just tested it again and it works. I guess I missed something\
    \ when I first tested it.\n<|/ c |>\n<| c |>\nIt doesn't work for \"a\" and the\
    \ letter is \"e\".\n<|/ c |>\n<| c |>\nIt works for \"a\" and the letter is \"\
    e\". What is the problem you are facing?\n<|/ c |>\n<| c |>\nIt works for \"a\"\
    \ and the letter is \"e\".  It doesn't work for \"a\" and the letter is \"i\"\
    .\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    for(int i = word.length()-1;\
    \ i >= 0; i--)\n    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n            return word[i];\n\
    \        }\n    }\n    return \"\";\n}", "{\n    map<string,int> vowels;\n   \
    \ for(int i=0;i<word.length();i++)\n    {\n        if(isVowel(word[i]))\n    \
    \    {\n            vowels[word[i]]++;\n        }\n    }\n    string vowel=\"\"\
    ;\n    for(auto it=vowels.begin();it!=vowels.end();it++)\n    {\n        if(it->second==1)\n\
    \        {\n            vowel+=it->first;\n        }\n    }\n    return vowel;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| a tags=c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string vowels = \"AEIOUaeiou\";\n    \n    int left = 0;\n    int right\
    \ = word.length() - 1;\n    \n    while(left < right)\n    {\n        string middle\
    \ = word.substr(left, right);\n        \n        if(middle.length() == 0)\n  \
    \      {\n            left++;\n            right--;\n        }\n        else if(middle.length()\
    \ == 1)\n        {\n            if(vowels.find(middle[0]) != string::npos)\n \
    \           {\n                return middle[0];\n            }\n            else\n\
    \            {\n                left++;\n                right--;\n          \
    \  }\n        }\n        else\n        {\n            string middle2 = middle.substr(0,\
    \ middle.length() - 1);\n            if(vowels.find(middle2[0]) != string::npos)\n\
    \            {\n                return middle2[0];\n            }\n          \
    \  else\n            {\n                left++;\n                right--;\n  \
    \          }\n        }\n    }\n    \n    return \"\";\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work if you pass it \"ab\" for example. It returns\
    \ \"A\" instead of \"\".\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n \
    \   int end = word.length() - 1;\n    \n    while(start <= end)\n    {\n     \
    \   int mid = start + (end - start) / 2;\n        \n        if(word[mid] == vowels[mid])\n\
    \        {\n            end = mid - 1;\n        }\n        else if(word[mid] ==\
    \ vowels[mid+1])\n        {\n            start = mid + 1;\n        }\n       \
    \ else\n        {\n            start = mid + 1;\n            end = mid - 1;\n\
    \        }\n    }\n    \n    return word[start];\n}", "{\n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n            int j =\
    \ word.find_last_of('e');\n            if(j == -1)\n            {\n          \
    \      return word[i];\n            }\n            else\n            {\n     \
    \           int k = word.find_last_of('e', j);\n                if(k == -1)\n\
    \                {\n                    return word[i];\n                }\n \
    \               else\n                {\n                    int l = word.find_last_of('i',\
    \ k);\n                    if(l == -1)\n                    {\n              \
    \          return word[i];\n                    }\n                    else\n\
    \                    {\n                        int m = word.find_last_of('o',\
    \ l);\n                        if(m == -1)\n                        {\n      \
    \                      return word[i];\n                        }\n          \
    \              else\n                        {\n                            int\
    \ n = word.find_last_of('u', m);\n                            if(n == -1)\n  \
    \                          {\n                                return word[i];\n\
    \                            }\n                            else\n           \
    \                 {\n                                return \"\";\n          \
    \                  }\n                        }\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return \"\";\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis code does not work if you have\
    \ a word like \"abacus\".\n<|/ c |>\n<| c |>\nThis code does not work if you have\
    \ a word like \"abacus\".\n<|/ c |>\n<| c |>\nIt doesn't work if you have a word\
    \ like \"abacus\".\n<|/ c |>\n<| c |>\nIt doesn't work if you have a word like\
    \ \"abacus\".\n<|/ c |>\n<| c |>\nIt doesn't work if you have a word like \"abacus\"\
    .\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(isalpha(word[i]))\n\
    \        {\n            string vowel = word[i];\n            vowels[vowel] +=\
    \ 1;\n        }\n    }\n    \n    map<string, int>::iterator it;\n    for(it =\
    \ vowels.begin(); it != vowels.end(); it++)\n    {\n        if(it->second > 1)\n\
    \        {\n            string vowel = it->first;\n            int count = it->second;\n\
    \            int index = word.find_last_of(vowel);\n            string result\
    \ = word.substr(index + 1, (word.length() - index) - 1);\n            return result;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I tested your code. it works fine for most of the cases. but fails for \"quick\"\
    \ case. it returns \"u\" instead of \"\". and fails for \"ab\" case. it returns\
    \ \"a\" instead of \"\". can you please help me to fix this issue?\n<|/ c |>\n\
    <| c |>\nI fixed the issue for \"quick\" case. but still fails for \"ab\" case.\
    \ it returns \"a\" instead of \"\". can you please help me to fix this issue?\n\
    <|/ c |>\n<| c |>\nI fixed the issue for \"quick\" case. but still fails for \"\
    ab\" case. it returns \"a\" instead of \"\". can you please help me to fix this\
    \ issue?\n<|/ c |>\n<| c |>\nI fixed the issue for \"quick\" case. but still fails\
    \ for \"ab\" case. it returns \"a\" instead of \"\". can you please help me to\
    \ fix this issue?\n<|/ c |>\n<| c |>\nI fixed the issue for \"quick\" case. but\
    \ still fails for \"ab\" case. it returns \"a\" instead of \"\". can you please\
    \ help me to fix this issue?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <map>\nusing namespace std;", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string vowels_right = vowels.substr(vowels.length()-word.length());\n\
    \    \n    for(int i=word.length()-1;i>=0;i--)\n    {\n        if(word.substr(i,1)==vowels_right)\n\
    \        {\n            return word.substr(i,1);\n        }\n    }\n    return\
    \ \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string vowels_reversed\
    \ = vowels.rbegin();\n    \n    int i = 0;\n    int j = word.size()-1;\n    \n\
    \    while(i < j){\n        if(word[i] == vowels_reversed[j]){\n            i++;\n\
    \            j--;\n        }\n        else{\n            i++;\n            j--;\n\
    \        }\n    }\n    \n    return word[i];\n}", "{\n    string vowels = \"AEIOUaeiou\"\
    ;\n    string vowels_reversed = vowels.rbegin();\n    string vowels_reversed_reversed\
    \ = vowels_reversed.rbegin();\n    string vowels_reversed_reversed_reversed =\
    \ vowels_reversed_reversed.rbegin();\n    string vowels_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed.rbegin();\n    string vowels_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed.rbegin();\n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n \
    \   string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "{\n    string vowels = \"AEIOUaeiou\";\n    \n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(vowels.find(word[i]) != string::npos)\n        {\n        \
    \    int index = vowels.find(word[i]);\n            int start = index - 1;\n \
    \           int end = index + 1;\n            \n            while(start >= 0 &&\
    \ end < word.length() && word[start] == word[end])\n            {\n          \
    \      start--;\n                end++;\n            }\n            \n       \
    \     if(start >= 0 && end < word.length())\n            {\n                return\
    \ word[i];\n            }\n        }\n    }\n    \n    return \"\";\n}", "{\n\
    \    map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n  \
    \  {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u')\n        {\n            vowels[word[i]]++;\n     \
    \   }\n    }\n    map<string, int>::iterator it;\n    for(it = vowels.begin();\
    \ it != vowels.end(); it++)\n    {\n        if(it->second > 0)\n        {\n  \
    \          int min = it->second;\n            string vowel = it->first;\n    \
    \        for(int i = word.length() - 1; i >= 0; i--)\n            {\n        \
    \        if(word[i] == vowel)\n                {\n                    it->second\
    \ = it->second - 1;\n                    if(it->second == 0)\n               \
    \     {\n                        it->second = min;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return it->first;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `get_closest_vowel(\"ab\")`.\n<|/ c |>\n<| c |>\n\
    It works. I tested it before posting. It returns \"U\" as expected.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `get_closest_vowel(\"ab\")`.\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting. It returns \"U\" as expected.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `get_closest_vowel(\"ab\")`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <map>\nusing namespace std;", "{\n    map<string, int> vowels;\n    for(int\
    \ i = 0; i < word.length(); i++)\n    {\n        if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n \
    \           vowels[word[i]] += 1;\n        }\n    }\n    \n    map<string, int>::iterator\
    \ it;\n    string vowel;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 1)\n        {\n            vowel = it->first;\n\
    \            break;\n        }\n    }\n    return vowel;\n}", "{\n    string vowels\
    \ = \"AEIOUaeiou\";\n    string vowels_reverse = \"AEIOUaeiou\";\n    for(int\
    \ i=word.length()-1;i>=0;i--)\n    {\n        if(vowels.find(word[i]) != string::npos)\n\
    \        {\n            int index = vowels.find(word[i]);\n            string\
    \ vowels_reverse_index = vowels_reverse.find(word[i]);\n            int vowels_reverse_index\
    \ = vowels_reverse.find(word[i]);\n            int vowels_index = vowels.find(word[i]);\n\
    \            int vowels_reverse_index = vowels_reverse.find(word[i]);\n      \
    \      int vowels_index = vowels.find(word[i]);\n            int vowels_reverse_index\
    \ = vowels_reverse.find(word[i]);\n            int vowels_index = vowels.find(word[i]);\n\
    \            int vowels_reverse_index = vowels_reverse.find(word[i]);\n      \
    \      int vowels_index = vowels.find(word[i]);\n            int vowels_reverse_index\
    \ = vowels_reverse.find(word[i]);\n            int vowels_index = vowels.find(word[i]);\n\
    \            int vowels_reverse_index = vowels_reverse.find(word[i]);\n      \
    \      int vowels_index = vowels.find(word[i]);\n            int vowels_reverse_index\
    \ = vowels_reverse.find(word[i]);\n            int vowels_index = vowels.find(word[i]);\n\
    \            int vowels_reverse_index = vowels_reverse.find(word[i]);\n      \
    \      int vowels_index = vowels.find(word[i]);\n            int vowels_reverse_index\
    \ = vowels_reverse.find(word[i]);\n            int vowels_index = vowels.find(word[i]);\n\
    \            int vowels_reverse_index = vowels_reverse.find(word[i]);\n      \
    \      int vowels_index = vowels.find(word[i]);\n            int vowels_reverse_index\
    \ = vowels_reverse.find(word[i]);\n            int vowels_index = vowels.find(word[i]);\n\
    \            int vowels_reverse_index = vowels_reverse.find(word[i]);\n      \
    \      int vowels_index = vowels.find(word[i]);\n            int vowels_reverse_index\
    \ = vowels_reverse.find(word[i]);\n            int vowels_index = vowels.find(word[i]);\n\
    \            int vowels_reverse_index = vowels_reverse.find(word[i]);\n      \
    \      int vowels_index = vowels.find(word[i]);\n            int vowels_reverse_index\
    \ = vowels_reverse.find(word[i]);\n            int vowels_index = vowels.find(word[i]);\n\
    \            int vowels_reverse_index = vowels_reverse.find(word[i]);\n      \
    \      int vowels_index = vowels.find(word[i]);\n            int vowels_reverse_index\
    \ = vowels_reverse.find(word[i]);\n            int vowels_index = vowels.find(word[i]);\n\
    \            int vowels_reverse_index = vowels_reverse", "{\n    string vowels\
    \ = \"AEIOUaeiou\";\n    string vowels_reversed = vowels.rbegin();\n    \n   \
    \ for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i] == vowels_reversed[i])\n\
    \        {\n            int index = vowels.find(word[i]);\n            if(index\
    \ != -1)\n            {\n                return word[i];\n            }\n    \
    \    }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    map<string,int> vowels;\n    for(int\
    \ i=0;i<word.length();i++)\n    {\n        if(isVowel(word[i]))\n        {\n \
    \           vowels[word[i]]++;\n        }\n    }\n    \n    map<string,int>::iterator\
    \ it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n    {\n        if(it->second<2)\n\
    \        {\n            return it->first;\n        }\n    }\n    return \"\";\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string vowels_reverse = vowels.rbegin();\n\
    \    \n    for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i] ==\
    \ vowels_reverse)\n        {\n            int index = vowels.find(word[i]);\n\
    \            int index_reverse = vowels_reverse.find(word[i]);\n            \n\
    \            if(index != -1 && index_reverse != -1)\n            {\n         \
    \       if(index > index_reverse)\n                {\n                    return\
    \ word[i];\n                }\n                else\n                {\n     \
    \               return word[i].substr(0, 1);\n                }\n            }\n\
    \        }\n    }\n    return \"\";\n}", "{\n    \n    int start = 0;\n    int\
    \ end = word.length() - 1;\n    \n    while(start < end)\n    {\n        \n  \
    \      if(word[start] == 'a' || word[start] == 'e' || word[start] == 'i' || word[start]\
    \ == 'o' || word[start] == 'u')\n        {\n            start = start + 1;\n \
    \       }\n        else if(word[end] == 'a' || word[end] == 'e' || word[end] ==\
    \ 'i' || word[end] == 'o' || word[end] == 'u')\n        {\n            end = end\
    \ - 1;\n        }\n        else\n        {\n            start = start + 1;\n \
    \           end = end - 1;\n        }\n    }\n    \n    return word[start];\n}",
  "{\n    int len = word.length();\n    for(int i = len-1; i >= 0; i--)\n    {\n \
    \       if(isVowel(word[i]))\n        {\n            int j = i+1;\n          \
    \  while(j < len && isVowel(word[j]))\n            {\n                j++;\n \
    \           }\n            int k = j;\n            while(k >= 0 && isVowel(word[k]))\n\
    \            {\n                k--;\n            }\n            if(j > k)\n \
    \           {\n                return word[i];\n            }\n        }\n   \
    \ }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    \n   \
    \ for(int i = word.length() - 1; i >= 0; i--)\n    {\n        if(vowels.find(word[i])\
    \ != string::npos)\n        {\n            int index = word.length() - 1 - i;\n\
    \            int index2 = word.length() - 1 - i;\n            int index3 = word.length()\
    \ - 1 - i;\n            int index4 = word.length() - 1 - i;\n            int index5\
    \ = word.length() - 1 - i;\n            int index6 = word.length() - 1 - i;\n\
    \            int index7 = word.length() - 1 - i;\n            int index8 = word.length()\
    \ - 1 - i;\n            int index9 = word.length() - 1 - i;\n            int index10\
    \ = word.length() - 1 - i;\n            int index11 = word.length() - 1 - i;\n\
    \            int index12 = word.length() - 1 - i;\n            int index13 = word.length()\
    \ - 1 - i;\n            int index14 = word.length() - 1 - i;\n            int\
    \ index15 = word.length() - 1 - i;\n            int index16 = word.length() -\
    \ 1 - i;\n            int index17 = word.length() - 1 - i;\n            int index18\
    \ = word.length() - 1 - i;\n            int index19 = word.length() - 1 - i;\n\
    \            int index20 = word.length() - 1 - i;\n            int index21 = word.length()\
    \ - 1 - i;\n            int index22 = word.length() - 1 - i;\n            int\
    \ index23 = word.length() - 1 - i;\n            int index24 = word.length() -\
    \ 1 - i;\n            int index25 = word.length() - 1 - i;\n            int index26\
    \ = word.length() - 1 - i;\n            int index27 = word.length() - 1 - i;\n\
    \            int index28 = word.length() - 1 - i;\n            int index29 = word.length()\
    \ - 1 - i;\n            int index30 = word.length() - 1 - i;\n            int\
    \ index31 = word.length() - 1 - i;\n            int index32 = word.length() -\
    \ 1 - i;\n            int index33 = word.length() - 1 - i;\n            int index34\
    \ = word.length() - 1 - i;\n            int index35 = word.length() - 1 - i;\n\
    \            int index36 = word.length() - 1 - i;\n            int index37 = word.length()\
    \ - 1 - i;\n            int index38 = word.length() - 1 - i;\n            int\
    \ index39 = word.length() - 1 - i;\n            int index40 = word.length() -\
    \ 1 - i;\n            int index41 = word.length() - 1 - i;\n            int index42\
    \ = word.length() - 1 - i;\n            int index43 = word.length() - 1 - i;\n\
    \            int index44 = word.length", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_reversed = vowels.rbegin();\n    string vowels_reversed_reversed\
    \ = vowels_reversed.rbegin();\n    string vowels_reversed_reversed_reversed =\
    \ vowels_reversed_reversed.rbegin();\n    \n    string vowels_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed.rbegin();\n    \n    string vowels_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed.rbegin();\n    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n \
    \   \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin();\n\
    \    \n    string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "{\n    map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n \
    \   {\n        if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n\
    \        }\n    }\n    \n    map<string, int>::iterator it;\n    for(it = vowels.begin();\
    \ it != vowels.end(); it++)\n    {\n        if(it->second == 0)\n        {\n \
    \           return it->first;\n        }\n    }\n    return \"\";\n}", "{\n  \
    \  map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n    {\n    \
    \    char c = word[i];\n        if(isalpha(c))\n        {\n            string\
    \ vowel = string(\"a\").concat(string(\"e\").concat(string(\"i\").concat(string(\"\
    o\").concat(string(\"u\")))));\n            vowels[vowel] += 1;\n        }\n \
    \   }\n    map<string,int>::iterator it;\n    for(it = vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second > 0)\n        {\n            string vowel = it->first;\n\
    \            int count = it->second;\n            int index = word.length() -\
    \ 1;\n            while(index >= 0 && isalpha(word[index]))\n            {\n \
    \               if(isupper(word[index]))\n                {\n                \
    \    vowel = vowel.concat(string(tolower(word[index])));\n                   \
    \ count -= 1;\n                }\n                index -= 1;\n            }\n\
    \            if(count > 0)\n            {\n                string vowel2 = string(\"\
    a\").concat(string(\"e\").concat(string(\"i\").concat(string(\"o\").concat(string(\"\
    u\")))));\n                string vowel3 = string(\"a\").concat(string(\"e\").concat(string(\"\
    i\").concat(string(\"o\").concat(string(\"u\")))).concat(string(tolower(word[index]))).concat(string(tolower(word[index+1])));\n\
    \                string vowel4 = string(\"a\").concat(string(\"e\").concat(string(\"\
    i\").concat(string(\"o\").concat(string(\"u\")))).concat(string(tolower(word[index]))).concat(string(tolower(word[index-1])));\n\
    \                string vowel5 = string(\"a\").concat(string(\"e\").concat(string(\"\
    i\").concat(string(\"o\").concat(string(\"u\")))).concat(string(tolower(word[index]))).concat(string(tolower(word[index+2])));\n\
    \                string vowel6 = string(\"a\").concat(string(\"e\").concat(string(\"\
    i\").concat(string(\"o\").concat(string(\"u\")))).concat(string(tolower(word[index]))).concat(string(tolower(word[index-2])));\n\
    \                string vowel7 = string(\"a\").concat(string(\"e\").concat(string(\"\
    i\").concat(string(\"o\").concat(string(\"u\")))).concat(string(tolower(word[index]))).concat(string(tolower(word[index+3])));\n\
    \                string vowel8 = string(\"a\").concat(string(\"e\").concat(string(\"\
    i\").concat(string(\"o\").concat(string(\"u\")))).concat(string(tolower(word[index]))).concat(string(tolower(word[index-3])));\n\
    \                string vowel9 = ", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    \n    for(int i = word.length() - 1; i >= 0; i--)\n    {\n        if(vowels.find(word[i])\
    \ == string::npos)\n        {\n            return \"\";\n        }\n    }\n  \
    \  \n    return word[word.length() - 1];\n}", "{\n    map<string, int> vowels;\n\
    \    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 0)\n        {\n            int min = it->second;\n\
    \            string vowel = it->first;\n            \n            for(int i =\
    \ word.length() - 1; i >= 0; i--)\n            {\n                if(isVowel(word[i]))\n\
    \                {\n                    if(vowels[word[i]] < min)\n          \
    \          {\n                        min = vowels[word[i]];\n               \
    \         vowel = word[i];\n                    }\n                }\n       \
    \     }\n            \n            return vowel;\n        }\n    }\n    \n   \
    \ return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int len\
    \ = word.length();\n    int start = 0;\n    int end = len - 1;\n    \n    while(start\
    \ < end)\n    {\n        string vowel = word.substr(start, 1);\n        \n   \
    \     if(vowels.find(vowel) != string::npos)\n        {\n            int index\
    \ = vowels.find(vowel);\n            \n            if(index == 0)\n          \
    \  {\n                start++;\n            }\n            else if(index == (len\
    \ - 1))\n            {\n                end--;\n            }\n            else\n\
    \            {\n                start = index + 1;\n                end = index;\n\
    \            }\n        }\n        else\n        {\n            start++;\n   \
    \     }\n    }\n    \n    return word.substr(start, 1);\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    \n    for(int i=word.length()-1;i>=0;i--)\n    {\n  \
    \      if(vowels.find(word.at(i)) != string::npos)\n        {\n            int\
    \ index = vowels.find(word.at(i));\n            int index2 = vowels.find(word.at(i+1));\n\
    \            \n            if(index != string::npos && index2 != string::npos)\n\
    \            {\n                int diff = abs(index-index2);\n              \
    \  if(diff == 0)\n                {\n                    return word.at(i);\n\
    \                }\n                else\n                {\n                \
    \    if(diff > 0)\n                    {\n                        return word.at(i);\n\
    \                    }\n                    else\n                    {\n    \
    \                    return word.at(index+1);\n                    }\n       \
    \         }\n            }\n        }\n    }\n    \n    return \"\";\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, however it fails for \"ab\" which should\
    \ return \"\"\n<|/ c |>\n<| c |>\nI didn't notice that case. Thanks for pointing\
    \ it out. I've updated the answer.\n<|/ c |>\n<| c |>\nI like your solution, however\
    \ it fails for \"ab\" which should return \"\"\n<|/ c |>\n<| a tags=c++,string,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string vowels = \"aeiouAEIOU\";\n    string vowels_reversed\
    \ = vowels.rbegin();\n    \n    for(int i = word.length() - 1; i >= 0; i--)\n\
    \    {\n        if(word[i] == vowels_reversed[i])\n        {\n            return\
    \ word[i];\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    map<string, int> vowels;\n    for(int i = 0; i < word.length();\
    \ i++)\n    {\n        if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n\
    \        }\n    }\n    \n    map<string, int>::iterator it = vowels.begin();\n\
    \    map<string, int>::iterator it2 = vowels.end();\n    \n    for(; it != it2;\
    \ ++it)\n    {\n        if(it->second > 1)\n        {\n            string vowel\
    \ = it->first;\n            int vowelCount = it->second;\n            \n     \
    \       int index = word.length() - vowelCount;\n            \n            while(index\
    \ >= 0)\n            {\n                if(isVowel(word[index]))\n           \
    \     {\n                    if(vowel == it->first)\n                    {\n \
    \                       break;\n                    }\n                    \n\
    \                    index--;\n                }\n                else\n     \
    \           {\n                    break;\n                }\n            }\n\
    \            \n            if(index >= 0)\n            {\n                return\
    \ vowel;\n            }\n        }\n    }\n    \n    return \"\";\n}", "{\n  \
    \  map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n\
    \        if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n   \
    \     }\n    }\n    \n    map<string, int>::iterator it;\n    for(it = vowels.begin();\
    \ it != vowels.end(); it++)\n    {\n        if(it->second > 0)\n        {\n  \
    \          int index = distance(word.rbegin(), word.rend(), it->first);\n    \
    \        if(index > 0)\n            {\n                return it->first;\n   \
    \         }\n        }\n    }\n    return \"\";\n}", "{\n    map<string, int>\
    \ vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second == 0)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}", "{\n    map<string, int> vowels;\n  \
    \  for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i] == 'a' ||\
    \ word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n    \
    \    {\n            vowels[word[i]] = vowels[word[i]] + 1;\n        }\n    }\n\
    \    \n    map<string, int>::iterator it;\n    for(it = vowels.begin(); it !=\
    \ vowels.end(); it++)\n    {\n        if(it->second > 0)\n        {\n        \
    \    int min = it->second;\n            string vowel = it->first;\n          \
    \  int index = word.find_last_of(vowel);\n            while(index != -1)\n   \
    \         {\n                if(word[index + 1] == vowel)\n                {\n\
    \                    if(word[index + 2] != vowel)\n                    {\n   \
    \                     min = min + 1;\n                    }\n                \
    \    else\n                    {\n                        break;\n           \
    \         }\n                }\n                index += 2;\n            }\n \
    \           if(min == it->second)\n            {\n                return vowel;\n\
    \            }\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nI like your solution, however I believe that `std::map` should\
    \ be `std::unordered_map` since `std::map` has `O(log n)` complexity while `std::unordered_map`\
    \ has `O(1)` complexity.\n<|/ c |>\n<| c |>\nI agree, `std::unordered_map` would\
    \ be better. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\nI wrote\
    \ a solution using std::unordered_map and std::unordered_set. \n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>",
  "{\n    string vowels = \"aeiouAEIOU\";\n    \n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(vowels.find(word[i]) != string::npos)\n        {\n        \
    \    int index = vowels.find(word[i]);\n            string vowel = vowels.substr(index,1);\n\
    \            \n            int startIndex = word.find_last_of(vowel);\n      \
    \      int endIndex = word.find_first_of(vowel,startIndex+1);\n            \n\
    \            if(startIndex != -1 && endIndex != -1)\n            {\n         \
    \       return vowel;\n            }\n        }\n    }\n    \n    return \"\"\
    ;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        if(vowels.find(word.at(i)) != string::npos)\n\
    \        {\n            int index = vowels.find(word.at(i));\n            int\
    \ j = word.find_last_of(\"aeiouAEIOU\");\n            int k = word.find_last_of(\"\
    AEIOU\");\n            int l = word.find_last_of(\"aeiouAEIOU\", j);\n       \
    \     int m = word.find_last_of(\"AEIOU\", j);\n            int n = word.find_last_of(\"\
    aeiouAEIOU\", k);\n            int o = word.find_last_of(\"AEIOU\", k);\n    \
    \        int p = word.find_last_of(\"aeiouAEIOU\", l);\n            int q = word.find_last_of(\"\
    AEIOU\", l);\n            int r = word.find_last_of(\"aeiouAEIOU\", m);\n    \
    \        int s = word.find_last_of(\"AEIOU\", m);\n            int t = word.find_last_of(\"\
    aeiouAEIOU\", n);\n            int u = word.find_last_of(\"AEIOU\", n);\n    \
    \        int v = word.find_last_of(\"aeiouAEIOU\", o);\n            int w = word.find_last_of(\"\
    AEIOU\", o);\n            int x = word.find_last_of(\"aeiouAEIOU\", p);\n    \
    \        int y = word.find_last_of(\"AEIOU\", p);\n            int z = word.find_last_of(\"\
    aeiouAEIOU\", q);\n            int A = word.find_last_of(\"AEIOU\", q);\n    \
    \        int B = word.find_last_of(\"aeiouAEIOU\", r);\n            int C = word.find_last_of(\"\
    AEIOU\", r);\n            int D = word.find_last_of(\"aeiouAEIOU\", s);\n    \
    \        int E = word.find_last_of(\"AEIOU\", s);\n            int F = word.find_last_of(\"\
    aeiouAEIOU\", t);\n            int G = word.find_last_of(\"AEIOU\", t);\n    \
    \        int H = word.find_last_of(\"aeiouAEIOU\", u);\n            int I = word.find_last_of(\"\
    AEIOU\", u);\n            int J = word.find_last_of(\"aeiouAEIOU\", v);\n    \
    \        int K = word.find_last_of(\"AEIOU\", v);\n            int L = word.find_last_of(\"\
    aeiouAEIOU\", w);\n            int ", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string vowels_reverse = vowels.rbegin();\n    string vowels_reverse2 = vowels.rend();\n\
    \    \n    for(int i = 0; i < word.length(); i++)\n    {\n        if(word[i] ==\
    \ vowels_reverse[i])\n        {\n            int index = vowels_reverse2.find_first_of(word[i]);\n\
    \            int index2 = vowels_reverse2.find_last_of(word[i]);\n           \
    \ \n            if(index != -1 && index2 != -1)\n            {\n             \
    \   if(index > index2)\n                {\n                    return word[i];\n\
    \                }\n                else\n                {\n                \
    \    return word[i];\n                }\n            }\n        }\n    }\n   \
    \ \n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ vowels_reversed = vowels.rbegin();\n    \n    for(int i = 0; i < word.length();\
    \ i++)\n    {\n        if(word[i] == vowels_reversed[i])\n        {\n        \
    \    int j = word.find_last_of(vowels_reversed[i]);\n            int k = word.find_first_of(vowels_reversed[i]);\n\
    \            \n            int diff = abs(j - k);\n            \n            if(diff\
    \ > 1)\n            {\n                return word[i];\n            }\n      \
    \  }\n    }\n    \n    return \"\";\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis does not work. Try \"yogurt\" for example. It returns \"u\"\
    \ instead of \"U\".\n<|/ c |>\n<| c |>\nI tested it and it works fine for me.\
    \ Can you please provide an example where it fails?\n<|/ c |>\n<| c |>\nIt returns\
    \ \"u\" instead of \"U\" because \"u\" is the closest vowel to \"yogurt\" in the\
    \ \"yogurt\" word. Try \"yogurt\" for example. It returns \"u\" instead of \"\
    U\".\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug. Now it works as expected.\n\
    <|/ c |>\n<| c |>\nIt still doesn't work. Try \"yogurt\" for example. It returns\
    \ \"u\" instead of \"U\".\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(vowels.find(word.substr(i,1))!=string::npos)\n        {\n \
    \           return word.substr(i,1);\n        }\n    }\n    return \"\";\n}",
  "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n    {\n \
    \       if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n    \
    \    }\n    }\n    map<string,int>::iterator it;\n    string ans=\"\";\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==0)\n        {\n            break;\n        }\n\
    \        if(it->second<2)\n        {\n            ans=it->first;\n           \
    \ break;\n        }\n    }\n    return ans;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    \n    for(int i=word.length()-1;i>=0;i--)\n    {\n        if(vowels.find(word[i])\
    \ != string::npos)\n        {\n            int index = vowels.find(word[i]);\n\
    \            int index2 = word.length()-i;\n            int index3 = index+2;\n\
    \            int index4 = index+3;\n            \n            string a = word[index];\n\
    \            string b = word[index2];\n            string c = word[index3];\n\
    \            string d = word[index4];\n            \n            string result\
    \ = \"\";\n            \n            if(a == \"a\" || a == \"e\" || a == \"i\"\
    \ || a == \"o\" || a == \"u\")\n            {\n                if(word[index+1]\
    \ == \"a\" || word[index+1] == \"e\" || word[index+1] == \"i\" || word[index+1]\
    \ == \"o\" || word[index+1] == \"u\")\n                {\n                   \
    \ result = a;\n                }\n                else\n                {\n  \
    \                  result = b;\n                }\n            }\n           \
    \ else if(b == \"a\" || b == \"e\" || b == \"i\" || b == \"o\" || b == \"u\")\n\
    \            {\n                if(word[index+2] == \"a\" || word[index+2] ==\
    \ \"e\" || word[index+2] == \"i\" || word[index+2] == \"o\" || word[index+2] ==\
    \ \"u\")\n                {\n                    result = b;\n               \
    \ }\n                else\n                {\n                    result = c;\n\
    \                }\n            }\n            else if(c == \"a\" || c ==\"e\"\
    \ || c ==\"i\" || c ==\"o\" || c ==\"u\")\n            {\n                if(word[index+3]\
    \ == \"a\" || word[index+3] == \"e\" || word[index+3] == \"i\" || word[index+3]\
    \ == \"o\" || word[index+3] == \"u\")\n                {\n                   \
    \ result = c;\n                }\n                else\n                {\n  \
    \                  result = d;\n                }\n            }\n           \
    \ else if(d == \"a\" || d == \"e\" || d == \"i\" || d == \"o\" || d == \"u\")\n\
    \            {\n                if(word[index+4] == \"a\" || word[index+4] ==\
    \ \"e\" || word[index+4] == \"i\" || word[index+4] == \"o\" || word[index+4] ==\
    \ \"u\")\n                {\n                    result = d;\n               \
    \ }\n                else\n                {\n                    result = a;\n\
    \                }\n            }\n            \n            return result;\n\
    \        }\n    }\n    \n    return \"\";\n}", "{\n    int len = word.length();\n\
    \    for(int i = len-1; i >= 0; i--)\n    {\n        if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n \
    \           return word[i];\n        }\n    }\n    return \"\";\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `get_closest_vowel(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've updated the answer.\n\
    <|/ c |>\n<| c |>\nThis still doesn't work. Try it with `get_closest_vowel(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've updated the answer.\n\
    <|/ c |>\n<| c |>\nThis still doesn't work. Try it with `get_closest_vowel(\"\
    ab\")`.\n<|/ c |>\n<| a |>\n<code>\nstring get_closest_vowel(string word) \n{\n\
    \    int len = word.length();\n    for(int i = len-1; i >= 0; i--)\n    {\n  \
    \      if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o'\
    \ || word[i] == 'u')\n        {\n            return word[i];\n        }\n    }\n\
    \    return \"\";\n}\n</code>\n<|/ a dscore=0 tags=c++ |>\n<| c |>\nThis doesn't\
    \ work. Try it with `get_closest_vowel(\"ab\")`.\n<|/ c |>\n<| c |>\nThis still\
    \ doesn't work. Try it with `get_closest_vowel(\"ab\")`.\n<|/ c |>\n<| c |>\n\
    This still doesn't work. Try it with `get_closest_vowel(\"ab\")`.\n<|/ c |>\n\
    <| c |>\nThis still doesn't work. Try it with `get_closest_vowel(\"ab\")`.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nstring get_closest_vowel(string word) \n{\n\
    \    int len = word.length();\n    for(int i = len-1; i >= 0; i--)\n    {\n  \
    \      if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o'\
    \ || word[i] == 'u')\n        {\n            return word[i];\n        }\n    }\n\
    \    return \"\";\n}\n</code>\n<|/ a tags=c++ |>\n<| c |>\nThis doesn't work.\
    \ Try it with `get_closest_vowel(\"ab\")`.\n<|/ c |>\n<| c |>\n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
