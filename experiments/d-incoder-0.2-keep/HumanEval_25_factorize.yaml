name: HumanEval_25_factorize
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n Return list of prime factors\
  \ of given integer in the order from smallest to largest.\n    Each of the factors\
  \ should be listed number of times corresponding to how many times it appeares in\
  \ factorization.\n    Input number should be equal to the product of all factors\n\
  \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
  \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n) \n"
tests: "unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
  \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) ==\
  \ [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
  \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L,\
  \ 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
  \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
completions: ["{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long factor\
    \ = 1;\n    long count = 0;\n    for(int i = 2; i <= n; i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[count] = i;\n            n /= i;\n\
    \            count++;\n        }\n    }\n    factors[count] = n;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, long[] factors) \n{\n    long factor = 1;\n    long\
    \ count = 0;\n    for(int i = 2; i <= n; i++)\n    {\n        while(n % i == 0)\n\
    \        {\n            factors[count] = i;\n            n /= i;\n           \
    \ count++;\n        }\n    }\n    factors[count] = n;\n    return factors;\n}\n\
    /*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, long[] factors, int start) \n{\n    long factor =\
    \ 1;\n    long count = 0;\n    for(int i = start; i <= n; i++)\n    {\n      \
    \  while(n % i == 0)\n        {\n            factors[count] = i;\n           \
    \ n /= i;\n            count++;\n        }\n    }\n    factors[count] = n;\n \
    \   return factors;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors, int start, int\
    \ end) \n{\n    long factor = 1;\n    long count = 0;\n    for(int i = start;\
    \ i <= end; i++)\n    {\n        while(n % i == 0)\n        {\n            factors[",
  "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long p = n;\n    factors[0]\
    \ = 1;\n    for(int i = 1; i < factors.length; i++)\n    {\n        while(p %\
    \ 2 == 0)\n        {\n            p /= 2;\n            factors[i] = factors[i-1];\n\
    \        }\n        while(p % 3 == 0)\n        {\n            p /= 3;\n      \
    \      factors[i] = factors[i-1];\n        }\n        while(p % 5 == 0)\n    \
    \    {\n            p /= 5;\n            factors[i] = factors[i-1];\n        }\n\
    \        while(p % 7 == 0)\n        {\n            p /= 7;\n            factors[i]\
    \ = factors[i-1];\n        }\n        while(p % 11 == 0)\n        {\n        \
    \    p /= 11;\n            factors[i] = factors[i-1];\n        }\n        while(p\
    \ % 13 == 0)\n        {\n            p /= 13;\n            factors[i] = factors[i-1];\n\
    \        }\n        while(p % 17 == 0)\n        {\n            p /= 17;\n    \
    \        factors[i] = factors[i-1];\n        }\n        while(p % 19 == 0)\n \
    \       {\n            p /= 19;\n            factors[i] = factors[i-1];\n    \
    \    }\n        while(p % 23 == 0)\n        {\n            p /= 23;\n        \
    \    factors[i] = factors[i-1];\n        }\n        while(p % 29 == 0)\n     \
    \   {\n            p /= 29;\n            factors[i] = factors[i-1];\n        }\n\
    \        while(p % 31 == 0)\n        {\n            p /= 31;\n            factors[i]\
    \ = factors[i-1];\n        }\n        while(p % 37 == 0)\n        {\n        \
    \    p /= 37;\n            factors[i] = factors[i-1];\n        }\n        while(p\
    \ % 41 == 0)\n        {\n            p /= 41;\n            factors[i] = factors[i-1];\n\
    \        }\n        while(p % 43 == 0)\n        {\n            p /= 43;\n    \
    \        factors[i] = factors[i-1];\n        }\n        while(p % 47 == 0)\n \
    \       {\n            p /= 47;\n            factors[i] = factors[i-1];\n    \
    \    }\n        while(p % 53 == 0)\n        {\n            p /= 53;\n        \
    \    factors[i] = factors[i-1];\n        }\n        while(p % 59 == 0)\n     \
    \   {\n            p /= 59;\n            factors[i] = factors[i-1];\n        }\n\
    \        while(p % 61 == 0)\n        {\n            p /= 61;\n            factors[i]\
    \ = factors[i-1];\n        }\n        while(p % 67 == 0)\n        {\n        \
    \    p /= 67;\n", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long ",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = n;\n    long factor\
    \ = 1;\n    long factorCount = 0;\n    \n    while(p > 1) {\n        factors[factorCount]\
    \ = p;\n        factorCount++;\n        \n        factor = p * factor;\n     \
    \   p /= factor;\n    }\n    \n    factors[factorCount] = p;\n    factorCount++;\n\
    \    \n    return factors;\n}", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long counter = 1;\n    long factorization = 1;\n  \
    \  long factorizationCounter = 1;\n    long factorizationCounter2 = 1;\n    long\
    \ factorizationCounter3 = 1;\n    long factorizationCounter4 = 1;\n    long factorizationCounter5\
    \ = 1;\n    long factorizationCounter6 = 1;\n    long factorizationCounter7 =\
    \ 1;\n    long factorizationCounter8 = 1;\n    long factorizationCounter9 = 1;\n\
    \    long factorizationCounter10 = 1;\n    long factorizationCounter11 = 1;\n\
    \    long factorizationCounter12 = 1;\n    long factorizationCounter13 = 1;\n\
    \    long factorizationCounter14 = 1;\n    long factorizationCounter15 = 1;\n\
    \    long factorizationCounter16 = 1;\n    long factorizationCounter17 = 1;\n\
    \    long factorizationCounter18 = 1;\n    long factorizationCounter19 = 1;\n\
    \    long factorizationCounter20 = 1;\n    long factorizationCounter21 = 1;\n\
    \    long factorizationCounter22 = 1;\n    long factorizationCounter23 = 1;\n\
    \    long factorizationCounter24 = 1;\n    long factorizationCounter25 = 1;\n\
    \    long factorizationCounter26 = 1;\n    long factorizationCounter27 = 1;\n\
    \    long factorizationCounter28 = 1;\n    long factorizationCounter29 = 1;\n\
    \    long factorizationCounter30 = 1;\n    long factorizationCounter31 = 1;\n\
    \    long factorizationCounter32 = 1;\n    long factorizationCounter33 = 1;\n\
    \    long factorizationCounter34 = 1;\n    long factorizationCounter35 = 1;\n\
    \    long factorizationCounter36 = 1;\n    long factorizationCounter37 = 1;\n\
    \    long factorizationCounter38 = 1;\n    long factorizationCounter39 = 1;\n\
    \    long factorizationCounter40 = 1;\n    long factorizationCounter41 = 1;\n\
    \    long factorizationCounter42 = 1;\n    long factorizationCounter43 = 1;\n\
    \    long factorizationCounter44 = 1;\n    long factorizationCounter45 = 1;\n\
    \    long factorizationCounter46 = 1;\n    long factorizationCounter47 = 1;\n\
    \    long factorizationCounter48 = 1;\n    long factorizationCounter49 = 1;\n\
    \    long factorizationCounter50 = 1;\n    long factorizationCounter51 = 1;\n\
    \    long factorizationCounter52 = 1;\n    long factorizationCounter53 = 1;\n\
    \    long factorizationCounter54 = 1;\n    long factorizationCounter55 = 1;\n\
    \    long factorizationCounter56 = 1;\n    long factorizationCounter57 = 1;\n\
    \    long factorizationCounter58 = 1;\n    long factorizationCounter59 = 1;\n\
    \    long factorizationCounter60", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    \n    for(int\
    \ i = 0; i < factors.length; i++)\n    {\n        while(p % factor == 0)\n   \
    \     {\n            factors[factorCount++] = factor;\n            p /= factor;\n\
    \        }\n        factor *= i;\n    }\n    \n    for(int i = 0; i < factorCount;\
    \ i++)\n    {\n        factors[i] = factors[factorCount-i];\n    }\n    return\
    \ factors;\n}", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p\
    \ = n;\n    factors[0] = 1;\n    for(int i=1; i<factors.length; i++)\n    {\n\
    \        while(p % i == 0)\n        {\n            factors[i] = factors[i-1] *\
    \ i;\n            p /= i;\n        }\n    }\n    return factors;\n}", "{\n   \
    \ long[] factors = new long[(int)sqrt(n)+1];\n    long p = 2;\n    long factor\
    \ = 1;\n    long count = 0;\n    while(p <= n)\n    {\n        while(n % p ==\
    \ 0)\n        {\n            factors[count++] = p;\n            n /= p;\n    \
    \    }\n        p++;\n    }\n    factors[count++] = n;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max) \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 2;\n    long factor = 1;\n    long count = 0;\n    while(p <= n)\n\
    \    {\n        while(n % p == 0)\n        {\n            factors[count++] = p;\n\
    \            n /= p;\n        }\n        p++;\n    }\n    factors[count++] = n;\n\
    \    return factors;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max, int maxCount) \n{\n \
    \   long[] factors = new long[(int)sqrt(n)+1];\n    long p = 2;\n    long factor\
    \ = 1;\n    long count = 0;\n    while(p <= n)\n    {\n        while(n % p ==\
    \ 0)\n        {\n            factors[count++] = p;\n            n /= p;\n    \
    \    }\n        p++;\n    }\n    factors[count++] = n;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max, int maxCount, int maxCount", "{\n    long[]\
    \ result = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++) {\n        while(n % i\
    \ == 0) {\n            factor *= i;\n            factorCount++;\n            n\
    \ /= i;\n        }\n        result[i] = factor;\n        factor = 1;\n    }\n\
    \    result[(int)Math.sqrt(n)] = factor;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++) {\n        if(factorCount == 0) {\n            result[i] = 1;\n       \
    \ } else {\n            result[i] *= result[i-1];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors) \n{\n    long[]\
    \ result = new long[maxFactors];\n    long factor = 1;\n    long factorCount =\
    \ 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++) {\n        while(n % i ==\
    \ 0) {\n            factor *= i;\n            factorCount++;\n            n /=\
    \ i;\n        }\n        result[factorCount] = factor;\n        factor = 1;\n\
    \    }\n    result[(int)Math.sqrt(n)] = factor;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++) {\n        if(factorCount == 0) {\n            result[i] = 1;\n       \
    \ } else {\n            result[i] *= result[i-1];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int maxFactorsCount)\
    \ \n{\n    long[] result = new long[maxFactors];\n    long factor = 1;\n    long\
    \ factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++) {\n      \
    \  while(n % i == 0) {\n            factor *= i;\n            factorCount++;\n\
    \            n /= i;\n        }\n        result[factorCount] = factor;\n     \
    \   factor = 1;\n    }\n    result[(int)Math.sqrt(n)] = factor", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n    long count\
    \ = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++) {\n        while(n % factor\
    \ == 0) {\n            factors[count++] = factor;\n            n /= factor;\n\
    \        }\n        factor++;\n    }\n    factors[count++] = n;\n    return factors;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,primes,java |>\n<code>\nimport\
    \ java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q\
    \ = n;\n    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[]\
    \ factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long count =\
    \ 0;\n    for(int i = 1; i < factors.length; i++)\n    {\n        while(n % factor\
    \ == 0)\n        {\n            factors[count++] = factor;\n            n /= factor;\n\
    \        }\n        factor++;\n    }\n    factors[count++] = n;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int maxFactors) \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long factor = 1;\n    long count = 0;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        while(n % factor == 0)\n        {\n            factors[count++]\
    \ = factor;\n            n /= factor;\n        }\n        factor++;\n        if(count\
    \ >= maxFactors)\n            break;\n    }\n    factors[count++] = n;\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int maxFactorsCount)\
    \ \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n\
    \    long count = 0;\n    for(int i = 1; i < factors.length; i++)\n    {\n   \
    \     while(n % factor == 0)\n        {\n            factors[count++] = factor;\n\
    \            n /= factor;\n        }\n        factor++;\n        if(count >= maxFactors)\n\
    \            break;\n        if(count >= maxFactorsCount)\n            break;\n\
    \    }\n    factors[count++] = n;\n    return factors;\n}\n/*\n Return list of\
    \ prime factors of given integer in the order from smallest to largest.\n    Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factor", "{\n \
    \   long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q =\
    \ 1;\n    long r = n;\n    long s = 1;\n    long t = 0;\n    \n    while(p <=\
    \ r)\n    {\n        while(p <= r)\n        {\n            while(p <= r)\n   \
    \         {\n                while(p <= r)\n                {\n              \
    \      while(p <= r)\n                    {\n                        while(p <=\
    \ r)\n                        {\n                            while(p <= r)\n \
    \                           {\n                                while(p <= r)\n\
    \                                {\n                                    while(p\
    \ <= r)\n                                    {\n                             \
    \           while(p <= r)\n                                        {\n       \
    \                                     while(p <= r)\n                        \
    \                    {\n                                                while(p\
    \ <= r)\n                                                {\n                 \
    \                                   while(p <= r)\n                          \
    \                          {\n                                               \
    \         while(p <= r)\n                                                    \
    \    {\n                                                            while(p <=\
    \ r)\n                                                            {\n        \
    \                                                        while(p <= r)\n     \
    \                                                           {\n              \
    \                                                      while(p <= r)\n       \
    \                                                             {\n            \
    \                                                            while(p <= r)\n \
    \                                                                       {\n  \
    \                                                                          while(p\
    \ <= r)\n                                                                    \
    \        {\n                                                                 \
    \               while(p <= r)\n                                              \
    \                                  {\n                                       \
    \                                             while(p <= r)\n                \
    \                                                                    {\n     \
    \                                                                            \
    \       while(p <= r)\n                                                      \
    \                                  {\n                                       \
    \                                                     while(p <= r)\n        \
    \                                                                            \
    \        {\n                                                                 \
    \                               while(p <= r)\n                              \
    \                                                                  {\n       \
    \                                                                            \
    \                 while(p <= r)\n                                            \
    \                                                        {\n                 \
    \                                                                            \
    \           while(p <= r)\n                                                  \
    \                                                      {\n                   \
    \                                                                            \
    \             while(p <= r)\n                                                \
    \                                                            {\n             \
    \                                                                            \
    \                       while(p <= r)\n                                      \
    \                                                                          {\n\
    \                                                                            \
    \                                        while(p <= r)\n                     \
    \                                                                            \
    \                   {\n                                                      \
    \                                                                  while(p <=\
    \ r)\n                                                                       \
    \                                                 {\n                        \
    \                                                                            \
    \                        while(p <= r)\n                                     \
    \                                                                            \
    \           {\n                                                              \
    \                                                                  while(p <=\
    \ r)\n                                                                       \
    \                                                         {\n                \
    \                                                                            \
    \                                        while(p <= r)\n                     \
    \                                                                            \
    \                                   {\n                                      \
    \                                                                            \
    \                      while(p <= r)\n                                       \
    \                                                                            \
    \                     {\n                                                    \
    \                                                                            \
    \            while(p <= r)\n                                                 \
    \                                                                            \
    \               {\n                                                          \
    \                                                                            \
    \          while(p <= r)\n                                                   \
    \                                                                            \
    \                 {\n                                                        \
    \                                                                            \
    \                while(p <= r)\n                                             \
    \                                                                            \
    \                           {\n                                              \
    \                                                                            \
    \                              while(p <= r)\n                               \
    \                                                                            \
    \                                             {\n                            \
    \                                                                            \
    \                                                    while(p <= r)\n         \
    \                                                                            \
    \                                                                       {\n  \
    \                                                                            \
    \                                                                            \
    \      while(p <= r)\n                                                       \
    \                                                                            \
    \                             {\n                                            \
    \                                                                            \
    \                                            while(p <= r)\n                 \
    \                                                                            \
    \                                                                       {\n  \
    \                                                                            \
    \                                                                            \
    \              while(p <= r)\n                                               \
    \                                                                            \
    \                                             {\n                            \
    \                                                                            \
    \                                                                    while(p <=\
    \ r)\n                                                                       \
    \                                                                            \
    \                         {\n                                                \
    \                                                                            \
    \                                                    while(p <= r)\n         \
    \                                                                            \
    \                                                                            \
    \               {\n                                                          \
    \                                                                            \
    \                                              while(p ", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long q = n;\n    long r\
    \ = n;\n    long s = 1;\n    long t = 0;\n    \n    while(p != 1 && q != 1)\n\
    \    {\n        while(p != 1 && q != 1)\n        {\n            if(p * q > r)\n\
    \            {\n                factors[(int)Math.sqrt(r)] = r;\n            \
    \    r = n;\n            }\n            else\n            {\n                factors[(int)Math.sqrt(p)]\
    \ = p;\n                p = q;\n            }\n            \n            q = p\
    \ / r;\n        }\n        \n        while(p != 1)\n        {\n            factors[(int)Math.sqrt(p)]\
    \ = p;\n            p = q;\n            q = p / r;\n        }\n        \n    \
    \    while(p != 1 && q != 1)\n        {\n            if(p * q > r)\n         \
    \   {\n                factors[(int)Math.sqrt(r)] = r;\n                r = n;\n\
    \            }\n            else\n            {\n                factors[(int)Math.sqrt(p)]\
    \ = p;\n                p = q;\n            }\n            \n            q = p\
    \ / r;\n        }\n        \n        while(p != 1)\n        {\n            factors[(int)Math.sqrt(p)]\
    \ = p;\n            p = q;\n            q = p / r;\n        }\n        \n    \
    \    while(p != 1 && q != 1)\n        {\n            if(p * q > r)\n         \
    \   {\n                factors[(int)Math.sqrt(r)] = r;\n                r = n;\n\
    \            }\n            else\n            {\n                factors[(int)Math.sqrt(p)]\
    \ = p;\n                p = q;\n            }\n            \n            q = p\
    \ / r;\n        }\n        \n        while(p != 1)\n        {\n            factors[(int)Math.sqrt(p)]\
    \ = p;\n            p = q;\n            q = p / r;\n        }\n        \n    \
    \    while(p != 1 && q != 1)\n        {\n            if(p * q > r)\n         \
    \   {\n                factors[(int)Math.sqrt(r)] = r;\n                r = n;\n\
    \            }\n            else\n            {\n                factors[(int)Math.sqrt(p)]\
    \ = p;\n                p = q;\n            }\n            \n            q = p\
    \ / r;\n        }\n        \n        while(p != 1)\n        {\n            factors[(int)Math.sqrt(p)]\
    \ = p;\n            p = q;\n            q = p / r;\n        }\n        \n    \
    \    while(p != 1 && q != 1)\n        {\n            if(p * q > r)\n         \
    \   {\n                factors[(int)Math.sqrt(r)] = r;\n                r = n;\n\
    \            }\n            else\n            {\n                factors[(int)Math.sqrt(p)]\
    \ = p;\n", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n   \
    \ long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q =\
    \ 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long ",
  "{\n    long factors[] = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long\
    \ count = 0;\n    long i;\n    for(i = 2; i <= n; i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[count] = i;\n            n /= i;\n\
    \            count++;\n        }\n    }\n    factors[count] = n;\n    for(i =\
    \ count; i >= 0; i--)\n    {\n        factor *= factors[i];\n    }\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long factorization[]) \n{\n  \
    \  long factors[] = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long\
    \ count = 0;\n    long i;\n    for(i = 2; i <= n; i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[count] = i;\n            n /= i;\n\
    \            count++;\n        }\n    }\n    factors[count] = n;\n    for(i =\
    \ count; i >= 0; i--)\n    {\n        factor *= factors[i];\n    }\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factorization) \n{\n  \
    \  long factors[] = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long\
    \ count = 0;\n    long i;\n    for(i = 2; i <= n; i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[count] = i;\n            n /= i;\n\
    \            count++;\n        }\n    }\n    factors[count] = n;\n    for(i =\
    \ count; i >= 0; i--)\n    {\n        factor *= factors[i];\n    }\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n    long\
    \ t = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    \n    while(p\
    \ <= q)\n    {\n        while(p <= q && q % p == 0)\n        {\n            q\
    \ = q / p;\n            factors[(int)t++] = p;\n        }\n        \n        while(p\
    \ <= q && r != 1)\n        {\n            while(r % p == 0)\n            {\n \
    \               r = r / p;\n                factors[(int)t++] = p;\n         \
    \   }\n            \n            if(r == 1)\n            {\n                factors[(int)t++]\
    \ = r;\n                factors[(int)t++] = 1;\n                break;\n     \
    \       }\n            \n            if(r > 1)\n            {\n              \
    \  factors[(int)t++] = r;\n                factors[(int)t++] = 1;\n          \
    \  }\n            \n            if(r == p)\n            {\n                factors[(int)t++]\
    \ = r;\n                factors[(int)t++] = p;\n            }\n            \n\
    \            if(r > p)\n            {\n                factors[(int)t++] = r;\n\
    \                factors[(int)t++] = p;\n            }\n        }\n        \n\
    \        while(p <= q && r != 1)\n        {\n            while(r % p == 0)\n \
    \           {\n                r = r / p;\n                factors[(int)t++] =\
    \ p;\n            }\n            \n            if(r == 1)\n            {\n   \
    \             factors[(int)t++] = r;\n                factors[(int)t++] = 1;\n\
    \                break;\n            }\n            \n            if(r > 1)\n\
    \            {\n                factors[(int)t++] = r;\n                factors[(int)t++]\
    \ = 1;\n            }\n            \n            if(r == p)\n            {\n \
    \               factors[(int)t++] = r;\n                factors[(int)t++] = p;\n\
    \            }\n            \n            if(r > p)\n            {\n         \
    \       factors[(int)t++] = r;\n                factors[(int)t++] = p;\n     \
    \       }\n        }\n        \n        while(p <= q && r != 1)\n        {\n \
    \           while(r % p == 0)\n            {\n                r = r / p;\n   \
    \             factors[(int)t++] = p;\n            }\n            \n          \
    \  if(r == 1)\n            {\n                factors[(int)t++] = r;\n       \
    \         factors[(int)t++] = 1;\n                break;\n            }\n    \
    \        \n            if(r > 1)\n            {\n                factors[(int)t++]\
    \ = r;\n                factors[(int)t++] = 1;\n            }\n            \n\
    \            if(r == p)\n            {", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 1;\n    long factor = 1;\n    long factorCount = 0;\n    for(int\
    \ i = 1; i < factors.length; i++)\n    {\n        factorCount = 0;\n        while(n\
    \ % p == 0)\n        {\n            factors[factorCount++] = p;\n            n\
    \ /= p;\n        }\n        if(n > 1)\n        {\n            factors[factorCount++]\
    \ = n;\n        }\n        p = factors[factorCount-1];\n    }\n    factors[factors.length-1]\
    \ = n;\n    return factors;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;",
  "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n  \
    \  long counter = 1;\n    long factorization = 1;\n    \n    for(int i = 1; i\
    \ <= (int)Math.sqrt(n); i++) {\n        factorization *= i;\n        \n      \
    \  for(int j = 1; j <= (int)Math.sqrt(n); j++) {\n            if((factorization%j)\
    \ == 0) {\n                factors[counter] = j;\n                counter++;\n\
    \            }\n        }\n    }\n    \n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max) \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long\
    \ factor = 1;\n    long counter = 1;\n    long factorization = 1;\n    \n    for(int\
    \ i = 1; i <= (int)Math.sqrt(n); i++) {\n        factorization *= i;\n       \
    \ \n        for(int j = 1; j <= (int)Math.sqrt(n); j++) {\n            if((factorization%j)\
    \ == 0) {\n                factors[counter] = j;\n                counter++;\n\
    \            }\n        }\n    }\n    \n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max, int maxFactors) \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long counter = 1;\n    long factorization = 1;\n  \
    \  \n    for(int i = 1; i <= (int)Math.sqrt(n); i++) {\n        factorization\
    \ *= i;\n        \n        for(int j = 1; j <= (int)Math.sqrt(n); j++) {\n   \
    \         if((factorization%j) == 0) {\n                factors[counter] = j;\n\
    \                counter++;\n            }\n        }\n    }\n    \n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factor", "{\n    long[] factors =\
    \ new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long count = 0;\n    for(int\
    \ i = 1; i < factors.length; i++)\n    {\n        while(n % factor == 0)\n   \
    \     {\n            factors[count++] = factor;\n            n /= factor;\n  \
    \      }\n        factor++;\n    }\n    factors[count++] = n;\n    return factors;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.*;\n\
    public class PrimeFactors\n{\n    public static void main(String[] args)\n   \
    \ {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter a number\");\n        int num = sc.nextInt();\n        System.out.println(\"\
    The prime factors of \"+num+\" are: \");\n        for(int i=2;i<=Math.sqrt(num);i++)\n\
    \        {\n            for(int j=2;j<=i;j++)\n            {\n               \
    \ if(num%i==0)\n                {\n                    System.out.print(i+\" \"\
    );\n                    break;\n                }\n            }\n        }\n\
    \    }\n}\n</code>\n<|/ a tags=java,prime-factoring |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.*;\npublic class PrimeFactors\n{\n    public static void main(String[]\
    \ args)\n    {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter a number\");\n        int num = sc.nextInt();\n        System.out.println(\"\
    The prime factors of \"+num+\" are: \");\n        for(int i=2;i<=Math.sqrt(num);i++)\n\
    \        {\n            for(int j=2;j<=i;j++)\n            {\n               \
    \ if(num%i==0)\n                {\n                    System.out.print(i+\" \"\
    );\n                    break;\n                }\n            }\n        }\n\
    \    }\n}\n</code>\n<|/ a tags=java,prime-factoring |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.*;\npublic class PrimeFactors\n{\n    public static void main(String[]\
    \ args)\n    {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter a number\");\n        int num = sc.nextInt();\n        System.out.println(\"\
    The prime factors of \"+num+\" are: \");\n        for(int i=2;i<=Math.sqrt(num);i++)\n\
    \        {\n            for(int j=2;j<=i;j++)\n            {\n               \
    \ if(num%i==0)\n                {\n                    System.out.print(i+\" \"\
    );\n                    break;\n                }\n            }\n        }\n\
    \    }\n}\n</code>\n<|/ a tags=java,prime-factoring |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.", "{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n  \
    \  long factor = 1;\n    long factorCount = 0;\n    for(int i = 2; i <= n; i++)\n\
    \    {\n        while(n % i == 0)\n        {\n            factors[factorCount]\
    \ = i;\n            factorCount++;\n            n /= i;\n        }\n    }\n  \
    \  factors[factorCount] = n;\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorizationSize) \n{\n    long[] factors = new long[factorizationSize];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 2; i <= n; i++)\n\
    \    {\n        while(n % i == 0)\n        {\n            factors[factorCount]\
    \ = i;\n            factorCount++;\n            n /= i;\n        }\n    }\n  \
    \  factors[factorCount] = n;\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorizationSize, bool isPrime)\n{\n    long[] factors = new long[factorizationSize];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 2; i <= n; i++)\n\
    \    {\n        if(isPrime)\n        {\n            while(n % i == 0)\n      \
    \      {\n                factors[factorCount] = i;\n                factorCount++;\n\
    \                n /= i;\n            }\n        }\n        else\n        {\n\
    \            while(n % i == 0)\n            {\n                factors[factorCount]\
    \ = i;\n                factorCount++;\n                n /= i;\n            }\n\
    \        }\n    }\n    factors[factorCount] = n;\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number ", "{\n  \
    \  long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q = 1;\n\
    \    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n    long factorCount =\
    \ 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        if(n%i ==\
    \ 0)\n        {\n            factorCount++;\n            factors[i] = factor;\n\
    \            factor *= i;\n        }\n    }\n    factors[(int)Math.sqrt(n)] =\
    \ factorCount;\n    return factors;\n}\n/*\n Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors) \n{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        if(n%i\
    \ == 0)\n        {\n            factorCount++;\n            factors[i] = factor;\n\
    \            factor *= i;\n        }\n    }\n    factors[(int)Math.sqrt(n)] =\
    \ factorCount;\n    return factors;\n}\n/*\n Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int minFactors)\
    \ \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n\
    \    long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n\
    \    {\n        if(n%i == 0)\n        {\n            factorCount++;\n        \
    \    factors[i] = factor;\n            factor *= i;\n        }\n    }\n    factors[(int)Math.sqrt(n)]\
    \ = factorCount;\n    return factors;\n}\n/*\n Return list of prime factors of\
    \ given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long\
    \ factor = 1;\n    long factorCount = 0;\n    long currentCount = 1;\n    long\
    \ currentCount2 = 0;\n    long currentCount3 = 0;\n    long currentCount4 = 0;\n\
    \    long currentCount5 = 0;\n    long currentCount6 = 0;\n    long currentCount7\
    \ = 0;\n    long currentCount8 = 0;\n    long currentCount9 = 0;\n    long currentCount10\
    \ = 0;\n    long currentCount11 = 0;\n    long currentCount12 = 0;\n    long currentCount13\
    \ = 0;\n    long currentCount14 = 0;\n    long currentCount15 = 0;\n    long currentCount16\
    \ = 0;\n    long currentCount17 = 0;\n    long currentCount18 = 0;\n    long currentCount19\
    \ = 0;\n    long currentCount20 = 0;\n    long currentCount21 = 0;\n    long currentCount22\
    \ = 0;\n    long currentCount23 = 0;\n    long currentCount24 = 0;\n    long currentCount25\
    \ = 0;\n    long currentCount26 = 0;\n    long currentCount27 = 0;\n    long currentCount28\
    \ = 0;\n    long currentCount29 = 0;\n    long currentCount30 = 0;\n    long currentCount31\
    \ = 0;\n    long currentCount32 = 0;\n    long currentCount33 = 0;\n    long currentCount34\
    \ = 0;\n    long currentCount35 = 0;\n    long currentCount36 = 0;\n    long currentCount37\
    \ = 0;\n    long currentCount38 = 0;\n    long currentCount39 = 0;\n    long currentCount40\
    \ = 0;\n    long currentCount41 = 0;\n    long currentCount42 = 0;\n    long currentCount43\
    \ = 0;\n    long currentCount44 = 0;\n    long currentCount45 = 0;\n    long currentCount46\
    \ = 0;\n    long currentCount47 = 0;\n    long currentCount48 = 0;\n    long currentCount49\
    \ = 0;\n    long currentCount50 = 0;\n    long currentCount51 = 0;\n    long currentCount52\
    \ = 0;\n    long currentCount53 = 0;\n    long currentCount54 = 0;\n    long currentCount55\
    \ = 0;\n    long currentCount56 = 0;\n    long currentCount57 = 0;\n    long currentCount58\
    \ = 0;\n    long currentCount59 = 0;\n    long currentCount60 = 0;\n    long currentCount61\
    \ = 0;\n    long currentCount62 = 0;\n    long currentCount63 = 0;\n    long currentCount64\
    \ = 0;\n    long currentCount65 = 0;\n    long currentCount66 = 0;\n    long currentCount67\
    \ = 0;\n    long currentCount68 = 0;\n    long currentCount69 = 0;\n    long currentCount70\
    \ = 0;\n    ", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long\
    \ factor = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++) {\n        if(n\
    \ % i == 0) {\n            factor *= i;\n            factors[(int)Math.sqrt(n)\
    \ - i - 1] = factor;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)];\n    long p = n;\n    for(int i = 0;\
    \ i < factors.length; i++)\n    {\n        while(p % 2 == 0)\n        {\n    \
    \        p /= 2;\n            factors[i] = 2;\n        }\n        while(p % 3\
    \ == 0)\n        {\n            p /= 3;\n            factors[i] = 3;\n       \
    \ }\n        while(p % 5 == 0)\n        {\n            p /= 5;\n            factors[i]\
    \ = 5;\n        }\n        while(p % 7 == 0)\n        {\n            p /= 7;\n\
    \            factors[i] = 7;\n        }\n        while(p % 11 == 0)\n        {\n\
    \            p /= 11;\n            factors[i] = 11;\n        }\n        while(p\
    \ % 13 == 0)\n        {\n            p /= 13;\n            factors[i] = 13;\n\
    \        }\n        while(p % 17 == 0)\n        {\n            p /= 17;\n    \
    \        factors[i] = 17;\n        }\n        while(p % 19 == 0)\n        {\n\
    \            p /= 19;\n            factors[i] = 19;\n        }\n        while(p\
    \ % 23 == 0)\n        {\n            p /= 23;\n            factors[i] = 23;\n\
    \        }\n        while(p % 29 == 0)\n        {\n            p /= 29;\n    \
    \        factors[i] = 29;\n        }\n        while(p % 31 == 0)\n        {\n\
    \            p /= 31;\n            factors[i] = 31;\n        }\n        while(p\
    \ % 37 == 0)\n        {\n            p /= 37;\n            factors[i] = 37;\n\
    \        }\n        while(p % 41 == 0)\n        {\n            p /= 41;\n    \
    \        factors[i] = 41;\n        }\n        while(p % 43 == 0)\n        {\n\
    \            p /= 43;\n            factors[i] = 43;\n        }\n        while(p\
    \ % 47 == 0)\n        {\n            p /= 47;\n            factors[i] = 47;\n\
    \        }\n        while(p % 53 == 0)\n        {\n            p /= 53;\n    \
    \        factors[i] = 53;\n        }\n        while(p % 59 == 0)\n        {\n\
    \            p /= 59;\n            factors[i] = 59;\n        }\n        while(p\
    \ % 61 == 0)\n        {\n            p /= 61;\n            factors[i] = 61;\n\
    \        }\n        while(p % 67 == 0)\n        {\n            p /= 67;\n    \
    \        factors[i] = 67;\n        }\n        while(p % 71 == 0)\n        {\n\
    \            p /= 71;\n            factors[i] = 71;\n        }\n        while(p\
    \ % 73 == 0)\n        {\n            p /= 73;\n            factors[i] = ", "{\n\
    \    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q =\
    \ 1;\n    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n   \
    \ long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 0;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n",
  "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n\
    \    long count = 0;\n    long i = 2;\n    while(i <= n)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[count] = i;\n            n /= i;\n\
    \            count++;\n        }\n        i++;\n    }\n    factors[count] = n;\n\
    \    return factors;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,algorithm,primes,factorization\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long[] factors = new\
    \ long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n    long count = 0;\n    for(int\
    \ i = 1; i < factors.length; i++)\n    {\n        while(n % factor == 0)\n   \
    \     {\n            factors[count++] = factor;\n            n /= factor;\n  \
    \      }\n        factors[count++] = factor;\n        factor *= i;\n    }\n  \
    \  factors[count++] = n;\n    return factors;\n}", "{\n    long[] factors = new\
    \ long[(int)Math.sqrt(n)];\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long ", "{\n    long[] result = new long[(int)sqrt(n)+1];\n\
    \    long factor = 1;\n    long counter = 1;\n    for(int i = 2; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            n /= i;\n            factor\
    \ *= i;\n            counter++;\n        }\n        result[counter] = factor;\n\
    \    }\n    result[counter] = n;\n    return result;\n}\n</code>\n<|/ a tags=algorithm,primes,c++\
    \ |>\n<| c |>\nThe code above is written in Java. Just convert it to C++.\n<|/\
    \ c |>\n<| c |>\nThis code does not work. Try factorize(100) and you'll see that\
    \ it's wrong.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Try factorize(100)\
    \ and you'll see that it's wrong.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Try factorize(100) and you'll see that it's wrong.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. Try factorize(100) and you'll see that it's wrong.\n\
    <|/ c |>\n<| a dscore=4 |>\nThe best way to find prime factors is to start with\
    \ the number itself and work your way down. \n<code>", "{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long count = 0;\n   \
    \ \n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n        if(n%i == 0)\n\
    \        {\n            factors[i] = factor;\n            count += 1;\n      \
    \      n /= i;\n        }\n        else\n        {\n            factors[i] = factor;\n\
    \            count += 1;\n            factor = 1;\n        }\n    }\n    factors[(int)sqrt(n)]\
    \ = factor;\n    factors[(int)sqrt(n)+1] = count;\n    return factors;\n}", "{\n\
    \    long[] factors = new long[(int)sqrt(n)+1];\n    long p = n;\n    long factor\
    \ = 1;\n    long factorCount = 0;\n    while(p > 1)\n    {\n        factors[factorCount]\
    \ = p;\n        factorCount++;\n        while(p % factor == 0)\n        {\n  \
    \          p /= factor;\n            factorCount++;\n        }\n        factor++;\n\
    \    }\n    factors[factorCount] = p;\n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorizationSize) \n{\n    long[] factors = new long[factorizationSize];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    while(p\
    \ > 1)\n    {\n        factors[factorCount] = p;\n        factorCount++;\n   \
    \     while(p % factor == 0)\n        {\n            p /= factor;\n          \
    \  factorCount++;\n        }\n        factor++;\n    }\n    factors[factorCount]\
    \ = p;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize, int factorizationMaxSize)\
    \ \n{\n    long[] factors = new long[factorizationSize];\n    long p = n;\n  \
    \  long factor = 1;\n    long factorCount = 0;\n    while(p > 1)\n    {\n    \
    \    factors[factorCount] = p;\n        factorCount++;\n        while(p % factor\
    \ == 0)\n        {\n            p /= factor;\n            factorCount++;\n   \
    \     }\n        factor++;\n    }\n    factors[factorCount] = p;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number ", "{\n  \
    \  long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q = 1;\n\
    \    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long q = n;\n    long r\
    \ = n;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 1;\n    long j = 1;\n    long ", "{\n    long[] result = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    long maxFactor = n;\n  \
    \  for(int i = 0; i <= (int)Math.sqrt(n); i++) {\n        while(n % i == 0) {\n\
    \            n /= i;\n            factorCount++;\n        }\n        if(factorCount\
    \ > 0) {\n            result[factorCount] = i;\n            factorCount++;\n \
    \       }\n    }\n    if(n > 1) {\n        result[factorCount] = n;\n    }\n \
    \   return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/10770594)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked for a way\
    \ to find the prime factors of a number in O(sqrt(n)) time. He also asked for\
    \ ways to improve the algorithm to make it more efficient. He also asked for ways\
    \ to improve the algorithm to make it more efficient. He also asked for ways to\
    \ improve the algorithm to make it more efficient. He also asked for ways to improve\
    \ the algorithm to make it more efficient. He also asked for ways to improve the\
    \ algorithm to make it more efficient. He also asked for ways to improve the algorithm\
    \ to make it more efficient. He also asked for ways to improve the algorithm to\
    \ make it more efficient. He also asked for ways to improve the algorithm to make\
    \ it more efficient. He also asked for ways to improve the algorithm to make it\
    \ more efficient. He also asked for ways to improve the algorithm to make it more\
    \ efficient. He also asked for ways to improve the algorithm to make it more efficient.\
    \ He also asked for ways to improve the algorithm to make it more efficient. He\
    \ also asked for ways to improve the algorithm to make it more efficient. He also\
    \ asked for ways to improve the algorithm to make it more efficient. He also asked\
    \ for ways to improve the algorithm to make it more efficient. He also asked for\
    \ ways to improve the algorithm to make it more efficient. He also asked for ways\
    \ to improve the algorithm to make it more efficient. He also asked for ways to\
    \ improve the algorithm to make it more efficient. He also asked for ways to improve\
    \ the algorithm to make it more efficient. He also asked for ways to improve the\
    \ algorithm to ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n  \
    \  long factor = 1;\n    long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        if(n%i == 0)\n        {\n            factorCount++;\n \
    \           factors[i] = factor;\n            factor *= i;\n        }\n    }\n\
    \    factors[(int)Math.sqrt(n)] = factorCount;\n    return factors;\n}", "{\n\
    \    long[] factors = new long[(int)Math.Sqrt(n)];\n    long p = n;\n    long\
    \ factor = 1;\n    long factorCount = 0;\n    \n    while(p > 1)\n    {\n    \
    \    factorCount++;\n        factors[factorCount] = p;\n        factor = p * factor;\n\
    \        p--;\n    }\n    \n    for(int i = 0; i < factorCount; i++)\n    {\n\
    \        factors[i] = factors[i];\n    }\n    \n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int maxFactors) \n{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    \n    while(p\
    \ > 1)\n    {\n        factorCount++;\n        factors[factorCount] = p;\n   \
    \     factor = p * factor;\n        p--;\n    }\n    \n    for(int i = 0; i <\
    \ factorCount; i++)\n    {\n        factors[i] = factors[i];\n    }\n    \n  \
    \  return factors;\n}\n/*\n Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int maxFactorsCount)\
    \ \n{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n    long p = n;\n  \
    \  long factor = 1;\n    long factorCount = 0;\n    \n    while(p > 1)\n    {\n\
    \        factorCount++;\n        factors[factorCount] = p;\n        factor = p\
    \ * factor;\n        p--;\n    }\n    \n    for(int i = 0; i < factorCount; i++)\n\
    \    {\n        factors[i] = factors[i];\n    }\n    \n    return factors;\n}\n\
    /*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input ", "{\n    long factors[]\
    \ = new long[(int)Math.sqrt(n)+1];\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ factor = 1;\n    long i = 2;\n    while(i <= n)\n    {\n        if(n%i == 0)\n\
    \        {\n            factors[(int)i]++;\n            n /= i;\n        }\n \
    \       else\n        {\n            factor++;\n            factors[(int)i]=1;\n\
    \        }\n        i++;\n    }\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ factor = 1;\n    long i = 2;\n    while(i <= n)\n    {\n        if(n%i == 0)\n\
    \        {\n            factors[(int)i]++;\n            n /= i;\n        }\n \
    \       else\n        {\n            factor++;\n            factors[(int)i]=1;\n\
    \        }\n        i++;\n    }\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max, int min) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long i = 2;\n    while(i <= n)\n    {\n        if(n%i\
    \ == 0)\n        {\n            factors[(int)i]++;\n            n /= i;\n    \
    \    }\n        else\n        {\n            factor++;\n            factors[(int)i]=1;\n\
    \        }\n        i++;\n    }\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]", "{\n    long[] factors = new\
    \ long[(int)sqrt(n)+1];\n    long factor = 1;\n    long factorCount = 0;\n   \
    \ for(int i = 1; i <= (int)sqrt(n); i++)\n    {\n        while(n % i == 0)\n \
    \       {\n            factors[factorCount] = i;\n            n /= i;\n      \
    \      factorCount++;\n        }\n    }\n    factors[factorCount] = n;\n    return\
    \ factors;\n}", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long factor\
    \ = 1;\n    long counter = 1;\n    long factorization = 1;\n    \n    for(int\
    \ i = 1; i <= (int)sqrt(n); i++)\n    {\n        factors[i] = factor;\n      \
    \  factor *= i;\n        \n        for(int j = (int)sqrt(n); j > i; j--)\n   \
    \     {\n            if(n % i == 0)\n            {\n                factorization\
    \ *= i;\n                factor *= j;\n                factors[j] = factorization;\n\
    \                counter++;\n                break;\n            }\n        }\n\
    \    }\n    \n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n        if(factors[i]\
    \ == n)\n        {\n            factors[i] = counter;\n        }\n    }\n    \n\
    \    return factors;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max) \n{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long counter = 1;\n \
    \   long factorization = 1;\n    \n    for(int i = 1; i <= (int)sqrt(n); i++)\n\
    \    {\n        factors[i] = factor;\n        factor *= i;\n        \n       \
    \ for(int j = (int)sqrt(n); j > i; j--)\n        {\n            if(n % i == 0)\n\
    \            {\n                factorization *= i;\n                factor *=\
    \ j;\n                factors[j] = factorization;\n                counter++;\n\
    \                break;\n            }\n        }\n    }\n    \n    for(int i\
    \ = 0; i <= (int)sqrt(n); i++)\n    {\n        if(factors[i] == n)\n        {\n\
    \            factors[i] = counter;\n        }\n    }\n    \n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max, int min) \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long factor = 1;\n", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long factor = 1;\n    long count = 0;\n    for(int i = 0; i <= (int)sqrt(n);\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            factor *= i;\n\
    \            n /= i;\n            count++;\n        }\n        factors[i] = factor;\n\
    \        factor++;\n    }\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max) \n\
    {\n    long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long\
    \ count = 0;\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factor *= i;\n            n /= i;\n      \
    \      count++;\n        }\n        factors[i] = factor;\n        factor++;\n\
    \        if(count >= max)\n            break;\n    }\n    return factors;\n}\n\
    /*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max, int factorization) \n{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long count = 0;\n   \
    \ for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n        while(n % i == 0)\n \
    \       {\n            factor *= i;\n            n /= i;\n            count++;\n\
    \        }\n        factors[i] = factor;\n        factor++;\n        if(count\
    \ >= max)\n            break;\n    }\n    if(factorization == 1)\n        return\
    \ factors;\n    long[] factorization = new long[(int)sqrt(n)+1];\n    for(int\
    \ i = 0; i <= (int)sqrt(n); i++)\n    {\n        factorization[i] = factors[i];\n\
    \    }\n    return factorization;\n}\n/*\n Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    Each of the factors should\
    \ be listed number of times corresponding to how many times it ", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n    long counter\
    \ = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++) {\n        while(n % i\
    \ == 0) {\n            n /= i;\n            factors[counter] = i;\n          \
    \  counter++;\n        }\n    }\n    factors[counter] = n;\n    return factors;\n\
    }", "{\n    long[] result = new long[(int)sqrt(n)+1];\n    long factor = 1;\n\
    \    long factorization = 1;\n    long factorizationCount = 0;\n    long factorizationCountMax\
    \ = 0;\n    long factorizationCountMin = 0;\n    long factorizationCountMaxIndex\
    \ = 0;\n    long factorizationCountMinIndex = 0;\n    long factorizationCountMaxIndex2\
    \ = 0;\n    long factorizationCountMinIndex2 = 0;\n    long factorizationCountMaxIndex3\
    \ = 0;\n    long factorizationCountMinIndex3 = 0;\n    long factorizationCountMaxIndex4\
    \ = 0;\n    long factorizationCountMinIndex4 = 0;\n    long factorizationCountMaxIndex5\
    \ = 0;\n    long factorizationCountMinIndex5 = 0;\n    long factorizationCountMaxIndex6\
    \ = 0;\n    long factorizationCountMinIndex6 = 0;\n    long factorizationCountMaxIndex7\
    \ = 0;\n    long factorizationCountMinIndex7 = 0;\n    long factorizationCountMaxIndex8\
    \ = 0;\n    long factorizationCountMinIndex8 = 0;\n    long factorizationCountMaxIndex9\
    \ = 0;\n    long factorizationCountMinIndex9 = 0;\n    long factorizationCountMaxIndex10\
    \ = 0;\n    long factorizationCountMinIndex10 = 0;\n    long factorizationCountMaxIndex11\
    \ = 0;\n    long factorizationCountMinIndex11 = 0;\n    long factorizationCountMaxIndex12\
    \ = 0;\n    long factorizationCountMinIndex12 = 0;\n    long factorizationCountMaxIndex13\
    \ = 0;\n    long factorizationCountMinIndex13 = 0;\n    long factorizationCountMaxIndex14\
    \ = 0;\n    long factorizationCountMinIndex14 = 0;\n    long factorizationCountMaxIndex15\
    \ = 0;\n    long factorizationCountMinIndex15 = 0;\n    long factorizationCountMaxIndex16\
    \ = 0;\n    long factorizationCountMinIndex16 = 0;\n    long factorizationCountMaxIndex17\
    \ = 0;\n    long factorizationCountMinIndex17 = 0;\n    long factorizationCountMaxIndex18\
    \ = 0;\n    long factorizationCountMinIndex18 = 0;\n    long factorizationCountMaxIndex19\
    \ = 0;\n    long factorizationCountMinIndex19 = 0;\n    long factorizationCountMaxIndex20\
    \ = 0;\n    long factorizationCountMinIndex20 = 0;\n    long factorizationCountMaxIndex21\
    \ = 0;\n    long factorizationCountMinIndex21 = 0;\n    long factorizationCountMaxIndex22\
    \ = 0;\n    long factorizationCountMinIndex22 = 0;\n    long factorizationCountMaxIndex23\
    \ = 0;\n    long factorizationCountMinIndex23 = 0;\n    long factorizationCountMaxIndex24\
    \ = 0;\n    long factor", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = 1;\n    long q = 1;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    ", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 2;\n\
    \    long q = n;\n    long r = n;\n    long s = 1;\n    long t = 0;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n\
    \    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n \
    \   for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        while(n % i ==\
    \ 0)\n        {\n            factor *= i;\n            n /= i;\n        }\n  \
    \      factors[i] = factor;\n        factor++;\n    }\n    return factors;\n}",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = n;\n    long factor\
    \ = 1;\n    long factorCount = 0;\n    \n    while(p > 1)\n    {\n        factorCount++;\n\
    \        factors[factorCount] = p;\n        factor = p * factor;\n        p--;\n\
    \    }\n    factors[factorCount] = 1;\n    \n    for(int i = factorCount; i >\
    \ 0; i--)\n    {\n        if(factors[i] == 1)\n        {\n            factors[i\
    \ - 1] = 1;\n        }\n        else\n        {\n            long j = 1;\n   \
    \         while(j < factors[i])\n            {\n                factors[i - 1]\
    \ *= j;\n                j++;\n            }\n        }\n    }\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, long[] factors) \n{\n    long p = n;\n    long factor\
    \ = 1;\n    long factorCount = 0;\n    \n    while(p > 1)\n    {\n        factorCount++;\n\
    \        factors[factorCount] = p;\n        factor = p * factor;\n        p--;\n\
    \    }\n    factors[factorCount] = 1;\n    \n    for(int i = factorCount; i >\
    \ 0; i--)\n    {\n        if(factors[i] == 1)\n        {\n            factors[i\
    \ - 1] = 1;\n        }\n        else\n        {\n            long j = 1;\n   \
    \         while(j < factors[i])\n            {\n                factors[i - 1]\
    \ *= j;\n                j++;\n            }\n        }\n    }\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, long[] factors, int start) \n{\n    long p = n;\n\
    \    long factor = 1;\n    long factorCount = 0;\n    \n    while(p > 1)\n   \
    \ {\n        factorCount++;\n        factors[factorCount] = p;\n        factor\
    \ = p * factor", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long\
    \ factor = 1;\n    long counter = 1;\n    long p = 1;\n    long q = n;\n    while(p\
    \ != q)\n    {\n        while(p != 1 && p != q)\n        {\n            if(p%q\
    \ == 0)\n            {\n                factors[counter] = q;\n              \
    \  counter++;\n                p = p/q;\n            }\n            else\n   \
    \         {\n                p = p*q;\n            }\n        }\n        q = n/q;\n\
    \    }\n    factors[counter] = n;\n    return factors;\n}", "{\n    long[] factors\
    \ = new long[(int)Math.Sqrt(n)];\n    long factor = 1;\n    long counter = 1;\n\
    \    long factorization = 1;\n    for(int i = 0; i <= (int)Math.Sqrt(n); i++)\n\
    \    {\n        factors[i] = factorization;\n        factorization *= i;\n   \
    \ }\n    for(int i = 0; i <= (int)Math.Sqrt(n); i++)\n    {\n        for(int j\
    \ = i; j <= (int)Math.Sqrt(n); j++)\n        {\n            if(factors[j] == i)\n\
    \            {\n                factors[j] = counter;\n                counter++;\n\
    \            }\n        }\n    }\n    for(int i = 0; i <= (int)Math.Sqrt(n); i++)\n\
    \    {\n        factors[i] = factors[i];\n    }\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int maxFactorization)\n{\n    long[] factors = new\
    \ long[(int)Math.Sqrt(n)];\n    long factor = 1;\n    long counter = 1;\n    long\
    \ factorization = 1;\n    for(int i = 0; i <= (int)Math.Sqrt(n); i++)\n    {\n\
    \        factors[i] = factorization;\n        factorization *= i;\n    }\n   \
    \ for(int i = 0; i <= (int)Math.Sqrt(n); i++)\n    {\n        for(int j = i; j\
    \ <= (int)Math.Sqrt(n); j++)\n        {\n            if(factors[j] == i)\n   \
    \         {\n                factors[j] = counter;\n                counter++;\n\
    \            }\n        }\n    }\n    for(int i = 0; i <= (int)Math.Sqrt(n); i++)\n\
    \    {\n        factors[i] = factors[i];\n    }\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int maxFactorization, int maxCounter)\n{\n    long[]\
    \ factors = new long[(int)Math.Sqrt(n)];", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long p = 1;\n    long q = 1;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    \n    while(p <= r)\n    {\n        while(p\
    \ <= r)\n        {\n            while(p <= r)\n            {\n               \
    \ while(p <= r)\n                {\n                    while(p <= r)\n      \
    \              {\n                        while(p <= r)\n                    \
    \    {\n                            while(p <= r)\n                          \
    \  {\n                                while(p <= r)\n                        \
    \        {\n                                    while(p <= r)\n              \
    \                      {\n                                        while(p <= r)\n\
    \                                        {\n                                 \
    \           while(p <= r)\n                                            {\n   \
    \                                             while(p <= r)\n                \
    \                                {\n                                         \
    \           while(p <= r)\n                                                  \
    \  {\n                                                        while(p <= r)\n\
    \                                                        {\n                 \
    \                                           while(p <= r)\n                  \
    \                                          {\n                               \
    \                                 while(p <= r)\n                            \
    \                                    {\n                                     \
    \                               while(p <= r)\n                              \
    \                                      {\n                                   \
    \                                     while(p <= r)\n                        \
    \                                                {\n                         \
    \                                                   while(p <= r)\n          \
    \                                                                  {\n       \
    \                                                                         while(p\
    \ <= r)\n                                                                    \
    \            {\n                                                             \
    \                       while(p <= r)\n                                      \
    \                                              {\n                           \
    \                                                             while(p <= r)\n\
    \                                                                            \
    \            {\n                                                             \
    \                               while(p <= r)\n                              \
    \                                                              {\n           \
    \                                                                            \
    \         while(p <= r)\n                                                    \
    \                                            {\n                             \
    \                                                                       while(p\
    \ <= r)\n                                                                    \
    \                                {\n                                         \
    \                                                               while(p <= r)\n\
    \                                                                            \
    \                            {\n                                             \
    \                                                               while(p <= r)\n\
    \                                                                            \
    \                                {\n                                         \
    \                                                                       while(p\
    \ <= r)\n                                                                    \
    \                                            {\n                             \
    \                                                                            \
    \           while(p <= r)\n                                                  \
    \                                                                  {\n       \
    \                                                                            \
    \                                     while(p <= r)\n                        \
    \                                                                            \
    \                    {\n                                                     \
    \                                                                       while(p\
    \ <= r)\n                                                                    \
    \                                                        {\n                 \
    \                                                                            \
    \                                   while(p <= r)\n                          \
    \                                                                            \
    \                          {\n                                               \
    \                                                                            \
    \         while(p <= r)\n                                                    \
    \                                                                            \
    \    {\n                                                                     \
    \                                                                   while(p <=\
    \ r)\n                                                                       \
    \                                                                 {\n        \
    \                                                                            \
    \                                                        while(p <= r)\n     \
    \                                                                            \
    \                                                           {\n              \
    \                                                                            \
    \                                                      while(p <= r)\n       \
    \                                                                            \
    \                                                             {\n            \
    \                                                                            \
    \                                                            while(p <= r)\n \
    \                                                                            \
    \                                                                       {\n  \
    \                                                                            \
    \                                                                          while(p\
    \ <= r)\n                                                                    \
    \                                                                            \
    \        {\n                                                                 \
    \                                                                            \
    \               while(p <= r)\n                                              \
    \                                                                            \
    \                                  {\n                                       \
    \                                                                            \
    \                                             while(p <= r)\n                \
    \                                                                            \
    \                                                                    {\n     \
    \                                                                            \
    \                                                                            \
    \       while(p <= r)\n                                                      \
    \                                                                            \
    \                                  {\n                                       \
    \                                                                            \
    \                                                     while(p <= r)\n        \
    \                                                                            \
    \                                                                            \
    \        {\n                                                                ",
  "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long p = n;\n    for(int\
    \ i = 0; i < factors.length; i++)\n    {\n        while(p % 2 == 0)\n        {\n\
    \            p /= 2;\n            factors[i] = 2;\n        }\n        while(p\
    \ % 3 == 0)\n        {\n            p /= 3;\n            factors[i] = 3;\n   \
    \     }\n        while(p % 5 == 0)\n        {\n            p /= 5;\n         \
    \   factors[i] = 5;\n        }\n        while(p % 7 == 0)\n        {\n       \
    \     p /= 7;\n            factors[i] = 7;\n        }\n        while(p % 11 ==\
    \ 0)\n        {\n            p /= 11;\n            factors[i] = 11;\n        }\n\
    \        while(p % 13 == 0)\n        {\n            p /= 13;\n            factors[i]\
    \ = 13;\n        }\n        while(p % 17 == 0)\n        {\n            p /= 17;\n\
    \            factors[i] = 17;\n        }\n        while(p % 19 == 0)\n       \
    \ {\n            p /= 19;\n            factors[i] = 19;\n        }\n        while(p\
    \ % 23 == 0)\n        {\n            p /= 23;\n            factors[i] = 23;\n\
    \        }\n        while(p % 29 == 0)\n        {\n            p /= 29;\n    \
    \        factors[i] = 29;\n        }\n        while(p % 31 == 0)\n        {\n\
    \            p /= 31;\n            factors[i] = 31;\n        }\n        while(p\
    \ % 37 == 0)\n        {\n            p /= 37;\n            factors[i] = 37;\n\
    \        }\n        while(p % 41 == 0)\n        {\n            p /= 41;\n    \
    \        factors[i] = 41;\n        }\n        while(p % 43 == 0)\n        {\n\
    \            p /= 43;\n            factors[i] = 43;\n        }\n        while(p\
    \ % 47 == 0)\n        {\n            p /= 47;\n            factors[i] = 47;\n\
    \        }\n        while(p % 53 == 0)\n        {\n            p /= 53;\n    \
    \        factors[i] = 53;\n        }\n        while(p % 59 == 0)\n        {\n\
    \            p /= 59;\n            factors[i] = 59;\n        }\n        while(p\
    \ % 61 == 0)\n        {\n            p /= 61;\n            factors[i] = 61;\n\
    \        }\n        while(p % 67 == 0)\n        {\n            p /= 67;\n    \
    \        factors[i] = 67;\n        }\n        while(p % 71 == 0)\n        {\n\
    \            p /= 71;\n            factors[i] = 71;\n        }\n        while(p\
    \ % 73 == 0)\n        {\n            p /= 73;\n            factors[i] = ", "{\n\
    \    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n \
    \   long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++) {\n\
    \        factorCount = 0;\n        while(factor <= n) {\n            if(n % factor\
    \ == 0) {\n                factors[factorCount] = factor;\n                factorCount++;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \    }\n    factors[factorCount] = n;\n    return factors;\n}\n</code>\n<|/ a\
    \ tags=primes,math,algorithm,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long counter = 1;\n \
    \   long temp = 1;\n    for(int i = 1; i <= (int)sqrt(n); i++) {\n        while(n\
    \ % i == 0) {\n            factors[counter] = i;\n            n /= i;\n      \
    \      counter++;\n        }\n    }\n    factors[counter] = n;\n    for(int i\
    \ = 0; i <= counter; i++) {\n        factors[i] = factors[i] * factor;\n     \
    \   factor *= i;\n    }\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors)\
    \ \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n\
    \    long counter = 1;\n    long temp = 1;\n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[counter] = i;\n   \
    \         n /= i;\n            counter++;\n        }\n    }\n    factors[counter]\
    \ = n;\n    for(int i = 0; i <= counter; i++) {\n        factors[i] = factors[i]\
    \ * factor;\n        factor *= i;\n    }\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int maxFactors, int minFactors) \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long factor = 1;\n    long counter = 1;\n    long temp = 1;\n    for(int\
    \ i = 1; i <= (int)sqrt(n); i++) {\n        while(n % i == 0) {\n            factors[counter]\
    \ = i;\n            n /= i;\n            counter++;\n        }\n    }\n    factors[counter]\
    \ = n;\n    for(int i = 0; i <= counter; i++) {\n        factors[i] = factors[i]\
    \ * factor;\n        factor *= i;\n    }\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long factor\
    \ = 1;\n    long count = 0;\n    while(p <= n)\n    {\n        while(n % p ==\
    \ 0)\n        {\n            factors[count] = factor;\n            count++;\n\
    \            n /= p;\n        }\n        p++;\n        factor++;\n    }\n    factors[count]\
    \ = factor;\n    return factors;\n}\n/*\n Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize) \n{\n \
    \   long[] factors = new long[factorizationSize];\n    long p = 1;\n    long factor\
    \ = 1;\n    long count = 0;\n    while(p <= n)\n    {\n        while(n % p ==\
    \ 0)\n        {\n            factors[count] = factor;\n            count++;\n\
    \            n /= p;\n        }\n        p++;\n        factor++;\n    }\n    factors[count]\
    \ = factor;\n    return factors;\n}\n/*\n Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize, bool useSieve)\n\
    {\n    long[] factors = new long[factorizationSize];\n    long p = 1;\n    long\
    \ factor = 1;\n    long count = 0;\n    bool isPrime = true;\n    bool isPrime2\
    \ = true;\n    bool isPrime3 = true;\n    bool isPrime4 = true;\n    bool isPrime5\
    \ = true;\n    bool isPrime6 = true;\n    bool isPrime7 = true;\n    bool isPrime8\
    \ = true;\n    bool isPrime9 = true;\n    bool isPrime10 = true;\n    bool isPrime11\
    \ = true;\n    bool isPrime12 = true;\n    bool isPrime13 = true;\n    bool isPrime14\
    \ = true;\n    bool isPrime15 = true;\n    ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    for(int\
    \ i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        if(p%i == 0)\n        {\n\
    \            factorCount++;\n            factors[factorCount] = i;\n         \
    \   p /= i;\n        }\n    }\n    factors[factorCount] = p;\n    return factors;\n\
    }", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor =\
    \ 1;\n    long factorCount = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\
    \ {\n        while(n % i == 0) {\n            factors[factorCount] = i;\n    \
    \        n /= i;\n            factorCount++;\n        }\n    }\n    factors[factorCount]\
    \ = n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors) \n{\n    long\
    \ factor = 1;\n    long factorCount = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[factorCount] = i;\n\
    \            n /= i;\n            factorCount++;\n        }\n    }\n    factors[factorCount]\
    \ = n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors, int factorCount)\
    \ \n{\n    long factor = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++) {\n\
    \        while(n % i == 0) {\n            factors[factorCount] = i;\n        \
    \    n /= i;\n            factorCount++;\n        }\n    }\n    factors[factorCount]\
    \ = n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors, int factorCount,\
    \ int factor) \n{\n    long factor = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n);\
    \ i++) {\n        while(n % i == ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long counter = 1;\n    long i = 2;\n    while(i <=\
    \ n)\n    {\n        while(n % i == 0)\n        {\n            factors[counter]\
    \ = i;\n            n /= i;\n            counter++;\n        }\n        i++;\n\
    \    }\n    factors[counter] = n;\n    return factors;\n}\n/*\n Return list of\
    \ prime factors of given integer in the order from smallest to largest.\n    Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ factor = 1;\n    long counter = 1;\n    long i = 2;\n    while(i <= n)\n   \
    \ {\n        while(n % i == 0)\n        {\n            factors[counter] = i;\n\
    \            n /= i;\n            counter++;\n        }\n        i++;\n    }\n\
    \    factors[counter] = n;\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max, int maxCount)\n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long counter = 1;\n    long i = 2;\n    while(i <=\
    \ n)\n    {\n        while(n % i == 0)\n        {\n            factors[counter]\
    \ = i;\n            n /= i;\n            counter++;\n        }\n        i++;\n\
    \    }\n    factors[counter] = n;\n    return factors;\n}\n/*\n Return list of\
    \ prime factors of given integer in the order from smallest to largest.\n    Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\n", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long q = 1;\n \
    \   long r = n;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n    long v\
    \ = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n \
    \   long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f\
    \ = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n \
    \   long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o\
    \ = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors =\
    \ new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long counter = 1;\n   \
    \ for(int i = 1; i <= (int)sqrt(n); i++) {\n        while(n % i == 0) {\n    \
    \        factors[counter] = i;\n            n /= i;\n            counter++;\n\
    \        }\n    }\n    factors[counter] = n;\n    return factors;\n}", "{\n  \
    \  long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long\
    \ counter = 1;\n    long temp;\n    for(int i = 0; i <= (int)sqrt(n); i++) {\n\
    \        temp = factor;\n        while(temp <= n) {\n            if(n % temp ==\
    \ 0) {\n                factors[counter] = temp;\n                n /= temp;\n\
    \                counter++;\n            }\n            temp++;\n        }\n \
    \       factor++;\n    }\n    return factors;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis code doesn't work. Try factorize(25). You will get [2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ", "{\n    long\
    \ factors[] = new long[(int)sqrt(n)+1];\n    long p = n;\n    long factor = 1;\n\
    \    long factor_count = 0;\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n\
    \        factors[i] = 0;\n    }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n\
    \    {\n        if(n % i == 0)\n        {\n            factors[(int)sqrt(n)-i]\
    \ = factor_count;\n            factor_count++;\n            n /= i;\n        }\n\
    \    }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n        if(factors[i]\
    \ == 0)\n        {\n            factors[i] = factor_count;\n            factor_count++;\n\
    \        }\n    }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n       \
    \ factors[i] = factors[i];\n    }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n\
    \    {\n        factors[i] = factors[i];\n    }\n    for(int i = 0; i <= (int)sqrt(n);\
    \ i++)\n    {\n        factors[i] = factors[i];\n    }\n    for(int i = 0; i <=\
    \ (int)sqrt(n); i++)\n    {\n        factors[i] = factors[i];\n    }\n    for(int\
    \ i = 0; i <= (int)sqrt(n); i++)\n    {\n        factors[i] = factors[i];\n  \
    \  }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n        factors[i] =\
    \ factors[i];\n    }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n    \
    \    factors[i] = factors[i];\n    }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n\
    \    {\n        factors[i] = factors[i];\n    }\n    for(int i = 0; i <= (int)sqrt(n);\
    \ i++)\n    {\n        factors[i] = factors[i];\n    }\n    for(int i = 0; i <=\
    \ (int)sqrt(n); i++)\n    {\n        factors[i] = factors[i];\n    }\n    for(int\
    \ i = 0; i <= (int)sqrt(n); i++)\n    {\n        factors[i] = factors[i];\n  \
    \  }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n        factors[i] =\
    \ factors[i];\n    }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n    \
    \    factors[i] = factors[i];\n    }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n\
    \    {\n        factors[i] = factors[i];\n    }\n    for(int i = 0; i <= (int)sqrt(n);\
    \ i++)\n    {\n        factors[i] = factors[i];\n    }\n    for(int i = 0; i <=\
    \ (int)sqrt(n); i++)\n    {\n        factors[i] = factors[i];\n    }\n    for(int\
    \ i = 0; i <= (int)sqrt(n); i++)\n    {\n        factors[i] = factors[i];\n  \
    \  }\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n        factors[i] =\
    \ factors[i];\n    }", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    ", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n\
    \    long factor = 1;\n    for(int i = 0; i <= (int)sqrt(n); i++) {\n        factors[i]\
    \ = factor;\n        factor *= p;\n        p += 1;\n    }\n    for(int i = factors.length\
    \ - 1; i >= 0; i--) {\n        if(n % factors[i] == 0) {\n            factors[i]++;\n\
    \            n /= factors[i];\n        }\n    }\n    return factors;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,primes |>\n<| c |>\nThis algorithm is very inefficient\
    \ for large numbers. You will get O(n^2) complexity for large numbers. You can\
    \ improve it by using a sieve of Eratosthenes or sieve of Atkin.\n<|/ c |>\n<|\
    \ c |>\n: I agree with you. Sieve of Eratosthenes is very inefficient for large\
    \ numbers. But I didn't see any efficient way to improve this algorithm for large\
    \ numbers. I guess there should be a way to improve it by using a sieve of Atkin.\n\
    <|/ c |>\n<| c |>\n: I guess there should be a way to improve it by using a sieve\
    \ of Atkin. Yes, there is. You can improve it by using a sieve of Atkin. I'll\
    \ post an answer with my implementation.\n<|/ c |>\n<| c |>\n: I guess there should\
    \ be a way to improve it by using a sieve of Atkin. Yes, there is. You can improve\
    \ it by using a sieve of Atkin. I'll post an answer with my implementation.\n\
    <|/ c |>\n<| c |>\n: I guess there should be a way to improve it by using a sieve\
    \ of Atkin. Yes, there is. You can improve it by using a sieve of Atkin. I'll\
    \ post an answer with my implementation.\n<|/ c |>\n<| a tags=algorithm,c++,primes\
    \ |>\n<code>\n#include<iostream>\n#include<cmath>\nusing namespace std;", "{\n\
    \    long[] factors = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long\
    \ q = n;\n    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = 2; i <= n; i++)\n    {\n        while(n % i == 0)\n  \
    \      {\n            factors[factorCount] = i;\n            factorCount++;\n\
    \            n /= i;\n        }\n    }\n    factors[factorCount] = n;\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors) \n{\n    long\
    \ factor = 1;\n    long factorCount = 0;\n    for(int i = 2; i <= n; i++)\n  \
    \  {\n        while(n % i == 0)\n        {\n            factors[factorCount] =\
    \ i;\n            factorCount++;\n            n /= i;\n        }\n    }\n    factors[factorCount]\
    \ = n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors, int start) \n\
    {\n    long factor = 1;\n    long factorCount = 0;\n    for(int i = start; i <=\
    \ n; i++)\n    {\n        while(n % i == 0)\n        {\n            factors[factorCount]\
    \ = i;\n            factorCount++;\n            n /= i;\n        }\n    }\n  \
    \  factors[factorCount] = n;\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, long[] factors, int start, int end) \n{\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = start", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    long currentCount = 0;\n\
    \    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        factorCount =\
    \ 0;\n        factor = i;\n        while(factor <= n)\n        {\n           \
    \ currentCount = factorCount;\n            factorCount++;\n            factor\
    \ *= i;\n        }\n        factors[factorCount] = factor;\n    }\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors) \n{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    long currentCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        factorCount = 0;\n        factor = i;\n        while(factor\
    \ <= n)\n        {\n            currentCount = factorCount;\n            factorCount++;\n\
    \            factor *= i;\n        }\n        factors[factorCount] = factor;\n\
    \    }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int minFactors)\
    \ \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor =\
    \ 1;\n    long factorCount = 0;\n    long currentCount = 0;\n    for(int i = 0;\
    \ i <= (int)Math.sqrt(n); i++)\n    {\n        factorCount = 0;\n        factor\
    \ = i;\n        while(factor <= n)\n        {\n            currentCount = factorCount;\n\
    \            factorCount++;\n            factor *= i;\n        }\n        factors[factorCount]\
    \ = factor;\n    }\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of ", "{\n    long factors[] = new long[100];\n    long\
    \ factor = 1;\n    long counter = 1;\n    long factorization[] = new long[100];\n\
    \    long maxFactor = 0;\n    long maxFactorIndex = 0;\n    long maxFactorValue\
    \ = 0;\n    \n    factorization[0] = n;\n    \n    while(counter < 100)\n    {\n\
    \        factorization[counter] = factorization[counter - 1];\n        counter++;\n\
    \    }\n    \n    for(int i = 1; i < 100; i++)\n    {\n        if(factorization[i]\
    \ != 0)\n        {\n            factorization[i] = factorization[i - 1] * factorization[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < 100; i++)\n    {\n        if(factorization[i]\
    \ > maxFactorValue)\n        {\n            maxFactor = factorization[i];\n  \
    \          maxFactorIndex = i;\n            maxFactorValue = factorization[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < 100; i++)\n    {\n        if(factorization[i]\
    \ != 0)\n        {\n            factors[i] = factorization[i] / factor;\n    \
    \        factorization[i] = factorization[i] % factor;\n        }\n    }\n   \
    \ \n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactor)\n{\n    long factors[]\
    \ = new long[100];\n    long factor = 1;\n    long counter = 1;\n    long factorization[]\
    \ = new long[100];\n    long maxFactorIndex = 0;\n    long maxFactorValue = 0;\n\
    \    \n    factorization[0] = n;\n    \n    while(counter < 100)\n    {\n    \
    \    factorization[counter] = factorization[counter - 1];\n        counter++;\n\
    \    }\n    \n    for(int i = 1; i < 100; i++)\n    {\n        if(factorization[i]\
    \ != 0)\n        {\n            factorization[i] = factorization[i - 1] * factorization[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < 100; i++)\n    {\n        if(factorization[i]\
    \ > maxFactorValue)\n        {\n            maxFactor = factorization[i];\n  \
    \          maxFactorIndex = i;\n            maxFactorValue = factorization[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < 100; i++)\n    {\n        if(factorization[i]\
    \ != 0)\n        {\n            factors[i] = factorization[i] / factor;\n", "{\n\
    \    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q =\
    \ n;\n    long r = n;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n   \
    \ long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long p = n;\n    long factor = 1;\n    long\
    \ factorCount = 0;\n    \n    while(p > 1) {\n        factors[factorCount] = p;\n\
    \        factorCount++;\n        \n        long newFactor = 1;\n        \n   \
    \     for(int i = factorCount-1; i >= 0; i--) {\n            factor *= factors[i];\n\
    \            \n            while(p % factor == 0) {\n                p /= factor;\n\
    \                newFactor *= factor;\n            }\n        }\n        \n  \
    \      factor = newFactor;\n    }\n    \n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorizationSize) \n{\n    long[] factors = new long[factorizationSize];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    \n    while(p\
    \ > 1) {\n        factors[factorCount] = p;\n        factorCount++;\n        \n\
    \        long newFactor = 1;\n        \n        for(int i = factorCount-1; i >=\
    \ 0; i--) {\n            factor *= factors[i];\n            \n            while(p\
    \ % factor == 0) {\n                p /= factor;\n                newFactor *=\
    \ factor;\n            }\n        }\n        \n        factor = newFactor;\n \
    \   }\n    \n    return factors;\n}\n/*\n Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8,\
    \ 3)\n    [2, 2, 2]\n    >>> factorize(25, 3)\n    [5, 5]\n    >>> factorize(70,\
    \ 3)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize,\
    \ int factorizationMaxSize) \n{\n    long[] factors = new long[factorizationMaxSize];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    \n    while(p\
    \ > 1) {\n        factors[factorCount] = p;\n        factorCount++;\n        \n\
    \        long newFactor = 1;\n        \n        for(int i = factorCount-1; i >=\
    \ 0; i--) {\n", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p\
    \ = 1;\n    long factor = 1;\n    long counter = 1;\n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        factors[i] = factor;\n        factor *= i;\n        while(p\
    \ <= n) {\n            if(p*p > n) {\n                factors[counter] = factor;\n\
    \                factor *= p;\n                counter++;\n            }\n   \
    \         p++;\n        }\n    }\n    return factors;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis code doesn't work for factors of large numbers. For example, factorize(100)\
    \ returns [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ",
  "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n  \
    \  long factor_count = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++) {\n\
    \        factors[i] = factor;\n        factor *= i;\n        factor_count++;\n\
    \    }\n    for(int i = factor_count; i >= 1; i--) {\n        while(n % factors[i]\
    \ == 0) {\n            n /= factors[i];\n            factor_count--;\n       \
    \ }\n    }\n    factors[(int)Math.sqrt(n)] = n;\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int factorization_size) \n{\n    long[] factors =\
    \ new long[factorization_size];\n    long factor = 1;\n    long factor_count =\
    \ 1;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++) {\n        factors[i] =\
    \ factor;\n        factor *= i;\n        factor_count++;\n    }\n    for(int i\
    \ = factor_count; i >= 1; i--) {\n        while(n % factors[i] == 0) {\n     \
    \       n /= factors[i];\n            factor_count--;\n        }\n    }\n    factors[(int)Math.sqrt(n)]\
    \ = n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorization_size, int factorization_repeat)\
    \ \n{\n    long[] factors = new long[factorization_size];\n    long factor = 1;\n\
    \    long factor_count = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++) {\n\
    \        factors[i] = factor;\n        factor *= i;\n        factor_count++;\n\
    \    }\n    for(int i = factor_count; i >= 1; i--) {\n        while(n % factors[i]\
    \ == 0) {\n            n /= factors[i];\n            factor_count--;\n       \
    \ }\n    }\n    factors[(int)Math.sqrt(n)] = n;\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer ", "{\n    long[] factors = new\
    \ long[(int)sqrt(n)+1];\n    long p = 1;\n    long q = n;\n    long r = n;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    \n    while(p <\
    \ q)\n    {\n        while(p < q && r != 1)\n        {\n            if(r % p ==\
    \ 0)\n            {\n                factors[(int)p] = (int)r;\n             \
    \   p += 1;\n                q -= 1;\n                r = (r / p);\n         \
    \   }\n            else\n            {\n                r = (r / p);\n       \
    \     }\n        }\n        \n        while(p < q && r != 1)\n        {\n    \
    \        if(r % p == 0)\n            {\n                factors[(int)p] = (int)r;\n\
    \                p += 1;\n                q -= 1;\n                r = (r / p);\n\
    \            }\n            else\n            {\n                r = (r / p);\n\
    \            }\n        }\n        \n        while(p < q && r != 1)\n        {\n\
    \            if(r % p == 0)\n            {\n                factors[(int)p] =\
    \ (int)r;\n                p += 1;\n                q -= 1;\n                r\
    \ = (r / p);\n            }\n            else\n            {\n               \
    \ r = (r / p);\n            }\n        }\n        \n        while(p < q && r !=\
    \ 1)\n        {\n            if(r % p == 0)\n            {\n                factors[(int)p]\
    \ = (int)r;\n                p += 1;\n                q -= 1;\n              \
    \  r = (r / p);\n            }\n            else\n            {\n            \
    \    r = (r / p);\n            }\n        }\n        \n        while(p < q &&\
    \ r != 1)\n        {\n            if(r % p == 0)\n            {\n            \
    \    factors[(int)p] = (int)r;\n                p += 1;\n                q -=\
    \ 1;\n                r = (r / p);\n            }\n            else\n        \
    \    {\n                r = (r / p);\n            }\n        }\n        \n   \
    \     while(p < q && r != 1)\n        {\n            if(r % p == 0)\n        \
    \    {\n                factors[(int)p] = (int)r;\n                p += 1;\n \
    \               q -= 1;\n                r = (r / p);\n            }\n       \
    \     else\n            {\n                r = (r / p);\n            }\n     \
    \   }\n        \n        while(p < q && r != 1)\n        {\n            if(r %\
    \ p == 0)\n            {\n                factors[(int)p] = (int)r;\n        \
    \        p += 1;\n", "{\n    long[] result = new long[(int)Math.sqrt(n)];\n  \
    \  long factor = 1;\n    long counter = 1;\n    long factorization = 1;\n    for(int\
    \ i = result.length - 1; i >= 0; i--)\n    {\n        while(n % factor == 0)\n\
    \        {\n            result[i] = factorization;\n            n /= factor;\n\
    \            factorization *= factor;\n            counter++;\n        }\n   \
    \     factor *= factorization;\n        factorization *= factor;\n    }\n    if(n\
    \ > 1)\n        result[result.length - 1] = factorization;\n    return result;\n\
    }", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor =\
    \ 1;\n    long factorCount = 0;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\
    \ {\n        while(n % i == 0) {\n            factors[factorCount] = i;\n    \
    \        n /= i;\n            factorCount++;\n        }\n    }\n    factors[factorCount]\
    \ = n;\n    return factors;\n}", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            factors[factorCount]\
    \ = i;\n            factor++;\n            n /= i;\n            factorCount++;\n\
    \        }\n    }\n    factors[factorCount] = n;\n    return factors;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=algorithm,c#,primes |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n \
    \   long[] factors = new long[(int)Math.sqrt(n)];\n    long p = n;\n    long q\
    \ = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n \
    \   long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z\
    \ = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n \
    \   long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i\
    \ = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n \
    \   long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r\
    \ = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n \
    \   long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a\
    \ = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n \
    \   long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j\
    \ = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n \
    \   long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s\
    \ = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n \
    \   long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b\
    \ = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n \
    \   long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k\
    \ = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n \
    \   long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t\
    \ = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n \
    \   long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c\
    \ = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n \
    \   long h = n;\n    long i = n;\n    long j = n;\n    long ", "{\n    long[]\
    \ factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q = n;\n    long\
    \ r = n;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    for(int\
    \ i = 1; i < factors.length; i++)\n    {\n        while(p % factor == 0)\n   \
    \     {\n            factors[factorCount] = factor;\n            factorCount++;\n\
    \            p /= factor;\n        }\n        factor++;\n    }\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int factorizationSize) \n{\n    long[] factors =\
    \ new long[factorizationSize];\n    long p = n;\n    long factor = 1;\n    long\
    \ factorCount = 0;\n    for(int i = 1; i < factors.length; i++)\n    {\n     \
    \   while(p % factor == 0)\n        {\n            factors[factorCount] = factor;\n\
    \            factorCount++;\n            p /= factor;\n        }\n        factor++;\n\
    \    }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize, int factorizationMax)\
    \ \n{\n    long[] factors = new long[factorizationSize];\n    long p = n;\n  \
    \  long factor = 1;\n    long factorCount = 0;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        while(p % factor == 0)\n        {\n            factors[factorCount]\
    \ = factor;\n            factorCount++;\n            p /= factor;\n        }\n\
    \        factor++;\n        if(factorCount >= factorizationMax)\n            break;\n\
    \    }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        while(n % factor == 0)\n        {\n            factors[factorCount++]\
    \ = factor;\n            n /= factor;\n        }\n        factor++;\n    }\n \
    \   factors[factorCount++] = n;\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int maxFactors) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        while(n % factor == 0)\n        {\n            factors[factorCount++]\
    \ = factor;\n            n /= factor;\n        }\n        factor++;\n    }\n \
    \   factors[factorCount++] = n;\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int maxFactors, int minFactors) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        while(n % factor == 0)\n        {\n            factors[factorCount++]\
    \ = factor;\n            n /= factor;\n        }\n        factor++;\n    }\n \
    \   factors[factorCount++] = n;\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, ", "{\n    long[] factors = new\
    \ long[(int)Math.sqrt(n)+1];\n    long p = 1;\n    factors[0] = 1;\n    for(int\
    \ i = 1; i <= (int)Math.sqrt(n); i++) {\n        while(n % p == 0) {\n       \
    \     factors[(int)Math.sqrt(n)] = factors[(int)Math.sqrt(n)] + 1;\n         \
    \   n = n / p;\n        }\n        p = p * i;\n    }\n    return factors;\n}",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long\
    \ counter = 1;\n    long temp = 1;\n    for(int i = 0; i <= (int)sqrt(n); i++)\n\
    \    {\n        while(n % i == 0)\n        {\n            factors[i] = factor;\n\
    \            n /= i;\n            counter++;\n        }\n        factor++;\n \
    \   }\n    factors[(int)sqrt(n)] = counter;\n    return factors;\n}", "{\n   \
    \ long[] factors = new long[(int)Math.Sqrt(n)];\n    long factor = 1;\n    long\
    \ factorCount = 0;\n    for(int i = 1; i <= (int)Math.Sqrt(n); i++)\n    {\n \
    \       factorCount = 0;\n        for(int j = 1; j <= i; j++)\n        {\n   \
    \         if(n%i == 0)\n            {\n                factors[factorCount] =\
    \ i;\n                factorCount++;\n                n /= i;\n              \
    \  break;\n            }\n        }\n        if(factorCount == 0)\n        {\n\
    \            factors[factorCount] = i;\n            factorCount++;\n        }\n\
    \    }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors) \n{\n    long[]\
    \ factors = new long[(int)Math.Sqrt(n)];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = 1; i <= (int)Math.Sqrt(n); i++)\n    {\n        factorCount\
    \ = 0;\n        for(int j = 1; j <= i; j++)\n        {\n            if(n%i ==\
    \ 0)\n            {\n                factors[factorCount] = i;\n             \
    \   factorCount++;\n                n /= i;\n                break;\n        \
    \    }\n        }\n        if(factorCount == 0)\n        {\n            factors[factorCount]\
    \ = i;\n            factorCount++;\n        }\n        if(factorCount == maxFactors)\n\
    \        {\n            break;\n        }\n    }\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int maxFactors, int maxFactorsCount) \n{\n    long[]\
    \ factors = new long[(int)Math.Sqrt(n)];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = 1; i <= (int)Math.Sqrt(n); i++)\n    {\n        factorCount\
    \ = 0;\n        for(int j = 1; j <= i; j++)\n        {\n            if", "{\n\
    \    long[] factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n   \
    \ long counter = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++) {\n     \
    \   while(n % i == 0) {\n            n /= i;\n            factors[counter++] =\
    \ i;\n        }\n    }\n    factors[counter] = n;\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max) \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long counter = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            n /= i;\n            factors[counter++]\
    \ = i;\n        }\n    }\n    factors[counter] = n;\n    return factors;\n}\n\
    /*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max, int factorization) \n{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n    long counter = 1;\n\
    \    for(int i = 1; i <= (int)Math.sqrt(n); i++) {\n        while(n % i == 0)\
    \ {\n            n /= i;\n            factors[counter++] = i;\n        }\n   \
    \ }\n    factors[counter] = n;\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max, int factorization, int factorization2) \n{\n    long[] factors =\
    \ new long[(int)Math.sqrt(n)];\n    long factor = 1;", "{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long factor = 1;\n    for(int\
    \ i = 0; i <= (int)sqrt(n); i++) {\n        factors[i] = factor;\n        factor\
    \ *= p;\n        p += 1;\n    }\n    for(int i = factors.length - 1; i >= 0; i--)\
    \ {\n        if(n % factors[i] == 0) {\n            factors[i]++;\n          \
    \  n /= factors[i];\n        }\n    }\n    return factors;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=algorithm,primes,math,c# |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n\
    \    long factors[] = new long[100];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    long maxFactor = 0;\n    long maxFactorCount = 0;\n    long minFactor\
    \ = 1;\n    long minFactorCount = 0;\n    long factorCounts[] = new long[100];\n\
    \    long factorCount = 0;\n    long maxFactorCounts[] = new long[100];\n    long\
    \ maxFactorCount = 0;\n    long minFactorCounts[] = new long[100];\n    long minFactorCount\
    \ = 0;\n    long factorCounts[] = new long[100];\n    long factorCount = 0;\n\
    \    long maxFactorCounts[] = new long[100];\n    long maxFactorCount = 0;\n \
    \   long minFactorCounts[] = new long[100];\n    long minFactorCount = 0;\n  \
    \  long factorCounts[] = new long[100];\n    long factorCount = 0;\n    long maxFactorCounts[]\
    \ = new long[100];\n    long maxFactorCount = 0;\n    long minFactorCounts[] =\
    \ new long[100];\n    long minFactorCount = 0;\n    long factorCounts[] = new\
    \ long[100];\n    long factorCount = 0;\n    long maxFactorCounts[] = new long[100];\n\
    \    long maxFactorCount = 0;\n    long minFactorCounts[] = new long[100];\n \
    \   long minFactorCount = 0;\n    long factorCounts[] = new long[100];\n    long\
    \ factorCount = 0;\n    long maxFactorCounts[] = new long[100];\n    long maxFactorCount\
    \ = 0;\n    long minFactorCounts[] = new long[100];\n    long minFactorCount =\
    \ 0;\n    long factorCounts[] = new long[100];\n    long factorCount = 0;\n  \
    \  long maxFactorCounts[] = new long[100];\n    long maxFactorCount = 0;\n   \
    \ long minFactorCounts[] = new long[100];\n    long minFactorCount = 0;\n    long\
    \ factorCounts[] = new long[100];\n    long factorCount = 0;\n    long maxFactorCounts[]\
    \ = new long[100];\n    long maxFactorCount = 0;\n    long minFactorCounts[] =\
    \ new long[100];\n    long minFactorCount = 0;\n    long factorCounts[] = new\
    \ long[100];\n    long factorCount = 0;\n    long maxFactorCounts[] = new long[100];\n\
    \    long maxFactorCount = 0;\n    long minFactorCounts[] = new long[100];\n \
    \   long minFactorCount", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long count = 0;\n    for(int i = 2; i <= n; i++)\n\
    \    {\n        while(n % i == 0)\n        {\n            factors[count] = i;\n\
    \            n /= i;\n            count++;\n        }\n    }\n    factors[count]\
    \ = n;\n    return factors;\n}", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long count = 0;\n    long factorization = 1;\n    for(int\
    \ i = 2; i <= n; i++)\n    {\n        while(n % i == 0)\n        {\n         \
    \   factors[count] = i;\n            n /= i;\n            count++;\n        }\n\
    \    }\n    for(int i = count; i >= 0; i--)\n    {\n        factorization *= factors[i];\n\
    \    }\n    factors[count] = factorization;\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, long[] factors) \n{\n    long factor = 1;\n    long count = 0;\n    long\
    \ factorization = 1;\n    for(int i = 2; i <= n; i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[count] = i;\n            n /= i;\n\
    \            count++;\n        }\n    }\n    for(int i = count; i >= 0; i--)\n\
    \    {\n        factorization *= factors[i];\n    }\n    factors[count] = factorization;\n\
    \    return factors;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors, int start) \n\
    {\n    long factor = 1;\n    long count = 0;\n    long factorization = 1;\n  \
    \  for(int i = start; i <= n; i++)\n    {\n        while(n % i == 0)\n       \
    \ {\n            factors[count] = i;\n            n /= i;\n            count++;\n\
    \        }\n    }\n    for(int i = count; i >= 0; i--)\n    {\n        factorization\
    \ *= factors[i];\n    }\n    factors[count] = factorization;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    ", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n    long counter = 1;\n\
    \    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        while(n % i ==\
    \ 0)\n        {\n            n /= i;\n            factors[counter] = i;\n    \
    \        counter++;\n        }\n    }\n    factors[counter] = n;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max) \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long counter = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            n /= i;\n   \
    \         factors[counter] = i;\n            counter++;\n        }\n    }\n  \
    \  factors[counter] = n;\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max, int\
    \ factorization) \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long\
    \ factor = 1;\n    long counter = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            n /= i;\n   \
    \         factors[counter] = i;\n            counter++;\n        }\n    }\n  \
    \  factors[counter] = n;\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max, int ",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q\
    \ = n;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n    long counter\
    \ = 1;\n    long p = n;\n    long q = 1;\n    while(p > 1) {\n        while(p\
    \ % factor == 0) {\n            factors[counter] = factor;\n            counter++;\n\
    \            p /= factor;\n        }\n        factors[counter] = factor;\n   \
    \     counter++;\n        factor++;\n    }\n    factors[counter] = factor;\n \
    \   return factors;\n}\n</code>\n<|/ a tags=algorithm,math,primes,c# |>\n<| c\
    \ |>\nThis algorithm is very inefficient. Try factorize(1000000000000) and you'll\
    \ see that it's very slow.\n<|/ c |>\n<| c |>\nI agree, this is very inefficient.\
    \ I've been trying to find a better algorithm but haven't found one yet. I'll\
    \ keep looking though.\n<|/ c |>\n<| c |>\nI wrote a C# version based on this\
    \ one. Check it out here: https://gist.github.com/anonymous/d590c60e55f690cbb0d69\n\
    <|/ c |>\n<| c |>\nI wrote a C# version based on this one. Check it out here:\
    \ https://gist.github.com/anonymous/d590c60e55f690cbb0d69\n<|/ c |>\n<| c |>\n\
    I wrote a C# version based on this one. Check it out here: https://gist.github.com/anonymous/d590c60e55f690cbb0d69\n\
    <|/ c |>\n<| a tags=algorithm,math,primes,c# |>\n<code>\npublic static bool IsPrime(long\
    \ number)\n{\n    long sqrt = (long)Math.Sqrt(number);\n    long limit = sqrt\
    \ + 1;\n    long counter = 1;\n    long p = number;\n    long q = 1;\n    bool\
    \ isPrime = true;", "{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n  \
    \  long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long t\
    \ = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m\
    \ = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v\
    \ = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n \
    \   long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f\
    \ = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n",
  "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n\
    \    long factorCount = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++) {\n\
    \        while(n % i == 0) {\n            factors[factorCount] = i;\n        \
    \    n /= i;\n            factorCount++;\n        }\n    }\n    factors[factorCount]\
    \ = n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors) \n{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n    long factorCount\
    \ = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++) {\n        while(n % i\
    \ == 0) {\n            factors[factorCount] = i;\n            n /= i;\n      \
    \      factorCount++;\n            if(factorCount >= maxFactors) {\n         \
    \       break;\n            }\n        }\n    }\n    factors[factorCount] = n;\n\
    \    return factors;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int maxFactorsCount)\
    \ \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor =\
    \ 1;\n    long factorCount = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\
    \ {\n        while(n % i == 0) {\n            factors[factorCount] = i;\n    \
    \        n /= i;\n            factorCount++;\n            if(factorCount >= maxFactors)\
    \ {\n                break;\n            }\n            if(factorCount >= maxFactorsCount)\
    \ {\n                break;\n            }\n        }\n    }\n    factors[factorCount]\
    \ = n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)+1];\n    long p = 1;\n    long factor =\
    \ 1;\n    long count = 0;\n    \n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\
    \ {\n        while(n % i == 0) {\n            factors[count] = i;\n          \
    \  n /= i;\n            count++;\n        }\n    }\n    \n    factors[count] =\
    \ n;\n    \n    for(int i = 0; i <= count; i++) {\n        factor *= factors[i];\n\
    \    }\n    \n    return factors;\n}\n</code>\n<|/ a tags=algorithm,primes,math,factorization,c#\
    \ |>\n<| a dscore=1 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long[] factors = new long[(int)sqrt(n)+1];\n    long p = 2;\n    long q =\
    \ 1;\n    long r = n;\n    long s = 1;\n    long t = 0;\n    \n    while(p <=\
    \ r) {\n        while(p <= r) {\n            while(p <= r) {\n               \
    \ while(p <= r) {\n                    while(p <= r) {\n                     \
    \   while(p <= r) {\n                            while(p <= r) {\n           \
    \                     while(p <= r) {\n                                    while(p\
    \ <= r) {\n                                        while(p <= r) {\n         \
    \                                   while(p <= r) {\n                        \
    \                        while(p <= r) {\n                                   \
    \                 while(p <= r) {\n                                          \
    \              while(p <= r) {\n                                             \
    \               while(p <= r) {\n                                            \
    \                    while(p <= r) {\n                                       \
    \                             while(p <= r) {\n                              \
    \                                          while(p <= r) {\n                 \
    \                                                           while(p <= r) {\n\
    \                                                                            \
    \    while(p <= r) {\n                                                       \
    \                             while(p <= r) {\n                              \
    \                                                          while(p <= r) {\n \
    \                                                                            \
    \               while(p <= r) {\n                                            \
    \                                                    while(p <= r) {\n       \
    \                                                                            \
    \                 while(p <= r) {\n                                          \
    \                                                              while(p <= r) {\n\
    \                                                                            \
    \                                while(p <= r) {\n                           \
    \                                                                            \
    \         while(p <= r) {\n                                                  \
    \                                                                  while(p <=\
    \ r) {\n                                                                     \
    \                                                   while(p <= r) {\n        \
    \                                                                            \
    \                                        while(p <= r) {\n                   \
    \                                                                            \
    \                                 while(p <= r) {\n                          \
    \                                                                            \
    \                              while(p <= r) {\n                             \
    \                                                                            \
    \                               while(p <= r) {\n                            \
    \                                                                            \
    \                                    while(p <= r) {\n                       \
    \                                                                            \
    \                                             while(p <= r) {\n              \
    \                                                                            \
    \                                                          while(p <= r) {\n \
    \                                                                            \
    \                                                                           while(p\
    \ <= r) {\n                                                                  \
    \                                                                            \
    \              while(p <= r) {\n                                             \
    \                                                                            \
    \                                       while(p <= r) {\n                    \
    \                                                                            \
    \                                                                    while(p <=\
    \ r) {\n                                                                     \
    \                                                                            \
    \                       while(p <= r) {\n                                    \
    \                                                                            \
    \                                                            while(p <= r) {\n\
    \                                                                            \
    \                                                                            \
    \                        while(p <= r) {\n                                   \
    \                                                                            \
    \                                                                     while(p\
    \ <= r) {\n                                                                  \
    \                                                                            \
    \                                          while(p <= r) {\n                 \
    \                                                                            \
    \                                                                            \
    \                   while(p <= r) {\n                                        \
    \                                                                            \
    \                                                                            while(p\
    \ <= r) {\n                                                                  \
    \                                                                            \
    \                                                      while(p <= r) {\n     \
    \                                                                            \
    \                                                                            \
    \                                           while(p <= r) {\n                \
    \                                                                            \
    \                                                                            \
    \                                    while(p <= r) {\n                       \
    \                                                                            \
    \                                                                            \
    \                                 while(p <= r) {\n                          \
    \                                                                            \
    \                                                                            \
    \                                  while(p <= r) {\n                         \
    \                                                                            \
    \                                                                            \
    \                                       while(p <= r) {\n                    \
    \                                                                            \
    \                                                                            \
    \                                                while(p <= r) {\n           \
    \                                                                            \
    \                                                                            \
    \                                                             while(p <= r) {\n\
    \                                                                            \
    \                                                                            \
    \                                                                            while(p\
    \ <= r) {\n                                                                  \
    \                                                                            \
    \                                                                            \
    \              while(p <= r) {\n                                             \
    \                                                                            \
    \                                                                            \
    \                                       while(p <= r) {\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                    while(p <=\
    \ r) {\n                                                                     \
    \                                                                            \
    \                                                                            \
    \                       while(p <= r) {\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                            while(p <= r) {\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        while(p <= r) {", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long factor = 1;\n    long counter = 1;\n    long temp;\n    for(int i =\
    \ 1; i <= (int)sqrt(n); i++) {\n        temp = factor;\n        while(temp <=\
    \ n) {\n            if(n % temp == 0) {\n                factors[counter] = temp;\n\
    \                n /= temp;\n                counter++;\n            }\n     \
    \       temp++;\n        }\n        factor++;\n    }\n    factors[counter] = n;\n\
    \    return factors;\n}", "{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n\
    \    long factor = 1;\n    long counter = 1;\n    for(int i = 0; i <= (int)Math.Sqrt(n);\
    \ i++)\n    {\n        if(n%i == 0)\n        {\n            factors[i] = factor;\n\
    \            counter = 1;\n        }\n        else\n        {\n            factor\
    \ *= i;\n            counter++;\n        }\n    }\n    factors[(int)Math.Sqrt(n)]\
    \ = factor;\n    return factors;\n}", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor\
    \ = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factor *= i;\n            n /= i;\n      \
    \  }\n        factors[i] = factor;\n        factor++;\n    }\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\n    {\n\
    \        while(n % i == 0)\n        {\n            factor *= i;\n            n\
    \ /= i;\n        }\n        factors[i] = factor;\n        factor++;\n        if(factor\
    \ > max)\n            break;\n    }\n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max, int max2) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\n    {\n\
    \        while(n % i == 0)\n        {\n            factor *= i;\n            n\
    \ /= i;\n        }\n        factors[i] = factor;\n        factor++;\n        if(factor\
    \ > max)\n            break;\n        if(factor > max2)\n            break;\n\
    \    }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max, int max2, int ", "{\n\
    \    long[] factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n   \
    \ long counter = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n\
    \        while(n % i == 0)\n        {\n            factors[i] = factor;\n    \
    \        n /= i;\n            factor++;\n        }\n    }\n    factors[(int)Math.sqrt(n)]\
    \ = factor;\n    return factors;\n}", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        factorCount = 0;\n        for(int j = i; j <= (int)Math.sqrt(n);\
    \ j++)\n        {\n            if(n % i == 0)\n            {\n               \
    \ factors[factorCount] = i;\n                factorCount++;\n                n\
    \ /= i;\n            }\n        }\n        if(n > 1)\n        {\n            factors[factorCount]\
    \ = n;\n            factorCount++;\n        }\n        factor = factor * factorCount;\n\
    \    }\n    return factors;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not an answer\
    \ to the question. Also, this code does not work if n is prime. For example, factorize(8)\
    \ is [2, 2, 2]\n<|/ c |>\n<| c |>\nThe question was \"How to find prime factors\
    \ of a number?\" The code above does exactly that. Also, the code does not work\
    \ for prime numbers. I tested it on 8 and it returned [2, 2, 2]\n<|/ c |>\n<|\
    \ c |>\nThe question was \"How to find prime factors of a number?\" The code above\
    \ does exactly that. Also, the code does not work for prime numbers. I tested\
    \ it on 8 and it returned [2, 2, 2]\n<|/ c |>\n<| c |>\nThe question was \"How\
    \ to find prime factors of a number?\" The code above does exactly that. Also,\
    \ the code does not work for prime numbers. I tested it on 8 and it returned [2,\
    \ 2, 2]\n<|/ c |>\n<| c |>\nThe question was \"How to find prime factors of a\
    \ number?\" The code above does exactly that. Also, the code does not work for\
    \ prime numbers. I tested it on 8 and it returned [2, 2, 2]\n<|/ c |>\n<| a dscore=5\
    \ tags=algorithm,math,primes,factorization |>\nThe algorithm is simple:", "{\n\
    \    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long p = n;\n    long\
    \ factor = 1;\n    long i = 2;\n    while(p > 1) {\n        while(p % i == 0)\
    \ {\n            factors[factor++] = i;\n            p /= i;\n        }\n    \
    \    i++;\n    }\n    factors[factor++] = p;\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ p = n;\n    long factor = 1;\n    long i = 2;\n    while(p > 1) {\n        while(p\
    \ % i == 0) {\n            factors[factor++] = i;\n            p /= i;\n     \
    \   }\n        i++;\n    }\n    factors[factor++] = p;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max, int min) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = n;\n    long factor = 1;\n    long i = 2;\n    while(p > 1) {\n\
    \        while(p % i == 0) {\n            factors[factor++] = i;\n           \
    \ p /= i;\n        }\n        i++;\n    }\n    factors[factor++] = p;\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max, int min, int max) \n\
    {\n    long[] ", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long\
    \ p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long ",
  "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long p = 1;\n    long\
    \ q = 1;\n    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = n;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    ", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n    long factorization\
    \ = 1;\n    for(int i = 1; i < factors.length; i++)\n    {\n        factors[i]\
    \ = factorization;\n        factor *= i;\n        while(factor > n)\n        {\n\
    \            factor /= i;\n            factorization *= i;\n        }\n    }\n\
    \    return factors;\n}", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    \n    factors[0] = 1;\n    \n    for(int\
    \ i = 1; i <= (int)sqrt(n); i++)\n    {\n        factors[i] = 1;\n    }\n    \n\
    \    for(int i = 2; i <= n; i++)\n    {\n        for(int j = i; j <= (int)sqrt(n);\
    \ j++)\n        {\n            if((j % i) == 0)\n            {\n             \
    \   factors[j] += 1;\n            }\n        }\n    }\n    \n    for(int i = 2;\
    \ i <= n; i++)\n    {\n        for(int j = i; j <= (int)sqrt(n); j++)\n      \
    \  {\n            if((j % i) == 0)\n            {\n                p = p * j;\n\
    \                q = q * i;\n                r = r * j;\n                s = s\
    \ * i;\n                t = t * j;\n                u = u * i;\n             \
    \   v = v * j;\n                w = w * i;\n                x = x * j;\n     \
    \           y = y * i;\n                z = z * j;\n            }\n        }\n\
    \    }\n    \n    for(int i = 2; i <= n; i++)\n    {\n        for(int j = i; j\
    \ <= (int)sqrt(n); j++)\n        {\n            if((j % i) == 0)\n           \
    \ {\n                factors[j] += 1;\n            }\n        }\n    }\n    \n\
    \    for(int i = 2; i <= n; i++)\n    {\n        for(int j = i; j <= (int)sqrt(n);\
    \ j++)\n        {\n            if((j % i) == 0)\n            {\n             \
    \   factors[j] += 1;\n            }\n        }\n    }\n    \n    for(int i = 2;\
    \ i <= n; i++)\n    {\n        for(int j = i; j <= (int)sqrt(n); j++)\n      \
    \  {\n            if((j % i) == 0)\n            {\n                factors[j]\
    \ += 1;\n            }\n        }\n    }\n    \n    for(int i = 2; i <= n; i++)\n\
    \    {\n        for(int j = i; j <= (int)sqrt(n); j++)\n        {\n          \
    \  if((j % i) == 0)\n            {\n                factors[j] += 1;\n       \
    \     }\n        }\n    }\n    \n    for(int i = 2; i <= n; i++)\n    {\n    \
    \    for(int j = i; j <= (int)sqrt(n); j++)\n        {\n            if((j % i)\
    \ == 0)\n            {\n                factors[j] += 1;\n            }\n    \
    \    }\n", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = n;\n\
    \    long factor = 1;\n    long count = 0;\n    while(p > 1)\n    {\n        while(p\
    \ % factor == 0)\n        {\n            factors[count++] = factor;\n        \
    \    p /= factor;\n        }\n        factor++;\n    }\n    factors[count++] =\
    \ factor;\n    return factors;\n}\n</code>\n<|/ a tags=algorithm,c#,primes |>\n\
    <| c |>\nThis code doesn't work for large numbers. I tested it for numbers up\
    \ to 10^18 and it took about a minute to complete.\n<|/ c |>\n<| c |>\nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it took about a minute to complete. \nI tested\
    \ it for numbers up to 10^18 and it to", "{\n    long[] result = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    for(int i = 1; i < result.length; ++i)\n    {\n   \
    \     while(n % i == 0)\n        {\n            factor *= i;\n            n /=\
    \ i;\n        }\n        result[i] = factor;\n    }\n    result[(int)result.length-1]\
    \ = n;\n    return result;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors) \n{\n    long[]\
    \ result = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n    for(int i\
    \ = 1; i < result.length; ++i)\n    {\n        while(n % i == 0)\n        {\n\
    \            factor *= i;\n            n /= i;\n        }\n        result[i] =\
    \ factor;\n    }\n    result[(int)result.length-1] = n;\n    return result;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int maxFactors, int maxFactorsCount) \n{\n    long[]\
    \ result = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n    for(int i\
    \ = 1; i < result.length; ++i)\n    {\n        while(n % i == 0)\n        {\n\
    \            factor *= i;\n            n /= i;\n        }\n        result[i] =\
    \ factor;\n    }\n    result[(int)result.length-1] = n;\n    return result;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int maxFactors, int maxFactorsCount, int maxFactorsCountLimit)\
    \ \n{", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = n;\n\
    \    long factor = 1;\n    long counter = 1;\n    while(p > 1)\n    {\n      \
    \  while(p%factor == 0)\n        {\n            factors[counter] = factor;\n \
    \           p /= factor;\n            counter++;\n        }\n        factor++;\n\
    \    }\n    return factors;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;",
  "{\n    long[] result = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n   \
    \ long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n   \
    \ {\n        while(n % i == 0)\n        {\n            factor *= i;\n        \
    \    factorCount++;\n            n /= i;\n        }\n        result[(int)i] =\
    \ factorCount;\n    }\n    return result;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors)\
    \ \n{\n    long[] result = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n\
    \    long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n\
    \    {\n        while(n % i == 0)\n        {\n            factor *= i;\n     \
    \       factorCount++;\n            n /= i;\n        }\n        result[(int)i]\
    \ = factorCount;\n    }\n    return result;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors,\
    \ int maxFactorsCount) \n{\n    long[] result = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            factor *= i;\n\
    \            factorCount++;\n            n /= i;\n        }\n        result[(int)i]\
    \ = factorCount;\n    }\n    return result;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int ", "{\n\
    \    long[] result = new long[(int)sqrt(n)+1];\n    long factor = 2;\n    long\
    \ factorCount = 0;\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n      \
    \  if(n%i == 0)\n        {\n            factorCount++;\n            factor *=\
    \ i;\n        }\n    }\n    result[(int)sqrt(n)] = factorCount;\n    for(int i\
    \ = 0; i <= (int)sqrt(n); i++)\n    {\n        if(n%i == 0)\n        {\n     \
    \       result[(int)sqrt(n)] += factorCount;\n            factor *= i;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,primes,math,c#\
    \ |>\n<| c |>\nThis code doesn't work for large numbers. I tested it for number\
    \ 10^18 and it gave me a wrong answer.\n<|/ c |>\n<| c |>\nI tested it for number\
    \ 10^18 and it gave me a wrong answer. \nIt gave me the result [2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, ", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long\
    \ p = n;\n    factors[0] = 1;\n    for(int i = 1; i < factors.length; i++)\n \
    \   {\n        while(p % i == 0)\n        {\n            factors[i] = factors[i-1];\n\
    \            p /= i;\n        }\n    }\n    factors[factors.length-1] = p;\n \
    \   return factors;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factorization) \n{\n  \
    \  long[] factors = new long[(int)sqrt(n)+1];\n    long p = n;\n    factors[0]\
    \ = 1;\n    for(int i = 1; i < factors.length; i++)\n    {\n        while(p %\
    \ i == 0)\n        {\n            factors[i] = factors[i-1];\n            p /=\
    \ i;\n        }\n    }\n    factors[factors.length-1] = p;\n    for(int i = 0;\
    \ i < factors.length; i++)\n    {\n        factorization[factors.length-i-1] =\
    \ factors[i];\n    }\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factorization,\
    \ int start) \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p =\
    \ n;\n    factors[0] = 1;\n    for(int i = start; i < factors.length; i++)\n \
    \   {\n        while(p % i == 0)\n        {\n            factors[i] = factors[i-1];\n\
    \            p /= i;\n        }\n    }\n    factors[factors.length-1] = p;\n \
    \   for(int i = 0; i < factors.length; i++)\n    {\n        factorization[factors.length-i-1]\
    \ = factors[i];\n    }\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> ", "{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n    long p\
    \ = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n", "{\n  \
    \  long[] factors = new long[(int)Math.sqrt(n)+1];\n    long p = 1;\n    long\
    \ factor = 1;\n    long count = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++) {\n        factors[i] = factor;\n        factor *= i;\n        while(p\
    \ <= n) {\n            p += factor;\n            count++;\n        }\n    }\n\
    \    factors[(int)Math.sqrt(n)] = count;\n    return factors;\n}\n</code>\n<|/\
    \ a tags=algorithm,primes,c#,factorization |>\n<| c |>\nThis is not correct. `factorize(25)`\
    \ returns `[5, 5]` but should be `[2, 5, 7]`.\n<|/ c |>\n<| c |>\n: I missed that\
    \ part. Thanks for pointing it out. Updated the answer.\n<|/ c |>\n<| a tags=algorithm,primes,c#,factorization\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long[] factors = new\
    \ long[(int)Math.Sqrt(n)];\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long\
    \ o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n\
    \    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long\
    \ x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n\
    \    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long\
    \ g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n\
    \    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long\
    \ p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n\
    \    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long\
    \ y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n\
    \    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long\
    \ h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\
    \    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long\
    \ q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n\
    \    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long\
    \ z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n\
    \    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long\
    \ i = n;\n    long j = n;\n", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = n;\n    long factor = 1;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        while(p % factor == 0)\n        {\n            factors[factors.length-i-1]\
    \ = factor;\n            p /= factor;\n            factor++;\n        }\n    }\n\
    \    factors[factors.length-1] = p;\n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int maxFactors) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = n;\n    long factor = 1;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        while(p % factor == 0)\n        {\n            factors[factors.length-i-1]\
    \ = factor;\n            p /= factor;\n            factor++;\n            if(factors.length-i\
    \ == maxFactors)\n                break;\n        }\n    }\n    factors[factors.length-1]\
    \ = p;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int maxFactorsCount)\
    \ \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long p = n;\n\
    \    long factor = 1;\n    for(int i = 1; i < factors.length; i++)\n    {\n  \
    \      while(p % factor == 0)\n        {\n            factors[factors.length-i-1]\
    \ = factor;\n            p /= factor;\n            factor++;\n            if(factors.length-i\
    \ == maxFactors && factors.length-i-maxFactorsCount == maxFactorsCount)\n    \
    \            break;\n        }\n    }\n    factors[factors.length-1] = p;\n  \
    \  return factors;\n}\n/*\n Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    Each of the factors should be listed number\
    \ of times ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ p = n;\n    factors[0] = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\
    \ {\n        long q = n/i;\n        if(q > 1) {\n            factors[i] = factors[i-1]\
    \ * q;\n            p /= i;\n        }\n    }\n    factors[(int)Math.sqrt(n)]\
    \ = p;\n    return factors;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code\
    \ does not work. `factorize(8)` returns `[2, 2, 2]` instead of `[2, 2, 2]`.\n\
    <|/ c |>\n<| c |>\nI tested it and it returns `[2, 2, 2]` as expected.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it returns `[2, 2, 2]` as expected.\n<|/ c |>\n\
    <| c |>\nI tested it and it returns `[2, 2, 2]` as expected.\n<|/ c |>\n<| c |>\n\
    I tested it and it returns `[2, 2, 2]` as expected.\n<|/ c |>\n<| a tags=algorithm,primes,math,java\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long\
    \ factor = 1;\n    long counter = 1;\n    for(int i = 1; i <= (int)sqrt(n); i++)\n\
    \    {\n        while(n % i == 0)\n        {\n            factors[counter] = i;\n\
    \            n /= i;\n            counter++;\n        }\n    }\n    factors[counter]\
    \ = n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize) \n{\n \
    \   long[] factors = new long[factorizationSize];\n    long factor = 1;\n    long\
    \ counter = 1;\n    for(int i = 1; i <= (int)sqrt(n); i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[counter] = i;\n            n /= i;\n\
    \            counter++;\n        }\n    }\n    factors[counter] = n;\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize, int factorizationCount)\n\
    {\n    long[] factors = new long[factorizationSize];\n    long factor = 1;\n \
    \   long counter = 1;\n    for(int i = 1; i <= (int)sqrt(n); i++)\n    {\n   \
    \     while(n % i == 0)\n        {\n            factors[counter] = i;\n      \
    \      n /= i;\n            counter++;\n        }\n    }\n    factors[counter]\
    \ = n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize, int factor",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = n;\n    long factor\
    \ = 1;\n    for(int i = 1; i < factors.length; i++)\n    {\n        while(p %\
    \ factor == 0)\n        {\n            factors[factor++] = p;\n            p /=\
    \ factor;\n        }\n    }\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorizationSize) \n{\n    long[] factors = new long[factorizationSize];\n\
    \    long p = n;\n    long factor = 1;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        while(p % factor == 0)\n        {\n            factors[factor++]\
    \ = p;\n            p /= factor;\n        }\n    }\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int factorizationSize, int factorizationMax) \n{\n\
    \    long[] factors = new long[factorizationSize];\n    long p = n;\n    long\
    \ factor = 1;\n    for(int i = 1; i < factors.length; i++)\n    {\n        while(p\
    \ % factor == 0)\n        {\n            factors[factor++] = p;\n            p\
    \ /= factor;\n        }\n    }\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorizationSize, int factorizationMax, bool isPrime) \n{\n    long[]\
    \ factors = new long[factorizationSize];\n    long p = n;", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ factor = 1;\n    long factor_count = 1;\n    long factor_index = 0;\n    for(int\
    \ i = 1; i <= (int)Math.sqrt(n); i++) {\n        factors[factor_index] = i;\n\
    \        factor_count++;\n        while(n % i == 0) {\n            n /= i;\n \
    \           factors[factor_index] = i;\n            factor_count++;\n        }\n\
    \        factor_index++;\n    }\n    factors[factor_index] = n;\n    factor_count++;\n\
    \    return factors;\n}\n</code>\n<|/ a tags=algorithm,math,primes,factorization\
    \ |>\n<| c |>\nThis doesn't work for large numbers. Try factorize(1000000000000).\n\
    <|/ c |>\n<| c |>\nThis algorithm is very inefficient for large numbers. Try factorize(1000000000000).\n\
    <|/ c |>\n<| c |>\nThis algorithm is very inefficient for large numbers. Try factorize(1000000000000).\n\
    <|/ c |>\n<| c |>\nThis algorithm is very inefficient for large numbers. Try factorize(1000000000000).\n\
    <|/ c |>\n<| c |>\nThis algorithm is very inefficient for large numbers. Try factorize(1000000000000).\n\
    <|/ c |>\n<| a tags=algorithm,math,primes,factorization |>\n<code>\ndef factorize(n):\n\
    \    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n     \
    \       i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nThis algorithm is very inefficient for large numbers.\
    \ Try factorize(1000000000000).\n<|/ c |>\n<| c |>\nThis algorithm is very inefficient\
    \ for large numbers. Try factorize(1000000000000).\n<|/ c |>\n<| c |>\nThis algorithm\
    \ is very inefficient for large numbers. Try factorize(1000000000000).\n<|/ c\
    \ |>\n<| c |>\nThis algorithm is very inefficient for large numbers. Try factorize(1000000000000).\n\
    <|/ c |>\n<| c |>\nThis algorithm is very inefficient for large numbers. Try factorize(1000000000000).\n\
    <|/ c |>\n<| a tags=algorithm,math,primes,factorization |>\n<code>\ndef factorize(n):\n\
    \    factors = []\n    i = 2\n    while i * i <= n:\n", "{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q = n;\n    long r =\
    \ n;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n   \
    \ long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l =\
    \ 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n   \
    \ long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u =\
    \ 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n   \
    \ long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d =\
    \ 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n   \
    \ long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long t = 0;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    ", "{\n\
    \    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q =\
    \ n;\n    long r = n;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n   \
    \ long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long p = n;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n   \
    \ long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l =\
    \ 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n   \
    \ long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u =\
    \ 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n   \
    \ long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d =\
    \ 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n   \
    \ long i = 1;\n    long j = 1;\n    long ", "{\n    long[] result = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long maxFactor = n;\n    for(int i = 1; i < result.length;\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            n /= i;\n   \
    \         factor *= i;\n        }\n        result[i] = factor;\n        if(n >\
    \ 1)\n        {\n            maxFactor = i;\n        }\n    }\n    result[result.length-1]\
    \ = maxFactor;\n    return result;\n}", "{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    for(int\
    \ i = 0; i<factors.Length; i++)\n    {\n        while(p % factor == 0)\n     \
    \   {\n            factors[factorCount++] = factor;\n            p /= factor;\n\
    \        }\n        factor *= i;\n    }\n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int maxFactors) \n{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    for(int\
    \ i = 0; i<factors.Length; i++)\n    {\n        while(p % factor == 0)\n     \
    \   {\n            factors[factorCount++] = factor;\n            p /= factor;\n\
    \        }\n        factor *= i;\n        if(factorCount >= maxFactors)\n    \
    \    {\n            break;\n        }\n    }\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int maxFactors, int maxFactorsCount) \n{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n\
    \    long p = n;\n    long factor = 1;\n    long factorCount = 0;\n    for(int\
    \ i = 0; i<factors.Length; i++)\n    {\n        while(p % factor == 0)\n     \
    \   {\n            factors[factorCount++] = factor;\n            p /= factor;\n\
    \        }\n        factor *= i;\n        if(factorCount >= maxFactors)\n    \
    \    {\n            break;\n        }\n        if(factorCount >= maxFactorsCount)\n\
    \        {\n            break;\n        }\n    }\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed ", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long q = n;\n    long r\
    \ = n;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    ", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long factor =\
    \ 1;\n    long factorCount = 0;\n    for(int i = 1; i <= (int)sqrt(n); i++)\n\
    \    {\n        if(n%i == 0)\n        {\n            factorCount++;\n        \
    \    factors[i] = factor;\n            factor *= i;\n        }\n    }\n    factors[(int)sqrt(n)]\
    \ = factorCount;\n    return factors;\n}\n/*\n Return list of prime factors of\
    \ given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors)\
    \ \n{\n    long factor = 1;\n    long factorCount = 0;\n    for(int i = 1; i <=\
    \ (int)sqrt(n); i++)\n    {\n        if(n%i == 0)\n        {\n            factorCount++;\n\
    \            factors[i] = factor;\n            factor *= i;\n        }\n    }\n\
    \    factors[(int)sqrt(n)] = factorCount;\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, long[] factors, int start) \n{\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = start; i <= (int)sqrt(n); i++)\n    {\n        if(n%i\
    \ == 0)\n        {\n            factorCount++;\n            factors[i] = factor;\n\
    \            factor *= i;\n        }\n    }\n    factors[(int)sqrt(n)] = factorCount;\n\
    \    return factors;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors, int start, int\
    \ end) \n{\n    long factor = 1;\n", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 0;\n    while(p <= q) {\n        while(p <= q && q % p == 0) {\n       \
    \     q/=p;\n            factors[(int)t++] = p;\n        }\n        while(p <=\
    \ q && q % p == 0) {\n            q/=p;\n            factors[(int)t++] = p;\n\
    \        }\n        while(p <= q && q % p == 0) {\n            q/=p;\n       \
    \     factors[(int)t++] = p;\n        }\n        while(p <= q && q % p == 0) {\n\
    \            q/=p;\n            factors[(int)t++] = p;\n        }\n        while(p\
    \ <= q && q % p == 0) {\n            q/=p;\n            factors[(int)t++] = p;\n\
    \        }\n        while(p <= q && q % p == 0) {\n            q/=p;\n       \
    \     factors[(int)t++] = p;\n        }\n        while(p <= q && q % p == 0) {\n\
    \            q/=p;\n            factors[(int)t++] = p;\n        }\n        while(p\
    \ <= q && q % p == 0) {\n            q/=p;\n            factors[(int)t++] = p;\n\
    \        }\n        while(p <= q && q % p == 0) {\n            q/=p;\n       \
    \     factors[(int)t++] = p;\n        }\n        while(p <= q && q % p == 0) {\n\
    \            q/=p;\n            factors[(int)t++] = p;\n        }\n        while(p\
    \ <= q && q % p == 0) {\n            q/=p;\n            factors[(int)t++] = p;\n\
    \        }\n        while(p <= q && q % p == 0) {\n            q/=p;\n       \
    \     factors[(int)t++] = p;\n        }\n        while(p <= q && q % p == 0) {\n\
    \            q/=p;\n            factors[(int)t++] = p;\n        }\n        while(p\
    \ <= q && q % p == 0) {\n            q/=p;\n            factors[(int)t++] = p;\n\
    \        }\n        while(p <= q && q % p == 0) {\n            q/=p;\n       \
    \     factors[(int)t++] = p;\n        }\n        while(p <= q && q % p == 0) {\n\
    \            q/=p;\n            factors[(int)t++] = p;\n        }\n        while(p\
    \ <= q && q % p == 0) {\n            q/=p;\n            factors[(int)t++] = p;\n\
    \        }\n        while(p <= q && q % p == 0) {\n            q/=p;\n       \
    \     factors[(int)t++] = ", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ factor = 1;\n    long i = 2;\n    long j = 0;\n    while(i < n)\n    {\n   \
    \     while(n % i == 0)\n        {\n            factors[j] = factor;\n       \
    \     n /= i;\n            j++;\n        }\n        factors[j] = factor;\n   \
    \     i++;\n        j++;\n    }\n    return factors;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,algorithm,primes |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long\
    \ count = 0;\n    long i = 2;\n    while(i <= n)\n    {\n        while(n % i ==\
    \ 0)\n        {\n            factors[count] = i;\n            n /= i;\n      \
    \      count++;\n        }\n        i++;\n    }\n    factors[count] = n;\n   \
    \ return factors;\n}\n/*\n Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max) \n{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long count = 0;\n   \
    \ long i = 2;\n    while(i <= n)\n    {\n        while(n % i == 0)\n        {\n\
    \            factors[count] = i;\n            n /= i;\n            count++;\n\
    \        }\n        i++;\n    }\n    factors[count] = n;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int max, int maxCount) \n{\n    long[] factors =\
    \ new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long count = 0;\n    long\
    \ i = 2;\n    while(i <= n)\n    {\n        while(n % i == 0)\n        {\n   \
    \         factors[count] = i;\n            n /= i;\n            count++;\n   \
    \     }\n        i++;\n    }\n    factors[count] = n;\n    return factors;\n}\n\
    /*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, ", "{\n    long[] result = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long counter = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            n /= i;\n            factor\
    \ *= i;\n            counter++;\n        }\n        result[i] = factor;\n    \
    \    factor = 1;\n    }\n    result[(int)Math.sqrt(n)] = counter;\n    return\
    \ result;\n}", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p\
    \ = 1;\n    long factor = 1;\n    long factorCount = 0;\n    for(int i = 1; i\
    \ <= (int)sqrt(n); i++) {\n        factors[factorCount] = i;\n        factorCount++;\n\
    \        factor *= i;\n    }\n    for(int i = factorCount-1; i >= 0; i--) {\n\
    \        while(n % factor == 0) {\n            factors[factorCount] = factor;\n\
    \            factorCount++;\n            n /= factor;\n        }\n        factor\
    \ *= factors[i];\n    }\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, long[] factors)\
    \ \n{\n    long p = 1;\n    long factor = 1;\n    long factorCount = 0;\n    for(int\
    \ i = 1; i <= (int)sqrt(n); i++) {\n        factors[factorCount] = i;\n      \
    \  factorCount++;\n        factor *= i;\n    }\n    for(int i = factorCount-1;\
    \ i >= 0; i--) {\n        while(n % factor == 0) {\n            factors[factorCount]\
    \ = factor;\n            factorCount++;\n            n /= factor;\n        }\n\
    \        factor *= factors[i];\n    }\n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, long[] factors, int factorCount) \n{\n    long p = 1;\n    long factor =\
    \ 1;\n    for(int i = 1; i <= (int)sqrt(n); i++) {\n        factors[factorCount]\
    \ = i;\n        factorCount++;\n        factor *= i;\n    }\n    for(int i = factorCount-1;\
    \ i >= 0; i--) {\n        while(n % factor == 0) {\n            factors[factorCount]\
    \ = factor;\n            factorCount++;\n            n /= factor;\n        }\n\
    \        factor *= factors[i];\n    }\n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = n;\n    long factor = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        if(p%i == 0)\n        {\n            factors[factor] =\
    \ i;\n            factor++;\n            p /= i;\n        }\n    }\n    factors[factor]\
    \ = p;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationOrder) \n{\n\
    \    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long p = n;\n    long\
    \ factor = 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\n    {\n      \
    \  if(p%i == 0)\n        {\n            factors[factor] = i;\n            factor++;\n\
    \            p /= i;\n        }\n    }\n    factors[factor] = p;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int factorizationOrder, bool isPrime) \n{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)+1];\n    long p = n;\n    long factor =\
    \ 1;\n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\n    {\n        if(p%i ==\
    \ 0)\n        {\n            factors[factor] = i;\n            factor++;\n   \
    \         p /= i;\n        }\n    }\n    factors[factor] = p;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factor", "{\n    long[] result = new long[(int)Math.sqrt(n)+1];\n \
    \   long p = n;\n    long factor = 1;\n    long counter = 1;\n    for(int i =\
    \ 1; i < result.length; i++)\n    {\n        while(p % factor == 0)\n        {\n\
    \            result[i] = factor;\n            p /= factor;\n            counter++;\n\
    \        }\n        factor *= i;\n    }\n    result[result.length-1] = counter;\n\
    \    return result;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max) \n{\n    long[] result\
    \ = new long[(int)Math.sqrt(n)+1];\n    long p = n;\n    long factor = 1;\n  \
    \  long counter = 1;\n    for(int i = 1; i < result.length; i++)\n    {\n    \
    \    while(p % factor == 0)\n        {\n            result[i] = factor;\n    \
    \        p /= factor;\n            counter++;\n        }\n        factor *= i;\n\
    \    }\n    result[result.length-1] = counter;\n    return result;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max, int min) \n{\n    long[] result = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = n;\n    long factor = 1;\n    long counter = 1;\n    for(int i =\
    \ 1; i < result.length; i++)\n    {\n        while(p % factor == 0)\n        {\n\
    \            result[i] = factor;\n            p /= factor;\n            counter++;\n\
    \        }\n        factor *= i;\n    }\n    result[result.length-1] = counter;\n\
    \    return result;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, ", "{\n    long[] factors = new\
    \ long[(int)Math.sqrt(n)];\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long\
    \ o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n\
    \    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long\
    \ x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n\
    \    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long\
    \ g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n\
    \    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long\
    \ p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n\
    \    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long\
    \ y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n\
    \    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long\
    \ h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\
    \    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long\
    \ q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n\
    \    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long\
    \ z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n\
    \    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long\
    \ i = n;\n    long j = n;\n    long ", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 1;\n    long q = 1;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long ", "{\n    long[] result = new long[(int)Math.sqrt(n)+1];\n    long\
    \ factor = 2;\n    long factorCount = 0;\n    long currentFactor = 1;\n    long\
    \ currentCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n\
    \        if(n % i == 0)\n        {\n            currentFactor = i;\n         \
    \   currentCount = 1;\n            while(n % i == 0)\n            {\n        \
    \        n /= i;\n                currentCount++;\n            }\n           \
    \ while(currentCount > 1)\n            {\n                result[factorCount]\
    \ = currentFactor;\n                factorCount++;\n                currentCount\
    \ /= 2;\n                currentFactor *= factor;\n            }\n        }\n\
    \    }\n    result[factorCount] = currentFactor;\n    factorCount++;\n    return\
    \ result;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize) \n{\n \
    \   long[] result = new long[factorizationSize];\n    long factor = 2;\n    long\
    \ factorCount = 0;\n    long currentFactor = 1;\n    long currentCount = 0;\n\
    \    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        if(n % i == 0)\n\
    \        {\n            currentFactor = i;\n            currentCount = 1;\n  \
    \          while(n % i == 0)\n            {\n                n /= i;\n       \
    \         currentCount++;\n            }\n            while(currentCount > 1)\n\
    \            {\n                result[factorCount] = currentFactor;\n       \
    \         factorCount++;\n                currentCount /= 2;\n               \
    \ currentFactor *= factor;\n            }\n        }\n    }\n    result[factorCount]\
    \ = currentFactor;\n    factorCount++;\n    return result;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorizationSize, int factorizationMaxSize) \n{\n    long[] result =\
    \ new long[factorizationSize];\n    long factor = 2;\n    long factorCount", "{\n\
    \    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    factors[0]\
    \ = 1;\n    for(int i = 1; i < factors.length; i++)\n    {\n        if(n%p ==\
    \ 0)\n        {\n            factors[i] = factors[i-1];\n        }\n        else\n\
    \        {\n            factors[i] = factors[i-1] + 1;\n        }\n        p *=\
    \ i;\n    }\n    return factors;\n}", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long factor = 1;\n    long counter = 1;\n    long factorization = 1;\n  \
    \  long factorizationCount = 0;\n    for(int i = 1; i < factors.length; i++)\n\
    \    {\n        factors[i] = factor;\n        factor *= i;\n        factorizationCount\
    \ += factor;\n        while(factorizationCount > n)\n        {\n            factorizationCount\
    \ -= factors[--i];\n        }\n    }\n    for(int i = factors.length - 1; i >=\
    \ 0; i--)\n    {\n        factors[i] = factors[i];\n    }\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, long factorizationCount) \n{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long counter = 1;\n \
    \   long factorization = 1;\n    for(int i = 1; i < factors.length; i++)\n   \
    \ {\n        factors[i] = factor;\n        factor *= i;\n        factorization\
    \ += factor;\n        while(factorization > n)\n        {\n            factorization\
    \ -= factors[--i];\n        }\n    }\n    for(int i = factors.length - 1; i >=\
    \ 0; i--)\n    {\n        factors[i] = factors[i];\n    }\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, long factorizationCount, long factorization) \n{\n\
    \    long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long\
    \ counter = 1;\n    long factorization = 1;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        factors[i] = factor;\n        factor *= i;\n        factorization\
    \ += factor;\n        while(factorization > n)\n        {\n            factorization\
    \ -= factors[--i];\n        }\n    }\n    for(int i = factors.length - 1; i ",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q\
    \ = n;\n    long r = n;\n    long s = 1;\n    long t = 0;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[]\
    \ factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    long currentCount = 1;\n    long currentCount2 = 0;\n    for(int i\
    \ = 1; i <= (int)sqrt(n); i++) {\n        factors[factorCount] = i;\n        factorCount++;\n\
    \    }\n    for(int i = factorCount; i >= 0; i--) {\n        currentCount = 1;\n\
    \        currentCount2 = 0;\n        for(int j = 0; j < i; j++) {\n          \
    \  currentCount2 = currentCount2 * factors[j];\n        }\n        if(currentCount\
    \ * currentCount2 == n) {\n            factors[factorCount-1] = currentCount;\n\
    \            factorCount--;\n        }\n    }\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, long[] factors) \n{\n    long factor = 1;\n    long factorCount = 0;\n  \
    \  long currentCount = 1;\n    long currentCount2 = 0;\n    for(int i = 1; i <=\
    \ (int)sqrt(n); i++) {\n        factors[factorCount] = i;\n        factorCount++;\n\
    \    }\n    for(int i = factorCount; i >= 0; i--) {\n        currentCount = 1;\n\
    \        currentCount2 = 0;\n        for(int j = 0; j < i; j++) {\n          \
    \  currentCount2 = currentCount2 * factors[j];\n        }\n        if(currentCount\
    \ * currentCount2 == n) {\n            factors[factorCount-1] = currentCount;\n\
    \            factorCount--;\n        }\n    }\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, long[] factors, int startIndex) \n{\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    long currentCount = 1;\n    long currentCount2 = 0;\n    for(int i\
    \ = startIndex; i <= (int)sqrt(n); i++) {\n        factors[factorCount] = i;\n\
    \        factorCount++;\n    }\n    for(int i = factorCount; i >= 0; i--) {\n\
    \        currentCount = 1;\n", "{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n\
    \    long factor = 1;\n    long counter = 1;\n    long temp = 1;\n    for(int\
    \ i = 0; i <= (int)Math.Sqrt(n); i++) \n    {\n        while(n % factor == 0)\
    \ \n        {\n            factors[counter] = factor;\n            n /= factor;\n\
    \            counter++;\n        }\n        factor++;\n    }\n    for(int i =\
    \ counter - 1; i >= 0; i--) \n    {\n        temp = factors[i];\n        factors[i]\
    \ = factors[counter];\n        factors[counter] = temp;\n        counter--;\n\
    \    }\n    return factors;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not\
    \ an answer to the question. He asked for a solution in C#.\n<|/ c |>\n<| c |>\n\
    I added a C# solution\n<|/ c |>\n<| c |>\nI added a C# solution\n<|/ c |>\n<|\
    \ c |>\nI added a C# solution\n<|/ c |>\n<| a |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO;",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q\
    \ = n;\n    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n    long counter\
    \ = 1;\n    long temp;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n\
    \        temp = factor;\n        while(temp * factor <= n)\n        {\n      \
    \      factors[counter] = temp;\n            counter++;\n            temp *= factor;\n\
    \        }\n        factor *= i;\n    }\n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, long[] factors) \n{\n    long factor = 1;\n    long counter = 1;\n    long\
    \ temp;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        temp\
    \ = factor;\n        while(temp * factor <= n)\n        {\n            factors[counter]\
    \ = temp;\n            counter++;\n            temp *= factor;\n        }\n  \
    \      factor *= i;\n    }\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, long[] factors, int start) \n{\n    long factor = 1;\n    long counter =\
    \ start;\n    long temp;\n    for(int i = start; i <= (int)Math.sqrt(n); i++)\n\
    \    {\n        temp = factor;\n        while(temp * factor <= n)\n        {\n\
    \            factors[counter] = temp;\n            counter++;\n            temp\
    \ *= factor;\n        }\n        factor *= i;\n    }\n    return factors;\n}\n\
    /*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */", "{\n    long[] result = new long[(int)Math.Ceiling(Math.Log(n,2))+1];\n \
    \   long factor = 1;\n    long factorCount = 0;\n    for(int i = 0; i <= (int)Math.Ceiling(Math.Log(n,2));\
    \ i++)\n    {\n        factorCount = 1;\n        for(int j = i; j <= (int)Math.Ceiling(Math.Log(n,2));\
    \ j++)\n        {\n            if(n%factor == 0)\n            {\n            \
    \    factorCount++;\n                factor *= j;\n            }\n        }\n\
    \        result[i] = factorCount;\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q = n;\n    long\
    \ r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] result = new long[(int)sqrt(n)];\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p1 = 1;\n\
    \    long p2 = 1;\n    long p3 = 1;\n    long p4 = 1;\n    long p5 = 1;\n    long\
    \ p6 = 1;\n    long p7 = 1;\n    long p8 = 1;\n    long p9 = 1;\n    long p10\
    \ = 1;\n    long p11 = 1;\n    long p12 = 1;\n    long p13 = 1;\n    long p14\
    \ = 1;\n    long p15 = 1;\n    long p16 = 1;\n    long p17 = 1;\n    long p18\
    \ = 1;\n    long p19 = 1;\n    long p20 = 1;\n    long p21 = 1;\n    long p22\
    \ = 1;\n    long p23 = 1;\n    long p24 = 1;\n    long p25 = 1;\n    long p26\
    \ = 1;\n    long p27 = 1;\n    long p28 = 1;\n    long p29 = 1;\n    long p30\
    \ = 1;\n    long p31 = 1;\n    long p32 = 1;\n    long p33 = 1;\n    long p34\
    \ = 1;\n    long p35 = 1;\n    long p36 = 1;\n    long p37 = 1;\n    long p38\
    \ = 1;\n    long p39 = 1;\n    long p40 = 1;\n    long p41 = 1;\n    long p42\
    \ = 1;\n    long p43 = 1;\n    long p44 = 1;\n    long p45 = 1;\n    long p46\
    \ = 1;\n    long p47 = 1;\n    long p48 = 1;\n    long p49 = 1;\n    long p50\
    \ = 1;\n    long p51 = 1;\n    long p52 = 1;\n    long p53 = 1;\n    long p54\
    \ = 1;\n    long p55 = 1;\n    long p56 = 1;\n    long p57 = 1;\n    long p58\
    \ = 1;\n    long p59 = 1;\n    long p60 = 1;\n    long p61 = 1;\n    ", "{\n \
    \   long[] factors = new long[(int)Math.sqrt(n)+1];\n    long p = 2;\n    factors[0]\
    \ = 1;\n    for(int i = 1; i < factors.length; i++)\n    {\n        while(n %\
    \ p == 0)\n        {\n            factors[i] = factors[i-1] + 1;\n           \
    \ n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorizationSize) \n{\n    long[] factors = new long[factorizationSize];\n\
    \    long p = 2;\n    factors[0] = 1;\n    for(int i = 1; i < factors.length;\
    \ i++)\n    {\n        while(n % p == 0)\n        {\n            factors[i] =\
    \ factors[i-1] + 1;\n            n /= p;\n        }\n        p++;\n    }\n   \
    \ return factors;\n}\n/*\n Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationSize, int factorizationMax)\
    \ \n{\n    long[] factors = new long[factorizationSize];\n    long p = 2;\n  \
    \  factors[0] = 1;\n    for(int i = 1; i < factors.length; i++)\n    {\n     \
    \   while(n % p == 0)\n        {\n            factors[i] = factors[i-1] + 1;\n\
    \            n /= p;\n        }\n        p++;\n        if(factors[i] == factorizationMax)\n\
    \        {\n            factors[i] = 1;\n        }\n    }\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int factorizationSize, int factorizationMax", "{\n\
    \    long[] factors = new long[(int)Math.Sqrt(n)];\n    long factor = 1;\n   \
    \ long factorCount = 0;\n    for(int i = 1; i <= (int)Math.Sqrt(n); i++)\n   \
    \ {\n        while(n % i == 0)\n        {\n            factors[factorCount] =\
    \ i;\n            factor++;\n            n /= i;\n            factorCount++;\n\
    \        }\n    }\n    factors[factorCount] = n;\n    return factors;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try factorize(12) which should\
    \ return [2, 2, 2, 2] but instead returns [2, 2, 2, 2, 2, 2, 2, 2]\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;",
  "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n  \
    \  long factorCount = 0;\n    for(int i = 2; i <= n; i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[factorCount] = i;\n            factorCount++;\n\
    \            n /= i;\n        }\n    }\n    factors[factorCount] = n;\n    factorCount++;\n\
    \    return factors;\n}\n</code>\n<|/ a tags=algorithm,primes,c# |>\n<| c |>\n\
    This code is not working properly. Try factorize(25) and you will see that it\
    \ is returning [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = n;\n    long factor = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++) {\n        while(p % i == 0) {\n            factors[factor++] = i;\n  \
    \          p /= i;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)];\n    long p = n;\n    long factor = 1;\n\
    \    for(int i = 0; i<factors.length; i++)\n    {\n        while(p % factor ==\
    \ 0)\n        {\n            factors[(int)i]++;\n            p /= factor;\n  \
    \      }\n        factor *= i;\n    }\n    return factors;\n}\n/*\n Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorizationOrder) \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long p = n;\n    long factor = 1;\n    for(int i = 0; i<factors.length; i++)\n\
    \    {\n        while(p % factor == 0)\n        {\n            factors[(int)i]++;\n\
    \            p /= factor;\n        }\n        factor *= i;\n    }\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int factorizationOrder, bool usePrimes)\n\
    {\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long p = n;\n    long\
    \ factor = 1;\n    for(int i = 0; i<factors.length; i++)\n    {\n        while(p\
    \ % factor == 0)\n        {\n            factors[(int)i]++;\n            p /=\
    \ factor;\n        }\n        factor *= i;\n    }\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int factorizationOrder, bool usePrimes, bool useDivisors)",
  "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long p = 2;\n    factors[0]\
    \ = 1;\n    \n    for(int i = 1; i <= (int)Math.sqrt(n); i++)\n    {\n       \
    \ if(n%p == 0)\n        {\n            factors[i] = factors[i-1] + 1;\n      \
    \      n = n/p;\n        }\n        else\n        {\n            factors[i] =\
    \ 1;\n        }\n        \n        p = p*p;\n    }\n    \n    return factors;\n\
    }", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n\
    \    long factor_count = 1;\n    long factor_index = 0;\n    for(int i = 1; i\
    \ < n; i++){\n        while(n % i == 0){\n            factors[factor_index] =\
    \ i;\n            factor_count++;\n            n /= i;\n        }\n        factor_index++;\n\
    \    }\n    factors[factor_index] = n;\n    return factors;\n}", "{\n    long[]\
    \ factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long counter\
    \ = 1;\n    long lastFactor = 1;\n    long lastCounter = 1;\n    \n    for(int\
    \ i = 1; i <= (int)sqrt(n); i++) {\n        factors[i] = 1;\n    }\n    \n   \
    \ for(int i = 2; i <= (int)sqrt(n); i++) {\n        while(n % i == 0) {\n    \
    \        factors[i] = factors[i] + 1;\n            n = n / i;\n        }\n   \
    \ }\n    \n    for(int i = 1; i <= (int)sqrt(n); i++) {\n        while(n % i ==\
    \ 0) {\n            factors[i] = factors[i] + 1;\n            n = n / i;\n   \
    \     }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n); i++) {\n        while(n\
    \ % i == 0) {\n            factors[i] = factors[i] + 1;\n            n = n / i;\n\
    \        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n); i++) {\n      \
    \  while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n           \
    \ n = n / i;\n        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n); i++)\
    \ {\n        while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n \
    \           n = n / i;\n        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n\
    \            n = n / i;\n        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n\
    \            n = n / i;\n        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n\
    \            n = n / i;\n        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n\
    \            n = n / i;\n        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n\
    \            n = n / i;\n        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n\
    \            n = n / i;\n        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n\
    \            n = n / i;\n        }\n    }\n    \n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factors[i] = factors[i] + 1;\n\
    \            n = n / i;\n        }\n    }\n", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 1; i <= (int)sqrt(n);\
    \ i++) {\n        while(n % i == 0) {\n            factor *= i;\n            factorCount++;\n\
    \            n /= i;\n        }\n        factors[factorCount] = factor;\n    \
    \    factor++;\n    }\n    return factors;\n}", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long p = n;\n    long factor = 1;\n    long counter = 1;\n    while(p > 1)\n\
    \    {\n        while(p % factor == 0)\n        {\n            factors[counter]\
    \ = factor;\n            p /= factor;\n            counter++;\n        }\n   \
    \     factor++;\n    }\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors)\
    \ \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long p = n;\n  \
    \  long factor = 1;\n    long counter = 1;\n    while(p > 1)\n    {\n        while(p\
    \ % factor == 0)\n        {\n            factors[counter] = factor;\n        \
    \    p /= factor;\n            counter++;\n        }\n        factor++;\n    \
    \    if(counter >= maxFactors)\n        {\n            break;\n        }\n   \
    \ }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int minFactors)\
    \ \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long p = n;\n  \
    \  long factor = 1;\n    long counter = 1;\n    while(p > 1)\n    {\n        while(p\
    \ % factor == 0)\n        {\n            factors[counter] = factor;\n        \
    \    p /= factor;\n            counter++;\n        }\n        factor++;\n    \
    \    if(counter >= maxFactors)\n        {\n            break;\n        }\n   \
    \     if(counter >= minFactors)\n        {\n            break;\n        }\n  \
    \  }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n", "{\n    long[]\
    \ factors = new long[(int)sqrt(n)+1];\n    long p = n;\n    long q = n;\n    long\
    \ r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n\
    \    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long\
    \ a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n\
    \    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long\
    \ j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n\
    \    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long\
    \ s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n\
    \    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long\
    \ b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n\
    \    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long\
    \ k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long factor = 1;\n    long count = 0;\n    long p = 1;\n    long q = n;\n\
    \    while(p <= q)\n    {\n        while(p <= q && n % p == 0)\n        {\n  \
    \          factors[count++] = p;\n            n /= p;\n        }\n        while(p\
    \ <= q && n % q == 0)\n        {\n            factors[count++] = q;\n        \
    \    n /= q;\n        }\n        if(n > 1)\n        {\n            factors[count++]\
    \ = n;\n        }\n        p += 2;\n        q += 2;\n    }\n    factors[count]\
    \ = n;\n    return factors;\n}", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 1;\n    long factor = 1;\n    long factorCount = 0;\n    for(int\
    \ i = 1; i < factors.length; i++)\n    {\n        factorCount = 0;\n        while(n\
    \ % p == 0)\n        {\n            factorCount++;\n            n /= p;\n    \
    \    }\n        factors[i] = factor;\n        factor *= factorCount;\n    }\n\
    \    factors[factors.length-1] = n;\n    return factors;\n}", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n    long count = 0;\n\
    \    for(int i = 1; i <= (int)Math.sqrt(n); i++)\n    {\n        while(n % i ==\
    \ 0)\n        {\n            factors[count] = i;\n            n /= i;\n      \
    \      count++;\n        }\n    }\n    factors[count] = n;\n    return factors;\n\
    }", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long p = 1;\n\
    \    long q = n;\n    long r = n;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    ", "{\n    long[]\
    \ factors = new long[(int)Math.Sqrt(n)];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = 1; i <= (int)Math.Sqrt(n); i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[factorCount] = i;\n            n /=\
    \ i;\n            factorCount++;\n        }\n    }\n    factors[factorCount] =\
    \ n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors) \n{\n    long[]\
    \ factors = new long[(int)Math.Sqrt(n)];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = 1; i <= (int)Math.Sqrt(n); i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factors[factorCount] = i;\n            n /=\
    \ i;\n            factorCount++;\n        }\n    }\n    factors[factorCount] =\
    \ n;\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int maxFactorsCount)\
    \ \n{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n    long factor = 1;\n\
    \    long factorCount = 0;\n    for(int i = 1; i <= (int)Math.Sqrt(n); i++)\n\
    \    {\n        while(n % i == 0)\n        {\n            factors[factorCount]\
    \ = i;\n            n /= i;\n            factorCount++;\n        }\n    }\n  \
    \  factors[factorCount] = n;\n    return factors;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    ", "{\n\
    \    long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long\
    \ factorCount = 0;\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n      \
    \  if(n%i == 0)\n        {\n            factorCount++;\n            factors[factorCount]\
    \ = i;\n            n /= i;\n        }\n    }\n    factors[factorCount] = n;\n\
    \    for(int i = 0; i <= factorCount; i++)\n    {\n        factor *= factors[i];\n\
    \    }\n    return factors;\n}", "{\n    long[] result = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long factorization = 1;\n    for(int i = 1; i < result.length;\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            factorization\
    \ *= i;\n            n /= i;\n        }\n        result[i] = factorization;\n\
    \        factor *= i;\n    }\n    return result;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorization) \n{\n    long[] result = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long factorization = 1;\n    for(int i = 1; i < result.length;\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            factorization\
    \ *= i;\n            n /= i;\n        }\n        result[i] = factorization;\n\
    \        factor *= i;\n    }\n    return result;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorization, int factor) \n{\n    long[] result = new long[(int)Math.sqrt(n)];\n\
    \    long factor = 1;\n    long factorization = 1;\n    for(int i = 1; i < result.length;\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            factorization\
    \ *= i;\n            n /= i;\n        }\n        result[i] = factorization;\n\
    \        factor *= i;\n    }\n    return result;\n}\n/*\n Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    Input number should be equal to the product\
    \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int factorization, int factor, int factorization2) \n{\n    long[] ", "{\n\
    \    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n \
    \   long factorCount = 0;\n    for(int i = 1; i < factors.length; i++)\n    {\n\
    \        factorCount = 0;\n        while(factor*i < n)\n        {\n          \
    \  factor *= i;\n            factorCount++;\n        }\n        factors[i] = factorCount;\n\
    \    }\n    return factors;\n}", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = n;\n    long factor = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        while(p % i == 0)\n        {\n            factor *= i;\n\
    \            p /= i;\n        }\n        factors[i] = factor;\n        factor++;\n\
    \    }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max) \n{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)+1];\n    long p = n;\n    long factor = 1;\n  \
    \  for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        while(p % i ==\
    \ 0)\n        {\n            factor *= i;\n            p /= i;\n        }\n  \
    \      factors[i] = factor;\n        factor++;\n        if(factor > max)\n   \
    \         break;\n    }\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max, int\
    \ factorization) \n{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n  \
    \  long p = n;\n    long factor = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        while(p % i == 0)\n        {\n            factor *= i;\n\
    \            p /= i;\n        }\n        factors[i] = factor;\n        factor++;\n\
    \        if(factor > max)\n            break;\n    }\n    return factors;\n}\n\
    /*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q\
    \ = n;\n    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[]\
    \ result = new long[(int)Math.Ceiling(Math.Log(n,2))+1];\n    long p = n;\n  \
    \  long factor = 1;\n    for(int i = 0; i<result.Length; i++)\n    {\n       \
    \ result[i] = 0;\n    }\n    for(int i = 0; i<result.Length; i++)\n    {\n   \
    \     while(p % factor == 0)\n        {\n            result[i]++;\n          \
    \  p /= factor;\n        }\n        factor *= i;\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic class PrimeFactors\n{\n\
    \    public static void main(String[] args)\n    {\n        long n = Integer.parseInt(args[0]);\n\
    \        long primeFactors = factorize(n);\n        System.out.println(primeFactors);\n\
    \    }", "{\n    long factors[] = new long[100];\n    long factor = 1;\n    long\
    \ count = 0;\n    long i;\n    \n    for(i = 2; i <= n; i++) {\n        factors[count]\
    \ = i;\n        factor = 1;\n        \n        for(count = 1; count < factors.length;\
    \ count++) {\n            if(n % i == 0) {\n                factors[count] = i;\n\
    \                factor++;\n                break;\n            }\n        }\n\
    \    }\n    \n    for(i = 0; i < factors.length; i++) {\n        if(factors[i]\
    \ == n) {\n            return new long[] {n, 1};\n        }\n    }\n    \n   \
    \ return new long[] {n, 0};\n}", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = 1;\n    long q = n;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor\
    \ = 1;\n    long factorCount = 0;\n    long currentCount = 1;\n    long currentCount2\
    \ = 0;\n    long currentCount3 = 0;\n    long currentCount4 = 0;\n    long currentCount5\
    \ = 0;\n    long currentCount6 = 0;\n    long currentCount7 = 0;\n    long currentCount8\
    \ = 0;\n    long currentCount9 = 0;\n    long currentCount10 = 0;\n    long currentCount11\
    \ = 0;\n    long currentCount12 = 0;\n    long currentCount13 = 0;\n    long currentCount14\
    \ = 0;\n    long currentCount15 = 0;\n    long currentCount16 = 0;\n    long currentCount17\
    \ = 0;\n    long currentCount18 = 0;\n    long currentCount19 = 0;\n    long currentCount20\
    \ = 0;\n    long currentCount21 = 0;\n    long currentCount22 = 0;\n    long currentCount23\
    \ = 0;\n    long currentCount24 = 0;\n    long currentCount25 = 0;\n    long currentCount26\
    \ = 0;\n    long currentCount27 = 0;\n    long currentCount28 = 0;\n    long currentCount29\
    \ = 0;\n    long currentCount30 = 0;\n    long currentCount31 = 0;\n    long currentCount32\
    \ = 0;\n    long currentCount33 = 0;\n    long currentCount34 = 0;\n    long currentCount35\
    \ = 0;\n    long currentCount36 = 0;\n    long currentCount37 = 0;\n    long currentCount38\
    \ = 0;\n    long currentCount39 = 0;\n    long currentCount40 = 0;\n    long currentCount41\
    \ = 0;\n    long currentCount42 = 0;\n    long currentCount43 = 0;\n    long currentCount44\
    \ = 0;\n    long currentCount45 = 0;\n    long currentCount46 = 0;\n    long currentCount47\
    \ = 0;\n    long currentCount48 = 0;\n    long currentCount49 = 0;\n    long currentCount50\
    \ = 0;\n    long currentCount51 = 0;\n    long currentCount52 = 0;\n    long currentCount53\
    \ = 0;\n    long currentCount54 = 0;\n    long currentCount55 = 0;\n    long currentCount56\
    \ = 0;\n    long currentCount57 = 0;\n    long currentCount58 = 0;\n    long currentCount59\
    \ = 0;\n    long currentCount60 = 0;\n    long currentCount61 = 0;\n    long currentCount62\
    \ = 0;\n    long currentCount63 = 0;\n    long currentCount64 = 0;\n    long currentCount65\
    \ = 0;\n    long currentCount66 = 0;\n    long currentCount67 = 0;\n    long currentCount68\
    \ = 0;\n    long currentCount69 = 0;\n    long currentCount70 = 0;\n", "{\n  \
    \  long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q = n;\n\
    \    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long factor = 1;\n    for(int\
    \ i = 0; i <= (int)Math.sqrt(n); i++){\n        if(n % i == 0){\n            factor\
    \ *= i;\n            p /= i;\n            factors[i] = factor;\n        }\n  \
    \  }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max) \n{\n    long[] factors\
    \ = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long factor = 1;\n    for(int\
    \ i = 0; i <= (int)Math.sqrt(n); i++){\n        if(n % i == 0){\n            factor\
    \ *= i;\n            p /= i;\n            factors[i] = factor;\n        }\n  \
    \  }\n    return factors;\n}\n/*\n Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max, int max2) \n{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long factor = 1;\n\
    \    for(int i = 0; i <= (int)Math.sqrt(n); i++){\n        if(n % i == 0){\n \
    \           factor *= i;\n            p /= i;\n            factors[i] = factor;\n\
    \        }\n    }\n    return factors;\n}\n/*\n Return list of prime factors of\
    \ given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int max, int\
    \ max2, int max3) \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n   \
    \ long p = 1;\n    long factor = 1;\n", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n\
    \    long p = 1;\n    long q = 1;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long ", "{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long factor\
    \ = 1;\n    long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            factor *= i;\n\
    \            factorCount++;\n            n /= i;\n        }\n        factors[i]\
    \ = factor;\n        factor *= i;\n        factorCount++;\n    }\n    factors[(int)Math.sqrt(n)]\
    \ = factor;\n    return factors;\n}\n/*\n Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors) \n{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n    long factorCount\
    \ = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n        while(n\
    \ % i == 0)\n        {\n            factor *= i;\n            factorCount++;\n\
    \            n /= i;\n        }\n        factors[i] = factor;\n        factor\
    \ *= i;\n        factorCount++;\n    }\n    factors[(int)Math.sqrt(n)] = factor;\n\
    \    return factors;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int minFactors)\
    \ \n{\n    long[] factors = new long[(int)Math.sqrt(n)];\n    long factor = 1;\n\
    \    long factorCount = 0;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n\
    \    {\n        while(n % i == 0)\n        {\n            factor *= i;\n     \
    \       factorCount++;\n            n /= i;\n        }\n        factors[i] = factor;\n\
    \        factor *= i;\n        factorCount++;\n    }\n    factors[(int)Math.sqrt(n)]\
    \ = factor;\n    return factors;\n}\n/*\n Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    Each of the factors should\
    \ be listed number of ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = 1;\n    long factor = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        if(n%i == 0)\n        {\n            factor *= i;\n   \
    \         factors[(int)i] = factor;\n            n /= i;\n        }\n    }\n \
    \   factors[(int)Math.sqrt(n)] = n;\n    return factors;\n}\n</code>\n<|/ a tags=algorithm,c#,primes\
    \ |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor = 1;\n  \
    \  long counter = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n\
    \        if(n%i == 0)\n        {\n            factors[i] = factor;\n         \
    \   n = n/i;\n            counter = 1;\n        }\n        else\n        {\n \
    \           factors[i] = factor;\n            counter++;\n            factor++;\n\
    \        }\n    }\n    factors[(int)Math.sqrt(n)] = factor;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, long[] factors) \n{\n    long factor = 1;\n    long\
    \ counter = 1;\n    for(int i = 0; i <= (int)Math.sqrt(n); i++)\n    {\n     \
    \   if(n%i == 0)\n        {\n            factors[i] = factor;\n            n =\
    \ n/i;\n            counter = 1;\n        }\n        else\n        {\n       \
    \     factors[i] = factor;\n            counter++;\n            factor++;\n  \
    \      }\n    }\n    factors[(int)Math.sqrt(n)] = factor;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, long[] factors, int start) \n{\n    long factor =\
    \ 1;\n    long counter = 1;\n    for(int i = start; i <= (int)Math.sqrt(n); i++)\n\
    \    {\n        if(n%i == 0)\n        {\n            factors[i] = factor;\n  \
    \          n = n/i;\n            counter = 1;\n        }\n        else\n     \
    \   {\n            factors[i] = factor;\n            counter++;\n            factor++;\n\
    \        }\n    }\n    factors[(int)Math.sqrt(n)] = factor;\n    return factors;\n\
    }\n/*\n Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product ", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 0;\n    while(p <= q) {\n        while(p <= q && q % p == 0) {\n       \
    \     factors[(int)t++] = p;\n            q /= p;\n        }\n        while(p\
    \ <= q && q % p == 0) {\n            p /= p;\n        }\n        while(p <= q\
    \ && q % p == 0) {\n            p /= p;\n            q /= p;\n        }\n    \
    \    while(p <= q && q % p == 0) {\n            p /= p;\n            q /= p;\n\
    \            r /= p;\n        }\n        while(p <= q && q % p == 0) {\n     \
    \       p /= p;\n            q /= p;\n            r /= p;\n            s /= p;\n\
    \        }\n    }\n    factors[(int)t++] = n;\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n*/\nlong[] factorize(long\
    \ n, int max) \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p\
    \ = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long t = 0;\n \
    \   while(p <= q) {\n        while(p <= q && q % p == 0) {\n            factors[(int)t++]\
    \ = p;\n            q /= p;\n        }\n        while(p <= q && q % p == 0) {\n\
    \            p /= p;\n        }\n        while(p <= q && q % p == 0) {\n     \
    \       p /= p;\n            q /= p;\n        }\n        while(p <= q && q % p\
    \ == 0) {\n            p /= p;\n            q /= p;\n            r /= p;\n   \
    \     }\n        while(p <= q && q % p == 0) {\n            p /= p;\n        \
    \    q /= p;\n            r /= p;\n            s /= p;\n        }\n    }\n   \
    \ factors[(int)t++] = n;\n    return factors;\n}\n/*\n Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n\
    \    long p = 1;\n    long q = 1;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = n;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = n;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    ", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long factor\
    \ = 1;\n    long counter = 1;\n    for(int i = 1; i < factors.length; i++)\n \
    \   {\n        while(n % factor == 0)\n        {\n            factors[counter]\
    \ = factor;\n            n /= factor;\n            counter++;\n        }\n   \
    \     factor++;\n    }\n    factors[counter] = n;\n    return factors;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=algorithm,primes,c# |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;",
  "{\n    long[] result = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q =\
    \ 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n   \
    \ long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[] factors\
    \ = new long[(int)sqrt(n)+1];\n    long factor = 1;\n    long factorCount = 0;\n\
    \    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n        if(n%i == 0)\n   \
    \     {\n            factorCount++;\n            factor = factor*i;\n        \
    \    factors[i] = factorCount;\n        }\n    }\n    return factors;\n}\n/*\n\
    \ Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n\
    */\nlong[] factorize(long n, int maxFactors) \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long factor = 1;\n    long factorCount = 0;\n    for(int i = 0; i <= (int)sqrt(n);\
    \ i++)\n    {\n        if(n%i == 0)\n        {\n            factorCount++;\n \
    \           factor = factor*i;\n            factors[i] = factorCount;\n      \
    \      if(factorCount >= maxFactors)\n                break;\n        }\n    }\n\
    \    return factors;\n}\n/*\n Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \n*/\nlong[] factorize(long n, int maxFactors, int maxFactorsCount)\
    \ \n{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long factor = 1;\n\
    \    long factorCount = 0;\n    for(int i = 0; i <= (int)sqrt(n); i++)\n    {\n\
    \        if(n%i == 0)\n        {\n            factorCount++;\n            factor\
    \ = factor*i;\n            factors[i] = factorCount;\n            if(factorCount\
    \ >= maxFactors)\n                break;\n            if(factorCount >= maxFactorsCount)\n\
    \                break;\n        }\n    }\n    return factors;\n}\n/*\n Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factor", "{\n    long[] factors = new long[(int)Math.Sqrt(n)];\n\
    \    long p = n;\n    long factor = 1;\n    long count = 0;\n    while(p > 1)\n\
    \    {\n        while(p % factor == 0)\n        {\n            factors[count++]\
    \ = factor;\n            p /= factor;\n        }\n        factor++;\n    }\n \
    \   return factors;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work for\
    \ large numbers. Try factorize(1000000000000).\n<|/ c |>\n<| c |>\nIt works for\
    \ me on large numbers. Try factorize(1000000000000).\n<|/ c |>\n<| c |>\nIt works\
    \ for me on large numbers. Try factorize(1000000000000).\n<|/ c |>\n<| c |>\n\
    It works for me on large numbers. Try factorize(1000000000000).\n<|/ c |>\n<|\
    \ c |>\nIt works for me on large numbers. Try factorize(1000000000000).\n<|/ c\
    \ |>\n<| a tags=algorithm,c#,primes |>\n<code>\npublic static bool IsPrime(long\
    \ n)\n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return\
    \ true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i * i\
    \ <= n; i += 2)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}", "{\n    long[] factors = new long[(int)Math.sqrt(n)+1];\n    long\
    \ factor = 1;\n    long count = 0;\n    for(int i = 2; i <= (int)Math.sqrt(n);\
    \ i++)\n    {\n        while(n % i == 0)\n        {\n            factors[count++]\
    \ = i;\n            n /= i;\n        }\n    }\n    factors[count++] = n;\n   \
    \ return factors;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code doesn't work.\
    \ Try factorize(25). You will see that factors array contains only 2 elements.\
    \ And it contains only 2 elements. But 25 is divisible by 2 and 5.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I used the code from [here](http://stackoverflow.com/questions/1429693/how-can-i-find-the-factors-of-a-number-in-java)\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the code from [here](http://stackoverflow.com/questions/1429693/how-can-i-find-the-factors-of-a-number-in-java)\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the code from [here](http://stackoverflow.com/questions/1429693/how-can-i-find-the-factors-of-a-number-in-java)\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the code from [here](http://stackoverflow.com/questions/1429693/how-can-i-find-the-factors-of-a-number-in-java)\n\
    <|/ c |>\n<| a tags=algorithm,c#,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    System.out.println(factorize(8));\n    System.out.println(factorize(25));\n\
    \    System.out.println(factorize(70));\n}", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n\
    \    long p = 1;\n    long q = n;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long ", "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n   \
    \ long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q =\
    \ 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long ",
  "{\n    long[] factors = new long[(int)sqrt(n)+1];\n    long p = 1;\n    long q\
    \ = 1;\n    long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long ", "{\n    long[]\
    \ factors = new long[(int)Math.sqrt(n)];\n    long p = 1;\n    long q = n;\n \
    \   long r = n;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v\
    \ = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n \
    \   long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f\
    \ = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n \
    \   long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o\
    \ = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
