name: HumanEval_66_digitSum
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\nTask\n    Write a function that\
  \ takes a string as input and returns the sum of the upper characters only'\n  \
  \  ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
  abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\")\
  \ => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
  \ 153\n    \n*/\nlong digitSum(string s) \n"
tests: "unittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\"\
  ) == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\"\
  ) == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\"\
  ) == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\"\
  \ How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n\
  }\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c\
    \ >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nI like your solution, but I believe\
    \ it can be simplified a bit. `'A'-'A'` is `0`, so `'A'-'A' + 1` is `1`, so `sum+=c-'A'+1`\
    \ can be simplified to `sum+=c-1`.\n<|/ c |>\n<| c |>\nYes, you are right. Thanks\
    \ for pointing that out. I will update my answer.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += c - 'A' + 10;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't mention\
    \ this in the question, but I do need to use only std.algorithm.\n<|/ c |>\n<|\
    \ c |>\nI added a solution using only std.algorithm.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I'm sorry I didn't mention this in the question, but I do need\
    \ to use only std.algorithm.\n<|/ c |>\n<| c |>\nI added a solution using only\
    \ std.algorithm.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char,ascii |>\n<| a\
    \ dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n  \
    \  return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `digitSum(\"\
    aAaaaXa\")` returns `153`, not `131`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ after I posted my answer. I've updated my answer with a different solution.\n\
    <|/ c |>\n<| a tags=c#,string,algorithm |>\n<code>\nstring input = \"aAaaaXa\"\
    ;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I believe it\
    \ would be more efficient to convert `s` to `char[]` first, then use `std::accumulate`\
    \ on that array.\n<|/ c |>\n<| c |>\nI agree with you. My solution was more of\
    \ a \"quick and dirty\" solution. Your solution is more \"clean\".\n<|/ c |>\n\
    <| c |>\nI agree with you, too. My solution was more of a \"quick and dirty\"\
    \ solution. Your solution is more \"clean\".\n<|/ c |>\n<| a tags=c++,string,algorithm\
    \ |>\nI like KennyTM's solution, but I believe it would be more efficient to convert\
    \ s to char[] first, then use std::accumulate on that array. \n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <numeric>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\n`toUpper` doesn't exist in C++.\n<|/ c |>\n<| c |>\nI didn't know\
    \ that. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n`toUpper` does exist\
    \ in C++. `std::toupper` does.\n<|/ c |>\n<| c |>\n`toUpper` exists in C++11 and\
    \ later.\n<|/ c |>\n<| c |>\n`toUpper` exists in C++11 and later. `std::toupper`\
    \ does not.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n\
    Thanks for the answer! I understand your solution, but I wanted to solve it without\
    \ using any libraries. I guess I should have mentioned that in the question.\n\
    <|/ c |>\n<| c |>\nI added a solution without using any libraries.\n<|/ c |>\n\
    <| c |>\nThanks for the answer! I understand your solution, but I wanted to solve\
    \ it without using any libraries. I guess I should have mentioned that in the\
    \ question.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nI like your\
    \ solution, but I feel like it would be better to use a `for` loop instead of\
    \ a `foreach` loop. `foreach` isn't a standard C++ feature, so it might not be\
    \ portable. Also, `isUpper` isn't a standard C++ feature, so it might not be portable.\
    \ Also, `toUpper` isn't a standard C++ feature, so it might not be portable. Finally,\
    \ `foreach` isn't a standard C++ feature, so it might not be portable. Also, `isUpper`\
    \ isn't a standard C++ feature, so it might not be portable. Also, `toUpper` isn't\
    \ a standard C++ feature, so it might not be portable. Also, `foreach` isn't a\
    \ standard C++ feature, so it might not be portable. Also, `isUpper` isn't a standard\
    \ C++ feature, so it might not be portable. Also, `toUpper` isn't a standard C++\
    \ feature, so it might not be portable. Also, `foreach` isn't a standard C++ feature,\
    \ so it might not be portable. Also, `isUpper` isn't a standard C++ feature, so\
    \ it might not be portable. Also, `toUpper` isn't a standard C++ feature, so it\
    \ might not be portable. Also, `foreach` isn't a standard C++ feature, so it might\
    \ not be portable. Also, `isUpper` isn't a standard C++ feature, so it might not\
    \ be portable. Also, `toUpper` isn't a standard C++ feature, so it might not be\
    \ portable. Also, `foreach` isn't a standard C++ feature, so it might not be portable.\
    \ Also, `isUpper` isn't a standard C++ feature, so it might not be portable. Also,\
    \ `toUpper` isn't a standard C++ feature, so it might not be portable. Also, `foreach`\
    \ isn't a standard C++ feature, so it might not be portable. Also, `isUpper` isn't\
    \ a standard C++ feature, so it might not be portable. Also, `toUpper` isn't a\
    \ standard C++ feature, so it might not be portable. Also, `foreach` isn't a standard\
    \ C++ feature, so it might not be portable. Also, `isUpper` isn't a standard C++\
    \ feature, so it might not be portable. Also, `toUpper` isn't a standard C++ feature,\
    \ so it might not be portable. Also, `foreach` isn't a standard C++ feature, so\
    \ it might not be portable. Also, `isUpper` isn't a standard C++ feature, so it\
    \ might not be portable. Also, ", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic int getSumOfUppercase(String str) {\n    int sum = 0;\n \
    \   for(int i = 0; i < str.length(); i++) {\n        if(Character.isUpperCase(str.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,sum |>\n<| a tags=string,c#,sum\
    \ |>\n<code>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n      \
    \  if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and\
    \ I see it works. I guess I didn't test it thoroughly enough.\n<|/ c |>\n<| c\
    \ |>\nI tested it myself too, and it works. I guess I didn't test it thoroughly\
    \ enough.\n<|/ c |>\n<| c |>\nI tested it myself too, and it works. I guess I\
    \ didn't test it thoroughly enough.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring\
    \ s = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer. Can you please\
    \ explain why you used `toUpper` instead of `toLower`?\n<|/ c |>\n<| c |>\nBecause\
    \ `toUpper` converts all the characters to upper case and `toLower` converts all\
    \ the characters to lower case. `toUpper` converts all the characters to upper\
    \ case and `toLower` converts all the characters to lower case. `toUpper` converts\
    \ all the characters to upper case and `toLower` converts all the characters to\
    \ lower case. `toUpper` converts all the characters to upper case and `toLower`\
    \ converts all the characters to lower case. `toUpper` converts all the characters\
    \ to upper case and `toLower` converts all the characters to lower case. `toUpper`\
    \ converts all the characters to upper case and `toLower` converts all the characters\
    \ to lower case. `toUpper` converts all the characters to upper case and `toLower`\
    \ converts all the characters to lower case. `toUpper` converts all the characters\
    \ to upper case and `toLower` converts all the characters to lower case. `toUpper`\
    \ converts all the characters to upper case and `toLower` converts all the characters\
    \ to lower case. `toUpper` converts all the characters to upper case and `toLower`\
    \ converts all the characters to lower case. `toUpper` converts all the characters\
    \ to upper case and `toLower` converts all the characters to lower case. `toUpper`\
    \ converts all the characters to upper case and `toLower` converts all the characters\
    \ to lower case. `toUpper` converts all the characters to upper case and `toLower`\
    \ converts all the characters to lower case. `toUpper` converts all the characters\
    \ to upper case and `toLower` converts all the characters to lower case. `toUpper`\
    \ converts all the characters to upper case and `toLower` converts all the characters\
    \ to lower case. `toUpper` converts all the characters to upper case and `toLower`\
    \ converts all the characters to lower case. `toUpper` converts all the characters\
    \ to upper case and `toLower` converts all the characters to lower case. `toUpper`\
    \ converts all the characters to upper case and `toLower` converts all the ",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'a' && c\
    \ <= 'z')\n            sum += (c - 'a' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c#,string,algorithm |>\n<| c |>\nThis doesn't work. Try it with `\"\
    aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"aAaaaXa\"`.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `\"aAaaaXa\"`.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n<code>\n\
    public static long GetSumOfUppercaseLetters(string input)\n{\n    long sum = 0;\n\
    \    foreach (char c in input)\n    {\n        if (char.IsUpper(c))\n        \
    \    sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static long GetSumOfUppercaseLetters(string\
    \ input)\n{\n    long sum = 0;\n    foreach (char c in input)\n    {\n       \
    \ if (char.IsUpper(c))\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| a dscore=1 |>\n<code>\npublic\
    \ static long GetSumOfUppercaseLetters(string input)\n{\n    long sum = 0;\n \
    \   foreach (char c in input)\n    {\n        if (char.IsUpper(c))\n         \
    \   sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| a tags=c#,string,algorithm |>\n<code>\npublic long GetSumOfUppercaseLetters(string\
    \ input)\n{\n    long sum = 0;\n    foreach (char c in input)\n    {\n       \
    \ if (char.IsUpper(c))\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic long GetSumOfUppercaseLetters(string\
    \ input)\n{\n", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n     \
    \   if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,.net |>\n<code>\nstring\
    \ input = \"helloE\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `toUpper` returns a\
    \ `char`, not a `char[]`.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out.\
    \ I fixed the code accordingly.\n<|/ c |>\n<| a tags=c#,string,char |>\n<code>\n\
    string input = \"Hello World\";\nstring output = \"\";\nforeach (char c in input)\n\
    {\n    if (char.IsUpper(c))\n        output += c.ToString();\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\nstring input = \"Hello World\";\nstring output\
    \ = \"\";\nforeach (char c in input)\n{\n    if (char.IsUpper(c))\n        output\
    \ += c.ToString();\n}\n</code>\n<|/ a dscore=1 tags=c#,string,char |>\n<| a dscore=1\
    \ |>\n<code>\nstring input = \"Hello World\";\nstring output = \"\";\nforeach\
    \ (char c in input)\n{\n    if (char.IsUpper(c))\n        output += c.ToString();\n\
    }\n</code>\n<|/ a tags=c#,string,char |>\n<| a dscore=1 |>\n<code>\nstring input\
    \ = \"Hello World\";\nstring output = \"\";\nforeach (char c in input)\n{\n  \
    \  if (char.IsUpper(c))\n        output += c.ToString();\n}\n</code>\n<|/ a tags=c#,string,char\
    \ |>\n<| a tags=c#,string,char |>\n<code>\nstring input = \"Hello World\";\nstring\
    \ output = \"\";\nforeach (char c in input)\n{\n    if (char.IsUpper(c))\n   \
    \     output += c.ToString();\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nstring input = \"Hello World\";\nstring output = \"\";\nforeach (char\
    \ c in input)\n{\n    if (char.IsUpper(c))\n        output += c.ToString();\n\
    }\n</code>\n<|/ a tags=c#,string,char |>\n<| a tags=c#,string,char |>\n<code>\n\
    string input = \"Hello World\";\nstring output = \"\";\nforeach (char c in input)\n\
    {\n    if (char.IsUpper(c))\n        output += c.ToString();\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\nstring input = \"", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        sum += std.math.max(std.typecons.charToInt(c));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,algorithm |>\n<| a dscore=0\
    \ |>\n<code>\nstring s = \"abc\";", "{\n    long sum = 0;\n    foreach(char c\
    \ in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n        {\n            sum +=\
    \ c - 'A' + 10;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThis doesn't work if you have a string with more than one upper\
    \ case letter. For example, `digitSum(\"aAaaaXa\")` returns `153`, but should\
    \ be `153`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code.\
    \ Now it works.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\nThank you\
    \ so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ Glad to help.\n<|/ c |>\n<| a tags=string,c++,arrays |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThis\
    \ doesn't work. `toUpper` returns a `char`, not a `long`.\n<|/ c |>\n<| c |>\n\
    Yes, I know. I was just trying to show how to do it. I didn't want to write all\
    \ the code for the OP.\n<|/ c |>\n<| c |>\nI didn't downvote you, but I suspect\
    \ that it's because you didn't actually answer the question. You're just providing\
    \ some code without explaining how it works.\n<|/ c |>\n<| c |>\nI added some\
    \ explanation.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"aAaaaXa\"\
    )`\n<|/ c |>\n<| c |>\nIt works, I tested it. What is the problem?\n<|/ c |>\n\
    <| c |>\nIt doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt works,\
    \ I tested it. What is the problem?\n<|/ c |>\n<| c |>\nIt doesn't work for `digitSum(\"\
    aAaaaXa\")`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring digitSum(string s)\n{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c#,string |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"\
    aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt works, I tested it. What is the problem?\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c\
    \ |>\nIt works, I tested it. What is the problem?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| a tags=c#,string |>\n<code>\n\
    string digitSum(string s)\n{\n    long sum = 0;\n    foreach(char c in s)\n  \
    \  {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n  \
    \  }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt works, I tested it.\
    \ What is the problem?\n<|/ c |>\n<| c |>\nIt doesn't work for `digitSum(\"aAaaaXa\"\
    )`\n", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your effort but this does not answer the question\
    \ of how to do it without using any libraries.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use any libraries.\n<|/ c |>\n<| c |>\nI appreciate your effort\
    \ but this does not answer the question of how to do it without using any libraries.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n\
    <| c |>\nI appreciate your effort but this does not answer the question of how\
    \ to do it without using any libraries.\n<|/ c |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\nstring input = \"aAaaaXa\";\nstring output = \"\";\nfor (int i =\
    \ 0; i < input.Length; i++)\n{\n    if (char.IsUpper(input[i]))\n    {\n     \
    \   output += input[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your effort but this does not answer the question of how to do it without using\
    \ any libraries.\n<|/ c |>\n<| c |>\nI appreciate your effort but this does not\
    \ answer the question of how to do it without using any libraries.\n<|/ c |>\n\
    <| a tags=c#,string,algorithm |>\n<code>\nstring input = \"aAaaaXa\";\nstring\
    \ output = \"\";\nfor (int i = 0; i < input.Length; i++)\n{\n    if (char.IsUpper(input[i]))\n\
    \    {\n        output += input[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nI appreciate your effort but this does not answer the question of how\
    \ to do it without using any libraries.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string input = \"aAaaaXa\";\nstring output = \"\";\nfor (int i = 0; i < input.Length;\
    \ i++)\n{\n    if (char.IsUpper(input[i]))\n    {\n        output += input[i];\n\
    \    }\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nI appreciate your\
    \ effort but this does not answer the question of how to do it without using any\
    \ libraries.\n<|/ c |>\n<| ", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I believe\
    \ that `isUpper` should be `isUpperAscii` since `isUpper` checks for uppercase\
    \ letters in any language, not just ASCII.\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain what was wrong with OP's code.\
    \ Also, your answer doesn't really answer the question, which is about how to\
    \ do it with std.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\
    \ Thanks for the feedback.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect\
    \ it's because you didn't explain what was wrong with OP's code. Also, your answer\
    \ doesn't really answer the question, which is about how to do it with std.\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer. Thanks for the feedback.\n\
    <|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code. Also, your answer doesn't really answer the question,\
    \ which is about how to do it with std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import std.stdio;\nimport std.string;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport st",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThe OP asked for a solution that does not use any loops or recursion.\n\
    <|/ c |>\n<| c |>\nI thought that he was looking for an answer that doesn't use\
    \ loops or recursion.\n<|/ c |>\n<| c |>\nI thought that he was looking for an\
    \ answer that doesn't use loops or recursion.\n<|/ c |>\n<| c |>\nI thought that\
    \ he was looking for an answer that doesn't use loops or recursion.\n<|/ c |>\n\
    <| c |>\nI thought that he was looking for an answer that doesn't use loops or\
    \ recursion.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long sum = 0;\n   \
    \ foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum\
    \ += c - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer. I'm a beginner\
    \ at programming and I really appreciate your help. I understand your code, but\
    \ I still don't understand how it works. I understand that isUpper and toUpper\
    \ are functions, but I don't understand how they work. Could you please explain\
    \ how they work? Thanks again!\n<|/ c |>\n<| c |>\n`isUpper` and `toUpper` are\
    \ functions. `isUpper` checks if the character is an upper case letter (`A`, `B`,\
    \ `C`, `D`, `E`, `F`, `G`, `H`, `I`, `J`, `K`, `L`, `M`, `N`, `O`, `P`, `Q`, `R`,\
    \ `S`, `T`, `U`, `V`, `W`, `X`, `Y`, `Z`). `toUpper` converts a character to upper\
    \ case. `isUpper` returns `true` or `false`. `toUpper` converts a character to\
    \ upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `isUpper` returns `true` or `false`. `toUpper` converts a character\
    \ to upper case. `", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nThe `foreach` loop is\
    \ unnecessary. `s.ToUpper()` will do the same thing.\n<|/ c |>\n<| c |>\n: Yes,\
    \ but it's more readable and easier to understand for someone who doesn't know\
    \ LINQ. Also, it's more efficient because `ToUpper()` doesn't have to create a\
    \ new string for each character.\n<|/ c |>\n<| c |>\n: I agree, but I thought\
    \ it would be better to show a more readable and understandable way to do it with\
    \ LINQ. Also, `ToUpper()` doesn't create a new string for each character, it just\
    \ creates a new string that contains the uppercase version of the characters in\
    \ the original string. `ToUpper()` doesn't create a new string for each character,\
    \ it just creates a new string that contains the uppercase version of the characters\
    \ in the original string.\n<|/ c |>\n<| c |>\n: I added a more readable and understandable\
    \ way to do it with LINQ. Also, `ToUpper()` doesn't create a new string for each\
    \ character, it just creates a new string that contains the uppercase version\
    \ of the characters in the original string.\n<|/ c |>\n<| c |>\n: I added a more\
    \ readable and understandable way to do it with LINQ. Also, `ToUpper()` doesn't\
    \ create a new string for each character, it just creates a new string that contains\
    \ the uppercase version of the characters in the original string.\n<|/ c |>\n\
    <| a tags=c#,string,algorithm |>\n<code>\nstring s = \"hello\";", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, however it would be better to use a `for` loop and `isUpper`\
    \ instead of `foreach`.\n<|/ c |>\n<| c |>\nI agree, however I wanted to keep\
    \ it close to the OP's original code. I'll edit my answer to include a for loop.\n\
    <|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,string,ascii |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n  \
    \          sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\n\
    It does work. `'A'` is `65` and `'Z'` is `90`. `65 + 65 + 65 + 65 + 65 + 65 +\
    \ 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65\
    \ + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 +\
    \ 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65\
    \ + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 +\
    \ 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65\
    \ + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 +\
    \ 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65\
    \ + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 +\
    \ 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65\
    \ + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 +\
    \ 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65\
    \ + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 +\
    \ 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + 65 + ", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        sum += std.math.max(std.char.digitValue(c));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c\
    \ |>\nThanks, I didn't know about std.math.max\n<|/ c |>\n<| c |>\n`std.char.digitValue`\
    \ returns `int`, not `long`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis answer does not answer the\
    \ question asked.\n<|/ c |>\n<| c |>\nIt does answer the question asked, as I\
    \ read it.  I added a comment to my answer that explains why I believe it does.\n\
    <|/ c |>\n<| c |>\nI agree with you that your answer does answer the question\
    \ asked, but your answer does not answer the question asked.\n<|/ c |>\n<| c |>\n\
    I added a comment to my answer that explains why I believe it does.\n<|/ c |>\n\
    <| c |>\nI added a comment to my answer that explains why I believe it does.\n\
    <|/ c |>\n<| a |>\n<code>\nstring str = \"Hello World\";", "{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n    \
    \        sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work for the input `\"aAaaaXa\"`\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it. I also tested it on ideone.com. https://ideone.com/q0QjxK\n\
    <|/ c |>\n<| c |>\nI tested it on ideone.com. https://ideone.com/q0QjxK\n<|/ c\
    \ |>\n<| c |>\nYes, it does. I tested it before posting it. I also tested it on\
    \ ideone.com. https://ideone.com/q0QjxK\n<|/ c |>\n<| c |>\nI tested it on ideone.com.\
    \ https://ideone.com/q0QjxK\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring input\
    \ = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThank you for your answer! I really appreciate\
    \ it! I understand your code, but I still don't understand why my code doesn't\
    \ work. Could you please explain to me why my code doesn't work?\n<|/ c |>\n<|\
    \ c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer! I really appreciate it! I understand your code, but\
    \ I still don't understand why my code doesn't work. Could you please explain\
    \ to me why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some comments to\
    \ my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you for your answer! I really\
    \ appreciate it! I understand your code, but I still don't understand why my code\
    \ doesn't work. Could you please explain to me why my code doesn't work?\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\npublic class Solution {\n    public int digitSum(String\
    \ s) {\n        int sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            if(Character.isDigit(c)) {\n \
    \               sum += c - '0';\n            }\n        }\n        return sum;\n\
    \    }\n}\n</code>\n<|/ a tags=string,java,char,int |>\n<| c |>\nThank you for\
    \ your answer! I really appreciate it! I understand your code, but I still don't\
    \ understand why my code doesn't work. Could you please explain to me why my code\
    \ doesn't work?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThank you for your answer! I really appreciate it!\
    \ I understand your code, but I still don't understand why my code doesn't work.\
    \ Could you please explain to me why my code doesn't work?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic class Solution {\n    public int digitSum(String s) {\n \
    \       int sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n        \
    \    char c = s.charAt(i);\n            if(Character.isDigit(c)) {\n         \
    \       sum += c - '0';\n            }\n        }\n        return sum;\n    }\n\
    }\n</code>\n<|/", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n   \
    \     if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,char,ascii |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long sum = 0;\n  \
    \  foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii |>\n<| c |>\n\
    This doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `153L`.\n\
    <|/ c |>\n<| c |>\nI added a note about that to the answer.\n<|/ c |>\n<| c |>\n\
    I added a note about that to the answer.\n<|/ c |>\n<| c |>\nI added a note about\
    \ that to the answer.\n<|/ c |>\n<| c |>\nI added a note about that to the answer.\n\
    <|/ c |>\n<| a |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer!\
    \ I actually had a similar solution, but I wanted to know if there was a way to\
    \ do it without looping through the string. I'll mark your answer as correct since\
    \ it does answer the question, but I wanted to see if there was a way to do it\
    \ without looping through the string.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't use loops.\n<|/ c |>\n<| a |>\n<code>\nstring s = \"hello\";", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c) - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| a tags=c++,string,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"aAaaaXa\"\
    )`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account\
    \ for that.\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with `digitSum(\"\
    aAaaaXa\")`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to\
    \ account for that.\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with `digitSum(\"\
    aAaaaXa\")`.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long sum = 0;\n   \
    \ foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your efforts, but I already know how to use `isUpper`\
    \ and `toUpper`. I was looking for a solution that doesn't involve any loops.\n\
    <|/ c |>\n<| c |>\nI understand, but I believe that your question was \"how do\
    \ I do this without loops?\" I believe that my answer does exactly that. My answer\
    \ does not involve any loops. I believe that your question was \"how do I do this\
    \ without loops?\" I believe that my answer does exactly that. My answer does\
    \ not involve any loops. I believe that your question was \"how do I do this without\
    \ loops?\" I believe that my answer does exactly that. My answer does not involve\
    \ any loops. I believe that your question was \"how do I do this without loops?\"\
    \ I believe that my answer does exactly that. My answer does not involve any loops.\
    \ I believe that your question was \"how do I do this without loops?\" I believe\
    \ that my answer does exactly that. My answer does not involve any loops. I believe\
    \ that your question was \"how do I do this without loops?\" I believe that my\
    \ answer does exactly that. My answer does not involve any loops.\n<|/ c |>\n\
    <| c |>\nI believe that your question was \"how do I do this without loops?\"\
    \ I believe that my answer does exactly that. My answer does not involve any loops.\
    \ I believe that your question was \"how do I do this without loops?\" I believe\
    \ that my answer does exactly that. My answer does not involve any loops. I believe\
    \ that your question was \"how do I do this without loops?\" I believe that my\
    \ answer does exactly that. My answer does not involve any loops. I believe that\
    \ your question was \"how do I do this without loops?\" I believe that my answer\
    \ does exactly that. My answer does not involve any loops. I believe that your\
    \ question was \"how do I do this without loops?\" I believe that my answer does\
    \ exactly that. My answer does not involve any loops.\n<|/ c |>\n<| c |>\nI believe\
    \ that your question was \"how do I do this without loops?\" I believe that my\
    \ answer does exactly that. My answer does not involve any loops. I believe that\
    \ your question was \"how do I do this without loops?\" I believe that my answer\
    \ does exactly ", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n   \
    \     if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c#,string,char,arrays |>\n<| c |>\nThanks for your answer.\
    \ I'm new to C# and I didn't know about `foreach` loops. I appreciate your help.\n\
    <|/ c |>\n<| c |>\nNo problem. Glad I could help. If this answer helped you, please\
    \ consider marking it as accepted (click the check mark next to the answer).\n\
    <|/ c |>\n<| c |>\nI did but my reputation is less than 15 so my upvote doesn't\
    \ show up publicly.\n<|/ c |>\n<| c |>\nNo worries. Thanks for letting me know!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += std.math.max(std.char.digitValue(c));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for\
    \ your answer. I am not allowed to use any library functions. I should use only\
    \ std.math library functions. I should also use only std.string library functions.\
    \ I should also use only std.char library functions. I should also use only std.math\
    \ library functions. I should also use only std.string library functions. I should\
    \ also use only std.char library functions. I should also use only std.math library\
    \ functions. I should also use only std.string library functions. I should also\
    \ use only std.char library functions. I should also use only std.math library\
    \ functions. I should also use only std.string library functions. I should also\
    \ use only std.char library functions. I should also use only std.math library\
    \ functions. I should also use only std.string library functions. I should also\
    \ use only std.char library functions. I should also use only std.math library\
    \ functions. I should also use only std.string library functions. I should also\
    \ use only std.char library functions.\n<|/ c |>\n<| c |>\nI should also use only\
    \ std.math library functions. I should also use only std.string library functions.\
    \ I should also use only std.char library functions. I should also use only std.math\
    \ library functions. I should also use only std.string library functions. I should\
    \ also use only std.char library functions. I should also use only std.math library\
    \ functions. I should also use only std.string library functions. I should also\
    \ use only std.char library functions. I should also use only std.math library\
    \ functions. I should also use only std.string library functions. I should also\
    \ use only std.char library functions. I should also use only std.math library\
    \ functions. I should also use only std.string library functions. I should also\
    \ use only std.char library functions. I should also use only std.math library\
    \ functions. I should also use only std.string library functions. I should also\
    \ use only std.char library functions. I should also use only std.math library\
    \ functions. I should also use only std.string library functions. I should also\
    \ use only std.char library functions. I should also use only std.", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n\
    \            sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis doesn't work. Try it on \"aAaaaXa\".\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it on \"aAaaaXa\" and it returned 153\n<|/ c |>\n\
    <| c |>\nIt doesn't work for \"aAaaaXa\" either. Try it on \"aAaaaXa\".\n<|/ c\
    \ |>\n<| c |>\nI tested it on \"aAaaaXa\" and it returned 153\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work for \"aAaaaXa\" either. Try it on \"aAaaaXa\".\n<|/ c |>\n\
    <| a tags=c#,string,algorithm |>\n<code>\nstring s = \"aAaaaXa\";", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n\
    \        {\n            sum += (c - 'A');\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThanks for the answer. Can\
    \ you please explain why you used `'A'` instead of `65`?\n<|/ c |>\n<| c |>\n\
    `'A'` is an ASCII code for the character `'A'`. `65` is the ASCII code for the\
    \ character `'A'`. `'A'` is easier to read and understand.\n<|/ c |>\n<| c |>\n\
    I see. Thanks for the explanation!\n<|/ c |>\n<| c |>\n`'A'` is an ASCII code\
    \ for the character `'A'`. `65` is the ASCII code for the character `'A'`. `'A'`\
    \ is easier to read and understand.\n<|/ c |>\n<| c |>\n`'A'` is an ASCII code\
    \ for the character `'A'`. `65` is the ASCII code for the character `'A'`. `'A'`\
    \ is easier to read and understand.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n  \
    \          sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for the answer. I am not allowed to use any library functions.\
    \ I did try using toUpper but that didn't work either. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that does not use any library functions. I hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for the answer. I am not allowed to use any library functions.\
    \ I did try using toUpper but that didn't work either. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not allowed to use\
    \ any loops, if statements, etc. I am only allowed to use foreach loops, if statements,\
    \ etc. I am not allowed to use any library functions. I am not ", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution but I think it would be better to use a `for` loop and `if`\
    \ statements instead of `foreach`\n<|/ c |>\n<| c |>\nI agree with you. `foreach`\
    \ is more readable and easier to understand.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. `foreach` is more readable and easier to understand.\n<|/ c |>\n<| c |>\n\
    I agree with you. `foreach` is more readable and easier to understand.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\nstring s = \"hello\";", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\n\
    Thank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome.\
    \ I'm glad I could help.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Text.RegularExpressions;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n\
    <| c |>\nThis doesn't work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"aAaaaXa\"\
    `.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<|\
    \ a tags=c#,string,algorithm |>\n<code>\nstring input = \"aAaaaXa\";", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n  \
    \          sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n`isUpper`\
    \ doesn't exist in C++.\n<|/ c |>\n<| c |>\n`isUpper` was added in C++11. `toUpper`\
    \ was added in C++11.\n<|/ c |>\n<| c |>\n`isUpper` was added in C++11. `toUpper`\
    \ was added in C++11.\n<|/ c |>\n<| c |>\n`isUpper` was added in C++11. `toUpper`\
    \ was added in C++11.\n<|/ c |>\n<| c |>\n`isUpper` was added in C++11. `toUpper`\
    \ was added in C++11.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,char\
    \ |>\n<| c |>\nThank you so much for this. I really appreciate it. I will try\
    \ this out and see how it goes. I really appreciate your help.\n<|/ c |>\n<| c\
    \ |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\n\
    Thank you so much for this. I really appreciate it. I will try this out and see\
    \ how it goes. I really appreciate your help.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use any libraries.\n<|/ c |>\n<| c |>\nThank you so much for this.\
    \ I really appreciate it. I will try this out and see how it goes. I really appreciate\
    \ your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to do this without using any libraries?\n\
    <|/ c |>\n<| c |>\n: Yes, you can write your own `isUpper` function, but then\
    \ you have to write your own `toUpper` function.  It's not that difficult.\n<|/\
    \ c |>\n<| c |>\n: I added an example to my answer.\n<|/ c |>\n<| c |>\n: I added\
    \ an example to my answer.\n<|/ c |>\n<| c |>\n: I added an example to my answer.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c) - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `toUpper` returns a `char`, not\
    \ a `char` value.\n<|/ c |>\n<| c |>\nI fixed the typo. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String s) {\n\
    \    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c\
    \ = s.charAt(i);\n        if (isUpper(c)) {\n            sum += c - 'A' + 1;\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii |>\n\
    <| c |>\nThis doesn't work. `toUpper` returns a `char`, not a `char` value.\n\
    <|/ c |>\n<| c |>\nI fixed the typo. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a tags=c#,string,ascii |>\n<code>\npublic int digitSum(String s)\n{\n    int\
    \ sum = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n        char c =\
    \ s.charAt(i);\n        if (isUpper(c))\n            sum += c - 'A' + 1;\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ `toUpper` returns a `char`, not a `char` value.\n<|/ c |>\n<| c |>\nI fixed\
    \ the typo. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public int digitSum(String s)\n{\n    int sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++)\n    {\n        char c = s.charAt(i);\n        if (isUpper(c))\n      \
    \      sum += c - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii\
    \ |>\n<| c |>\nThis doesn't work. `toUpper` returns a `char`, not a `char` value.\n\
    <|/ c |>\n<| c |>\nI fixed the typo. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a tags=c#,string,ascii |>\n<code>\npublic int digitSum(String s)\n{\n    int\
    \ sum = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n        char c =\
    \ s.charAt(", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n       \
    \ if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nI didn't know that you\
    \ could do that in C++. Thanks!\n<|/ c |>\n<| c |>\n`std::accumulate` would be\
    \ a better choice than `std::for_each` here.\n<|/ c |>\n<| c |>\n: I agree, `std::accumulate`\
    \ would be a better choice.\n<|/ c |>\n<| c |>\n: I agree, `std::accumulate` would\
    \ be a better choice.\n<|/ c |>\n<| c |>\n: I agree, `std::accumulate` would be\
    \ a better choice.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThis\
    \ answer doesn't explain how to solve the problem in the question. Also, `isUpper`\
    \ doesn't exist in C++.\n<|/ c |>\n<| c |>\nI added a brief explanation of how\
    \ it works.\n<|/ c |>\n<| c |>\nThe question was about how to solve the problem\
    \ in the question. Your answer doesn't explain how to solve the problem in the\
    \ question. Also, `isUpper` doesn't exist in C++.\n<|/ c |>\n<| c |>\nThe question\
    \ was about how to solve the problem in the question. Your answer doesn't explain\
    \ how to solve the problem in the question. Also, `isUpper` doesn't exist in C++.\n\
    <|/ c |>\n<| c |>\nThe question was about how to solve the problem in the question.\
    \ Your answer doesn't explain how to solve the problem in the question. Also,\
    \ `isUpper` doesn't exist in C++.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n  \
    \          sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\npublic class SumOfUpperCase {\n    public static void main(String[]\
    \ args) {\n        System.out.println(sumOfUpperCase(\"hello\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));\n        System.out.println(sumOfUpperCase(\"helloWorld\"));\n\
    \        System.out.println(sumOfUpperCase(\"helloWorld\"));\n        System.out.println(sumOfUpperCase(\"\
    helloWorld\"));", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n   \
    \     if(isUpper(c))\n            sum += toAscii(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c#,string,ascii |>\n<| a dscore=0 |>\n<code>\nstring input\
    \ = \"hello\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n    \
    \    if(c >= 'A' && c <= 'Z')\n            sum += c - 'A' + 1;\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting.\n<|/ c |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a |>\n<| a tags=c++,string,ascii |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <cctype>", "{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n    \
    \        sum += (c - 'A');\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis code does not compile. `char` does not have a `ToUpper` method.\n\
    <|/ c |>\n<| c |>\nI fixed the typo. Thanks.\n<|/ c |>\n<| c |>\nThis code does\
    \ not compile. `char` does not have a `ToUpper` method.\n<|/ c |>\n<| c |>\nI\
    \ fixed the typo. Thanks.\n<|/ c |>\n<| c |>\nThis code does not compile. `char`\
    \ does not have a `ToUpper` method.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring\
    \ input = \"abcCd\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,algorithm |>\n<code>\nstring\
    \ input = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char c in s)\n   \
    \ {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n     \
    \   }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<|\
    \ c |>\n`isUpper` isn't a standard function in C++.\n<|/ c |>\n<| c |>\n: I know,\
    \ but I didn't want to write it myself. I wanted to show that he can use standard\
    \ functions. I didn't want to write it myself because I didn't want to write it\
    \ myself because I didn't want to write it myself because I didn't want to write\
    \ it myself because I didn't want to write it myself because I didn't want to\
    \ write it myself because I didn't want to write it myself because I didn't want\
    \ to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I didn't\
    \ want to write it myself because I didn't want to write it myself because I ",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += std.math.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(std.typecons.charBitOr(st",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThis doesn't work. `toUpper` returns a `char`, not a `long`.\n\
    <|/ c |>\n<| c |>\nYes, I know. My bad. Fixed it.\n<|/ c |>\n<| c |>\n`toUpper`\
    \ returns a `char`, not a `long`\n<|/ c |>\n<| c |>\nYes, I know. My bad. Fixed\
    \ it.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n  \
    \      {\n            sum += (c - 'A');\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, it's very concise.\
    \ I'm going to try to implement it into my code. Thanks!\n<|/ c |>\n<| a tags=c#,string\
    \ |>\n<code>\nstring input = \"helloE\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += c - 'A'\
    \ + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c# |>\n<| a tags=string,c#\
    \ |>\n<code>\nstring input = \"hello\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ so much for your help! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n           \
    \ sum += (s.charAt(i) - 'A' + 10);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,string,ascii |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n           \
    \ sum += (s.charAt(i) - 'A' + 10);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,string,ascii |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n           \
    \ sum += (s.charAt(i) - 'A' + 10);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,string,ascii |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z') {\n            sum += (s.charAt(i) - 'A' + 10);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii |>\n\
    <| a dscore=0 |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) >= 'A' && s.charAt(i",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| c |>\nThis code doesn't work if you pass it\
    \ a string with more than 26 characters. For example, `digitSum(\"aAaaaXa\")`\
    \ returns `153` instead of `131`.\n<|/ c |>\n<| c |>\nYes, I noticed that after\
    \ I posted my comment. Thanks for pointing it out.\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,int,char\
    \ |>\n<| a dscore=0 |>\n<code>\nstring input = \"hello\";", "{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly fine but i was looking for a solution using std.algorithm.\n\
    <|/ c |>\n<| c |>\nI added a solution using std.algorithm.\n<|/ c |>\n<| c |>\n\
    Thanks again for your answer. Your code works perfectly fine but i was looking\
    \ for a solution using std.algorithm.\n<|/ c |>\n<| c |>\nI added a solution using\
    \ std.algorithm.\n<|/ c |>\n<| a tags=c++,stl,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += c - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| c |>\nThis doesn't work. Try it with `\"aAaaaXa\"\
    `.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nYes, it works. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI tested it myself and I see it works. I edited my post to\
    \ include a link to a working example.\n<|/ c |>\n<| c |>\nThe OP specifically\
    \ asked for a solution that doesn't use loops. I believe that loops are the only\
    \ way to solve this problem in C++.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <=\
    \ 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string |>\n<| c |>\nThis answer doesn't explain what was wrong\
    \ with OP's code. Also, why not use `std::accumulate`?\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the OP's question asking why he didn't use `std::accumulate`. I\
    \ also added an explanation of why his code didn't work. `std::accumulate` would\
    \ have been a better solution, but I wanted to show how to use `std::for_each`\
    \ instead.\n<|/ c |>\n<| c |>\n`std::accumulate` would be a better solution, but\
    \ I wanted to show how to use `std::for_each` instead.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the OP's question asking why he didn't use `std::accumulate`. I\
    \ also added an explanation of why his code didn't work. `std::accumulate` would\
    \ have been a better solution, but I wanted to show how to use `std::for_each`\
    \ instead.\n<|/ c |>\n<| c |>\nI added a comment to the OP's question asking why\
    \ he didn't use `std::accumulate`. I also added an explanation of why his code\
    \ didn't work. `std::accumulate` would have been a better solution, but I wanted\
    \ to show how to use `std::for_each` instead.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\nThe reason your code doesn't work is because you never actually add anything\
    \ to sum.\n<code>\nlong digitSum(string s)\n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        sum += s[i] - '0';\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI added a comment to the OP's\
    \ question asking why he didn't use `std::accumulate`. I also added an explanation\
    \ of why his code didn't work. `std::accumulate` would have been a better solution,\
    \ but I wanted to show how to use `std::for_each` instead.\n<|/ c |>\n<| a dscore=1\
    \ |>\nYour code doesn't work because you never add anything to sum.\n<code>\n\
    long digitSum(string s)\n{\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        sum += s[i] - '0';\n    }\n    return sum;\n}", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <=\
    \ 'Z')\n            sum += (c - 'A');\n    }\n    return sum;\n}", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThe `isUpper` function doesn't exist in C++.\n<|/ c |>\n<| c |>\n\
    : Thanks, I fixed the answer.\n<|/ c |>\n<| c |>\nThe `isUpper` function doesn't\
    \ exist in C++.\n<|/ c |>\n<| c |>\n: Thanks, I fixed the answer.\n<|/ c |>\n\
    <| c |>\nThe `isUpper` function doesn't exist in C++.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThanks for your answer. I tried your solution and it works. But\
    \ I still don't understand why my code didn't work. Can you please explain to\
    \ me why my code didn't work?\n<|/ c |>\n<| c |>\nThe reason your code didn't\
    \ work is because you were trying to iterate over `char[]` instead of `string`.\
    \  `char[]` doesn't have a `foreach` loop.  `string` does.  I updated my answer\
    \ to show you how to fix your code.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ I understand now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays\
    \ |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI didn't know about `toUpper`, thanks\
    \ for teaching me something new!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n  \
    \          sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27815148)\n<|/ c |>\n<| c |>\nI believe it\
    \ does answer the question. He asked how to write a function that takes a string\
    \ as input and returns the sum of the upper characters only' ASCII codes. I provided\
    \ a solution that does exactly that. He also asked how to do it in O(n) time and\
    \ O(1) space. He provided a solution that does exactly that. He also asked how\
    \ to do it in O(n) time and O(1) space. He provided a solution that does exactly\
    \ that. He also asked how to do it in O(n) time and O(1) space. He provided a\
    \ solution that does exactly that. He also asked how to do it in O(n) time and\
    \ O(1) space. He provided a solution that does exactly that. He also asked how\
    \ to do it in O(n) time and O(1) space. He provided a solution that does exactly\
    \ that. He also asked how to do it in O(n) time and O(1) space. He provided a\
    \ solution that does exactly that. He also asked how to do it in O(n) time and\
    \ O(1) space. He provided a solution that does exactly that.\n<|/ c |>\n<| c |>\n\
    I believe it does answer the question. He asked how to write a function that takes\
    \ a string as input and returns the sum of the upper characters only' ASCII codes.\
    \ I provided a solution that does exactly that. He also asked how to do it in\
    \ O(n) time and O(1) space. He provided a solution that does exactly that. He\
    \ also asked how to do it in O(n) time and O(1) space. He provided a solution\
    \ that does exactly that. He also asked how to do it in O(n) time and O(1) space.\
    \ He provided a solution that does exactly that. He also asked how to do it in\
    \ O(n) time and O(1) space. He provided a solution that does exactly that. He\
    \ also asked how to do it in O(n) time and O(1) space. He provided a solution\
    \ that does exactly that. He also asked how to ", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n\
    <| c |>\nThis doesn't work for the input `\"aAaaaXa\"`\n<|/ c |>\n<| c |>\nYes,\
    \ it does. I tested it before posting it.\n<|/ c |>\n<| c |>\nYes, it does. I\
    \ tested it before posting it.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring input = \"aAaaaXa\";\nstring result\
    \ = \"\";\nforeach (char c in input)\n{\n    if (char.IsUpper(c))\n        result\
    \ += (char.ToUpper(c) - 'A' + 10);\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work for the input `\"aAaaaXa\"`\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it.\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ before posting it.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n<code>\nstring input = \"aAaaaXa\"\
    ;\nstring result = \"\";\nforeach (char c in input)\n{\n    if (char.IsUpper(c))\n\
    \        result += (char.ToUpper(c) - 'A' + 10);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work for the input `\"aAaaaXa\"`\n<|/ c |>\n<| c |>\nYes,\
    \ it does. I tested it before posting it.\n<|/ c |>\n<| c |>\nYes, it does. I\
    \ tested it before posting it.\n<|/ c |>\n<| c |>\nY", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n         \
    \   sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\nThis code does not compile. `char` does not have a `ToUpper` method.\n\
    <|/ c |>\n<| c |>\nSorry, I forgot to mention that the code was written for C#\
    \ 3.0 which doesn't have `ToUpper` method. I've updated the answer with the correct\
    \ code.\n<|/ c |>\n<| c |>\nThis code does not compile. `char` does not have a\
    \ `ToUpper` method.\n<|/ c |>\n<| c |>\nSorry, I forgot to mention that the code\
    \ was written for C# 3.0 which doesn't have `ToUpper` method. I've updated the\
    \ answer with the correct code.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n\
    <code>\nstring str = \"abc\";", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(c >= 'A' && c <= 'Z')\n            sum += c - 'A' + 1;\n  \
    \  }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\n\
    This doesn't work. Try `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. It returns 153\n<|/ c |>\n<| c |>\nIt returns 153 on my machine.\
    \ Are you sure you tested it correctly? It returns 153 when I run it on my machine.\n\
    <|/ c |>\n<| c |>\nYes, I tested it myself. I posted my code in the answer. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and I got 153 too. Are you\
    \ sure you tested it correctly? I posted my code in the answer. Try it yourself.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\n`isUpper` doesn't exist in C++.\n<|/ c |>\n<| c |>\n`isUpper` was\
    \ added in C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n<|/ c\
    \ |>\n<| c |>\n`isUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| c |>\n`isUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| c |>\n`isUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `toUpper` returns a `char`, not a `bool`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed it now.\n<|/ c |>\n\
    <| a tags=c#,string |>\n<code>\nstring str = \"Hello World\";", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\n`isUpper` isn't a function in C++.\n<|/ c |>\n<| c |>\n: It is.\
    \ It's a macro.\n<|/ c |>\n<| c |>\n: It is, but it's not a function. It is a\
    \ macro.\n<|/ c |>\n<| c |>\n: It is a macro. `isUpper` is defined in the `<ctype.h>`\
    \ header file.\n<|/ c |>\n<| c |>\n: Yes, it is. `isUpper` is a macro.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThanks so much for your help! I really appreciate it! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nI tried to run this program and it gave me\
    \ this error: \"error: expected primary-expression before ')' token\"\n<|/ c |>\n\
    <| c |>\nI fixed the error, but now it says \"error: expected primary-expression\
    \ before ')' token\"\n<|/ c |>\n<| c |>\nI fixed the error, but now it says \"\
    error: expected primary-expression before ')' token\"\n<|/ c |>\n<| c |>\nI fixed\
    \ the error, but now it says \"error: expected primary-expression before ')' token\"\
    \n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n \
    \       if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii |>\n<| c |>\nThis code\
    \ doesn't work for all cases. For example, it doesn't work for \"aAaaaXa\".\n\
    <|/ c |>\n<| c |>\nYes, I noticed that and fixed it.  Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n\
    \            sum += c - 'A' + 10;\n        else\n            sum += c;\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nI like\
    \ this solution, but I believe it would be more efficient to convert the string\
    \ to an array of chars and then use LINQ to find the sum of the upper case characters.\n\
    <|/ c |>\n<| c |>\n: Yes, that's a good idea. I was trying to keep it simple and\
    \ avoid LINQ, but I guess that's not as simple as I thought.\n<|/ c |>\n<| c |>\n\
    I like this solution, however I believe it would be more efficient to convert\
    \ the string to an array of chars and then use LINQ to find the sum of the upper\
    \ case characters.\n<|/ c |>\n<| c |>\n: Yes, that's a good idea. I was trying\
    \ to keep it simple and avoid LINQ, but I guess that's not as simple as I thought.\n\
    <|/ c |>\n<| c |>\nI like this solution, however I believe it would be more efficient\
    \ to convert the string to an array of chars and then use LINQ to find the sum\
    \ of the upper case characters.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nstring s\
    \ = \"Hello World\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,char,ascii |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it! I did some research and found that `isUpper` was introduced\
    \ in C++11. I'm currently using C++11 and I didn't know that `isUpper` was introduced\
    \ since I haven't used it before. I'll look into it more and see if I can use\
    \ it. Thanks again!\n<|/ c |>\n<| c |>\n`isUpper` is indeed C++11. `isupper` was\
    \ introduced in C++98.\n<|/ c |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it! I did some research and found that `isUpper` was introduced in C++11. I'm\
    \ currently using C++11 and I didn't know that `isUpper` was introduced since\
    \ I haven't used it before. I'll look into it more and see if I can use it. Thanks\
    \ again!\n<|/ c |>\n<| c |>\n`isUpper` was introduced in C++98. `isupper` was\
    \ introduced in C++98.\n<|/ c |>\n<| c |>\n`isupper` was introduced in C++98.\
    \ `isupper` was introduced in C++98.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n\
    <code>\nstring input = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n        {\n            sum\
    \ += c - 'A' + 1;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int digitSum(String s) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (c >= '0' && c <= '9') {\n            sum += c - '0';\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,int |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to sum up only the uppercase letters.\n\
    <|/ c |>\n<| c |>\nThe question was edited after I posted my answer. Now it does\
    \ answer the question.\n<|/ c |>\n<| c |>\nI see your point. My answer was based\
    \ on the original question. I'll leave it here anyway, since it might help someone\
    \ else who stumbles upon this question.\n<|/ c |>\n<| a tags=string,c#,int |>\n\
    <code>\npublic static int digitSum(String s) {\n    int sum = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c\
    \ >= '0' && c <= '9') {\n            sum += c - '0';\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ int digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n\
    \            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c#,int |>\n<| a tags=string,c#,int |>\n<code>\npublic static\
    \ int digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n\
    \            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,c#,int |>\n<code>\npublic static int digitSum(String\
    \ s) {\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n       \
    \ char c = s.charAt(i);\n        if (c >= '0' && c <= '", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n        \
    \    sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=c#,string,algorithm |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead\
    \ of `153L`.\n<|/ c |>\n<| c |>\nI fixed the return type to `long`. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n       \
    \ char c = s.charAt(i);\n        if (isUpper(c)) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string |>\n<|\
    \ a dscore=0 |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n \
    \   for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n  \
    \      if (isUpper(c)) {\n            sum += Character.getNumericValue(c);\n \
    \       }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string |>\n<| c\
    \ |>\nPlease add some explanation to your answer. Code-only answers are discouraged\
    \ on Stack Overflow.\n<|/ c |>\n<| a tags=java,string |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n       \
    \ char c = s.charAt(i);\n        if (isUpper(c)) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease\
    \ add some explanation to your answer. Code-only answers are discouraged on Stack\
    \ Overflow.\n<|/ c |>\n<| a |>\n<code>\npublic int digitSum(String s) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (isUpper(c)) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer. Code-only answers are\
    \ discouraged on Stack Overflow.\n<|/ c |>\n<| a tags=java,string |>\n<code>\n\
    public int digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = ", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(isUpper(c))\n            sum += toAscii(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a |>\n<| c |>\n`isUpper` doesn't exist in C#.\n<|/ c |>\n\
    <| c |>\n`isUpper` does exist in C#, it's just not in the `System.Globalization`\
    \ namespace. `char.IsUpper` does.\n<|/ c |>\n<| c |>\n`isUpper` exists in C#,\
    \ it's just not in the `System.Globalization` namespace. `char.IsUpper` does.\n\
    <|/ c |>\n<| c |>\n`isUpper` exists in C#, it's just not in the `System.Globalization`\
    \ namespace. `char.IsUpper` does.\n<|/ c |>\n<| c |>\n`isUpper` exists in C#,\
    \ it's just not in the `System.Globalization` namespace. `char.IsUpper` does.\n\
    <|/ c |>\n<| a tags=c#,string,ascii |>\n<code>\nstring input = \"hello\";", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\n`isUpper` doesn't exist in C++.\n<|/ c |>\n<| c |>\n: It does in\
    \ C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n<|/ c |>\n<| c\
    \ |>\n: It does in C++14. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| c |>\n: It does in C++17. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| c |>\n: It does in C++20. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\nstring s = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like the idea\
    \ of using toUpper() but this doesn't work for \"aAaaaXa\" which should return\
    \ 153\n<|/ c |>\n<| c |>\nI missed that case. Updated my answer.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>", "{\n    long sum = 0;\n    foreach(char c in s)\n  \
    \  {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n`isUpper` isn't a\
    \ standard function in C++.\n<|/ c |>\n<| c |>\n`isUpper` is in C++11\n<|/ c |>\n\
    <| c |>\n`isUpper` is in C++11\n<|/ c |>\n<| c |>\n`isUpper` is in C++11\n<|/\
    \ c |>\n<| c |>\n`isUpper` is in C++11\n<|/ c |>\n<| a tags=c++,string,ascii |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n  \
    \          sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead\
    \ of `131`.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that\
    \ out. I've updated the answer.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks\
    \ for pointing that out. I've updated the answer.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. Thanks for pointing that out. I've updated the answer.\n<|/ c |>\n\
    <| c |>\nI see what you mean. Thanks for pointing that out. I've updated the answer.\n\
    <|/ c |>\n<| a tags=c#,string,algorithm |>\n<code>\npublic static int digitSum(String\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char\
    \ c = s.charAt(i);\n        if(Character.isDigit(c)) {\n            sum += c -\
    \ '0';\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `131`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I've updated\
    \ the answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static int digitSum(String\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char\
    \ c = s.charAt(i);\n        if(Character.isDigit(c)) {\n            sum += c -\
    \ '0';\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| a tags=c#,string,algorithm |>\n<code>\npublic static int digitSum(String\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char\
    \ c = s.charAt(i);\n        if(Character.isDigit(c)) {\n            sum += c -\
    \ '0';\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=c#,string,algorithm |>\n<code>\npublic static int digitSum(String s) {\n\
    \    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c =\
    \ s.charAt(i);\n", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c#,.net |>\n<| c |>\nI believe that `isUpper` only\
    \ checks one character at a time, so it won't work for `digitSum(\"aAaaaXa\")`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work because `isUpper` checks the entire string\
    \ at once, whereas `digitSum` only checks one character at a time. `digitSum(\"\
    aAaaaXa\")` returns `153` instead of `153`.\n<|/ c |>\n<| c |>\nI see. But it\
    \ still doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `153`.\n\
    <|/ c |>\n<| c |>\nI added a solution that works with `digitSum(\"aAaaaXa\")`.\n\
    <|/ c |>\n<| c |>\nI see that now. Thanks for your help.\n<|/ c |>\n<| a tags=string,c#,.net\
    \ |>\n<code>\nstring str = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n\
    <| c |>\nThis doesn't work. Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic\
    \ static int digitSum(string s)\n{\n    int sum = 0;\n    foreach (char c in s)\n\
    \    {\n        if (c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does work. Try it with `digitSum(\"\
    aAaaaXa\")`\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n<code>", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n\
    \        {\n            sum += c - 'A' + 10;\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\n`if(c >= 'A' && c <= 'Z')`\
    \ can be simplified to `if(c >= 'A')`\n<|/ c |>\n<| c |>\nYes, but that would\
    \ not work if you wanted to sum all uppercase letters.\n<|/ c |>\n<| c |>\nYes,\
    \ but that would not work if you wanted to sum all uppercase letters.\n<|/ c |>\n\
    <| c |>\nYes, but that would not work if you wanted to sum all uppercase letters.\n\
    <|/ c |>\n<| c |>\nYes, but that would not work if you wanted to sum all uppercase\
    \ letters.\n<|/ c |>\n<| a |>\n<code>\npublic int SumUppercaseLetters(string str)\n\
    {\n    int sum = 0;\n    foreach (char c in str)\n    {\n        if (char.IsUpper(c))\n\
    \        {\n            sum += (int)c - 64;\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c#,string,algorithm dscore=5 |>\n<| c |>\nThis doesn't\
    \ work if you wanted to sum all uppercase letters.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you wanted to sum all uppercase letters.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you wanted to sum all uppercase letters.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you wanted to sum all uppercase letters.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you wanted to sum all uppercase letters.\n<|/ c |>\n<| a |>\n<code>\n\
    public int SumUppercaseLetters(string str)\n{\n    int sum = 0;\n    foreach (char\
    \ c in str)\n    {\n        if (char.IsUpper(c))\n        {\n            sum +=\
    \ (int)c - 64;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=5\
    \ tags=c#,string,algorithm |>\n<| c |>\nThis doesn't work if you wanted to sum\
    \ all uppercase letters.\n<|/ c |>\n<| c |>\nThis doesn't work if you wanted to\
    \ sum all uppercase letters.\n<|/ c ", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += c - 'A'\
    \ + 10;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n\
    <| c |>\nThis doesn't work for the case `digitSum(\"aAaaaXa\")` which should return\
    \ `153` but returns `131`.\n<|/ c |>\n<| c |>\nI believe that `digitSum(\"aAaaaXa\"\
    )` should return `153` but returns `131` because `'A'` is `65` and `'X'` is `90`\
    \ so `65 - 65 + 10 + 90 - 90 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 +\
    \ 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10\
    \ + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + ", "{\n \
    \   long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n \
    \           sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii,c\
    \ |>\n<| c |>\nThis code does not compile. `isUpper` does not exist in C. `toUpper`\
    \ does not exist in C. `foreach` does not exist in C. `digitSum` does not exist\
    \ in C. `string` does not exist in C. `long` does not exist in C. `c` does not\
    \ exist in C. `sum` does not exist in C. `c` does not exist in C. `c` does not\
    \ exist in C. `c` does not exist in C. `c` does not exist in C. `c` does not exist\
    \ in C. `c` does not exist in C. `c` does not exist in C. `c` does not exist in\
    \ C. `c` does not exist in C. `c` does not exist in C. `c` does not exist in C.\
    \ `c` does not exist in C. `c` does not exist in C. `c` does not exist in C. `c`\
    \ does not exist in C. `c` does not exist in C. `c` does not exist in C. `c` does\
    \ not exist in C. `c` does not exist in C. `c` does not exist in C. `c` does not\
    \ exist in C. `c` does not exist in C. `c` does not exist in C. `c` does not exist\
    \ in C. `c` does not exist in C. `c` does not exist in C. `c` does not exist in\
    \ C. `c` does not exist in C. `c` does not exist in C. `c` does not exist in C.\
    \ `c` does not exist in C. `c` does not exist in C. `c` does not exist in C. `c`\
    \ does not exist in C. `c` does not exist in C. `c` does not exist in C. `c` does\
    \ not exist in C. `c` does not exist in C. `c` does not exist in C. `c` does not\
    \ exist in C. `c` does not exist in C. `c` does not exist in C. `c` does not exist\
    \ in C. `c` does not exist in C. `c` does not exist in C. `c` does not exist in\
    \ C. `c` does not exist in C. `c` does not exist in C. `c` does not exist in C.\
    \ `c` does not exist in C. `c` does not exist in C. `c` does not exist in C. `c`\
    \ does not exist in C. `c` does not exist in C. `c` does not exist in C. `c` does\
    \ not exist in C. ", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your answer. I tried it\
    \ and it works perfectly. However I still don't understand why my code doesn't\
    \ work. Could you please explain it to me?\n<|/ c |>\n<| c |>\nThe `foreach` loop\
    \ iterates over the characters in the string. `isUpper` checks if the character\
    \ is uppercase or not. `toUpper` converts the character to uppercase. `sum` keeps\
    \ track of the sum of the uppercase characters. `sum` gets incremented if the\
    \ character is uppercase.\n<|/ c |>\n<| c |>\nThank you very much for your explanation.\
    \ Now I understand why my code didn't work. Thank you very much for your help!\n\
    <|/ c |>\n<| a tags=c#,string,char,uppercase,sum |>\n<code>\nstring input = \"\
    helloE\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii\
    \ |>\n<| a tags=c#,string,ascii |>\n<code>\nstring s = \"hello\";", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,char\
    \ |>\n<| c |>\n`char.IsUpper` doesn't exist in C#.\n<|/ c |>\n<| c |>\n`char.IsUpper`\
    \ was added in .NET 4.5\n<|/ c |>\n<| c |>\nThe `char.IsUpper` method was added\
    \ in .NET 4.5, but `char.ToUpper` was added in .NET 4.0.\n<|/ c |>\n<| c |>\n\
    `char.IsUpper` was added in .NET 4.5, but `char.ToUpper` was added in .NET 4.0.\n\
    <|/ c |>\n<| a |>\n<code>\nstring str = \"Hello\";", "{\n    long sum = 0;\n \
    \   foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n        {\n\
    \            sum += (c - 'A');\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I understand your solution,\
    \ but I wanted to know if there is a way to do it without using loops.\n<|/ c\
    \ |>\n<| c |>\nI updated my answer with a solution that doesn't use loops.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer! I understand your solution, but I wanted\
    \ to know if there is a way to do it without using loops.\n<|/ c |>\n<| c |>\n\
    I updated my answer with a solution that doesn't use loops.\n<|/ c |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\nstring input = \"helloE\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. I'm new to programming and I didn't know about isUpper and toUpper functions.\
    \ I appreciate your help.\n<|/ c |>\n<| c |>\nNo problem. Glad I could help. If\
    \ you found this answer helpful, please consider marking it as accepted by clicking\
    \ the check mark next to it. This will help future visitors who may have a similar\
    \ question. Thanks!\n<|/ c |>\n<| c |>\nI did but I'm new here and I don't have\
    \ enough reputation to vote up. Sorry. Thanks again.\n<|/ c |>\n<| a |>\n<code>\n\
    function digitSum(s) {\n    var sum = 0;\n    for(var i=0; i<s.length; i++){\n\
    \        if(s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90){\n            sum\
    \ += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ tags=string,c++,ascii |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(Character.isDigit(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=2 tags=string,java,char,int |>\n\
    <| a tags=string,java,char,int |>\n<code>\npublic int digitSum(String s) {\n \
    \   int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(Character.isDigit(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,java,char,int\
    \ |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(Character.isDigit(s.charAt(i))) {\n\
    \            sum += Character.getNumericValue(s.charAt(i));\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic\
    \ int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isDigit(s.charAt(i))) {\n            sum += Character.getNumericValue(s.charAt(i));\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,java,char,int\
    \ |>\n<| a tags=string,java,char,int |>\n<code>\npublic int digitSum(String s)\
    \ {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(Character.isDigit(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isDigit(s.charAt(i))) {\n            sum += Character.getNumericValue(s.charAt(i));\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,java,char,int\
    \ |>\n<| a dscore=1 |>\n<code>\npublic int digitSum(String ", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=c#,string,ascii |>\n<code>\nstring str = \"Hello\";", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n  \
    \          sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii\
    \ |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <=\
    \ 'Z')\n        {\n            sum += c - 'A' + 10;\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"\
    aAaaaXa\")`\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"aAaaaXa\")`\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\npublic static int digitSum(string s)\n{\n  \
    \  int sum = 0;\n    foreach (char c in s)\n    {\n        if (c >= 'A' && c <=\
    \ 'Z')\n        {\n            sum += c - 'A' + 10;\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| a dscore=2 |>\n<code>\n\
    public static int digitSum(string s)\n{\n    int sum = 0;\n    foreach (char c\
    \ in s)\n    {\n        if (c >= 'A' && c <= 'Z')\n        {\n            sum\
    \ += c - 'A' + 10;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| a tags=c#,string,algorithm |>\n<code>\npublic static int digitSum(string\
    \ s)\n{\n    int sum = 0;\n    foreach (char c in s)\n    {\n        if (c >=\
    \ 'A' && c <= 'Z')\n        {\n            sum += c - 'A' + 10;\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    public static int digitSum(string s)\n{\n    int sum = 0;\n    foreach (char c\
    \ in s)\n    {\n        if (c >= 'A' && c <= 'Z')\n        {\n            sum\
    \ += c - 'A' + 10;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| a tags=c#,string,algorithm |>\n<code>\npublic static int digitSum", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nI like your solution, however I believe that `std::accumulate`\
    \ would be more appropriate than `std::for_each`.\n<|/ c |>\n<| c |>\nYes, I agree\
    \ with you. I just wanted to show how it can be done with for_each. Thanks for\
    \ your comment.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        sum += std.math.max(std.char.digitValue(c));\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis\
    \ doesn't work. `std.char.digitValue` returns `int` not `long`.\n<|/ c |>\n<|\
    \ c |>\n: Yes, I know. That's why I wrote \"*...the sum of the upper characters\
    \ only'*\". That is what OP asked for. I'll edit my answer to clarify that.\n\
    <|/ c |>\n<| c |>\n: I added a solution that uses `std.char.digitValue`.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that uses `std.char.digitValue`.\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that uses `std.char.digitValue`.\n<|/ c |>\n\
    <| a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c#,ascii |>\n<| c |>\n`toUpper` doesn't exist in\
    \ C#.\n<|/ c |>\n<| c |>\n`toUpper` does exist in C#, it's just `ToUpper`.\n<|/\
    \ c |>\n<| c |>\n`toUpper` exists in C#, it's just `ToUpper`.\n<|/ c |>\n<| c\
    \ |>\n`toUpper` exists in C#, it's just `ToUpper`.\n<|/ c |>\n<| c |>\n`toUpper`\
    \ exists in C#, it's just `ToUpper`.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nstring\
    \ input = \"hello\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n        {\n            sum += toUpper(c);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `toUpper` returns a `char`, not a `long`.\n<|/ c |>\n<| c |>\nYeah, I\
    \ didn't test the code. Fixed now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n            sum +=\
    \ Character.getNumericValue(s.charAt(i));\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,string,ascii |>\n<| a tags=java,string,ascii |>\n\
    <code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n \
    \           sum += Character.getNumericValue(s.charAt(i));\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,string,ascii |>\n\
    <code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n \
    \           sum += Character.getNumericValue(s.charAt(i));\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,string,ascii |>\n\
    <code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n \
    \           sum += Character.getNumericValue(s.charAt(i));\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,string,ascii |>\n\
    <code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n \
    \           sum += Character.getNumericValue(s.charAt(i));\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,string,ascii |>\n\
    <code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(Character.is", "{\n    long sum = 0;\n  \
    \  foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n\
    This doesn't work. `toUpper` returns a `char` not a `long`.\n<|/ c |>\n<| c |>\n\
    I didn't know that `toUpper` returns a `char`. Thanks for pointing that out.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `toUpper` returns a `char`, not a `char[]`.\n\
    <|/ c |>\n<| c |>\nI fixed the typo `toUpper` -> `toUpperChar`\n<|/ c |>\n<| c\
    \ |>\n`toUpperChar` doesn't exist in C#.\n<|/ c |>\n<| c |>\nI fixed the typo\
    \ `toUpperChar` -> `toUpper`\n<|/ c |>\n<| c |>\n`toUpper` doesn't exist in C#.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like your solution, however I believe it can be simplified a bit. `sum`\
    \ can be initialized to `0L` instead of `0`, then `sum += toUpper(c)` can be replaced\
    \ with `sum += toUpper(toLower(c))`. Also, `toUpper` can be replaced with `toUpper(toLower(c))`.\n\
    <|/ c |>\n<| c |>\nI agree, that is a lot simpler. Thanks for the suggestion.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long sum = 0;\n    foreach(char c\
    \ in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c#,string,char,sum |>\n<| a dscore=1\
    \ |>\n<code>\nstring input = \"hello\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'a' && c <= 'z')\n            sum += c - 'a'\
    \ + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii |>\n<|\
    \ c |>\nThank you very much for your answer. I tried the code and it works. But\
    \ I still don't understand why my code doesn't work. Can you please explain to\
    \ me why my code doesn't work?\n<|/ c |>\n<| c |>\nYour code doesn't work because\
    \ you were trying to convert a char to an int. `'a'` is an int, and `'z'` is an\
    \ int. `'a'` has a value of 97 and `'z'` has a value of 122. You were trying to\
    \ subtract 97 from 122, which doesn't make sense. Instead, you should subtract\
    \ `'a'` from each character in the string. `'a'` has a value of 97 and `'z'` has\
    \ a value of 122. `'a'` has a value of 97 and `'z'` has a value of 122. `'a'`\
    \ has a value of 97 and `'z'` has a value of 122. `'a'` has a value of 97 and\
    \ `'z'` has a value of 122. `'a'` has a value of 97 and `'z'` has a value of 122.\
    \ `'a'` has a value of 97 and `'z'` has a value of 122. `'a'` has a value of 97\
    \ and `'z'` has a value of 122. `'a'` has a value of 97 and `'z'` has a value\
    \ of 122. `'a'` has a value of 97 and `'z'` has a value of 122. `'a'` has a value\
    \ of 97 and `'z'` has a value of 122. `'a'` has a value of 97 and `'z'` has a\
    \ value of 122. `'a'` has a value of 97 and `'z'` has a value of 122. `'a'` has\
    \ a value of 97 and `'z'` has a value of 122. `'a'` has a value of 97 and `'z'`\
    \ has a value of 122. `'a'` has a value of 97 and `'z'` has a value of 122. `'a'`\
    \ has a value of 97 and `'z'` has a value of 122. `'a'` has a value of 97 and\
    \ `'z'` has a value of 122. `'a'` has a value of 97 and `'z'` has a value of 122.\
    \ `'a'` has a value of 97 and `'z'` has a value of 122. `'", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii\
    \ |>\n<| c |>\nThis answer does not meet the requirements of the question. `digitSum(\"\
    aAaaaXa\")` returns 153 instead of 154.\n<|/ c |>\n<| c |>\nI missed that requirement.\
    \ Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n<| a tags=c#,string,ascii\
    \ |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `toUpper` returns a\
    \ `char`, not a `char[]`.\n<|/ c |>\n<| c |>\nIt does work. `toUpper` returns\
    \ a `char`. `toUpper` returns a `char[]` because `char` is an alias for `char[]`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. `toUpper` returns\
    \ a `char`, not an `char[]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. `toUpper` returns a `char`, not an `char[]`.\n<|/ c |>\n<| c |>\nI\
    \ tested it before posting. `toUpper` returns a `char`, not an `char[]`.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nstring s = \"hello\";", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n        {\n\
    \            sum += c - 'A' + 10;\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String s) {\n\
    \    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c =\
    \ s.charAt(i);\n        if(c >= '0' && c <= '9') {\n            sum += c - '0';\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| a tags=c#,string,algorithm |>\n<code>\npublic int digitSum(String s)\
    \ {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char\
    \ c = s.charAt(i);\n        if(c >= '0' && c <= '9') {\n            sum += c -\
    \ '0';\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=c#,string,algorithm |>\n<code>\npublic int digitSum(String s) {\n    int\
    \ sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if(c >= '0' && c <= '9') {\n            sum += c - '0';\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic\
    \ int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if(c >= '0' && c <= '9') {\n\
    \            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 tags=c#,string,algorithm |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if(c >=\
    \ '0' && c <= '9') {\n            sum += c - '0';\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,algorithm |>\n<code>\n\
    public int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if(", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to know how to use `isUpper` and `toUpper` functions.\
    \ Your answer doesn't explain how to use them.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question asking for a clarification.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question asking for a clarification.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question asking for a clarification.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question asking for a clarification.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `toUpper` returns a `char`, not a `char[]`.\n\
    <|/ c |>\n<| c |>\nOops, I missed that `toUpper` returns a `char`. Fixed.\n<|/\
    \ c |>\n<| a |>\n<code>\npublic static int digitSum(String s) {\n    int sum =\
    \ 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) >= '0'\
    \ && s.charAt(i) <= '9') {\n            sum += s.charAt(i);\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 tags=java,string,ascii |>\n<| a tags=java,string,ascii\
    \ |>\n<code>\npublic static int digitSum(String s) {\n    int sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(s.charAt(i) >= '0' && s.charAt(i)\
    \ <= '9') {\n            sum += s.charAt(i);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n           \
    \ sum += s.charAt(i);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii\
    \ |>\n<| a tags=java,string,ascii |>\n<code>\npublic static int digitSum(String\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i)\
    \ >= '0' && s.charAt(i) <= '9') {\n            sum += s.charAt(i);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public static int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i\
    \ < s.length(); i++) {\n        if(s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n\
    \            sum += s.charAt(i);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,string,ascii |>\n<| a tags=java,string,ascii |>\n<code>\npublic\
    \ static int digitSum(String s) {\n", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nI like\
    \ your solution. Thanks for sharing.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring input = \"hello\"\
    ;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThis answer would be better if you explained what you did and why.\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii\
    \ |>\n<| c |>\n`foreach` isn't a function in C#.\n<|/ c |>\n<| c |>\n`foreach`\
    \ isn't a function in C#.\n<|/ c |>\n<| c |>\n`foreach` isn't a function in C#.\n\
    <|/ c |>\n<| c |>\n`foreach` isn't a function in C#.\n<|/ c |>\n<| c |>\n`foreach`\
    \ isn't a function in C#.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring input =\
    \ \"hello\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n      \
    \  if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nThe question states\
    \ that \"the string will contain only uppercase letters\". Your code will fail\
    \ for `\"A\"`.\n<|/ c |>\n<| c |>\nYes, I know. My code will fail for `\"A\"`\
    \ too. That's why I wrote \"the string will contain only uppercase letters\".\
    \ My code will fail for `\"A\"` too. That's why I wrote \"the string will contain\
    \ only uppercase letters\". My code will fail for `\"A\"` too. That's why I wrote\
    \ \"the string will contain only uppercase letters\". My code will fail for `\"\
    A\"` too. That's why I wrote \"the string will contain only uppercase letters\"\
    . My code will fail for `\"A\"` too. That's why I wrote \"the string will contain\
    \ only uppercase letters\". My code will fail for `\"A\"` too. That's why I wrote\
    \ \"the string will contain only uppercase letters\". My code will fail for `\"\
    A\"` too. That's why I wrote \"the string will contain only uppercase letters\"\
    . My code will fail for `\"A\"` too. That's why I wrote \"the string will contain\
    \ only uppercase letters\". My code will fail for `\"A\"` too. That's why I wrote\
    \ \"the string will contain only uppercase letters\". My code will fail for `\"\
    A\"` too. That's why I wrote \"the string will contain only uppercase letters\"\
    . My code will fail for `\"A\"` too. That's why I wrote \"the string will contain\
    \ only uppercase letters\". My code will fail for `\"A\"` too. That's why I wrote\
    \ \"the string will contain only uppercase letters\". My code will fail for `\"\
    A\"` too. That's why I wrote \"the string will contain only uppercase letters\"\
    . My code will fail for `\"A\"` too. That's why I wrote \"the string will contain\
    \ only uppercase letters\". My code will fail for `\"A\"` too. That's why I wrote\
    \ \"the string will contain only uppercase letters\". My code will fail for `\"\
    A\"` too. That's why I wrote \"the string will ", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThis\
    \ doesn't work if the string contains non-ASCII characters, such as `\xE9`.\n\
    <|/ c |>\n<| c |>\n: I agree, but I thought the OP was only concerned with ASCII\
    \ characters. I added a note about non-ASCII characters.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I thought the OP was only concerned with ASCII characters.\
    \ I added a note about non-ASCII characters.\n<|/ c |>\n<| c |>\n: I agree, but\
    \ I thought the OP was only concerned with ASCII characters. I added a note about\
    \ non-ASCII characters.\n<|/ c |>\n<| c |>\n: I agree, but I thought the OP was\
    \ only concerned with ASCII characters. I added a note about non-ASCII characters.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that uses only standard libraries.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that uses only standard libraries.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I was looking for a solution that uses only standard libraries.\
    \ I edited my question to reflect this.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses only standard libraries.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I was looking for a solution that uses only standard libraries. I edited my\
    \ question to reflect this.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n\
    `toupper` doesn't exist in C++.\n<|/ c |>\n<| c |>\n`toupper` exists in C++11\
    \ and later.\n<|/ c |>\n<| c |>\n`toupper` exists in C++11 and later. `std::toupper`\
    \ exists in C++11 and later.\n<|/ c |>\n<| c |>\n`toupper` exists in C++11 and\
    \ later. `std::toupper` exists in C++11 and later.\n<|/ c |>\n<| c |>\n`toupper`\
    \ exists in C++11 and later. `std::toupper` exists in C++11 and later.\n<|/ c\
    \ |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nThis\
    \ doesn't work. Try it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nYeah,\
    \ I realized that after I posted it. I edited my answer to fix it.\n<|/ c |>\n\
    <| a tags=c#,string,algorithm |>\n<code>\nstring s = \"aAaaaXa\";", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii\
    \ |>\n<| a tags=c#,string,ascii |>\n<code>\npublic static long SumUpper(string\
    \ input)\n{\n    long sum = 0;\n    foreach (char c in input)\n    {\n       \
    \ if (isUpper(c))\n            sum += (int)c;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| c |>\nThis code will work fine for ASCII\
    \ characters. But for other characters, it will fail.\n<|/ c |>\n<| a tags=c#,string,ascii\
    \ |>\n<code>\npublic static long SumUpper(string input)\n{\n    long sum = 0;\n\
    \    foreach (char c in input)\n    {\n        if (isUpper(c))\n            sum\
    \ += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,ascii\
    \ |>\n<code>\npublic static long SumUpper(string input)\n{\n    long sum = 0;\n\
    \    foreach (char c in input)\n    {\n        if (isUpper(c))\n            sum\
    \ += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static long SumUpper(string input)\n\
    {\n    long sum = 0;\n    foreach (char c in input)\n    {\n        if (isUpper(c))\n\
    \            sum += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static long SumUpper(string input)\n{\n\
    \    long sum = 0;\n    foreach (char c in input)\n    {\n        if (isUpper(c))\n\
    \            sum += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static long SumUpper(string input)\n{\n\
    \    long sum = 0;\n    foreach (char c in input)\n    {\n        if (isUpper(c))\n\
    \            sum += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any library functions. I should use only string and char functions.\n\
    <|/ c |>\n<| c |>\nI added a solution that uses only string and char functions.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ but I am getting a compilation error \"The method isUpper(char) is undefined\
    \ for the type char\". Any idea why?\n<|/ c |>\n<| c |>\nI added a solution that\
    \ uses only string and char functions. I hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your solution but I am getting a compilation error\
    \ \"The method isUpper(char) is undefined for the type char\". Any idea why?\n\
    <|/ c |>\n<| a tags=c#,string |>\n<code>\nstring input = \"Hello\";\nstring output\
    \ = \"\";\nforeach (char c in input)\n{\n    if (char.IsUpper(c))\n    {\n   \
    \     output += c;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. I am not allowed to use any library functions. I should use only\
    \ string and char functions.\n<|/ c |>\n<| c |>\nI added a solution that uses\
    \ only string and char functions. I hope it helps.\n<|/ c |>\n<| a tags=c#,string\
    \ |>\n<code>\nstring input = \"Hello\";\nstring output = \"\";\nforeach (char\
    \ c in input)\n{\n    if (char.IsUpper(c))\n    {\n        output += c;\n    }\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any library functions. I should use only string and char functions.\n\
    <|/ c |>\n<| a tags=c#,string |>\n<code>\nstring input = \"Hello\";\nstring output\
    \ = \"\";\nforeach (char c in input)\n{\n    if (char.IsUpper(c))\n    {\n   \
    \     output += c;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. I am not allowed to use any library functions. I should use only ",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,algorithm |>\n<code>\nstring s = \"aAaaaXa\";", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += c - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI guess you meant `if(c >= 'A' && c <= 'Z')` instead\
    \ of `if(c >= 'a' && c <= 'z')`\n<|/ c |>\n<| c |>\nYes, I did mean that. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n \
    \           sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you so much for helping me out! I really appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem! If this answer helped you, please consider\
    \ accepting it by clicking the check mark next to it. This will help future readers\
    \ and will also earn you a small amount of reputation points for following the\
    \ proper procedure.\n<|/ c |>\n<| c |>\nI did but since I'm new it says I have\
    \ to wait 2 minutes before I can accept it :)\n<|/ c |>\n<| c |>\nNo worries,\
    \ glad I could help!\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\n`toUpper`\
    \ doesn't exist in C#.\n<|/ c |>\n<| c |>\n`toUpper` does exist in C#.\n<|/ c\
    \ |>\n<| c |>\n`toUpper` does not exist in C#.\n<|/ c |>\n<| c |>\n`toUpper` does\
    \ exist in C#.\n<|/ c |>\n<| c |>\n`toUpper` does exist in C#.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static long digitSum(string s)\n{\n    long sum\
    \ = 0;\n    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n     \
    \       sum += char.ToUpper(c) - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c#,string,algorithm |>\n<| c |>\n`char.IsUpper` does not exist in C#.\n\
    <|/ c |>\n<| c |>\n`char.IsUpper` does exist in C#.\n<|/ c |>\n<| c |>\n`char.ToUpper`\
    \ does exist in C#.\n<|/ c |>\n<| c |>\n`char.ToUpper` does exist in C#.\n<|/\
    \ c |>\n<| c |>\n`char.ToUpper` does exist in C#.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\npublic static long digitSum(string s)\n{\n    long sum = 0;\n    foreach\
    \ (char c in s)\n    {\n        if (char.IsUpper(c))\n            sum += char.ToUpper(c)\
    \ - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\n`char.IsUpper` does not exist in C#.\n<|/ c |>\n<| c |>\n`char.IsUpper`\
    \ does exist in C#.\n<|/ c |>\n<| c |>\n`char.ToUpper` does exist in C#.\n<|/\
    \ c |>\n<| c |>\n`char.ToUpper` does exist in C#.\n<|/ c |>\n<| a |>\n<code>\n\
    public static long digitSum(", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThe OP specifically asked for a solution that does not use any\
    \ libraries.\n<|/ c |>\n<| c |>\nI didn't say it wasn't possible, I said it wasn't\
    \ a good idea. My answer was meant to be a guide to the OP to solve the problem\
    \ without using any libraries.\n<|/ c |>\n<| c |>\nI agree with you, but I believe\
    \ that your answer does not address the OP's question at all. Your answer does\
    \ not address the problem of not using any libraries. Your answer does not address\
    \ the problem of not using any libraries. Your answer does not address the problem\
    \ of not using any libraries. Your answer does not address the problem of not\
    \ using any libraries. Your answer does not address the problem of not using any\
    \ libraries. Your answer does not address the problem of not using any libraries.\
    \ Your answer does not address the problem of not using any libraries. Your answer\
    \ does not address the problem of not using any libraries. Your answer does not\
    \ address the problem of not using any libraries. Your answer does not address\
    \ the problem of not using any libraries. Your answer does not address the problem\
    \ of not using any libraries. Your answer does not address the problem of not\
    \ using any libraries. Your answer does not address the problem of not using any\
    \ libraries. Your answer does not address the problem of not using any libraries.\
    \ Your answer does not address the problem of not using any libraries. Your answer\
    \ does not address the problem of not using any libraries. Your answer does not\
    \ address the problem of not using any libraries. Your answer does not address\
    \ the problem of not using any libraries. Your answer does not address the problem\
    \ of not using any libraries. Your answer does not address the problem of not\
    \ using any libraries. Your answer does not address the problem of not using any\
    \ libraries. Your answer does not address the problem of not using any libraries.\
    \ Your answer does not address the problem of not using any libraries. Your answer\
    \ does not address the problem of not using any libraries. Your answer does not\
    \ address the problem of not using any libraries. Your answer does not address\
    \ the problem of not using any libraries. Your answer does not address the problem\
    \ of not using any libraries. Your answer does not address the problem of not\
    \ using any libraries. Your answer does not address the problem of not using any\
    \ libraries. Your answer does not address the problem of not using any libraries.\
    \ Your answer does not address the problem of not using any librarie", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <=\
    \ 'Z')\n            sum += c - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c#,string,algorithm |>\n<| c |>\nThis doesn't work. Try it with `\"\
    aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"aAaaaXa\"`.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `\"aAaaaXa\"`.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n<code>\n\
    string s = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char c in s)\n  \
    \  {\n        if(c >= 'A' && c <= 'Z')\n        {\n            sum += c - 'A'\
    \ + 10;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThanks\
    \ for the answer. Can you please explain what does this line do? `sum += toUpper(c);`\n\
    <|/ c |>\n<| c |>\n`toUpper` converts a character to its uppercase version. `sum`\
    \ is initialized to 0, and `sum` is then added to `toUpper(c)`, which converts\
    \ it to its uppercase version. `sum` is then returned by the function.\n<|/ c\
    \ |>\n<| c |>\n`toUpper` converts a character to its uppercase version. `sum`\
    \ is initialized to 0, and `sum` is then added to `toUpper(c)`, which converts\
    \ it to its uppercase version. `sum` is then returned by the function.\n<|/ c\
    \ |>\n<| c |>\n`toUpper` converts a character to its uppercase version. `sum`\
    \ is initialized to 0, and `sum` is then added to `toUpper(c)`, which converts\
    \ it to its uppercase version. `sum` is then returned by the function.\n<|/ c\
    \ |>\n<| c |>\n`toUpper` converts a character to its uppercase version. `sum`\
    \ is initialized to 0, and `sum` is then added to `toUpper(c)`, which converts\
    \ it to its uppercase version. `sum` is then returned by the function.\n<|/ c\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `digitSum(\"\
    aAaaaXa\")` returns `153`, but should be `153`.\n<|/ c |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain how it works. Also, `digitSum(\"\
    aAaaaXa\")` returns `153`, but should be `153`.\n<|/ c |>\n<| c |>\nI added some\
    \ explanation to the answer.\n<|/ c |>\n<| c |>\nI didn't downvote either, but\
    \ I think it's because you didn't explain how it works. Also, `digitSum(\"aAaaaXa\"\
    )` returns `153`, but should be `153`.\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer.\n<|/ c |>\n<| a |>\n<code>\nfunction digitSum(s: string): int\
    \ {\n    let sum = 0;\n    for (let i = 0; i < s.length; ++i) {\n        let c\
    \ = s[i];\n        if (c >= 'A' && c <= 'Z') {\n            sum += (c - 'A' +\
    \ 1);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153`, but should\
    \ be `153`.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because\
    \ you didn't explain how it works. Also, `digitSum(\"aAaaaXa\")` returns `153`,\
    \ but should be `153`.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(string s)\n{\n    int\
    \ sum = 0;\n    foreach (char c in s)\n    {\n        if (c >= 'A' && c <= 'Z')\n\
    \            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ tags=c#,string |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` ", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine for ASCII characters\
    \ but fails for non-ASCII characters. For example, `digitSum(\"aAaaaXa\")` returns\
    \ `153` instead of `151`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it\
    \ (I used `toUpper` instead of `toLower`). Thanks for pointing that out!\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii,char\
    \ |>\n<| c |>\nThank you for your answer! I understand your solution, but I cannot\
    \ use any library functions. I should use only basic c++ functions like `std::toUpper`\
    \ and `std::isUpper`.\n<|/ c |>\n<| c |>\nI added a solution that does not use\
    \ any library functions. I hope it helps.\n<|/ c |>\n<| c |>\nThank you for your\
    \ answer! I understand your solution, but I cannot use any library functions.\
    \ I should use only basic c++ functions like `std::toUpper` and `std::isUpper`.\n\
    <|/ c |>\n<| c |>\nI added a solution that does not use any library functions.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThank you for your answer! I understand\
    \ your solution, but I cannot use any library functions. I should use only basic\
    \ c++ functions like `std::toUpper` and `std::isUpper`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += c - 'A' + 1;\n    }\n    return sum;\n}", "{\n \
    \   long sum = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution.\
    \ Thanks for sharing it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring s = \"hello\"\
    ;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A'\
    \ && c <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nThis doesn't work. Try it\
    \ with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting.\
    \ Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. Try\
    \ it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `\"\
    aAaaaXa\"`.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n<code>\nstring input\
    \ = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Your code\
    \ works fine but i was looking for a more generic solution. Thanks anyway\n<|/\
    \ c |>\n<| a |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n \
    \   for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n  \
    \      if (c >= '0' && c <= '9') {\n            sum += c - '0';\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=0 tags=c#,string,algorithm |>\n\
    <| c |>\nThanks for your answer. Your code works fine but i was looking for a\
    \ more generic solution. Thanks anyway\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n\
    \            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c#,string,algorithm |>\n<| c |>\nThanks for your answer. Your code\
    \ works fine but i was looking for a more generic solution. Thanks anyway\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String s) {\n    int sum\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (c >= '0' && c <= '9') {\n            sum += c - '0';\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\n\
    Thanks for your answer. Your code works fine but i was looking for a more generic\
    \ solution. Thanks anyway\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n       \
    \ char c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            sum\
    \ += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine but i was looking\
    \ for a more generic ", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Your solution works but\
    \ I am not allowed to use any library functions. I only have to use std.string\
    \ and std.math\n<|/ c |>\n<| c |>\nI added a solution without std.math but with\
    \ std.string\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution works but\
    \ I am not allowed to use any library functions. I only have to use std.string\
    \ and std.math\n<|/ c |>\n<| c |>\nI added a solution without std.math but with\
    \ std.string\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution works but\
    \ I am not allowed to use any library functions. I only have to use std.string\
    \ and std.math\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c\
    \ |>\n`isUpper` doesn't exist in C++.\n<|/ c |>\n<| c |>\nIt does in C++11 and\
    \ later.\n<|/ c |>\n<| c |>\nIt does in C++14 and later.\n<|/ c |>\n<| c |>\n\
    It does in C++17 and later.\n<|/ c |>\n<| c |>\nIt does in C++20 and later.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n     \
    \   if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about a function in std.math\
    \ library, not about a function in std.typecons library.\n<|/ c |>\n<| c |>\n\
    I know, but I thought it would be helpful to show how to solve the problem using\
    \ std.math library.\n<|/ c |>\n<| c |>\nI agree with you, but I thought it would\
    \ be helpful to show how to solve the problem using std.math library.\n<|/ c |>\n\
    <| c |>\nI added a solution that uses std.math library.\n<|/ c |>\n<| a |>\n<code>\n\
    import std.stdio;\nimport std.string;\nimport std.conv;\nimport std.math;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Can you please explain how\
    \ this works?\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n\
    <|/ c |>\n<| a |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n \
    \       if (c >= '0' && c <= '9') {\n            sum += c - '0';\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii dscore=1 |>\n\
    <| a tags=java,string,ascii |>\n<code>\npublic int digitSum(String s) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (c >= '0' && c <= '9') {\n            sum += c - '0';\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic\
    \ int digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n\
    \            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,string,ascii dscore=0 |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic int digitSum(String s) {\n    int sum = 0;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c >= '0'\
    \ && c <= '9') {\n            sum += c - '0';\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,string,ascii |>\n<| a tags=java,string,ascii |>\n\
    <code>\npublic int digitSum(String s) {\n    int sum = 0;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c >= '0'\
    \ && c <= '9') {\n            sum += c - '0';\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<|", "{\n    long sum = 0;\n    foreach(char c\
    \ in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if(Character.isDigit(c)) {\n\
    \            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,string,ascii |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| c |>\nThis code works\
    \ fine for ASCII characters but fails for non-ASCII characters. For example, `digitSum(\"\
    aAaaaXa\")` returns `153` instead of `153`.\n<|/ c |>\n<| a tags=java,string,ascii\
    \ |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if(Character.isDigit(c))\
    \ {\n            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| a tags=java,string,ascii |>\n<code>\n\
    public int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if(Character.isDigit(c)) {\n\
    \            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=java,string,ascii |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char\
    \ c = s.charAt(i);\n        if(Character.isDigit(c)) {\n            sum += c -\
    \ '0';\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nPlease add some explanation to your answer such that others can learn from\
    \ it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String s) {\n  \
    \  int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if(Character.isDigit(c)) {\n            sum += c - '0';\n", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n\
    \        {\n            sum += c - 'A' + 1;\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nI appreciate your efforts,\
    \ but I already know how to use LINQ and other methods to solve this problem.\
    \ I'm just trying to learn how to solve it using loops and arrays.\n<|/ c |>\n\
    <| c |>\nI understand your frustration, but I believe that my answer will help\
    \ you learn how to solve this problem using loops and arrays. I believe that my\
    \ answer will help you learn how to solve this problem using loops and arrays.\
    \ I believe that my answer will help you learn how to solve this problem using\
    \ loops and arrays. I believe that my answer will help you learn how to solve\
    \ this problem using loops and arrays. I believe that my answer will help you\
    \ learn how to solve this problem using loops and arrays. I believe that my answer\
    \ will help you learn how to solve this problem using loops and arrays. I believe\
    \ that my answer will help you learn how to solve this problem using loops and\
    \ arrays. I believe that my answer will help you learn how to solve this problem\
    \ using loops and arrays. I believe that my answer will help you learn how to\
    \ solve this problem using loops and arrays. I believe that my answer will help\
    \ you learn how to solve this problem using loops and arrays. I believe that my\
    \ answer will help you learn how to solve this problem using loops and arrays.\
    \ I believe that my answer will help you learn how to solve this problem using\
    \ loops and arrays. I believe that my answer will help you learn how to solve\
    \ this problem using loops and arrays. I believe that my answer will help you\
    \ learn how to solve this problem using loops and arrays. I believe that my answer\
    \ will help you learn how to solve this problem using loops and arrays. I believe\
    \ that my answer will help you learn how to solve this problem using loops and\
    \ arrays. I believe that my answer will help you learn how to solve this problem\
    \ using loops and arrays. I believe that my answer will help you learn how to\
    \ solve this problem using loops and arrays. I believe that my answer will help\
    \ you learn how to solve this problem using loops and arrays. I believe that my\
    \ answer will help you learn how to solve this problem using loops and arrays.\
    \ I believe that my answer will help you learn how to solve this problem using\
    \ loops and arrays. I believe that my answer will help you learn how to solve\
    \ this problem using loops and ", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any libraries. I only need to use std.string and std.math\n\
    <|/ c |>\n<| c |>\nI added a solution without using any libraries.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any libraries. I only\
    \ need to use std.string and std.math\n<|/ c |>\n<| c |>\nI added a solution without\
    \ using any libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any libraries. I only need to use std.string and std.math\n<|/ c |>\n\
    <| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n        {\n            sum += toUpper(c);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution,\
    \ however it only works for ASCII characters. I believe that OP wants to work\
    \ with any character. Also, `isUpper` only checks for uppercase letters, not for\
    \ other characters like `\xF1`, `\xDF`, `\xE6`, `\xF8`, `\xC6`, `\xD8`, `\xC5\
    `, `\xC4`, `\xDC`, `\xD6`, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4\
    `, `\xDC`, `\xD6`, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4`, `\xDC\
    `, `\xD6`, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4`, `\xDC`, `\xD6\
    `, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4`, `\xDC`, `\xD6`, `\xDE\
    `, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4`, `\xDC`, `\xD6`, `\xDE`, `\xDF\
    `, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4`, `\xDC`, `\xD6`, `\xDE`, `\xDF`, `\xF8\
    `, `\xC6`, `\xD8`, `\xC5`, `\xC4`, `\xDC`, `\xD6`, `\xDE`, `\xDF`, `\xF8`, `\xC6\
    `, `\xD8`, `\xC5`, `\xC4`, `\xDC`, `\xD6`, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8\
    `, `\xC5`, `\xC4`, `\xDC`, `\xD6`, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5\
    `, `\xC4`, `\xDC`, `\xD6`, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4\
    `, `\xDC`, `\xD6`, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4`, `\xDC\
    `, `\xD6`, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4`, `\xDC`, `\xD6\
    `, `\xDE`, `\xDF`, `\xF8`, `\xC6`, `\xD8`, `\xC5`, `\xC4`, `\xDC`, `\xD6`, `\xDE\
    `, `\xDF`, `\xF8", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI didn't know about `toupper`, thanks for teaching\
    \ me something new!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to know how to convert a char to an int and how\
    \ to sum all the ASCII codes.\n<|/ c |>\n<| c |>\nI added a solution that does\
    \ exactly that.\n<|/ c |>\n<| c |>\nThe question was how to convert a char to\
    \ an int. Your solution doesn't do that.\n<|/ c |>\n<| c |>\nThe question was\
    \ how to sum all the ASCII codes. Your solution doesn't do that.\n<|/ c |>\n<|\
    \ c |>\nThe question was how to sum all the ASCII codes. Your solution doesn't\
    \ do that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n        \
    \    sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Scanner;", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `153L`.\n\
    <|/ c |>\n<| c |>\nI didn't test it but I think it works. I added the L to make\
    \ it a long.\n<|/ c |>\n<| c |>\nIt doesn't work. `digitSum(\"aAaaaXa\")` returns\
    \ `153` instead of `153L`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the L to make it a long.\n<|/ c |>\n<| c |>\nIt doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153` instead of `153L`.\n<|/ c |>\n<| a tags=c#,string,char,sum |>\n\
    <code>\nstring s = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c) - 'A' + 1;\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI really appreciate\
    \ your help but I am not allowed to use any of those libraries. I must use only\
    \ std.string and std.math\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use any libraries.\n<|/ c |>\n<| c |>\nThank you so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. `toupper` returns\
    \ a `char`, not a `long`.\n<|/ c |>\n<| c |>\n: I fixed the code by casting the\
    \ result to `long`.\n<|/ c |>\n<| c |>\n: I added a version that doesn't require\
    \ casting.\n<|/ c |>\n<| c |>\n: I added a version that doesn't require casting.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't require casting.\n<|/ c |>\n\
    <| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += c - 'A'\
    \ + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<|\
    \ a dscore=0 |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n        \
    \    sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis code doesn't work. `digitSum(\"aAaaaXa\")` returns\
    \ `153` instead of `153L`.\n<|/ c |>\n<| c |>\nI didn't test it but I think it\
    \ should work. I've added a test case to my answer.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. `digitSum(\"aAaaaXa\")` returns `153` instead of `153L`.\n<|/ c |>\n<|\
    \ c |>\nI didn't test it but I think it should work. I've added a test case to\
    \ my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case\
    \ to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(Character.isDigit(s.charAt(i))) {\n            sum += Character.getNumericValue(s.charAt(i));\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,sum |>\n\
    <| a dscore=1 |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n         \
    \   sum += c - 'A' + 10;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThanks for your answer! I appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring input = \"helloE\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii,math\
    \ |>\n<| c |>\nThe question was about C#, not Java.\n<|/ c |>\n<| c |>\nI didn't\
    \ notice that. Thanks for pointing it out.\n<|/ c |>\n<| a tags=c#,string,ascii,math\
    \ |>\n<code>\npublic int SumOfUppercaseLetters(string s)\n{\n    int sum = 0;\n\
    \    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n            sum\
    \ += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    The question was about C#, not Java.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic\
    \ int SumOfUppercaseLetters(string s)\n{\n    int sum = 0;\n    foreach (char\
    \ c in s)\n    {\n        if (char.IsUpper(c))\n            sum += (int)c;\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii,math |>\n<| a dscore=2\
    \ |>\n<code>\npublic int SumOfUppercaseLetters(string s)\n{\n    int sum = 0;\n\
    \    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n            sum\
    \ += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii,math\
    \ |>\n<| a dscore=2 |>\n<code>\npublic int SumOfUppercaseLetters(string s)\n{\n\
    \    int sum = 0;\n    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n\
    \            sum += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,ascii,math\
    \ |>\n<| a tags=c#,string,ascii,math |>\n<code>\npublic int SumOfUppercaseLetters(string\
    \ s)\n{\n    int sum = 0;\n    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n\
    \            sum += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\npublic int SumOfUppercaseLetters(string s)\n{\n\
    \    int sum = 0;\n    foreach (char c in s)\n    {\n        if (", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\n`isUpper` isn't a function in C++.\n<|/ c |>\n<| c |>\n: Yes, it\
    \ is. It's a macro.\n<|/ c |>\n<| c |>\n: Yes, it is. It's a macro.\n<|/ c |>\n\
    <| c |>\n: Yes, it is. It's a macro.\n<|/ c |>\n<| c |>\n: Yes, it is. It's a\
    \ macro.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,char |>\n<| c |>\nThis code will fail for `digitSum(\"\
    aAaaaXa\")`\n<|/ c |>\n<| c |>\nYes, I know. I was just trying to give a solution\
    \ that doesn't involve looping through the string and checking each character\
    \ individually. I'll edit my answer to include a solution that doesn't involve\
    \ looping through the string and checking each character individually.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that doesn't involve looping through the string\
    \ and checking each character individually\n<|/ c |>\n<| c |>\nThank you so much!\
    \ I really appreciate it!\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ involve looping through the string and checking each character individually\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like\
    \ your solution, but I feel like it could be improved. For example, what if the\
    \ input string contains non-ASCII characters?\n<|/ c |>\n<| c |>\nI agree, my\
    \ solution is only meant to be a starting point for OP to work on. I'll try to\
    \ improve it later on if OP decides to post his own answer.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't use any non-ASCII characters.\n<|/ c |>\n<| c\
    \ |>\nI added a solution that doesn't use any non-ASCII characters.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\nfunction digitSum(s: string): long\n{\n    var sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n    \
    \        sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\nI like your solution, but I feel like it could be improved. For\
    \ example, what if the input string contains non-ASCII characters?\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't use any non-ASCII characters.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\nstring input = \"helloE\";", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n  \
    \          sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nI like this solution. Much more elegant than my solution. Thanks!\n\
    <|/ c |>\n<| c |>\nI like your solution too. Thanks!\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string |>\n<code>\nstring str = \"abc\";", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += c - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a |>\n<| c |>\n`foreach` isn't a function in C#.\n<|/ c |>\n<| c |>\n: Thanks,\
    \ I fixed the typo.\n<|/ c |>\n<| c |>\n`foreach` isn't a function in C#.\n<|/\
    \ c |>\n<| c |>\n: Thanks, I fixed the typo.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer! I understand that my code was a little bit too complicated and I didn't\
    \ really need it to be that complicated. I'm still new to programming and I appreciate\
    \ your help!\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\n\
    This doesn't work. `digitSum(\"aAaaaXa\")` returns 153 instead of 131.\n<|/ c\
    \ |>\n<| c |>\nYes, I noticed that and fixed it now. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns 153 instead\
    \ of 131.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns 153 instead\
    \ of 131.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n<code>\npublic static int\
    \ digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n\
    \            sum += c - 'A' + 1;\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns\
    \ 153 instead of 131.\n<|/ c |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns 153 instead of 131.\n<|/ c |>\n<| a |>\n<code>\npublic static int digitSum(String\
    \ s) {\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n       \
    \ char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            sum\
    \ += c - 'A' + 1;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=3\
    \ tags=c#,string,algorithm |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns 153 instead of 131.\n<|/ c |>\n<| c |>\nThis doesn't work. `digitSum(\"\
    aAaaaXa\")` returns 153 instead of 131.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    public static int digitSum(String s) {\n    int sum = 0;\n    for (int i = 0;\
    \ i < s.length()", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n        {\n            sum += toAscii(c);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n`isUpper` doesn't\
    \ exist in C#.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\nThanks,\
    \ I fixed it.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a tags=c#,string,ascii\
    \ |>\n<code>\npublic int GetSumOfUpperChars(string str)\n{\n    int sum = 0;\n\
    \    foreach (char c in str)\n    {\n        if (char.IsUpper(c))\n        {\n\
    \            sum += (int)c;\n        }\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\n`char.IsUpper` doesn't exist in C#.\n<|/ c |>\n<| c\
    \ |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\npublic int GetSumOfUpperChars(string str)\n{\n    int\
    \ sum = 0;\n    foreach (char c in str)\n    {\n        if (char.IsUpper(c))\n\
    \        {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=c#,string,ascii |>\n<| c |>\n`char.IsUpper` doesn't exist\
    \ in C#.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic int GetSumOfUpperChars(string\
    \ str)\n{\n    int sum = 0;\n    foreach (char c in str)\n    {\n        if (char.IsUpper(c))\n\
    \        {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=c#,string,ascii |>\n<| a dscore=1 |>\n<code>\npublic int GetSumOfUpperChars(string\
    \ str)\n{\n    int sum = 0;\n    foreach (char c in str)\n    {\n        if (char.IsUpper(c))\n\
    \        {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=c#,string,ascii |>\n<| a tags=c#,string,ascii |>\n<code>\n\
    public int Get", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n    \
    \    if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A');\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThe `foreach` loop is unnecessary. `sum`\
    \ can be initialized to `0` and then `sum += c - 'A'` will do the job.\n<|/ c\
    \ |>\n<| c |>\nYes, but that would not work if you had a character like '\xDF\
    ' in the string. `c - 'A'` would return `-128` instead of `-65`.\n<|/ c |>\n<|\
    \ c |>\nYes, but `'\xDF'` is `\xDF` so `c - 'A'` would return `-65` instead of\
    \ `-128`.\n<|/ c |>\n<| c |>\nI see, I missed the fact that `\xDF` is `\xDF` and\
    \ not `ss`. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThe `foreach` loop\
    \ is unnecessary. `sum` can be initialized to `0` and then `sum += c - 'A'` will\
    \ do the job.\n<|/ c |>\n<| a tags=c#,string,ascii |>\n<code>\nstring input =\
    \ \"abc\";", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c\
    \ >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on \"aAaaaXa\"\
    .\n<|/ c |>\n<| c |>\nIt does work. Try it on \"aAaaaXa\".\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it on \"aAaaaXa\".\n<|/ c |>\n<| c |>\nI tested it on \"\
    aAaaaXa\" and it returns 153\n<|/ c |>\n<| c |>\nYes, it does. I tested it on\
    \ \"aAaaaXa\".\n<|/ c |>\n<| a tags=c#,string |>\n<code>\nstring s = \"aAaaaXa\"\
    ;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your efforts, but I believe that my question was more about how to do it with\
    \ std.algorithm.\n<|/ c |>\n<| c |>\nI didn't know about std.algorithm, but this\
    \ solution doesn't use std.algorithm. I'm going to edit my answer to include a\
    \ solution that uses std.algorithm.\n<|/ c |>\n<| c |>\nI appreciate your efforts,\
    \ but I believe that my question was more about how to do it with std.algorithm.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but I believe that my question was\
    \ more about how to do it with std.algorithm.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts, but I believe that my question was more about how to do it with\
    \ std.algorithm.\n<|/ c |>\n<| a tags=c++,algorithm,stl,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c#,string,algorithm |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153` instead of `151`.\n<|/ c |>\n<| c |>\nI didn't notice that requirement.\
    \ I've updated my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. I've updated\
    \ my question to include an example that doesn't work. Your answer doesn't work\
    \ either.\n<|/ c |>\n<| c |>\nI've updated my answer. I've tested it and it works.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've updated my question to include\
    \ an example that doesn't work. Your answer doesn't work either.\n<|/ c |>\n<|\
    \ a tags=c#,string,algorithm |>\n<code>\npublic int GetSumOfUpperChars(string\
    \ str)\n{\n    int sum = 0;\n    foreach (char c in str)\n    {\n        if (c\
    \ >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `GetSumOfUpperChars(\"\
    aAaaaXa\")` returns `153` instead of `151`.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThanks for your answer! I appreciate it!\n<|/ c |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,char\
    \ |>\n<| a tags=string,c#,char |>\n<code>\nstring s = \"hello\";", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c++,string,char |>\n<| a tags=c++,string,char\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n  \
    \  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any library functions. I guess I should use recursion\
    \ to solve this problem.\n<|/ c |>\n<| c |>\nI added a recursive solution to my\
    \ answer.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use\
    \ any library functions. I guess I should use recursion to solve this problem.\n\
    <|/ c |>\n<| c |>\nI added a recursive solution to my answer.\n<|/ c |>\n<| a\
    \ tags=c#,string,algorithm |>\n<code>\npublic int SumUpper(string s)\n{\n    int\
    \ sum = 0;\n    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n \
    \           sum += (int)c;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any library functions.\
    \ I guess I should use recursion to solve this problem.\n<|/ c |>\n<| c |>\nI\
    \ added a recursive solution to my answer.\n<|/ c |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\npublic int SumUpper(string s)\n{\n    int sum = 0;\n    foreach\
    \ (char c in s)\n    {\n        if (char.IsUpper(c))\n            sum += (int)c;\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any library functions. I guess I should use\
    \ recursion to solve this problem.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n\
    <code>\npublic int SumUpper(string s)\n{\n    int sum = 0;\n    foreach (char\
    \ c in s)\n    {\n        if (char.IsUpper(c))\n            sum += (int)c;\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any library functions. I guess I should use\
    \ recursion to solve this problem.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n\
    <code>\npublic int SumUpper(string s)\n{\n    int sum = 0;\n    foreach (char\
    \ c in s)", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            sum += c - 'A' + 10;\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\n\
    This doesn't work for the case `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt\
    \ does. I tested it before posting.\n<|/ c |>\n<| c |>\nIt doesn't work for `digitSum(\"\
    aAaaaXa\")` because `'A'-'A'` is `0`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I fixed it.\n<|/ c |>\n<| c |>\n`'A'-'A'` is `0` because `'A'` is `65` and `'A'-'A'`\
    \ is `0`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic int digitSum(string s)\n\
    {\n    int sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n        {\n            sum += c - 'A' + 10;\n        }\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nThis doesn't\
    \ work for the case `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does. I tested\
    \ it before posting.\n<|/ c |>\n<| c |>\nIt doesn't work for `digitSum(\"aAaaaXa\"\
    )` because `'A'-'A'` is `0`.\n<|/ c |>\n<| c |>\nI see what you mean. I fixed\
    \ it.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n<code>\npublic int digitSum(string\
    \ s)\n{\n    int sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            sum += c - 'A' + 10;\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for\
    \ the case `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does. I tested it before\
    \ posting.\n<|/ c |>\n", "{\n    long sum = 0;\n    foreach(char c in s)\n   \
    \ {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c#,string,ascii |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know how to convert a character to its ASCII value.\n\
    <|/ c |>\n<| c |>\nI added a code example to my answer. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't make it clear enough.\
    \ I want to know how to convert a character to its ASCII value.\n<|/ c |>\n<|\
    \ c |>\nI added a code example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I'm sorry I didn't make it clear enough. I want to know\
    \ how to convert a character to its ASCII value.\n<|/ c |>\n<| a tags=c#,string,ascii\
    \ |>\n<code>\nstring str = \"Hello World\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe `isUpper` function\
    \ doesn't exist in C#. You'd need to use `Char.IsUpper`.\n<|/ c |>\n<| c |>\n\
    Thanks, I didn't know that. I've updated my answer.\n<|/ c |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| a tags=c++,string,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
