name: HumanEval_8_sum_product
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
  \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
  \    Empty sum should be equal to 0 and empty product should be equal to 1.\n  \
  \  >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
  \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n"
tests: "unittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
  \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n  \
  \  assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
  \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
  }\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long i\
    \ = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(long n, numbers) {\n\t\tsum += n;\n\t\t\
    product *= n;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(long x, numbers) {\n        sum += x;\n  \
    \      product *= x;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\
    \t{\n\t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}",
  "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number, numbers) {\n\t\tsum\
    \ += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}",
  "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long i, numbers)\n\t{\n\t\t\
    sum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n  \
    \  long sum = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n    \
    \    sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number\
    \ in numbers)\n\t{\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n \
    \       sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers) {\n\t\
    \tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n      \
    \  product *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([-1, 2, -3, 4])\n    (-1, -6)\n*/\n\
    Tuple!(long, long) sum_product(List<long> numbers) \n{\n    long sum = 0;\n  \
    \  long product = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([-1, 2, -3, 4])\n    (-1,\
    \ -6)\n*/\nTuple!(long, long) sum_product(List<int> numbers) \n{\n    long sum\
    \ = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n       \
    \ sum += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([-1, 2, -3, 4])\n \
    \   (-1, -6)\n*/\nTuple!(long, long) sum_product(List<short> numbers) \n{\n  \
    \  long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n\
    \        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([-1,\
    \ 2, -3, 4])\n    (-1, -6)\n*/\nTuple!(long, long) sum_product(List<char> numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_",
  "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long i, numbers)\n\t{\n\t\t\
    sum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n\t\
    long sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\
    \t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n \
    \   {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in\
    \ numbers)\n\t{\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in\
    \ numbers)\n\t{\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long i\
    \ = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number, numbers) {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\
    \tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\t\tproduct *=\
    \ i;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\
    \t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n\
    \tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\t\
    sum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n     \
    \   sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers)\n \
    \   {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long i\
    \ : numbers)\n    {\n        sum += i;\n        product *= i;\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(long x, numbers)\n    {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(int, int) sum_product(int[]\
    \ numbers) \n{\n    int sum = 0;\n    int product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(int,\
    \ int) sum_product(long[] numbers) \n{\n    int sum = 0;\n    int product = 1;\n\
    \    for (long i : numbers)\n    {\n        sum += i;\n        product *= i;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(int, int) sum_product(float[] numbers) \n{\n    int sum\
    \ = 0;\n    int product = 1;\n    for (long i : numbers)\n    {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(int, int) sum_product(double[]\
    \ numbers) \n{\n    int sum = 0;\n    int product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty ", "{\n    long sum = 0;\n    long product = 1;\n    for\
    \ (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n \
    \       product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}", "{\n\
    \tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length; ++i)\n\
    \t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in\
    \ numbers)\n\t{\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long i\
    \ = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\
    \t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\
    \ {\n\t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\n   \
    \ {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(long x, numbers) {\n        sum += x;\n        product *=\
    \ x;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n   \
    \ long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n  \
    \      sum += numbers[i];\n        product *= numbers[i];\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([-1,\
    \ 0, 1])\n    (2, 0)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([-1, 0, 1])\n    (2, 0)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0;\
    \ i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given\
    \ list of integers, return a tuple consisting of a sum and a product of all the\
    \ integers in a list.\n    Empty sum should be equal to 0 and empty product should\
    \ be equal to 1.\n    >>> sum_product([-1, 0, 1])\n    (2, 0)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([-1, 0, 1])\n    (2, 0)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum =\
    \ 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n \
    \   {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n   \
    \ return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a\
    \ tuple consisting of a sum and a product of all the integers in a list.\n   \
    \ Empty sum should be equal to 0 and empty product should be equal to 1.\n", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product ", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number\
    \ in numbers)\n    {\n        sum += number;\n        product *= number;\n   \
    \ }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tforeach(long x, numbers)\n\t{\n\t\tsum += x;\n\t\tproduct *= x;\n\t\
    }\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0;\
    \ i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given\
    \ list of integers, return a tuple consisting of a sum and a product of all the\
    \ integers in a list.\n    Empty sum should be equal to 0 and empty product should\
    \ be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integer", "{\n  \
    \  long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n\
    \        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0;\
    \ i < numbers.length; ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\
    \t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(long number, numbers) {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\
    \ {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(double, double)\
    \ sum_product(double[] numbers) \n{\n    double sum = 0;\n    double product =\
    \ 1;\n    foreach(double n, numbers) {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(int, int) sum_product(int[] numbers) \n{\n    int sum\
    \ = 0;\n    int product = 1;\n    foreach(int n, numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(short, short) sum_product(short[]\
    \ numbers) \n{\n    short sum = 0;\n    short product = 1;\n    foreach(short\
    \ n, numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(char,\
    \ char) sum_product(char[] numbers) \n{\n    char sum = 0;\n    char product =\
    \ 1;\n    foreach(char n, numbers) {\n        sum += n;\n        product *= n;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be ", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(i : numbers)\n    {\n        sum += i;\n        product *= i;\n    }\n\
    \    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number in numbers) {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\
    \ {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers) {\n\t\tsum\
    \ += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n\tlong\
    \ sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\t\tsum += x;\n\
    \t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return Tuple!(sum, product);\n}", "{\n\tlong\
    \ sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum +=\
    \ number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long\
    \ x, numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(i :\
    \ numbers) {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long\
    \ n, numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(double,\
    \ double) sum_product(double[] numbers) \n{\n    double sum = 0;\n    double product\
    \ = 1;\n    foreach(double n, numbers) {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(int, int) sum_product(int[] numbers) \n{\n    int sum\
    \ = 0;\n    int product = 1;\n    foreach(int n, numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(bool, bool) sum_product(bool[] numbers)\
    \ \n{\n    bool sum = false;\n    bool product = true;\n    foreach(bool n, numbers)\
    \ {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(string, string)\
    \ sum_product(string[] numbers) \n{\n    string sum = \"\";\n    string product\
    \ = \"\";\n    foreach(string n, numbers) {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and ", "{\n\tlong sum = 0;\n\t\
    long product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\t\tproduct *=\
    \ i;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tforeach(long n, numbers) {\n\t\tsum += n;\n\t\tproduct *= n;\n\t}\n\t\
    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\t\
    foreach(long n, numbers) {\n\t\tsum += n;\n\t\tproduct *= n;\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in\
    \ numbers)\n\t{\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long i\
    \ : numbers)\n    {\n        sum += i;\n        product *= i;\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  foreach(i : numbers) {\n        sum += i;\n        product *= i;\n    }\n \
    \   return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(i : numbers) {\n        sum += i;\n        product *= i;\n\
    \    }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product_recursive([])\n    (0, 1)\n\
    \    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product_recursive(long[] numbers) \n{\n    if (numbers.length == 0)\n\
    \    {\n        return Tuple!(0,1);\n    }\n    else\n    {\n        return Tuple!(numbers[0]\
    \ + sum_product_recursive(Array!long.from(numbers, 1, numbers.length)), numbers[0]\
    \ * numbers[0]);\n    }\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative([])\n\
    \    (0, 1)\n    >>> sum_product_iterative([1, 2, 3, 4])\n    (10, 24)\n    \n\
    */\nTuple!(long, long) sum_product_iterative(long[] numbers) \n{\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product_iterative_recursive([])\n    (0, 1)\n    >>> sum_product_iterative_recursive([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product_iterative_recursive(long[]\
    \ numbers) \n{\n    if (numbers.length == 0)\n    {\n        return Tuple!(0,1);\n\
    \    }\n    else\n    {\n        long sum = 0;\n        long product = 1;\n  \
    \      for (long i = 0; i < numbers.length; ++i)\n        {\n            sum +=\
    \ numbers[i];\n            product *= numbers[i];\n        }\n        return Tuple!(sum,\
    \ product);\n    }\n}\n/*\n For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative_recursive2([])\n\
    \    (0, 1)\n    >>> sum_product_iterative_recursive2([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in\
    \ numbers)\n\t{\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long\
    \ i, numbers) {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long\
    \ x, numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long i\
    \ = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum\
    \ = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum += i;\n\t\t\
    product *= i;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(number in numbers)\n    {\n        sum +=\
    \ number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n      \
    \  product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product =\
    \ 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([-1, -2, -3, -4])\n    (-4,\
    \ -4)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([-1, -2, -3, -4])\n    (-4, -4)\n    \n*/\nTuple!(long, long)\
    \ sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([-1, -2, -3, -4])\n    (-4,\
    \ -4)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([-1, -2, -3, -4])\n    (-4, -4)\n    \n*/\nTuple!(long, long)\
    \ sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the ", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long\
    \ x, numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n\
    \    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \n\
    */\nTuple!(long, long) sum_product_recursive(long[] numbers) \n{\n    long sum\
    \ = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum +=\
    \ x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product_iterative([])\n    (0, 1)\n\
    \    >>> sum_product_iterative([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product_iterative(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(long x, numbers) {\n        sum += x;\n        product\
    \ *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product_iterative_iterate([])\n    (0, 1)\n    >>> sum_product_iterative_iterate([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product_iterative_iterate(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x,\
    \ numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative_iterate_recurse([])\n\
    \    (0, 1)\n    >>> sum_product_iterative_iterate_recurse([1, 2, 3, 4])\n   \
    \ (10, 24)\n    \n*/\nTuple!(long, long) sum_product_iterative_iterate_recurse(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x,\
    \ numbers) {\n        sum += x;\n        product *= ", "{\n    long sum = 0;\n\
    \    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(long i, numbers) {\n        sum += i;\n        product *=\
    \ i;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n   \
    \ long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n  \
    \      sum += numbers[i];\n        product *= numbers[i];\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number\
    \ in numbers)\n    {\n        sum += number;\n        product *= number;\n   \
    \ }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tforeach(long x, numbers) {\n\t\tsum += x;\n\t\tproduct *= x;\n\t}\n\t\
    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n\
    \    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([-1, -2, -3, 4])\n    (4, -6)\n    \n*/\nTuple!(long,\
    \ long) sum_product(List<long> numbers) \n{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n      \
    \  product *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([-1, -2, -3, 4])\n    (4, -6)\n \
    \   \n*/\nTuple!(long, long) sum_product(List<int> numbers) \n{\n    long sum\
    \ = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n       \
    \ sum += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([-1, -2, -3, 4])\n\
    \    (4, -6)\n    \n*/\nTuple!(long, long) sum_product(List<short> numbers) \n\
    {\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([-1,\
    \ -2, -3, 4])\n    (4, -6)\n    \n*/\nTuple!(long, long) sum_product(List<char>\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in\
    \ numbers)\n    {\n        sum += number;\n        product *= number;\n    }\n\
    \    return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and ", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n      \
    \  product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers) {\n\
    \        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long i\
    \ : numbers)\n    {\n        sum += i;\n        product *= i;\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  for (long i : numbers)\n    {\n        sum += i;\n        product *= i;\n \
    \   }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n      \
    \  product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}", "{\n\
    \tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\tsum +=\
    \ i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number, numbers) {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n \
    \   {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n   \
    \ return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\
    \tfor (long i = 0; i < numbers.length; ++i)\n\t{\n\t\tsum += numbers[i];\n\t\t\
    product *= numbers[i];\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(long n, numbers) {\n        sum += n;\n        product *= n;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be ",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n     \
    \   sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\n\
    \    {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number, numbers)\
    \ {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(long i, numbers)\n    {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\t\
    long product = 1;\n\tfor (long i = 0; i < numbers.length; ++i)\n\t{\n\t\tsum +=\
    \ numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number, numbers)\
    \ {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(long n, numbers) {\n        sum += n;\n        product *=\
    \ n;\n    }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong\
    \ product = 1;\n\tforeach(long i, numbers)\n\t{\n\t\tsum += i;\n\t\tproduct *=\
    \ i;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n       \
    \ sum += numbers[i];\n        product *= numbers[i];\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long i\
    \ : numbers) {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0;\
    \ i < numbers.length; ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\
    \t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n     \
    \   sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given list of integer", "{\n\t\
    long sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum\
    \ += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(long number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long\
    \ n, numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n\
    \    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \n\
    */\nTuple!(long, long) sum_product_recursive(long[] numbers) \n{\n    long sum\
    \ = 0;\n    long product = 1;\n    foreach(long n, numbers)\n    {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product_iterative([])\n    (0, 1)\n\
    \    >>> sum_product_iterative([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product_iterative(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(long n, numbers)\n    {\n        sum += n;\n     \
    \   product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given\
    \ list of integers, return a tuple consisting of a sum and a product of all the\
    \ integers in a list.\n    Empty sum should be equal to 0 and empty product should\
    \ be equal to 1.\n    >>> sum_product_iterative_recursive([])\n    (0, 1)\n  \
    \  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n    (10, 24)\n    \n*/\n\
    Tuple!(long, long) sum_product_iterative_recursive(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\n    {\n     \
    \   sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product_iterative_recursive2([])\n\
    \    (0, 1)\n    >>> sum_product_iterative_recursive2([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product_iterative_recursive2(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\n\
    \    {", "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i\
    \ < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product *=\
    \ numbers[i];\n    }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\
    \tlong product = 1;\n\tforeach(i : numbers) {\n\t\tsum += i;\n\t\tproduct *= i;\n\
    \t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(long i, numbers) {\n        sum += i;\n        product *=\
    \ i;\n    }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong\
    \ product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\t\tproduct\
    \ *= number;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n\
    \    long product = 1;\n    foreach(number in numbers) {\n        sum += number;\n\
    \        product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n \
    \   {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product ", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long\
    \ n, numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(long n, numbers) {\n        sum += n;\n        product *= n;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(long n, numbers) {\n        sum += n;\n        product *= n;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be ", "{\n    long sum = 0;\n    long product = 1;\n   \
    \ foreach(long x, numbers)\n    {\n        sum += x;\n        product *= x;\n\
    \    }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number in numbers) {\n        sum += number;\n   \
    \     product *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For\
    \ a given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers) {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers) {\n\
    \        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers) {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be ", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n \
    \   {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number\
    \ in numbers)\n    {\n        sum += number;\n        product *= number;\n   \
    \ }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tforeach(long n, numbers)\n\t{\n\t\tsum += n;\n\t\tproduct *= n;\n\t\
    }\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\t\t\
    sum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n\t\
    long sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum\
    \ += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number, numbers) \n    {\n        sum += number;\n       \
    \ product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\
    \tforeach(long x, numbers) {\n\t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\
    \ {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long)\
    \ sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    foreach(long n, numbers) {\n        sum += n;\n        product *= n;\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(long n, numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>>\
    \ sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n,\
    \ numbers) {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be ",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n \
    \   {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product ", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long\
    \ x, numbers)\n\t{\n\t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long i\
    \ : numbers)\n    {\n        sum += i;\n        product *= i;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    for (long i : numbers)\n    {\n        sum += i;\n        product *=\
    \ i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(long, long)\
    \ sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product = 1;\n\
    \    for (long i : numbers)\n    {\n        sum += i;\n        product *= i;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(long i, numbers) {\n        sum += i;\n        product *=\
    \ i;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n   \
    \ long product = 1;\n    foreach(number in numbers) {\n        sum += number;\n\
    \        product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number, numbers) {\n  \
    \      sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long\
    \ x, numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number\
    \ in numbers)\n    {\n        sum += number;\n        product *= number;\n   \
    \ }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in a list.\n \
    \   Empty sum should be equal to 0 and empty product should be equal to 1.\n \
    \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,\
    \ 24)\n    \n*/\nTuple!(int, int) sum_product(int[] numbers) \n{\n    int sum\
    \ = 0;\n    int product = 1;\n    foreach(number in numbers)\n    {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n \
    \   >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(double, double)\
    \ sum_product(double[] numbers) \n{\n    double sum = 0;\n    double product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n\
    \    (10, 24)\n    \n*/\nTuple!(bool, bool) sum_product(bool[] numbers) \n{\n\
    \    bool sum = false;\n    bool product = true;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \n*/\nTuple!(string,\
    \ string) sum_product(string[] numbers) \n{\n    string sum = \"\";\n    string\
    \ product = \"\";\n    foreach(number in numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given list of integers, return a tuple consisting of a sum and a product\
    \ of ", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number\
    \ in numbers)\n\t{\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long\
    \ x, numbers) {\n\t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tforeach(number in numbers)\n\t{\n\t\tsum += number;\n\t\tproduct *=\
    \ number;\n\t}\n\treturn Tuple!(sum, product);\n}", "{\n    long sum = 0;\n  \
    \  long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n \
    \       sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}", "{\n\
    \    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n  \
    \  {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\
    \t{\n\t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(number, numbers) {\n \
    \       sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(i :\
    \ numbers)\n    {\n        sum += i;\n        product *= i;\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(number, numbers) \n    {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
