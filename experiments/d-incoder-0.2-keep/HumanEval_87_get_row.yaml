name: HumanEval_87_get_row
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a 2 dimensional\
  \ data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n\
  \    each row may contain a different number of columns.\n    Given lst, and integer\
  \ x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also,\
  \ sort coordinates of the row by columns in descending order.\n    \n    Examples:\n\
  \    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n\
  \    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n\
  \    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \n*/\nTuple!(long, long)[]\
  \ get_row(long[][] lst, long x) \n"
tests: "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\
  \ == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n\
  \    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L,\
  \ 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L,\
  \ 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L,\
  \ 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L),\
  \ tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]],\
  \ 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L,\
  \ 2L)]);\n}\nvoid main(){}"
completions: ["{\n    long[][] res = new long[lst.length][lst[0].length];\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res[i][j] = 1;\n            }\n            else\n            {\n       \
    \         res[i][j] = 0;\n            }\n        }\n    }\n    \n    Arrays.sort(res);\n\
    \    Arrays.sort(res, (a, b) -> {\n        if(a[0] == b[0])\n        {\n     \
    \       return a[1] < b[1] ? -1 : 1;\n        }\n        else\n        {\n   \
    \         return a[0] < b[0] ? -1 : 1;\n        }\n    });\n    \n    long[] row\
    \ = new long[res.length];\n    for(int i = 0; i < res.length; i++)\n    {\n  \
    \      row[i] = res[i][0];\n    }\n    \n    Arrays.sort(row, (a, b) -> {\n  \
    \      if(a[0] == b[0])\n        {\n            return a[1] < b[1] ? -1 : 1;\n\
    \        }\n        else\n        {\n            return a[0] < b[0] ? -1 : 1;\n\
    \        }\n    });\n    \n    long[] col = new long[res.length];\n    for(int\
    \ i = 0; i < res.length; i++)\n    {\n        col[i] = res[i][1];\n    }\n   \
    \ \n    Arrays.sort(col, (a, b) -> {\n        if(a[0] == b[0])\n        {\n  \
    \          return a[1] < b[1] ? -1 : 1;\n        }\n        else\n        {\n\
    \            return a[0] < b[0] ? -1 : 1;\n        }\n    });\n    \n    Tuple!(long,\
    \ long)[] ret = new Tuple!(long, long)[res.length];\n    for(int i = 0; i < res.length;\
    \ i++)\n    {\n        ret[i] = Tuple!(long, long)((row[i], col[i]));\n    }\n\
    \    \n    return ret;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row:\
    \ lst, i: 0) \n    {\n        foreach(col: row, j: 0) \n        {\n          \
    \  if(col == x) \n            {\n                res = Tuple!(long, long)[](Tuple!(0,\
    \ i), Tuple!(0, j));\n                break;\n            }\n        }\n    }\n\
    \    return res;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j;\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j\
    \ < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n      \
    \          return Tuple!((long) i, (long) j);\n            }\n        }\n    }\n\
    \    return Tuple!(0, 0);\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i : 0..lst.len())\n    {\n        foreach(j : 0..lst[i].len())\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res.add((i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res, (i, j) -> {\n   \
    \     if(j == 0)\n            return 1;\n        else if(j == lst[i].len())\n\
    \            return -1;\n        else\n            return 0;\n    });\n    \n\
    \    sort(res, (i, j) -> {\n        if(j == 0)\n            return -1;\n     \
    \   else if(j == lst[i].len())\n            return 1;\n        else\n        \
    \    return 0;\n    });\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    foreach(row: lst, i: 0) {\n        foreach(col: row, j: 0)\
    \ {\n            if(col == x) {\n                res = Tuple!(long, long)[](Tuple!(0,\
    \ i), Tuple!(0, j));\n                break;\n            }\n        }\n    }\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst) \n    {\n        foreach(column: row) \n        {\n\
    \            if(column == x) \n            {\n                result.push(Tuple!(long,\
    \ long)((row), column));\n            }\n        }\n    }\n    \n    result.sort(function(a,\
    \ b) -> a.0 < b.0 ? -1 : a.0 > b.0 ? 1 : 0);\n    result.sort(function(a, b) ->\
    \ a.1 < b.1 ? -1 : a.1 > b.1 ? 1 : 0);\n    \n    return result;\n}", "{\n   \
    \ Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst, i: int)\n    {\n        foreach(col: row, j: int)\n        {\n        \
    \    if(col == x)\n            {\n                res[res.length] = Tuple!(i,\
    \ j);\n            }\n        }\n    }\n    \n    sort(res);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row: lst, i:\
    \ 0) \n    {\n        foreach(col: row, j: 0) \n        {\n            if(col\
    \ == x) \n            {\n                res = Tuple!(long, long)[i, j];\n   \
    \             break;\n            }\n        }\n        if(res != null) break;\n\
    \    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row:\
    \ lst, row_index: 0) \n    {\n        foreach(col: row, col_index: 0) \n     \
    \   {\n            if(col == x) \n            {\n                res = Tuple!(long,\
    \ long)[](row_index, col_index);\n                break;\n            }\n    \
    \    }\n        if(res != null) break;\n    }\n    return res;\n}", "{\n    int[]\
    \ row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n        col[i] = 0;\n\
    \    }\n    \n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][col[x]]\
    \ == x)\n        {\n            return Tuple!(long, long)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[]]]]]]]]]];\n\
    \        }\n    }\n    return Tuple!(long, long)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[]]]]]]]]];\n\
    }\n/*", "{\n    int[] row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n       \
    \ col[i] = 0;\n    }\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.Length];\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][col[i]] ==\
    \ x)\n        {\n            res[i] = Tuple!(long, long)[i, col[i]];\n       \
    \ }\n    }\n    Array.Sort(res);\n    Array.Sort(row, col, res);\n    return res;\n\
    }", "{\n    long n = lst.length;\n    long[] res = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        if(lst[i][0] == x)\n        {\n           \
    \ res[i] = i;\n        }\n    }\n    Arrays.sort(res);\n    Arrays.sort(res, (a,\
    \ b) => b - a);\n    return Tuple!(long, long)[](res, n - 1);\n}", "{\n    long\
    \ n = lst.length;\n    long m = lst[0].length;\n    long[][] res = new long[n][m];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n \
    \       {\n            if(lst[i][j] == x)\n            {\n                res[i][j]\
    \ = 1;\n            }\n            else\n            {\n                res[i][j]\
    \ = 0;\n            }\n        }\n    }\n    \n    Arrays.sort(res, 0, n, 1, Compare(CompareLong(),\
    \ CompareLong()));\n    Arrays.sort(res, 0, n, 1, Compare(CompareLong(), CompareLong(),\
    \ CompareLong(), CompareLong()));\n    \n    return Tuple!(long, long)[](res);\n\
    }", "{\n    int[] row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n       \
    \ col[i] = 0;\n    }\n    \n    while(true)\n    {\n        int minRow = -1;\n\
    \        for(int i = 0; i < lst.Length; i++)\n        {\n            if(row[i]\
    \ != i)\n            {\n                col[minRow] = i;\n                minRow\
    \ = i;\n            }\n        }\n        if(minRow == -1)\n        {\n      \
    \      break;\n        }\n        \n        for(int i = 0; i < lst.Length; i++)\n\
    \        {\n            if(row[i] == minRow)\n            {\n                row[i]\
    \ = i;\n                col[i] = 0;\n            }\n        }\n        \n    \
    \    for(int i = 0; i < lst.Length; i++)\n        {\n            if(row[i] !=\
    \ i)\n            {\n                col[minRow] = i;\n                minRow\
    \ = i;\n            }\n        }\n    }\n    \n    Tuple!(long, long)[] res =\
    \ new Tuple!(long, long)[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        res[i] = Tuple!(long, long)[\n            Tuple!(int,int)[\n \
    \               row[i],\n                col[i]\n            ],\n            Tuple!(int,int)[\n\
    \                lst[minRow][i],\n                lst[minRow][col[i]]\n      \
    \      ]\n        ];\n    }\n    \n    Array.Sort(res);\n    Array.Sort(res, (o1,\
    \ o2) => o1.Item2.Item1 - o2.Item2.Item1);\n    Array.Sort(res, (o1, o2) => o1.Item2.Item2\
    \ - o2.Item2.Item2);\n    \n    return res;\n}\n/*", "{\n    long n = lst.len();\n\
    \    long m = lst[0].len();\n    long result[][] = new long[n][m];\n    long row\
    \ = 0;\n    long col = 0;\n    for(long i = 0; i < n; i++)\n    {\n        for(long\
    \ j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n\
    \                result[row][col] = i;\n                result[col][row] = j;\n\
    \                row++;\n                col++;\n            }\n        }\n  \
    \  }\n    \n    Tuple!(long, long)[] result = new Tuple!(long, long)[result.len()];\n\
    \    for(long i = 0; i < result.len(); i++)\n    {\n        result[i] = new Tuple!(long,\
    \ long)[result[i].len()];\n        for(long j = 0; j < result[i].len(); j++)\n\
    \        {\n            result[i][j] = new Tuple!(long, long)[result[i][j].len()];\n\
    \            for(long k = 0; k < result[i][j].len(); k++)\n            {\n   \
    \             result[i][j][k] = new Tuple!(long, long)[result[i][j][k].len()];\n\
    \            }\n        }\n    }\n    \n    for(long i = 0; i < result.len();\
    \ i++)\n    {\n        for(long j = 0; j < result[i].len(); j++)\n        {\n\
    \            for(long k = 0; k < result[i][j].len(); k++)\n            {\n   \
    \             result[i][j][k] = new Tuple!(long, long)[result[i][j][k].len()];\n\
    \            }\n        }\n    }\n    \n    for(long i = 0; i < result.len();\
    \ i++)\n    {\n        for(long j = 0; j < result[i].len(); j++)\n        {\n\
    \            for(long k = 0; k < result[i][j].len(); k++)\n            {\n   \
    \             result[i][j][k] = new Tuple!(long, long)[result[i][j][k].len()];\n\
    \            }\n        }\n    }\n    \n    for(long i = 0; i < result.len();\
    \ i++)\n    {\n        for(long j = 0; j < result[i].len(); j++)\n        {\n\
    \            for(long k = 0; k < result[i][j].len(); k++)\n            {\n   \
    \             result[i][j][k] = new Tuple!(long, long)[result[i][j][k].len()];\n\
    \            }\n        }\n    }\n    \n    for(long i = 0; i < result.len();\
    \ i++)\n    {\n        for(long j = 0; j < result[i].len(); j++)\n        {\n\
    \            for(long k = 0; k < result[i][j].len(); k++)\n            {\n   \
    \             result[i][j][k] = new Tuple!(long, long)[result[i][j][k].len()];\n\
    \            }\n        }\n    }\n    \n    for(long i = 0; i < result.len();\
    \ i++)\n    {\n        for(long j = 0; j < result[i].len(); j++)\n        {\n\
    \            for(long k = 0; k < result[i][j].len", "{\n    long[][] result =\
    \ new long[lst.length][];\n    for(int i = 0; i < lst.length; ++i)\n    {\n  \
    \      if(lst[i].length == x)\n        {\n            result[i] = lst[i];\n  \
    \      }\n    }\n    \n    Arrays.sort(result, (a, b) => a[0] - b[0]);\n    Arrays.sort(result,\
    \ (a, b) => a[1] - b[1]);\n    \n    return Arrays.toList(result);\n}", "{\n \
    \   long n = lst.len();\n    long m = lst[0].len();\n    long result[][] = new\
    \ long[n][m];\n    long row = 0;\n    long col = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    while(i < n && j < m) {\n        if(lst[i][j] == x) {\n        \
    \    result[row][col] = Tuple!(long, long)[i, j];\n            i++;\n        \
    \    j++;\n        }\n        else if(lst[i][j] < x) {\n            i++;\n   \
    \     }\n        else {\n            j++;\n        }\n    }\n    while(i < n)\
    \ {\n        result[row][col] = Tuple!(long, long)[i, j];\n        i++;\n    \
    \    j++;\n    }\n    while(j < m) {\n        result[row][col] = Tuple!(long,\
    \ long)[i, j];\n        j++;\n    }\n    sort(result, 0, result.len(), 0, result.len());\n\
    \    sort(result, 0, result.len(), 1, result.len());\n    return result;\n}\n\
    /*", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long i, j,\
    \ k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m,\
    \ i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m,\
    \ n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k,\
    \ l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i,\
    \ j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n,\
    \ m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l,\
    \ m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j,\
    \ k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m,\
    \ i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m,\
    \ n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k,\
    \ l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i,\
    \ j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n,\
    \ m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l,\
    \ m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j,\
    \ k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m,\
    \ i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m,\
    \ n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k,\
    \ l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i,\
    \ j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, ",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ : 0..lst.len())\n    {\n        foreach(j : 0..lst[i].len())\n        {\n  \
    \          if(lst[i][j] == x)\n            {\n                res[res.len()] =\
    \ Tuple!(i, j);\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res,\
    \ (a, b) => a.first > b.first);\n    \n    return res;\n}", "{\n    long[][] res\
    \ = new long[lst.length][];\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        res[i] = lst[i].get(x);\n    }\n    Arrays.sort(res);\n    Arrays.sort(res,\
    \ (a, b) => b[0] - a[0]);\n    return Tuple!(long, long)[](\n        Tuple!(long,\
    \ long)[](\n            Tuple!(0, res[0][0]),\n            Tuple!(0, res[0][1]),\n\
    \            Tuple!(0, res[0][2]),\n            Tuple!(0, res[0][3]),\n      \
    \      Tuple!(0, res[0][4]),\n            Tuple!(0, res[0][5])\n        ),\n \
    \       Tuple!(long, long)[](\n            Tuple!(res[0][0], res[1][0]),\n   \
    \         Tuple!(res[0][1], res[1][1]),\n            Tuple!(res[0][2], res[1][2]),\n\
    \            Tuple!(res[0][3], res[1][3]),\n            Tuple!(res[0][4], res[1][4]),\n\
    \            Tuple!(res[0][5], res[1][5])\n        )\n    );\n}", "{\n    long\
    \ n = lst.length;\n    long m = lst[0].length;\n    long i, j;\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[n];\n    \n    for(i = 0; i < n; ++i)\n\
    \    {\n        for(j = 0; j < m; ++j)\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n    \
    \            break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; ++i)\n    {\n        for(j = 0; j < m; ++j)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n  \
    \              break;\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[];\n    \n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][0]\
    \ == x)\n        {\n            for(int j = 0; j < lst[i].Length; j++)\n     \
    \       {\n                if(lst[i][j] == x)\n                {\n           \
    \         result.Add(Tuple!(long, long)[i, j]);\n                }\n         \
    \   }\n        }\n    }\n    \n    result.Sort();\n    \n    for(int i = 0; i\
    \ < result.Length; i++)\n    {\n        result[i].Sort();\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row::lst)\
    \ \n    {\n        foreach(col::row) \n        {\n            if(col == x) \n\
    \            {\n                res = Tuple!(long, long)[](row, col);\n      \
    \      }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    \n    foreach(row,lst) \n    {\n        foreach(col,row) \n\
    \        {\n            if(col == x) \n            {\n                res = Tuple!(long,\
    \ long)[](row,col);\n                break;\n            }\n        }\n    }\n\
    \    \n    sort(res);\n    sort(res,1,-1);\n    \n    return res;\n}", "{\n  \
    \  Tuple!(long, long)[] res;\n    \n    foreach(row: lst, i: int)\n    {\n   \
    \     foreach(col: row, j: int)\n        {\n            if(col == x)\n       \
    \     {\n                res[i] = Tuple!(long, long)((i, j));\n              \
    \  break;\n            }\n        }\n    }\n    \n    foreach(row: lst, i: int)\n\
    \    {\n        foreach(col: row, j: int)\n        {\n            if(col != x)\n\
    \            {\n                res[i] = Tuple!(long, long)((i, j));\n       \
    \         break;\n            }\n        }\n    }\n    \n    foreach(row: lst,\
    \ i: int)\n    {\n        foreach(col: row, j: int)\n        {\n            if(col\
    \ == x)\n            {\n                res[i] = Tuple!(long, long)((i, j));\n\
    \                break;\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst, i: int)\n    {\n        foreach(col: row, j: int)\n        {\n        \
    \    if(col != x)\n            {\n                res[i] = Tuple!(long, long)((i,\
    \ j));\n                break;\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst, i: int)\n    {\n        foreach(col: row, j: int)\n        {\n        \
    \    if(col != x)\n            {\n                res[i] = Tuple!(long, long)((i,\
    \ j));\n                break;\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst, i: int)\n    {\n        foreach(col: row, j: int)\n        {\n        \
    \    if(col != x)\n            {\n                res[i] = Tuple!(long, long)((i,\
    \ j));\n                break;\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst, i: int)\n    {\n        foreach(col: row, j: int)\n        {\n        \
    \    if(col != x)\n            {\n                res[i] = Tuple!(long, long)((i,\
    \ j));\n                break;\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst, i: int)\n    {\n        foreach(col: row, j: int)\n        {\n        \
    \    if(col != x)\n            {\n                res[i] = Tuple!(long, long)((i,\
    \ j));\n                break;\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst, i: int)\n    {\n        foreach(col: row, j: int)\n        {\n        \
    \    if(col != x)\n            {\n                res[i] = Tuple!(long, long)((i,\
    \ j));\n                break;\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst, i: int)\n    {\n        foreach(col: row, j: int)\n", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    \n    foreach(row: lst, i: 0) \n    {\n        foreach(col:\
    \ row, j: 0) \n        {\n            if(col == x) \n            {\n         \
    \       res = Tuple!(long, long)[i, j];\n                break;\n            }\n\
    \        }\n        if(res != null) break;\n    }\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] result = null;\n    foreach(row,lst)\n    {\n     \
    \   foreach(column,row)\n        {\n            if(column == x)\n            {\n\
    \                result = Tuple!(long, long)[Tuple!(0, column), Tuple!(1, column)];\n\
    \                break;\n            }\n        }\n        if(result != null)\n\
    \            break;\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ result = null;\n    \n    foreach(row: lst, rowIndex: 0) \n    {\n        foreach(column:\
    \ row, columnIndex: 0) \n        {\n            if(column == x) \n           \
    \ {\n                result = Tuple!(long, long)[](rowIndex, columnIndex);\n \
    \               break;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res.add((i, j));\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst) \n    {\n       \
    \ foreach(col,row) \n        {\n            if(col == x) \n            {\n   \
    \             res = Tuple!(long, long)[](row,col);\n                break;\n \
    \           }\n        }\n        if(res != null) break;\n    }\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst, row_index: 0) \n    {\n        foreach(col: row, col_index: 0) \n     \
    \   {\n            if(col == x) \n            {\n                foreach(coord:\
    \ row, coord_index: 0) \n                {\n                    res[coord_index]\
    \ = Tuple!(row_index, col_index);\n                }\n            }\n        }\n\
    \    }\n    \n    foreach(coord: res, coord_index: 0) \n    {\n        sort(coord,\
    \ coord, Tuple!(long, long)[](), (a, b) -> a.first > b.first);\n    }\n    \n\
    \    foreach(coord: res, coord_index: 0) \n    {\n        sort(coord, coord, Tuple!(long,\
    \ long)[](), (a, b) -> a.second > b.second);\n    }\n    \n    return res;\n}",
  "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long i, j, k;\n \
    \   Tuple!(long, long)[] res = new Tuple!(long, long)[n];\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[i] = new Tuple!(i, j);\n         \
    \       break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] >\
    \ x)\n            {\n                res[i] = new Tuple!(i, j);\n            \
    \    break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] <\
    \ x)\n            {\n                res[i] = new Tuple!(i, j);\n            \
    \    break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                res[i] = new Tuple!(i, j);\n            \
    \    break;\n            }\n        }\n    }\n    \n    return res;\n}", "{\n\
    \    long n = lst.len();\n    long m = lst[0].len();\n    long i, j, k;\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[(n + 1) * (m + 1)];\n    \n    for(i =\
    \ 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n         \
    \   if(i == j)\n            {\n                res[(i * m) + j] = Tuple!(0, 0);\n\
    \            }\n            else\n            {\n                for(k = 0; k\
    \ < m; k++)\n                {\n                    if(lst[i][k] == x)\n     \
    \               {\n                        res[(i * m) + j] = Tuple!(i, j);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    \n    Arrays.sort(res, (a, b) => (a.f0 > b.f0)\
    \ ? 1 : ((b.f0 > a.f0) ? -1 : 0));\n    \n    Arrays.sort(res, (a, b) => (a.f1\
    \ > b.f1) ? 1 : ((b.f1 > a.f1) ? -1 : 0));\n    \n    return res;\n}", "{\n  \
    \  long n = lst.length;\n    long m = lst[0].length;\n    long i, j, k;\n    Tuple!(long,\
    \ long)[] ans;\n    \n    for(i = 0; i < n; i++)\n    {\n        ans[i] = Tuple!(0,\
    \ 0);\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                ans[i] = Tuple!(i, j);\n                break;\n\
    \            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n  \
    \      for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] > x)\n    \
    \        {\n                k = j;\n                break;\n            }\n  \
    \      }\n        \n        for(j = k; j < m; j++)\n        {\n            if(lst[i][j]\
    \ < x)\n            {\n                k = j;\n                break;\n      \
    \      }\n        }\n        \n        ans[i] = Tuple!(i, j);\n    }\n    \n \
    \   sort(ans, (a, b) => a.1 < b.1);\n    sort(ans, (a, b) => a.2 < b.2);\n   \
    \ \n    return ans;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst)\n    {\n        foreach(col: row)\n        {\n  \
    \          if(col == x)\n            {\n                res.add((row, col));\n\
    \            }\n        }\n    }\n    \n    return res;\n}", "{\n    long rows\
    \ = 0;\n    long cols = 0;\n    for(long i = 0; i < lst.length; ++i)\n    {\n\
    \        rows = lst[i][0];\n        cols = lst[i][1];\n        if(rows == x)\n\
    \        {\n            Tuple!(long, long)[] ret = new Tuple!(long, long)[rows];\n\
    \            for(long j = 0; j < rows; ++j)\n            {\n                ret[j]\
    \ = new Tuple!(long, long)[j, cols];\n            }\n            return ret;\n\
    \        }\n    }\n    return null;\n}", "{\n    long[][] res = new long[lst.length][lst[0].length];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res[i][j] = i;\n                res[j][i] = j;\n            }\n        }\n\
    \    }\n    \n    Arrays.sort(res);\n    \n    Tuple!(long, long)[] ret = new\
    \ Tuple!(long, long)[res.length];\n    for(int i = 0; i < res.length; i++)\n \
    \   {\n        ret[i] = new Tuple!(long, long)(res[i][0], res[i][1]);\n    }\n\
    \    \n    return ret;\n}", "{\n    long[] res = new long[lst.Length];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            res[i] = 0;\n        }\n    }\n    return Tuple!(long, long)[res];\n\
    }", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst) \n    {\n \
    \       foreach(col,row) \n        {\n            if(col == x) \n            {\n\
    \                res = Tuple!(long, long)[](row,col);\n                break;\n\
    \            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i : 0..lst.length-1)\n  \
    \  {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[res.length] = Tuple!(i, j);\n    \
    \        }\n        }\n    }\n    \n    return res;\n}", "{\n    int[] row = new\
    \ int[lst.Length];\n    int[] col = new int[lst.Length];\n    for(int i = 0; i\
    \ < lst.Length; i++)\n    {\n        row[i] = i;\n        col[i] = 0;\n    }\n\
    \    \n    for(int i = 0; i < lst.Length; i++)\n    {\n        for(int j = 0;\
    \ j < lst[i].Length; j++)\n        {\n            if(lst[i][j] == x)\n       \
    \     {\n                Tuple!(long, long)[] res = new Tuple!(long, long)[lst.Length];\n\
    \                res[row[i]] = Tuple!(long, long)[lst[i].Length];\n          \
    \      res[col[i]] = Tuple!(long, long)[lst[i].Length];\n                return\
    \ res;\n            }\n        }\n    }\n    return null;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row: lst, i: 0) {\n        foreach(col: row,\
    \ j: 0) {\n            if(col == x) {\n                res = Tuple!(long, long)[i,\
    \ j];\n            }\n        }\n    }\n    sort(res);\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                if(res ==\
    \ null)\n                {\n                    res = Tuple!(long, long)[](row,\
    \ col);\n                }\n                else\n                {\n        \
    \            res = Tuple!(long, long)[](row, col);\n                }\n      \
    \      }\n        }\n    }\n    return res;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    \n    long[][] res = new long[n][m];\n    \n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n \
    \       {\n            if(lst[i][j] == x)\n            {\n                res[i][j]\
    \ = 1;\n            }\n            else\n            {\n                res[i][j]\
    \ = 0;\n            }\n        }\n    }\n    \n    Arrays.sort(res, (a, b) ->\
    \ {\n        if(a[0] == b[0])\n        {\n            return a[1] - b[1];\n  \
    \      }\n        else\n        {\n            return a[0] - b[0];\n        }\n\
    \    });\n    \n    Arrays.sort(res, (a, b) -> {\n        if(a[0] == b[0])\n \
    \       {\n            return a[1] - b[1];\n        }\n        else\n        {\n\
    \            return a[0] - b[0];\n        }\n    });\n    \n    return res;\n}",
  "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long i = 0;\n   \
    \ long j = 0;\n    long k = 0;\n    long l = 0;\n    long m1 = m;\n    long n1\
    \ = n;\n    long r1 = m;\n    long r2 = n;\n    long r3 = n;\n    long r4 = n;\n\
    \    long r5 = n;\n    long r6 = n;\n    long r7 = n;\n    long r8 = n;\n    long\
    \ r9 = n;\n    long r10 = n;\n    long r11 = n;\n    long r12 = n;\n    long r13\
    \ = n;\n    long r14 = n;\n    long r15 = n;\n    long r16 = n;\n    long r17\
    \ = n;\n    long r18 = n;\n    long r19 = n;\n    long r20 = n;\n    long r21\
    \ = n;\n    long r22 = n;\n    long r23 = n;\n    long r24 = n;\n    long r25\
    \ = n;\n    long r26 = n;\n    long r27 = n;\n    long r28 = n;\n    long r29\
    \ = n;\n    long r30 = n;\n    long r31 = n;\n    long r32 = n;\n    long r33\
    \ = n;\n    long r34 = n;\n    long r35 = n;\n    long r36 = n;\n    long r37\
    \ = n;\n    long r38 = n;\n    long r39 = n;\n    long r40 = n;\n    long r41\
    \ = n;\n    long r42 = n;\n    long r43 = n;\n    long r44 = n;\n    long r45\
    \ = n;\n    long r46 = n;\n    long r47 = n;\n    long r48 = n;\n    long r49\
    \ = n;\n    long r50 = n;\n    long r51 = n;\n    long r52 = n;\n    long r53\
    \ = n;\n    long r54 = n;\n    long r55 = n;\n    long r56 = n;\n    long r57\
    \ = n;\n    long r58 = n;\n    long r59 = n;\n    long r60 = n;\n    long r61\
    \ = n;\n    long r62 = n;\n    long r63 = n;\n    long r64 = n;\n    long r65\
    \ = n;\n    long r66 = n;\n    long r67 = n;\n    long r68 = n;\n    long r69",
  "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long i, j, k, l,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n,\
    \ m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, ", "{\n\
    \    long[] result = new long[lst.Length];\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            result[i] =\
    \ i;\n        }\n    }\n    Array.Sort(result);\n    Array.Sort(result, (x, y)\
    \ => { return lst[y][x] - lst[x][y]; });\n    return result;\n}\n/*", "{\n   \
    \ Tuple!(long, long)[] result = null;\n    foreach(row: lst, i: 0) {\n       \
    \ foreach(column: row, j: 0) {\n            if(column == x) {\n              \
    \  if(i == 0) result = Tuple!(long, long)[Tuple!(0, j)];\n                else\
    \ {\n                    result = Tuple!(long, long)[Tuple!(i-1, j), Tuple!(i-1,\
    \ j+1)];\n                }\n            }\n        }\n    }\n    \n    foreach(row:\
    \ result, i: 0) {\n        foreach(column: row, j: 0) {\n            if(j == 0)\
    \ result = Tuple!(long, long)[Tuple!(i+1, 0)];\n            else {\n         \
    \       result = Tuple!(long, long)[Tuple!(i+1, j-1), Tuple!(i+1, j)];\n     \
    \       }\n        }\n    }\n    \n    return result;\n}", "{\n    long[][] row\
    \ = new long[lst.Length][];\n    for(int i = 0; i < lst.Length; i++)\n    {\n\
    \        row[i] = lst[i];\n    }\n    \n    long[] rowSorted = new long[row[0].Length];\n\
    \    for(int i = 0; i < row[0].Length; i++)\n    {\n        rowSorted[i] = row[i][i];\n\
    \    }\n    Array.Sort(rowSorted, (x, y) => { return y - x; });\n    Array.Sort(rowSorted,\
    \ (x, y) => { return y - x; });\n    \n    long[] colSorted = new long[row[0].Length];\n\
    \    for(int i = 0; i < row[0].Length; i++)\n    {\n        colSorted[i] = rowSorted[i];\n\
    \    }\n    Array.Sort(colSorted, (x, y) => { return y - x; });\n    Array.Sort(colSorted,\
    \ (x, y) => { return y - x; });\n    \n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[row.Length];\n    for(int i = 0; i < row.Length; i++)\n    {\n       \
    \ result[i] = Tuple!(long, long)((row[i][0], colSorted[i]));\n    }\n    return\
    \ result;\n}\n/*", "{\n    long n = lst.len();\n    long m = lst[0].len();\n \
    \   long result[][] = new long[n][m];\n    long row = 0;\n    long col = 0;\n\
    \    long minRow = -1;\n    long minCol = -1;\n    long maxRow = -1;\n    long\
    \ maxCol = -1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = 0;\
    \ j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n    \
    \            result[row][col] = i;\n                result[col][row] = j;\n  \
    \              row++;\n                col++;\n                if(row == n)\n\
    \                {\n                    row = 0;\n                    col++;\n\
    \                }\n                if(col == m)\n                {\n        \
    \            col = 0;\n                    row++;\n                }\n       \
    \         if(row == minRow)\n                {\n                    minRow = i;\n\
    \                    minCol = j;\n                }\n                if(col ==\
    \ minCol)\n                {\n                    minCol = j;\n              \
    \  }\n                if(row == maxRow)\n                {\n                 \
    \   maxRow = i;\n                    maxCol = j;\n                }\n        \
    \        if(col == maxCol)\n                {\n                    maxCol = j;\n\
    \                }\n            }\n        }\n    }\n    \n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[](maxRow, maxCol);\n    for(long i = 0; i <\
    \ maxRow; i++)\n    {\n        for(long j = 0; j < maxCol; j++)\n        {\n \
    \           result[i][j] = Tuple!(long, long)[](i, j);\n        }\n    }\n   \
    \ \n    for(long i = 0; i < n; i++)\n    {\n        for(long j = 0; j < m; j++)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                result[row][col]\
    \ = i;\n                result[col][row] = j;\n                row++;\n      \
    \          col++;\n                if(row == n)\n                {\n         \
    \           row = 0;\n                    col++;\n                }\n        \
    \        if(col == m)\n                {\n                    col = 0;\n     \
    \               row++;\n                }\n                if(row == minRow)\n\
    \                {\n                    minRow = i;\n                    minCol\
    \ = j;\n                }\n                if(col == minCol)\n               \
    \ {\n                    minCol = j;\n                }\n                if(row\
    \ == maxRow)\n                {\n                    maxRow = i;\n           \
    \         maxCol = j;\n                }\n                if(col == maxCol)\n\
    \                {\n                    maxCol = j;\n                }\n     \
    \       }\n        }\n    }\n    \n    for(long i = 0; i < maxRow; i++)\n    {\n\
    \        for(long j = 0; j < maxCol; j++)\n        {\n            result[i][j]\
    \ = Tuple!(long, long)[](i, j);", "{\n    Tuple!(long, long)[] result = null;\n\
    \    foreach(row,lst) \n    {\n        foreach(column,row) \n        {\n     \
    \       if(column == x) \n            {\n                result = Tuple!(long,\
    \ long)[](row,column);\n                break;\n            }\n        }\n   \
    \     if(result != null) break;\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            for(int j =\
    \ 0; j < lst[i].length; j++)\n            {\n                if(lst[i][j] == x)\n\
    \                {\n                    result.add(Tuple!(long, long)(i + 1, j\
    \ + 1));\n                }\n            }\n        }\n    }\n    \n    result.sort(function(a,\
    \ b) -> a.first > b.first);\n    result.sort(function(a, b) -> a.second > b.second);\n\
    \    \n    return result;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long[][] res = new long[n][m];\n    \n    for(long i = 0; i < n; i++)\n \
    \   {\n        for(long j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[i][j] = 1;\n            }\n      \
    \      else\n            {\n                res[i][j] = 0;\n            }\n  \
    \      }\n    }\n    \n    for(long i = 0; i < n; i++)\n    {\n        for(long\
    \ j = 0; j < m; j++)\n        {\n            if(res[i][j] == 1)\n            {\n\
    \                res[i][j] = Tuple!(long, long)((i, j));\n            }\n    \
    \    }\n    }\n    \n    res[0][0] = Tuple!(long, long)(0, 0);\n    \n    for(long\
    \ i = 1; i < n; i++)\n    {\n        for(long j = 1; j < m; j++)\n        {\n\
    \            if(res[i][j] == 1)\n            {\n                res[i][j] = Tuple!(long,\
    \ long)((i, j));\n            }\n        }\n    }\n    \n    res[n-1][m-1] = Tuple!(long,\
    \ long)(n-1, m-1);\n    \n    for(long i = n-2; i >= 0; i--)\n    {\n        for(long\
    \ j = m-2; j >= 0; j--)\n        {\n            if(res[i][j] == 1)\n         \
    \   {\n                res[i][j] = Tuple!(long, long)((i, j));\n            }\n\
    \        }\n    }\n    \n    res[0][0] = Tuple!(long, long)(0, 0);\n    \n   \
    \ for(long i = 1; i < n; i++)\n    {\n        for(long j = 1; j < m; j++)\n  \
    \      {\n            if(res[i][j] == 1)\n            {\n                res[i][j]\
    \ = Tuple!(long, long)((i, j));\n            }\n        }\n    }\n    \n    res[n-1][m-1]\
    \ = Tuple!(long, long)(n-1, m-1);\n    \n    for(long i = n-2; i >= 0; i--)\n\
    \    {\n        for(long j = m-2; j >= 0; j--)\n        {\n            if(res[i][j]\
    \ == 1)\n            {\n                res[i][j] = Tuple!(long, long)((i, j));\n\
    \            }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row::lst) \n    {\n\
    \        foreach(col::row) \n        {\n            if(col == x) \n          \
    \  {\n                res.push(Tuple!(long, long)((row, col)));\n            }\n\
    \        }\n    }\n    \n    sort(res);\n    sort(res, Tuple!(long, long)((-1,\
    \ -1)));\n    \n    return res;\n}", "{\n    long n = lst.len();\n    long m =\
    \ lst[0].len();\n    long[][] res = new long[n][m];\n    for(long i = 0; i < n;\
    \ i++)\n    {\n        for(long j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[i][j] = i;\n                res[i][m-1]\
    \ = j;\n                return Tuple!(long, long)[](res);\n            }\n   \
    \     }\n    }\n    return Tuple!(long, long)[](res);\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(row,lst)\n    {\n     \
    \   foreach(col,row)\n        {\n            if(col == x)\n            {\n   \
    \             res[res.length] = Tuple!(long, long)((row,col));\n            }\n\
    \        }\n    }\n    sort(res);\n    sort(res,1);\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst, row_index: 0) \n    {\n        foreach(column: row, column_index: 0) \n\
    \        {\n            if(column == x) \n            {\n                foreach(coor:\
    \ row, coor_index: 0) \n                {\n                    if(coor == row_index)\
    \ \n                    {\n                        foreach(coor2: row, coor_index:\
    \ 1) \n                        {\n                            if(coor2 == column_index)\
    \ \n                            {\n                                res.add((row_index,\
    \ column_index));\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    foreach(coor: res, coor_index: 0) \n    {\n        foreach(coor2: res,\
    \ coor_index: 1) \n        {\n            if(coor2 > coor) \n            {\n \
    \               coor2.swap(coor);\n            }\n        }\n    }\n    \n   \
    \ foreach(coor: res, coor_index: 0) \n    {\n        foreach(coor2: res, coor_index:\
    \ 1) \n        {\n            if(coor2 == coor) \n            {\n            \
    \    coor2.swap(coor);\n            }\n        }\n    }\n    \n    foreach(coor:\
    \ res, coor_index: 0) \n    {\n        foreach(coor2: res, coor_index: 1) \n \
    \       {\n            if(coor2 == coor) \n            {\n                coor2.swap(coor);\n\
    \            }\n        }\n    }\n    \n    foreach(coor: res, coor_index: 0)\
    \ \n    {\n        foreach(coor2: res, coor_index: 1) \n        {\n          \
    \  if(coor2 == coor) \n            {\n                coor2.swap(coor);\n    \
    \        }\n        }\n    }\n    \n    foreach(coor: res, coor_index: 0) \n \
    \   {\n        foreach(coor2: res, coor_index: 1) \n        {\n            if(coor2\
    \ == coor) \n            {\n                coor2.swap(coor);\n            }\n\
    \        }\n    }\n    \n    foreach(coor: res, coor_index: 0) \n    {\n     \
    \   foreach(coor2: res, coor_index: 1) \n        {\n            if(coor2 == coor)\
    \ \n            {\n                coor2.swap(coor);\n            }\n        }\n\
    \    }\n    \n    foreach(coor: res, coor_index: 0) \n    {\n        foreach(coor2:\
    \ res, coor_index: 1) \n        {\n            if(coor2 == coor) \n          \
    \  {\n                coor2.swap(coor);\n            }\n        }\n    }\n   \
    \ \n    foreach(coor: res, coor_index: 0) \n    {\n        foreach(coor2: res,\
    \ coor_index: 1) \n        {\n            if(coor2 == coor) \n            {\n",
  "{\n    long n = lst.len();\n    long m = lst[0].len();\n    long[][] res = new\
    \ long[n][m];\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = 0;\
    \ j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n    \
    \            res[i][j] = i;\n                res[i][m-1] = j;\n            }\n\
    \        }\n    }\n    \n    sort!(res, (a, b) => (a[0] > b[0]) ? 1 : (a[0] ==\
    \ b[0]) ? 0 : -1);\n    sort!(res, (a, b) => (a[1] > b[1]) ? 1 : (a[1] == b[1])\
    \ ? 0 : -1);\n    \n    return res;\n}", "{\n    long rows = 0;\n    long cols\
    \ = 0;\n    foreach(row,lst) \n    {\n        cols += row.length;\n        if(cols\
    \ == x) \n        {\n            return Tuple!(long, long)[](rows,row);\n    \
    \    }\n        rows++;\n    }\n    return Tuple!(long, long)[](0,0);\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst, rowIndex: 0) \n    {\n        foreach(col: row, colIndex: 0) \n       \
    \ {\n            if(col == x) \n            {\n                foreach(coor: row,\
    \ coorIndex: 0) \n                {\n                    res[coorIndex] = (rowIndex,\
    \ colIndex);\n                }\n            }\n        }\n    }\n    \n    foreach(coor:\
    \ res, coorIndex: 0) \n    {\n        foreach(row: lst, rowIndex: coorIndex) \n\
    \        {\n            foreach(col: row, colIndex: 0) \n            {\n     \
    \           if(col == x) \n                {\n                    foreach(coor:\
    \ row, coorIndex: 0) \n                    {\n                        res[coorIndex]\
    \ = (rowIndex, colIndex);\n                    }\n                }\n        \
    \    }\n        }\n    }\n    \n    foreach(coor: res, coorIndex: 0) \n    {\n\
    \        foreach(row: lst, rowIndex: coorIndex) \n        {\n            foreach(col:\
    \ row, colIndex: 0) \n            {\n                if(col == x) \n         \
    \       {\n                    foreach(coor: row, coorIndex: 0) \n           \
    \         {\n                        res[coorIndex] = (rowIndex, colIndex);\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    foreach(coor: res, coorIndex: 0) \n    {\n        foreach(row: lst,\
    \ rowIndex: coorIndex) \n        {\n            foreach(col: row, colIndex: 0)\
    \ \n            {\n                if(col == x) \n                {\n        \
    \            foreach(coor: row, coorIndex: 0) \n                    {\n      \
    \                  res[coorIndex] = (rowIndex, colIndex);\n                  \
    \  }\n                }\n            }\n        }\n    }\n    \n    foreach(coor:\
    \ res, coorIndex: 0) \n    {\n        foreach(row: lst, rowIndex: coorIndex) \n\
    \        {\n            foreach(col: row, colIndex: 0) \n            {\n     \
    \           if(col == x) \n                {\n                    foreach(coor:\
    \ row, coorIndex: 0) \n                    {\n                        res[coorIndex]\
    \ = (rowIndex, colIndex);\n                    }\n                }\n        \
    \    }\n        }\n    }\n    \n    foreach(coor: res, coorIndex: 0) \n    {\n\
    \        foreach(row: lst, rowIndex: coorIndex) \n        {\n            foreach(col:\
    \ row, colIndex: 0) \n            {\n                if(col == x) \n         \
    \       {\n                    foreach(coor: row, coorIndex: 0) \n           \
    \         {\n                        res[coorIndex] = (rowIndex, colIndex);\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    ", "{\n    long[][] res = new long[lst.Length][];\n    for(int i = 0;\
    \ i < lst.Length; i++)\n    {\n        res[i] = lst[i].Where(x => x == lst[i][i]).ToArray();\n\
    \    }\n    Array.Sort(res);\n    Array.Sort(res, (x, y) => y.CompareTo(x));\n\
    \    return res;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    \n    long i, j;\n    \n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[n];\n    \n    for (i = 0; i < n; i++)\n    {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[m];\n        \n        for (j = 0; j < m; j++)\n\
    \        {\n            if (lst[i][j] == x)\n            {\n                row[j]\
    \ = (i, j);\n                break;\n            }\n        }\n        \n    \
    \    if (j == m)\n        {\n            throw new Exception(\"No such element\
    \ in matrix\");\n        }\n        \n        result[i] = row;\n    }\n    \n\
    \    sort!(result, (a, b) => (a[1], b[1]));\n    sort!(result, (a, b) => (a[0],\
    \ b[0]));\n    \n    return result;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row,lst) \n    {\n        foreach(col,row) \n        {\n        \
    \    if(col == x) \n            {\n                res = Tuple!(long, long)[](row,col);\n\
    \                break;\n            }\n        }\n        if(res != null) break;\n\
    \    }\n    return res;\n}", "{\n    long n = lst.Length;\n    long[] res = new\
    \ long[n];\n    for(int i = 0; i < n; i++)\n    {\n        if(lst[i][x] == x)\n\
    \        {\n            res[i] = i;\n        }\n    }\n    Array.Sort(res);\n\
    \    Array.Sort(res, (i, j) => lst[res[i]][res[j]]);\n    return Tuple!(long,\
    \ long)[](res, 0);\n}\n/*", "{\n    Tuple!(long, long)[] res;\n    foreach(row,lst)\n\
    \    {\n        foreach(col,row)\n        {\n            if(col == x)\n      \
    \      {\n                res[res.length] = Tuple!(long, long)((row,col));\n \
    \           }\n        }\n    }\n    sort(res);\n    return res;\n}", "{\n   \
    \ Tuple!(long, long)[] result = null;\n    \n    foreach(row: lst, row_index:\
    \ 0) \n    {\n        foreach(column: row, column_index: 0) \n        {\n    \
    \        if(column == x) \n            {\n                result = Tuple!(long,\
    \ long)[](row_index, column_index);\n                break;\n            }\n \
    \       }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[lst[0].Length];\n\
    \    for(int i = 0; i < lst[0].Length; i++)\n    {\n        result[i] = lst[0][i];\n\
    \    }\n    for(int i = 1; i < lst.Length; i++)\n    {\n        for(int j = 0;\
    \ j < lst[i].Length; j++)\n        {\n            if(lst[i][j] == x)\n       \
    \     {\n                for(int k = 0; k < lst[0].Length; k++)\n            \
    \    {\n                    result[k] = lst[i][k];\n                }\n      \
    \          break;\n            }\n        }\n    }\n    Array.Sort(result);\n\
    \    Array.Sort(result, (x, y) => { return y - x; });\n    Array.Sort(result,\
    \ (x, y) => { return y - x; });\n    return Tuple!(long, long)[result];\n}\n/*",
  "{\n    long n = lst.length;\n    long m = lst[0].length;\n    \n    long[][] res\
    \ = new long[n][m];\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n\
    \                res[i][j] = i;\n                res[i][m-1] = j;\n          \
    \      res[n-1][m-1] = n;\n            }\n        }\n    }\n    \n    Arrays.sort(res);\n\
    \    \n    return res;\n}", "{\n    long[][] res = new long[lst.length][];\n \
    \   for(int i = 0; i < lst.length; i++)\n    {\n        res[i] = lst[i].subarray(0,\
    \ x);\n    }\n    \n    Arrays.sort(res);\n    Arrays.sort(res, (a, b) => b[0]\
    \ - a[0]);\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        res[i] = new Tuple!(long,\
    \ long)((int)res[i][0], (int)res[i][1]);\n    }\n    return res;\n}", "{\n   \
    \ int[] row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n   \
    \ for(int i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n        col[i]\
    \ = i;\n    }\n    Array.Sort(row);\n    Array.Sort(col);\n    \n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[lst.Length];\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(row[i] == x)\n        {\n            res[i] = Tuple!(long,\
    \ long)[i, col[i]];\n        }\n    }\n    return res;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i = 0;\n    long j = 0;\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[n];\n    while(i < n && j < m) {\n    \
    \    if(lst[i][j] == x) {\n            res[i] = Tuple!(long, long)[i, j];\n  \
    \          i += 1;\n            j += 1;\n        }\n        else if(lst[i][j]\
    \ < x) {\n            i += 1;\n        }\n        else {\n            j += 1;\n\
    \        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n    \
    \        if(col == x)\n            {\n                result.push(Tuple!(long,\
    \ long)((row,col)));\n            }\n        }\n    }\n    \n    result.sort(function(a,b){return\
    \ a.0>b.0;});\n    result.sort(function(a,b){return b.0>a.0;});\n    \n    return\
    \ result;\n}", "{\n    int[] row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n       \
    \ col[i] = i;\n    }\n    Array.Sort(row, col, (x, y) => { return x > y; });\n\
    \    Array.Sort(col, row, (x, y) => { return y > x; });\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[lst.Length];\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        res[i] = Tuple!(long, long)[\n            Tuple!(long,\
    \ long)[\n                row[i],\n                col[i]\n            ],\n  \
    \          Tuple!(long, long)[\n                row[i],\n                col[i]\n\
    \            ]\n        ];\n    }\n    return res;\n}\n/*", "{\n    Tuple!(long,\
    \ long)[] result = null;\n    foreach(row,lst){\n        if(row.length == x){\n\
    \            foreach(col,row){\n                if(col == x){\n              \
    \      result = Tuple!(long, long)[Tuple!(0, row), Tuple!(1, col)];\n        \
    \        }\n            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    \n    foreach(row: lst, row_index:\
    \ 0) \n    {\n        foreach(column: row, column_index: 0) \n        {\n    \
    \        if(column == x) \n            {\n                foreach(coordinate:\
    \ row, coordinate_index: 0) \n                {\n                    result.push(new\
    \ Tuple!(long, long)((row_index, coordinate_index), (column_index, coordinate_index)));\n\
    \                }\n            }\n        }\n    }\n    \n    result.sort(function(a,\
    \ b) { return a.1 < b.1; });\n    result.sort(function(a, b) { return a.2 < b.2;\
    \ });\n    \n    return result;\n}", "{\n    long n = lst.length;\n    long m\
    \ = lst[0].length;\n    long i, j;\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[n];\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res[i] = Tuple!((long)i, (long)j);\n                break;\n           \
    \ }\n        }\n    }\n    \n    sort(res);\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        res[i] = res[i].swap;\n    }\n    \n    sort(res);\n    \n   \
    \ return res;\n}", "{\n    long[][] res = new long[lst.Length][];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[i].Length > x)\n        {\n\
    \            throw new Exception(\"Invalid input\");\n        }\n        res[i]\
    \ = lst[i].Take(x).ToArray();\n    }\n    return Tuple!(long, long)[](res, lst.Length);\n\
    }", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n  \
    \  for(int i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ ++j)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     result.push(new Tuple!(long, long)(i + 1, j + 1));\n            }\n    \
    \    }\n    }\n    \n    result.sort(function(a, b){return a.first > b.first;});\n\
    \    result.sort(function(a, b){return a.second > b.second;});\n    \n    return\
    \ result;\n}", "{\n    int[] row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n\
    \    int[] row_index = new int[lst.Length];\n    int[] col_index = new int[lst.Length];\n\
    \    \n    for(int i = 0; i < lst.Length; i++)\n    {\n        row_index[i] =\
    \ i;\n        col_index[i] = i;\n    }\n    \n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i][x] == x)\n        {\n            row[i] = i;\n\
    \            col[i] = x;\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[row_index[i]][col_index[i]]\
    \ == x)\n        {\n            row[i] = row_index[i];\n            col[i] = col_index[i];\n\
    \            break;\n        }\n    }\n    \n    Tuple!(long, long)[] result =\
    \ new Tuple!(long, long)[lst.Length];\n    \n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        result[i] = new Tuple!(long, long)();\n        result[i].Item1\
    \ = row[i];\n        result[i].Item2 = col[i];\n    }\n    \n    Array.Sort(result,\
    \ (a, b) => a.Item1.CompareTo(b.Item1));\n    Array.Sort(result, (a, b) => a.Item2.CompareTo(b.Item2));\n\
    \    \n    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row: lst)\n    {\n        foreach(col: row)\n  \
    \      {\n            if(col == x)\n            {\n                res.push(Tuple!(long,\
    \ long)((row), col));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => a.first > b.first);\n    \n    return res;\n}", "{\n\
    \    long n = lst.length;\n    long[] res = new long[n];\n    for(int i = 0; i\
    \ < n; i++)\n    {\n        if(lst[i][0] == x)\n        {\n            res[i]\
    \ = i;\n            break;\n        }\n    }\n    return Tuple!(long, long)[](res,\
    \ res);\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row: lst, row_index:\
    \ 0) \n    {\n        foreach(col: row, col_index: 0) \n        {\n          \
    \  if(col == x) \n            {\n                res = Tuple!(long, long)[](row_index,\
    \ col_index);\n                break;\n            }\n        }\n        if(res\
    \ != null) break;\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = null;\n    foreach(row: lst, i: int) \n    {\n        foreach(col: row, j:\
    \ int) \n        {\n            if(col == x) \n            {\n               \
    \ if(res == null) \n                {\n                    res = Tuple!(long,\
    \ long)[]();\n                }\n                res[res.length] = Tuple!(i, j);\n\
    \            }\n        }\n    }\n    \n    foreach(row: lst, i: int) \n    {\n\
    \        foreach(col: row, j: int) \n        {\n            if(col != x) \n  \
    \          {\n                if(res == null) \n                {\n          \
    \          res = Tuple!(long, long)[]();\n                }\n                res[res.length]\
    \ = Tuple!(i, j);\n            }\n        }\n    }\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                if(res ==\
    \ null)\n                {\n                    res = Tuple!(long, long)[](row,col);\n\
    \                }\n                else\n                {\n                \
    \    res = Tuple!(long, long)[](row,col);\n                    foreach(row2,lst)\n\
    \                    {\n                        foreach(col2,row2)\n         \
    \               {\n                            if(col2 == col)\n             \
    \               {\n                                res = Tuple!(long, long)[](row,col);\n\
    \                                break;\n                            }\n     \
    \                   }\n                    }\n                }\n            \
    \    break;\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    \n    foreach(row: lst, row_index: 0) \n    {\n       \
    \ foreach(column: row, column_index: 0) \n        {\n            if(column ==\
    \ x) \n            {\n                foreach(coord: row, coord_index: 0) \n \
    \               {\n                    result = append(result, Tuple!(long, long)((row_index,\
    \ coord_index), (column_index, coord_index)));\n                }\n          \
    \  }\n        }\n    }\n    \n    sort(result, (a, b) => a.1 < b.1);\n    sort(result,\
    \ (a, b) => a.2 < b.2);\n    \n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n       \
    \ {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[](row,col);\n                break;\n            }\n        }\n      \
    \  if(res != null)\n            break;\n    }\n    return res;\n}", "{\n    long\
    \ n = lst.length;\n    long m = lst[0].length;\n    long i, j, k;\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[n];\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n    \
    \            break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n  \
    \              break;\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    int[] row = new int[lst.length];\n    int[] col = new int[lst[0].length];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        row[i] = i;\n       \
    \ for(int j = 0; j < lst[i].length; j++)\n        {\n            col[j] = j;\n\
    \        }\n    }\n    Arrays.sort(row);\n    Arrays.sort(col);\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        res[i] = Tuple!(long, long)((row[i]), col[i]);\n    }\n\
    \    return res;\n}", "{\n    int[] row = new int[lst.Length];\n    int[] col\
    \ = new int[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n    {\n   \
    \     row[i] = i;\n        col[i] = i;\n    }\n    Array.Sort(row);\n    Array.Sort(col);\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.Length];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(row[i] == x)\n        {\n   \
    \         res[i] = Tuple!(long, long)[i, col[i]];\n        }\n    }\n    return\
    \ res;\n}\n/*", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst, i: 0) {\n        foreach(col: row, j: 0) {\n    \
    \        if(col == x) {\n                res.push(Tuple!(long, long)[i, j]);\n\
    \            }\n        }\n    }\n    \n    sort(res, (row1, row2) => row1._1\
    \ > row2._1);\n    sort(res, (row1, row2) => row1._2 > row2._2);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n \
    \   {\n        foreach(col,row)\n        {\n            if(col == x)\n       \
    \     {\n                res = Tuple!(long, long)[](row, col);\n             \
    \   break;\n            }\n        }\n        if(res != null)\n            break;\n\
    \    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row: lst, row_index: 0) \n    {\n        foreach(col:\
    \ row, col_index: 0) \n        {\n            if(col == x) \n            {\n \
    \               foreach(coord: row, coord_index: 0) \n                {\n    \
    \                if(coord_index == row_index) \n                    {\n      \
    \                  foreach(coord2: row, coord2_index: 0) \n                  \
    \      {\n                            if(coord2_index == col_index) \n       \
    \                     {\n                                res.add(new Tuple!(long,\
    \ long)((row_index, col_index), (coord2_index, coord_index)));\n             \
    \               }\n                        }\n                    }\n        \
    \        }\n            }\n        }\n    }\n    \n    return res;\n}", "{\n \
    \   Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    foreach(i, row)\
    \ \n    {\n        foreach(j, col) \n        {\n            if(row[j] == x) \n\
    \            {\n                res.push(Tuple!(long, long)[i, j]);\n        \
    \    }\n        }\n    }\n    sort(res);\n    sort(res, (a, b) => -cmp(a.i, b.i));\n\
    \    return res;\n}\n/*", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n\
    \    {\n        foreach(col,row)\n        {\n            if(col == x)\n      \
    \      {\n                res = Tuple!(long, long)[](row,col);\n             \
    \   break;\n            }\n        }\n        if(res != null)\n            break;\n\
    \    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row:\
    \ lst, i: 0) \n    {\n        foreach(col: row, j: 0) \n        {\n          \
    \  if(col == x) \n            {\n                res = Tuple!(long, long)[Tuple!(0,\
    \ j), Tuple!(1, j)];\n                break;\n            }\n        }\n    }\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst, i: int) \n    {\n        foreach(col: row, j: int)\
    \ \n        {\n            if(col == x) \n            {\n                res.push(Tuple!(long,\
    \ long)(i + 1, j + 1));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => a.first > b.first);\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst) {\n        foreach(column: row) {\n            if(column == x) {\n    \
    \            result.push(Tuple!(long, long)((row), column));\n            }\n\
    \        }\n    }\n    \n    result.sort(function(a, b) {\n        return a.row\
    \ > b.row;\n    });\n    \n    result.sort(function(a, b) {\n        return a.column\
    \ > b.column;\n    });\n    \n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(row: lst, i: 0) {\n     \
    \   foreach(col: row, j: 0) {\n            if(col == x) {\n                res.add((i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res);\n    \n    return\
    \ res;\n}", "{\n    long n = lst.length;\n    long[][] res = new long[n][];\n\
    \    for(int i = 0; i < n; i++) {\n        res[i] = lst[i];\n    }\n    Arrays.sort(res,\
    \ (int i, int j) -> {\n        int cmp = res[i][0] - res[j][0];\n        if(cmp\
    \ == 0) {\n            cmp = res[i][1] - res[j][1];\n        }\n        return\
    \ cmp;\n    });\n    Arrays.sort(res, (a, b) -> {\n        int cmp = res[a][1]\
    \ - res[b][1];\n        if(cmp == 0) {\n            cmp = res[a][0] - res[b][0];\n\
    \        }\n        return cmp;\n    });\n    Arrays.sort(res, (a, b) -> {\n \
    \       int cmp = res[a][1] - res[b][1];\n        if(cmp == 0) {\n           \
    \ cmp = res[a][0] - res[b][0];\n        }\n        return cmp;\n    });\n    Arrays.sort(res,\
    \ (a, b) -> {\n        int cmp = res[a][1] - res[b][1];\n        if(cmp == 0)\
    \ {\n            cmp = res[a][0] - res[b][0];\n        }\n        return cmp;\n\
    \    });\n    Arrays.sort(res, (a, b) -> {\n        int cmp = res[a][1] - res[b][1];\n\
    \        if(cmp == 0) {\n            cmp = res[a][0] - res[b][0];\n        }\n\
    \        return cmp;\n    });\n    Arrays.sort(res, (a, b) -> {\n        int cmp\
    \ = res[a][1] - res[b][1];\n        if(cmp == 0) {\n            cmp = res[a][0]\
    \ - res[b][0];\n        }\n        return cmp;\n    });\n    Arrays.sort(res,\
    \ (a, b) -> {\n        int cmp = res[a][1] - res[b][1];\n        if(cmp == 0)\
    \ {\n            cmp = res[a][0] - res[b][0];\n        }\n        return cmp;\n\
    \    });\n    Arrays.sort(res, (a, b) -> {\n        int cmp = res[a][1] - res[b][1];\n\
    \        if(cmp == 0) {\n            cmp = res[a][0] - res[b][0];\n        }\n\
    \        return cmp;\n    });\n    Arrays.sort(res, (a, b) -> {\n        int cmp\
    \ = res[a][1] - res[b][1];\n        if(cmp == 0) {\n            cmp = res[a][0]\
    \ - res[b][0];\n        }\n        return cmp;\n    });\n    Arrays.sort(res,\
    \ (a, b) -> {\n        int cmp = res[a][1] - res[b][1];\n        if(cmp == 0)\
    \ {\n            cmp = res[a][0] - res[b][0];\n        }\n        return cmp;\n\
    \    });\n    Arrays.sort(res, (a, b) -> {\n        int cmp = res[a][1] - res[b][1];\n\
    \        if(cmp == 0) {\n            cmp = res", "{\n    long[][] res = new long[lst.length][];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        res[i] = lst[i].slice(x);\n\
    \    }\n    return Tuple!(long, long)[](sort(res), sort(res).reverse());\n}",
  "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst, i: int) \n    {\n        foreach(col: row, j: int) \n        {\n      \
    \      if(col == x) \n            {\n                result.add((i, j));\n   \
    \         }\n        }\n    }\n    \n    result.sort(function(a, b) -> a.0 < b.0\
    \ ? -1 : a.0 > b.0 ? 1 : 0);\n    result.sort(function(a, b) -> a.1 < b.1 ? -1\
    \ : a.1 > b.1 ? 1 : 0);\n    \n    return result;\n}", "{\n    int[] row = new\
    \ int[lst.Length];\n    int[] col = new int[lst.Length];\n    for(int i = 0; i\
    \ < lst.Length; i++)\n    {\n        row[i] = i;\n        col[i] = 0;\n    }\n\
    \    \n    while(true)\n    {\n        for(int i = 0; i < lst.Length; i++)\n \
    \       {\n            if(lst[row[i]][col[i]] == x)\n            {\n         \
    \       return Tuple!(long, long)[Tuple!(int,int)[row, col]];\n            }\n\
    \        }\n        \n        if(col[lst.Length-1] == lst.Length-1)\n        {\n\
    \            return Tuple!(long, long)[Tuple!(int,int)[row, col]];\n        }\n\
    \        \n        col[lst.Length-1]++;\n    }\n}", "{\n    int[] row = new int[lst.length];\n\
    \    int[] col = new int[lst[0].length];\n    \n    for(int i = 0; i < lst.length;\
    \ i++){\n        for(int j = 0; j < lst[i].length; j++){\n            if(lst[i][j]\
    \ == x){\n                row[i] = j;\n                col[j] = i;\n         \
    \   }\n        }\n    }\n    \n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[lst.length];\n    \n    for(int i = 0; i < lst.length; i++){\n       \
    \ res[i] = Tuple!(long, long)((row[i], col[i]));\n    }\n    \n    sort(res);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    \n \
    \   foreach(row,lst) \n    {\n        foreach(col,row) \n        {\n         \
    \   if(col == x) \n            {\n                res = Tuple!(long, long)[](row,col);\n\
    \                break;\n            }\n        }\n        if(res != null) break;\n\
    \    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row: lst, row: row) \n    {\n        foreach(col: row, col: col)\
    \ \n        {\n            if(col == x) \n            {\n                if(res\
    \ == null) \n                {\n                    res = Tuple!(long, long)[](row,\
    \ 0);\n                }\n                else\n                {\n          \
    \          res = Tuple!(long, long)[](row, col + 1);\n                }\n    \
    \        }\n        }\n    }\n    \n    foreach(row: lst, row: row) \n    {\n\
    \        foreach(col: row, col: col) \n        {\n            if(col > x) \n \
    \           {\n                if(res == null) \n                {\n         \
    \           res = Tuple!(long, long)[](row, 0);\n                }\n         \
    \       else\n                {\n                    res = Tuple!(long, long)[](row,\
    \ col - 1);\n                }\n            }\n        }\n    }\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ foreach(row::lst) {\n        foreach(col::row) {\n            if(col == x) {\n\
    \                res.push(Tuple!(long, long)((row,col)));\n            }\n   \
    \     }\n    }\n    sort(res);\n    sort(res, (a, b) => a.1 < b.1);\n    return\
    \ res;\n}", "{\n    long n = lst.length;\n    long[] res = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        if(lst[i][0] == x)\n        {\n         \
    \   res[i] = i;\n        }\n    }\n    return Tuple!(long, long)[res];\n}", "{\n\
    \    long n = lst.length;\n    long[] res = new long[n];\n    for(int i = 0; i\
    \ < n; i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n\
    \            if(lst[i][j] == x)\n            {\n                res[i] = j;\n\
    \                break;\n            }\n        }\n    }\n    return Tuple!(long,\
    \ long)[res];\n}", "{\n    long n = lst.Length;\n    long m = lst[0].Length;\n\
    \    long[,] res = new long[n, m];\n    for(int i = 0; i < n; i++)\n    {\n  \
    \      for(int j = 0; j < m; j++)\n        {\n            res[i, j] = lst[i][j];\n\
    \        }\n    }\n    Array.Sort(res, 0, n, 0, m, (x, y) => { return y - x; });\n\
    \    Array.Sort(res, 0, n, 0, m, (x, y) => { return y - x; });\n    return Tuple!(long,\
    \ long)[](\n        Tuple!(long, long)[](\n            Tuple!(long, long)[](0,\
    \ 0),\n            Tuple!(long, long)[](0, m),\n            Tuple!(long, long)[](n,\
    \ 0),\n            Tuple!(long, long)[](n, m)\n        )\n    );\n}\n/*", "{\n\
    \    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[](row,col);\n                break;\n            }\n        }\n      \
    \  if(res != null)\n            break;\n    }\n    return res;\n}", "{\n    int[]\
    \ row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n        col[i] = i;\n\
    \    }\n    Array.Sort(row);\n    Array.Sort(col);\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i][row[i]] == x)\n        {\n            Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[lst.Length];\n            for(int j = 0;\
    \ j < lst.Length; j++)\n            {\n                res[j] = (row[j], col[j]);\n\
    \            }\n            return res;\n        }\n    }\n    return new Tuple!(long,\
    \ long)[0];\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] ==\
    \ x)\n        {\n            for(int j = 0; j < lst[i].length; j++)\n        \
    \    {\n                result.add((i, j));\n            }\n        }\n    }\n\
    \    \n    result.sort(function(a, b) {\n        return a.0 < b.0;\n    });\n\
    \    \n    result.sort(function(a, b) {\n        return b.1 < a.1;\n    });\n\
    \    \n    return result;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n    \
    \    {\n            if(col == x)\n            {\n                result.push(Tuple!(long,\
    \ long)((row,col)));\n            }\n        }\n    }\n    \n    result.sort(function(a,b){return\
    \ a.1 > b.1;});\n    result.sort(function(a,b){return a.1 < b.1;});\n    \n  \
    \  return result;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\
    \ {\n        foreach(col,row) {\n            if(col == x) {\n                res\
    \ = Tuple!(long, long)[](row,col);\n                break;\n            }\n  \
    \      }\n        if(res != null) {\n            break;\n        }\n    }\n  \
    \  return res;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j;\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j\
    \ < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n      \
    \          return Tuple!(long, long)[](Tuple!(0, j), Tuple!(i, 0));\n        \
    \    }\n        }\n    }\n    return Tuple!(long, long)[](Tuple!(0, m), Tuple!(0,\
    \ n));\n}", "{\n    long rows = 0;\n    long cols = 0;\n    foreach(row,lst) \n\
    \    {\n        cols = cols + 1;\n        foreach(col,row) \n        {\n     \
    \       if(col == x) \n            {\n                return Tuple!(long, long)[](rows,cols);\n\
    \            }\n        }\n        rows = rows + 1;\n    }\n    return Tuple!(long,\
    \ long)[](rows,cols);\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m1 = m;\n    long n1 = n;\n    long m2 = m;\n    long n2 = n;\n    long m3 =\
    \ m;\n    long n3 = n;\n    long m4 = m;\n    long n4 = n;\n    long m5 = m;\n\
    \    long n5 = n;\n    long m6 = m;\n    long n6 = n;\n    long m7 = m;\n    long\
    \ n7 = n;\n    long m8 = m;\n    long n8 = n;\n    long m9 = m;\n    long n9 =\
    \ n;\n    long m10 = m;\n    long n10 = n;\n    long m11 = m;\n    long n11 =\
    \ n;\n    long m12 = m;\n    long n12 = n;\n    long m13 = m;\n    long n13 =\
    \ n;\n    long m14 = m;\n    long n14 = n;\n    long m15 = m;\n    long n15 =\
    \ n;\n    long m16 = m;\n    long n16 = n;\n    long m17 = m;\n    long n17 =\
    \ n;\n    long m18 = m;\n    long n18 = n;\n    long m19 = m;\n    long n19 =\
    \ n;\n    long m20 = m;\n    long n20 = n;\n    long m21 = m;\n    long n21 =\
    \ n;\n    long m22 = m;\n    long n22 = n;\n    long m23 = m;\n    long n23 =\
    \ n;\n    long m24 = m;\n    long n24 = n;\n    long m25 = m;\n    long n25 =\
    \ n;\n    long m26 = m;\n    long n26 = n;\n    long m27 = m;\n    long n27 =\
    \ n;\n    long m28 = m;\n    long n28 = n;\n    long m29 = m;\n    long n29 =\
    \ n;\n    long m30 = m;\n    long n30 = n;\n    long m31 = m;\n    long n31 =\
    \ n;\n    long m32 = m;\n    long n32 = n;\n    long m33 = m;\n    long n33 =\
    \ n;\n    long m34 = m;\n    long n34 = n;\n    long m35 = m;\n    long n35 =\
    \ n;\n    long m36 = m;\n    long n36 = n;\n    ", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i, j;\n    \n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[n];\n    \n    for(i = 0; i < n; i++)\n    {\n    \
    \    for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n     \
    \       {\n                res[i] = Tuple!(long, long)[i, j];\n              \
    \  break;\n            }\n        }\n    }\n    \n    sort(res);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst)\n    {\n        foreach(column: row)\n        {\n\
    \            if(column == x)\n            {\n                result.push(Tuple!(long,\
    \ long)((row), column));\n            }\n        }\n    }\n    \n    result.sort(function(a,\
    \ b) -> a.1 < b.1);\n    result.sort(function(a, b) -> a.2 < b.2);\n    \n   \
    \ return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n    \
    \        if(col == x)\n            {\n                res.push(Tuple!(long, long)((row,col)));\n\
    \            }\n        }\n    }\n    \n    sort(res);\n    sort(res, Tuple!(long,\
    \ long)((0,0),1));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] result\
    \ = null;\n    \n    foreach(row: lst, i: 0) \n    {\n        foreach(col: row,\
    \ j: 0) \n        {\n            if(col == x) \n            {\n              \
    \  result = Tuple!(long, long)[](Tuple!(0, j), Tuple!(i + 1, j + 1));\n      \
    \      }\n        }\n    }\n    \n    return result;\n}", "{\n    long[][] res\
    \ = new long[lst.Length][];\n    for(int i = 0; i < lst.Length; i++)\n    {\n\
    \        if(lst[i].Length == x)\n        {\n            res[i] = lst[i];\n   \
    \     }\n    }\n    Array.Sort(res);\n    Array.Sort(res, (x, y) => { return y[0]\
    \ - x[0]; });\n    Array.Sort(res, (x, y) => { return y[1] - x[1]; });\n    return\
    \ res;\n}", "{\n    long[][] res = new long[lst.length][];\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        res[i] = lst[i].subarray(0, x);\n    }\n\
    \    Arrays.sort(res, (a, b) -> {\n        long c = a[0] - b[0];\n        return\
    \ c < 0 ? 1 : c;\n    });\n    Arrays.sort(res, (a, b) -> {\n        long c =\
    \ a[1] - b[1];\n        return c < 0 ? 1 : c;\n    });\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res;\n    for(int i = 0; i < lst.length; ++i)\n    {\n\
    \        if(lst[i][0] == x)\n        {\n            Tuple!(long, long)[] row =\
    \ Tuple!(long, long)[];\n            for(int j = 0; j < lst[i].length; ++j)\n\
    \            {\n                if(lst[i][j] == x)\n                {\n      \
    \              row.push((i, j));\n                }\n            }\n         \
    \   res.push(row);\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(row,lst){\n        foreach(col,row){\n\
    \            if(col == x){\n                res.push(Tuple!(long, long)((row,col)));\n\
    \            }\n        }\n    }\n    sort(res);\n    return res;\n}", "{\n  \
    \  Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        for(int j = 0; j < lst[i].Length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     result.Add(new Tuple!(long, long)(i + 1, j + 1));\n            }\n     \
    \   }\n    }\n    \n    result.Sort();\n    \n    for(int i = 0; i < result.Length;\
    \ i++)\n    {\n        result[i].Sort();\n    }\n    \n    return result;\n}",
  "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long i, j, k;\n \
    \   Tuple!(long, long)[] res = new Tuple!(long, long)[n];\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[i] = Tuple!(long, long)[j, i];\n \
    \               break;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res[i] = Tuple!(long, long)[j, i];\n  \
    \              break;\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] result = null;\n    \n    foreach(row: lst, row_index:\
    \ 0) \n    {\n        foreach(column: row, column_index: 0) \n        {\n    \
    \        if(column == x) \n            {\n                result = Tuple!(long,\
    \ long)[](row_index, column_index);\n                break;\n            }\n \
    \       }\n    }\n    \n    return result;\n}", "{\n    int[] row = new int[lst.Length];\n\
    \    int[] col = new int[lst.Length];\n    \n    foreach(i, l) \n    {\n     \
    \   row[i] = i;\n        foreach(j, c) \n        {\n            col[j] = j;\n\
    \            if(l[i] == x) \n            {\n                return Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row: lst, row_index: 0) \n    {\n        foreach(col:\
    \ row, col_index: 0) \n        {\n            if(col == x) \n            {\n \
    \               res = Tuple!(long, long)[](row_index, col_index);\n          \
    \      break;\n            }\n        }\n        if(res != null) break;\n    }\n\
    \    return res;\n}", "{\n    long[][] res = new long[lst.length][];\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        res[i] = lst[i].subarray(0, lst[i].length-1);\n\
    \    }\n    \n    Arrays.sort(res);\n    \n    for(int i = 0; i < res.length;\
    \ i++)\n    {\n        Arrays.sort(res[i]);\n    }\n    \n    Arrays.sort(res,\
    \ (a, b) => (b[0] - a[0]) * (b[1] - a[1]));\n    \n    for(int i = 0; i < res.length;\
    \ i++)\n    {\n        Arrays.sort(res[i], (a, b) => (b[0] - a[0]) * (b[1] - a[1]));\n\
    \    }\n    \n    for(int i = 0; i < res.length; i++)\n    {\n        for(int\
    \ j = 0; j < res[i].length; j++)\n        {\n            if(res[i][j] == x)\n\
    \            {\n                return Tuple!((int)i, (int)j);\n            }\n\
    \        }\n    }\n    \n    return Tuple!(0, 0);\n}", "{\n    long[][] res =\
    \ new long[lst.length][lst[0].length];\n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n          \
    \  if(lst[i][j] == x)\n            {\n                res[i][j] = 1;\n       \
    \     }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n   \
    \ {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(res[i][j]\
    \ == 1)\n            {\n                res[i][j] = j;\n            }\n      \
    \  }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; j++)\n        {\n            if(res[i][j] == j)\n\
    \            {\n                res[i][j] = i;\n            }\n        }\n   \
    \ }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j =\
    \ 0; j < lst[i].length; j++)\n        {\n            if(res[i][j] == i)\n    \
    \        {\n                res[i][j] = Tuple!(long, long)(0, 0);\n          \
    \  }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(res[i][j].x\
    \ == 0)\n            {\n                res[i][j] = Tuple!(long, long)(0, 0);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n          \
    \  if(res[i][j].x == 0)\n            {\n                res[i][j] = Tuple!(long,\
    \ long)(0, 0);\n            }\n        }\n    }\n    \n    for(int i = 0; i <\
    \ lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n  \
    \      {\n            if(res[i][j].x == 0)\n            {\n                res[i][j]\
    \ = Tuple!(long, long)(0, 0);\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(res[i][j].x == 0)\n            {\n         \
    \       res[i][j] = Tuple!(long, long)(0, 0);\n            }\n        }\n    }\n\
    \    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0;\
    \ j < lst[i].length; j++)\n        {\n            if(res[i][j].x == 0)\n     \
    \       {\n                res[i][j] = Tuple!(long, long)(0, 0);\n           \
    \ }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(res[i][j].x\
    \ == 0)\n            {\n                res[i][j] = Tuple!(long, long)(0, 0);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n          \
    \  if(res[i][j].x == 0)\n            {\n                res[i][j", "{\n    long\
    \ n = lst.length;\n    long m = lst[0].length;\n    long i, j;\n    \n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[n];\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                res[i] = new Tuple!(i, j);\n            \
    \    break;\n            }\n        }\n    }\n    \n    Arrays.sort(res);\n  \
    \  \n    return res;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long result[][] = new long[n][m];\n    long i, j;\n    \n    for(i = 0; i\
    \ < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i][j] = 1;\n                break;\n\
    \            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n  \
    \      for(j = 0; j < m; j++)\n        {\n            if(result[i][j] == 1)\n\
    \            {\n                for(long k = j + 1; k < m; k++)\n            \
    \    {\n                    if(result[i][k] == 1)\n                    {\n   \
    \                     result[i][j] = result[i][j] + result[i][k];\n          \
    \              result[i][k] = 0;\n                        break;\n           \
    \         }\n                }\n                break;\n            }\n      \
    \  }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            if(result[i][j] == 1)\n            {\n        \
    \        for(long k = j + 1; k < m; k++)\n                {\n                \
    \    if(result[i][k] == 1)\n                    {\n                        result[i][j]\
    \ = result[i][j] + result[i][k];\n                        result[i][k] = 0;\n\
    \                        break;\n                    }\n                }\n  \
    \              break;\n            }\n        }\n    }\n    \n    for(i = 0; i\
    \ < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 1)\n            {\n                for(long k = j + 1; k < m; k++)\n    \
    \            {\n                    if(result[i][k] == 1)\n                  \
    \  {\n                        result[i][j] = result[i][j] + result[i][k];\n  \
    \                      result[i][k] = 0;\n                        break;\n   \
    \                 }\n                }\n                break;\n            }\n\
    \        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0;\
    \ j < m; j++)\n        {\n            if(result[i][j] == 1)\n            {\n \
    \               for(long k = j + 1; k < m; k++)\n                {\n         \
    \           if(result[i][k] == 1)\n                    {\n                   \
    \     result[i][j] = result[i][j] + result[i][k];\n                        result[i][k]\
    \ = 0;\n                        break;\n                    }\n              \
    \  }\n                break;\n            }\n        }\n    }\n    \n    for(i\
    \ = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n       \
    \     if(result[i][j] == 1)\n            {\n                for(long k = j + 1;\
    \ k < m; k++)\n                {\n                    if(result[i][k] == 1)\n\
    \                    {\n                        result[i][j] = result[i][j] +\
    \ result[i][k];\n                        result[i][k] = 0;\n                 \
    \       break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n  \
    \      for(j = 0; j < m; j", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    \n    long[][] res = new long[(int)ceil(n / m)][][];\n    \n    long i =\
    \ 0, j = 0;\n    \n    while(i < n && j < m) {\n        if(lst[i][j] == x) {\n\
    \            res[i][j] = Tuple!((int)i, (int)j);\n            i += 1;\n      \
    \      j += 1;\n        } else {\n            i += 1;\n        }\n    }\n    \n\
    \    sort(res, 0, (int)ceil(n / m) - 1);\n    sort(res[(int)ceil(n / m)], 0, (int)ceil(m\
    \ / n) - 1);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[];\n    for(int i = 0; i < lst.length; i++)\n    {\n    \
    \    if(lst[i][0] == x)\n        {\n            for(int j = 0; j < lst[i].length;\
    \ j++)\n            {\n                res.add((i, j));\n            }\n     \
    \   }\n    }\n    \n    sort(res);\n    sort(res, true);\n    \n    return res;\n\
    }", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long i, j,\
    \ k;\n    Tuple!(long, long)[] res = new Tuple!(long, long)[(n + 1) * (m + 1)];\n\
    \    \n    for(i = 0; i < n; i++)\n        for(j = 0; j < m; j++)\n          \
    \  if(lst[i][j] == x)\n                res[(i * m) + j] = Tuple!(long, long)[i,\
    \ j];\n    \n    for(i = 0; i < n; i++)\n        for(j = 0; j < m; j++)\n    \
    \        if(lst[i][j] > x)\n                res[(i * m) + j + 1] = Tuple!(long,\
    \ long)[i, j];\n    \n    for(i = 0; i < n; i++)\n        for(j = 0; j < m; j++)\n\
    \            if(lst[i][j] < x)\n                res[(i * m) + j - 1] = Tuple!(long,\
    \ long)[i, j];\n    \n    for(i = 0; i < n; i++)\n        for(j = 0; j < m; j++)\n\
    \            if(lst[i][j] == x)\n                res[(i * m) + j + 1] = Tuple!(long,\
    \ long)[i, j];\n    \n    for(i = 0; i < n; i++)\n        for(j = 0; j < m; j++)\n\
    \            if(lst[i][j] > x)\n                res[(i * m) + j - 1] = Tuple!(long,\
    \ long)[i, j];\n    \n    for(i = 0; i < n; i++)\n        for(j = 0; j < m; j++)\n\
    \            if(lst[i][j] < x)\n                res[(i * m) + j] = Tuple!(long,\
    \ long)[i, j];\n    \n    sort(res, (a, b) => (a.0 == b.0) ? 0 : (a.0 < b.0) ?\
    \ 1 : -1);\n    \n    return res;\n}", "{\n    long n = lst.length;\n    long\
    \ m = lst[0].length;\n    long i, j, k, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m, n, m,\
    \ n, m, n, m, n, m, n, m, n, m, n, ", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row,lst){\n        foreach(col,row){\n            if(col == x){\n\
    \                res = Tuple!(long, long)[](row,col);\n            }\n       \
    \ }\n    }\n    sort(res,fun(x1,x2)->x1.1 > x2.1);\n    sort(res,fun(x1,x2)->x1.2\
    \ > x2.2);\n    return res;\n}", "{\n    long n = lst.length;\n    long[] res\
    \ = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n        if(lst[i][0]\
    \ == x)\n        {\n            res[i] = i;\n        }\n    }\n    return Tuple!(long,\
    \ long)[res];\n}", "{\n    long n = lst.len();\n    long m = lst[0].len();\n \
    \   long[][] res = new long[n][m];\n    for(int i = 0; i < n; i++)\n    {\n  \
    \      for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                res[i][j] = 1;\n            }\n            else\n\
    \            {\n                res[i][j] = 0;\n            }\n        }\n   \
    \ }\n    \n    Arrays.sort(res);\n    \n    Arrays.sort(res, (a, b) -> {\n   \
    \     if(a[0] == b[0])\n        {\n            return a[1] < b[1];\n        }\n\
    \        else\n        {\n            return a[0] < b[0];\n        }\n    });\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row,lst){\n        foreach(col,row){\n         \
    \   if(col == x)\n                res.push(Tuple!(long, long)((row,col)));\n \
    \       }\n    }\n    \n    sort(res,fun(Tuple!(long, long)(a,b)) -> (a.1 > b.1)\
    \ ? 1 : -1);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] result =\
    \ null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n  \
    \          if(col == x)\n            {\n                result = Tuple!(long,\
    \ long)[](row,col);\n                break;\n            }\n        }\n      \
    \  if(result != null)\n            break;\n    }\n    return result;\n}", "{\n\
    \    long n = lst.Length;\n    long m = lst[0].Length;\n    long i, j, k, l, m,\
    \ n, m;\n    Tuple!(long, long)[] result;\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                k = i;\n                m = j;\n        \
    \        break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n;\
    \ i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                l = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                n = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                l = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                n = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                l = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                n = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                l = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                n = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                l = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                n = i;\n                m = j;\n     \
    \           break;\n            }\n        }\n    }\n    \n    ", "{\n    long\
    \ rows = 0;\n    long cols = 0;\n    for(long i = 0; i < lst.length; i++){\n \
    \       rows = rows + lst[i].length;\n        cols = cols + 1;\n    }\n    \n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[rows];\n    \n    for(long\
    \ i = 0; i < lst.length; i++){\n        for(long j = 0; j < lst[i].length; j++){\n\
    \            if(lst[i][j] == x){\n                res[rows] = Tuple!(long, long)[i,\
    \ j];\n                rows++;\n            }\n        }\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < rows; i++){\n        res[i] = res[i].swap;\n    }\n    \n    for(long\
    \ i = 0; i < ", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    foreach(row,lst)\n    {\n        foreach(column,row)\n        {\n \
    \           if(column == x)\n            {\n                result.push(Tuple!(long,\
    \ long)((row,column)));\n            }\n        }\n    }\n    \n    sort(result);\n\
    \    sort(result, 1, result.length-1);\n    \n    return result;\n}", "{\n   \
    \ long n = lst.length;\n    long m = lst[0].length;\n    long i, j, k;\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[n];\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n    \
    \            break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n  \
    \              break;\n            }\n        }\n    }\n    \n    for(i = 0; i\
    \ < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ < x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n  \
    \              break;\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    long[] res = new long[lst.Length];\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            res[i] = lst[i][1];\n\
    \        }\n    }\n    return Tuple!(long, long)[res];\n}", "{\n    int[] row\
    \ = new int[lst.length];\n    int[] col = new int[lst.length];\n    for(int i\
    \ = 0; i < lst.length; i++)\n    {\n        row[i] = i;\n        col[i] = i;\n\
    \    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][col[x]]\
    \ == x)\n        {\n            return Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](", "{\n\
    \    long[] result = new long[lst[0].Length];\n    for(int i = 0; i < lst[0].Length;\
    \ i++)\n    {\n        result[i] = lst[0][i];\n    }\n    for(int i = 1; i < lst.Length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].Length; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[lst[i].Length];\n                for(int k = 0;\
    \ k < lst[i].Length; k++)\n                {\n                    res[k] = new\
    \ Tuple!(long, long)(i, k);\n                }\n                Array.Sort(res);\n\
    \                return res;\n            }\n        }\n    }\n    return new\
    \ Tuple!(long, long)[0];\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    foreach(row::lst) foreach(col::row) \n    {\n        if(col ==\
    \ x) \n        {\n            res[res.length] = Tuple!(long, long)((row,col));\n\
    \        }\n    }\n    sort(res);\n    sort(res, fun(Tuple!(long, long)) -> Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)", "{\n    int[] row = new\
    \ int[lst.length];\n    int[] col = new int[lst.length];\n    \n    for(int i\
    \ = 0; i < lst.length; i++)\n    {\n        row[i] = i;\n        col[i] = i;\n\
    \    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][col[x]]\
    \ == x)\n        {\n            return Tuple!(long, long)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)[Tuple!(int,int)",
  "{\n    int[] row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n\
    \    \n    for(int i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n \
    \       col[i] = i;\n    }\n    \n    for(int i = 0; i < lst.Length; i++)\n  \
    \  {\n        if(lst[i][col[i]] == x)\n        {\n            return Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[]", "{\n    Tuple!(long, long)[] result;\n    \n\
    \    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n          \
    \  if(col == x)\n            {\n                result.push(Tuple!(long, long)((row,col)));\n\
    \            }\n        }\n    }\n    \n    sort(result);\n    \n    foreach(row,result)\n\
    \    {\n        sort(row);\n    }\n    \n    return result;\n}", "{\n    int[]\
    \ row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n    \n   \
    \ for(int i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n        col[i]\
    \ = i;\n    }\n    \n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][col[i]]\
    \ == x)\n        {\n            return Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[]", "{\n\
    \    int[] row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n\
    \    \n    for(int i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n \
    \       col[i] = 0;\n    }\n    \n    for(int i = 0; i < lst.Length; i++)\n  \
    \  {\n        for(int j = 0; j < lst[i].Length; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[lst.Length];\n                \n                for(int k = 0; k < lst.Length;\
    \ k++)\n                {\n                    res[k] = new Tuple!(long, long)[lst.Length];\n\
    \                    \n                    for(int l = 0; l < lst.Length; l++)\n\
    \                    {\n                        res[k][l] = new Tuple!(long, long)[lst.Length];\n\
    \                    }\n                }\n                \n                res[row[i]][col[i]]\
    \ = new Tuple!(long, long)[lst.Length];\n                \n                for(int\
    \ k = 0; k < lst.Length; k++)\n                {\n                    res[row[i]][col[i]][k]\
    \ = new Tuple!(long, long)[lst.Length];\n                }\n                \n\
    \                return res;\n            }\n        }\n    }\n    \n    return\
    \ new Tuple!(long, long)[lst.Length];\n}", "{\n    Tuple!(long, long)[] res =\
    \ null;\n    foreach(row: lst, i: 0) \n    {\n        foreach(col: row, j: 0)\
    \ \n        {\n            if(col == x) \n            {\n                res =\
    \ Tuple!(long, long)[i, j];\n                break;\n            }\n        }\n\
    \        if(res != null) break;\n    }\n    return res;\n}", "{\n    long n =\
    \ lst.length;\n    long m = lst[0].length;\n    long i, j;\n    long[] res = new\
    \ long[(n + 1) * (m + 1)];\n    \n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n                res[(i\
    \ * m) + j] = i;\n                res[((i + 1) * m) + j] = j;\n            }\n\
    \        }\n    }\n    \n    sort(res, 0, res.length);\n    sort(res, n, m + 1);\n\
    \    \n    return Tuple!(long, long)[](res);\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    foreach(row,lst) \n    {\n        foreach(col,row) \n     \
    \   {\n            if(col == x) \n            {\n                res = Tuple!(long,\
    \ long)[](row, col);\n                break;\n            }\n        }\n     \
    \   if(res != null) break;\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    \n    foreach(row::lst) \n    {\n        foreach(col::row)\
    \ \n        {\n            if(col == x) \n            {\n                res =\
    \ Tuple!(long, long)[](row, col);\n                break;\n            }\n   \
    \     }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i][0] == x)\n        {\n            for(int j = 0; j <\
    \ lst[i].Length; j++)\n            {\n                result.Add(Tuple!(long,\
    \ long)[i, j]);\n            }\n        }\n    }\n    \n    result.SortByDescending((x,\
    \ y) => y.Item1 - x.Item1);\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[](row,col);\n                break;\n            }\n        }\n      \
    \  if(res != null)\n            break;\n    }\n    return res;\n}", "{\n    long\
    \ n = lst.length;\n    long m = lst[0].length;\n    long[][] res = new long[n][m];\n\
    \    long i, j;\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res[i][j] = i;\n                res[i][m-1] = j;\n                return\
    \ Tuple!(long, long)[](res);\n            }\n        }\n    }\n    return Tuple!(long,\
    \ long)[](res);\n}", "{\n    long[] res = new long[lst[0].Length];\n    for(int\
    \ i = 0; i < lst[0].Length; i++)\n    {\n        if(lst[0][i] == x)\n        {\n\
    \            res[i] = i;\n        }\n    }\n    Array.Sort(res);\n    Array.Sort(res,\
    \ (x, y) => { return y - x; });\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[res.Length];\n    for(int i = 0; i < res.Length; i++)\n    {\n       \
    \ res[i] = new Tuple!(long, long)((int)res[i], i);\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    foreach(i, row)\
    \ \n    {\n        foreach(j, col) \n        {\n            if(row[j] == x) \n\
    \            {\n                res[res.length] = Tuple!(long, long)(i,j);\n \
    \           }\n        }\n    }\n    sort(res);\n    sort(res, (a, b) => -cmp(a.i,\
    \ b.i));\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row: lst, i: int) \n    {\n        foreach(col:\
    \ row, j: int) \n        {\n            if(col == x) \n            {\n       \
    \         res[res.length] = Tuple!(i, j);\n            }\n        }\n    }\n \
    \   \n    sort(res);\n    sort(res, (a, b) => a.first > b.first);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ foreach(i, row) \n    {\n        foreach(j, col) \n        {\n            if(row[j]\
    \ == x) \n            {\n                res[res.length] = Tuple!(long, long)(i,j);\n\
    \            }\n        }\n    }\n    sort(res);\n    sort(res, (a, b) => a.1\
    \ < b.1);\n    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row: lst, row_index: 0) \n    {\n        foreach(column:\
    \ row, column_index: 0) \n        {\n            if(column == x) \n          \
    \  {\n                foreach(coordinate: row, coordinate_index: 0) \n       \
    \         {\n                    result.push(Tuple!(long, long)((row_index, coordinate_index),\
    \ (column_index, coordinate_index)));\n                }\n            }\n    \
    \    }\n    }\n    \n    result.sort(function(a, b) -> a.0 < b.0 ? -1 : a.0 >\
    \ b.0 ? 1 : 0);\n    \n    foreach(coordinate: result, coordinate_index: 0) \n\
    \    {\n        foreach(coordinate2: result, coordinate2_index: 0) \n        {\n\
    \            if(coordinate.1 < coordinate2.1) \n            {\n              \
    \  swap(coordinate, coordinate2);\n            }\n        }\n    }\n    \n   \
    \ foreach(coordinate: result, coordinate_index: 0) \n    {\n        foreach(coordinate2:\
    \ result, coordinate2_index: 0) \n        {\n            if(coordinate.1 < coordinate2.1)\
    \ \n            {\n                swap(coordinate, coordinate2);\n          \
    \  }\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ res;\n    \n    foreach(row,lst) \n    {\n        foreach(col,row) \n      \
    \  {\n            if(col == x) \n            {\n                res[res.length]\
    \ = Tuple!(long, long)((row,col));\n            }\n        }\n    }\n    \n  \
    \  sort(res);\n    sort(res, fun(Tuple!(long, long)) -> Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool\
    \ { return Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return\
    \ Tuple!(long, long)->bool { return Tuple!(long, long)->bool { return Tuple!(long,\
    \ long)->bool { return ", "{\n    int[] row = new int[lst.Length];\n    int[]\
    \ col = new int[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n    {\n\
    \        row[i] = i;\n        col[i] = i;\n    }\n    Array.Sort(row);\n    Array.Sort(col);\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.Length];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][row[i]] == x)\n      \
    \  {\n            res[i] = Tuple!(long, long)[Tuple!(0, row[i]), Tuple!(0, col[i])];\n\
    \        }\n    }\n    return res;\n}\n/*", "{\n    Tuple!(long, long)[] result\
    \ = null;\n    \n    foreach(row: lst, row_index: 0) \n    {\n        foreach(column:\
    \ row, column_index: 0) \n        {\n            if(column == x) \n          \
    \  {\n                result = Tuple!(long, long)[](row_index, column_index);\n\
    \                break;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long i = 0;\n\
    \    long j = 0;\n    Tuple!(long, long)[] res = null;\n    while(i < n && j <\
    \ m) {\n        if(lst[i][j] == x) {\n            if(res == null) {\n        \
    \        res = new Tuple!(long, long)[(n + 1) * (m + 1)];\n                for(long\
    \ k = 0; k < n + 1; k++) {\n                    res[k][0] = k;\n             \
    \       res[k][1] = 0;\n                }\n                for(long k = 0; k <\
    \ m + 1; k++) {\n                    res[k][n + 1] = k;\n                    res[k][m\
    \ + 1] = 0;\n                }\n            }\n            res[(i + 1) * (n +\
    \ 1) + j + 1] = Tuple!(long, long)[i, j];\n            i += 1;\n            j\
    \ += 1;\n        }\n        else if(lst[i][j] < x) {\n            i += 1;\n  \
    \      }\n        else {\n            j += 1;\n        }\n    }\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n    {\n  \
    \      foreach(col,row)\n        {\n            if(col == x)\n            {\n\
    \                res = Tuple!(long, long)[Tuple!(0, col), Tuple!(1, col)];\n \
    \               break;\n            }\n        }\n        if(res != null)\n  \
    \          break;\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = null;\n    foreach(row: lst) {\n        foreach(col: row) {\n            if(col\
    \ == x) {\n                res = Tuple!(long, long)[](row, col);\n           \
    \ }\n        }\n    }\n    \n    return res;\n}", "{\n    int[] row = new int[lst[0].Length];\n\
    \    int[] col = new int[lst[0].Length];\n    for(int i = 0; i < lst[0].Length;\
    \ i++)\n    {\n        row[i] = i;\n        col[i] = i;\n    }\n    \n    for(int\
    \ i = 0; i < lst[0].Length; i++)\n    {\n        if(lst[0][i] == x)\n        {\n\
    \            Tuple!(long, long)[] ret = new Tuple!(long, long)[lst[0].Length];\n\
    \            for(int j = 0; j < lst[0].Length; j++)\n            {\n         \
    \       ret[j] = (row[j], col[j]);\n            }\n            return ret;\n \
    \       }\n    }\n    return null;\n}", "{\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[];\n    \n    foreach(i : 0..lst.len())\n    {\n        foreach(j\
    \ : 0..lst[i].len())\n        {\n            if(lst[i][j] == x)\n            {\n\
    \                res.push((i, j));\n            }\n        }\n    }\n    \n  \
    \  return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\
    \ \n    {\n        foreach(col,row) \n        {\n            if(col == x) \n \
    \           {\n                res = Tuple!(long, long)[](row,col);\n        \
    \        break;\n            }\n        }\n        if(res != null) break;\n  \
    \  }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n\
    \    {\n        foreach(col,row)\n        {\n            if(col == x)\n      \
    \      {\n                res = Tuple!(long, long)[](row,col);\n             \
    \   break;\n            }\n        }\n        if(res != null)\n            break;\n\
    \    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result = null;\n   \
    \ \n    foreach(row: lst, row_index: 0) \n    {\n        foreach(column: row,\
    \ column_index: 0) \n        {\n            if(column == x) \n            {\n\
    \                if(result == null) \n                {\n                    result\
    \ = Tuple!(long, long)[];\n                }\n                \n             \
    \   result[result.length] = Tuple!(row_index, column_index);\n            }\n\
    \        }\n    }\n    \n    foreach(row: result, row_index: 0) \n    {\n    \
    \    foreach(column: row, column_index: 0) \n        {\n            foreach(coordinate:\
    \ result, coordinate_index: 0) \n            {\n                if(coordinate_index\
    \ == row_index) \n                {\n                    foreach(coordinate2:\
    \ result, coordinate2_index: 0) \n                    {\n                    \
    \    if(coordinate2_index == column_index) \n                        {\n     \
    \                       if(result == null) \n                            {\n \
    \                               result = Tuple!(long, long)[];\n             \
    \               }\n                            \n                            result[result.length]\
    \ = Tuple!(coordinate2_index, coordinate_index);\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    foreach(row: result, row_index: 0) \n    {\n        foreach(column:\
    \ row, column_index: 0) \n        {\n            foreach(coordinate: result, coordinate_index:\
    \ 0) \n            {\n                if(coordinate_index == row_index) \n   \
    \             {\n                    foreach(coordinate2: result, coordinate2_index:\
    \ 0) \n                    {\n                        if(coordinate2_index ==\
    \ column_index) \n                        {\n                            if(result\
    \ == null) \n                            {\n                                result\
    \ = Tuple!(long, long)[];\n                            }\n                   \
    \         \n                            result[result.length] = Tuple!(coordinate_index,\
    \ coordinate2_index);\n                        }\n                    }\n    \
    \            }\n            }\n        }\n    }\n    \n    foreach(row: result,\
    \ row_index: 0) \n    {\n        foreach(column: row, column_index: 0) \n    \
    \    {\n            foreach(coordinate: result, coordinate_index: 0) \n      \
    \      {\n                if(coordinate_index == row_index) \n               \
    \ {\n                    foreach(coordinate2: result, coordinate2_index: 0) \n\
    \                    {\n                        if(coordinate2_index == column_index)\
    \ \n                        {\n                            if(result == null)\
    \ \n                            {\n                                result = Tuple!(long,\
    \ long)[];\n                            }\n                            \n    \
    \                        result[result.length] = Tuple!(coordinate_index, coordinate2_index);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    \n    foreach(row: result, row_index: 0) \n   \
    \ {\n        foreach(column: row, column_index: 0) \n        {\n            foreach(coordinate:\
    \ result, coordinate_index: 0) \n            {\n                if(coordinate_index\
    \ == row_index) \n                {\n                    foreach(coordinate2: ",
  "{\n    long[][] res = new long[lst.length][lst[0].length];\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[0].length; j++)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res[i][j]\
    \ = 1;\n            }\n            else\n            {\n                res[i][j]\
    \ = 0;\n            }\n        }\n    }\n    \n    Arrays.sort(res);\n    \n \
    \   Arrays.sort(res, (a, b) -> {\n        if(a[0] == b[0])\n        {\n      \
    \      return a[1] > b[1];\n        }\n        else\n        {\n            return\
    \ a[0] > b[0];\n        }\n    });\n    \n    Arrays.sort(res, (a, b) -> {\n \
    \       if(a[0] == b[0])\n        {\n            return a[1] < b[1];\n       \
    \ }\n        else\n        {\n            return a[0] < b[0];\n        }\n   \
    \ });\n    \n    return res;\n}", "{\n    long[] res = new long[lst[0].Length];\n\
    \    for(int i = 0; i < lst[0].Length; i++)\n    {\n        res[i] = lst[0][i];\n\
    \    }\n    for(int i = 1; i < lst.Length; i++)\n    {\n        for(int j = 0;\
    \ j < lst[i].Length; j++)\n        {\n            if(lst[i][j] == x)\n       \
    \     {\n                res[i] = j;\n                break;\n            }\n\
    \        }\n    }\n    Array.Sort(res);\n    Array.Sort(res);\n    return Tuple!(long,\
    \ long)[res];\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(row,lst)\n \
    \   {\n        foreach(col,row)\n        {\n            if(col == x)\n       \
    \     {\n                res = Tuple!(long, long)[](row,col);\n              \
    \  break;\n            }\n        }\n    }\n    sort(res,by=byDescending);\n \
    \   return res;\n}\n/*", "{\n    Tuple!(long, long)[] res = null;\n    \n    foreach(row::lst)\
    \ \n    {\n        foreach(col::row) \n        {\n            if(col == x) \n\
    \            {\n                res = Tuple!(long, long)[](row, col);\n      \
    \          break;\n            }\n        }\n    }\n    \n    if(res == null)\
    \ \n    {\n        throw new Exception(\"Invalid input\");\n    }\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ ++j)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     result.add((i, j));\n            }\n        }\n    }\n    result.sort(function(a,\
    \ b) -> a.0 < b.0 ? -1 : a.0 > b.0 ? 1 : 0);\n    result.sort(function(a, b) ->\
    \ a.1 < b.0 ? -1 : a.1 > b.0 ? 1 : 0);\n    return result;\n}", "{\n    int[]\
    \ row = new int[lst.length];\n    int[] col = new int[lst[0].length];\n    for(int\
    \ i = 0; i < lst.length; i++){\n        for(int j = 0; j < lst[i].length; j++){\n\
    \            if(lst[i][j] == x){\n                row[i] = j;\n              \
    \  col[j] = i;\n            }\n        }\n    }\n    \n    int[] sorted = new\
    \ int[lst.length];\n    for(int i = 0; i < lst.length; i++){\n        sorted[i]\
    \ = i;\n    }\n    \n    for(int i = 0; i < lst.length; i++){\n        for(int\
    \ j = 0; j < lst[i].length; j++){\n            if(sorted[j] > sorted[i]){\n  \
    \              swap(sorted[j], sorted[i]);\n            }\n        }\n    }\n\
    \    \n    int[] rowSorted = new int[lst.length];\n    int[] colSorted = new int[lst[0].length];\n\
    \    for(int i = 0; i < lst.length; i++){\n        rowSorted[i] = sorted[i];\n\
    \        colSorted[i] = sorted[lst[i].length-1];\n    }\n    \n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length;\
    \ i++){\n        res[i] = Tuple!(long, long)((rowSorted[i], colSorted[i]));\n\
    \    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n          \
    \  if(col == x)\n            {\n                if(res == null)\n            \
    \        res = Tuple!(long, long)[](row,col);\n                else\n        \
    \            res = Tuple!(long, long)[](row,col);\n            }\n        }\n\
    \    }\n    \n    if(res == null)\n        return Tuple!(long, long)[]();\n  \
    \  \n    foreach(row,res)\n    {\n        foreach(col,row)\n        {\n      \
    \      if(col > res)\n                res = Tuple!(long, long)[](row,col);\n \
    \       }\n    }\n    \n    return res;\n}", "{\n    long n = lst.length;\n  \
    \  long[] res = new long[n];\n    for(int i = 0; i < n; ++i)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; ++j)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                res[i] = j;\n                res[i+1] = i;\n \
    \               return Tuple!(long, long)[](res);\n            }\n        }\n\
    \    }\n    return Tuple!(long, long)[](res);\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i, j, k;\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[n];\n    \n    for(i = 0; i < n; i++)\n    {\n    \
    \    for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n     \
    \       {\n                for(k = 0; k < m; k++)\n                {\n       \
    \             result[i]._1 = i;\n                    result[i]._2 = k;\n     \
    \               break;\n                }\n                break;\n          \
    \  }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = 0; j < m; j++)\n        {\n            if(lst[i][j] > x)\n            {\n\
    \                for(k = 0; k < m; k++)\n                {\n                 \
    \   result[i]._1 = i;\n                    result[i]._2 = k;\n               \
    \     break;\n                }\n                break;\n            }\n     \
    \   }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j <\
    \ m; j++)\n        {\n            if(lst[i][j] < x)\n            {\n         \
    \       for(k = 0; k < m; k++)\n                {\n                    result[i]._1\
    \ = i;\n                    result[i]._2 = k;\n                    break;\n  \
    \              }\n                break;\n            }\n        }\n    }\n  \
    \  \n    sort(result, 0, n - 1);\n    sort(result, n - 1, m - 1);\n    \n    return\
    \ result;\n}", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(row: lst,\
    \ row_index: 0) \n    {\n        foreach(column: row, column_index: 0) \n    \
    \    {\n            if(column == x) \n            {\n                foreach(coordinate:\
    \ row, coordinate_index: 0) \n                {\n                    result =\
    \ append(result, Tuple!(long, long)((row_index, coordinate_index), (column_index,\
    \ coordinate_index)));\n                }\n            }\n        }\n    }\n \
    \   \n    sort(result, (a, b) => a.1 < b.1);\n    sort(result, (a, b) => a.2 <\
    \ b.2);\n    \n    return result;\n}", "{\n    int[] row = new int[lst.Length];\n\
    \    int[] col = new int[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        row[i] = i;\n        col[i] = 0;\n    }\n    \n    while(true)\n\
    \    {\n        int minRow = -1;\n        for(int i = 0; i < lst.Length; i++)\n\
    \        {\n            if(row[i] != i)\n            {\n                col[i]\
    \ = 0;\n            }\n            else\n            {\n                col[i]\
    \ = col[i] + 1;\n                if(col[i] > x)\n                {\n         \
    \           col[i] = 0;\n                }\n            }\n            \n    \
    \        if(minRow == -1 || col[i] < col[minRow])\n            {\n           \
    \     minRow = i;\n            }\n        }\n        \n        if(minRow != -1)\n\
    \        {\n            Tuple!(long, long)[] res = new Tuple!(long, long)[minRow\
    \ + 1];\n            for(int i = 0; i < minRow + 1; i++)\n            {\n    \
    \            res[i] = Tuple!(long, long)[i, col[i]];\n            }\n        \
    \    return res;\n        }\n        \n        if(lst.Length == 0)\n        {\n\
    \            return new Tuple!(long, long)[0];\n        }\n        \n        lst\
    \ = lst[lst.Length - 1];\n    }\n}", "{\n    long n = lst.length;\n    long m\
    \ = lst[0].length;\n    long i, j;\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[n];\n    \n    for(i = 0; i < n; ++i)\n    {\n        for(j = 0; j < m;\
    \ ++j)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res[i] = Tuple!(long, long)[i, j];\n                break;\n           \
    \ }\n        }\n    }\n    \n    sort(res);\n    \n    for(i = 0; i < n; ++i)\n\
    \    {\n        res[i] = res[i].swap;\n    }\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n       \
    \     for(int j = 0; j < lst[i].length; j++)\n            {\n                if(lst[i][j]\
    \ == x)\n                {\n                    res.add((i, j)); \n          \
    \      }\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row: lst) \n    {\n\
    \        foreach(col: row) \n        {\n            if(col == x) \n          \
    \  {\n                res.push(Tuple!(long, long)((row), col));\n            }\n\
    \        }\n    }\n    \n    foreach(row: lst) \n    {\n        foreach(col: row)\
    \ \n        {\n            if(col != x) \n            {\n                res.push(Tuple!(long,\
    \ long)((row), col));\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    foreach(row:\
    \ lst, i: int) \n    {\n        foreach(col: row, j: int) \n        {\n      \
    \      if (col == x) \n            {\n                res.add((i, j));\n     \
    \       }\n        }\n    }\n    \n    foreach(row: lst, i: int) \n    {\n   \
    \     foreach(col: row, j: int) \n        {\n            if (col != x) \n    \
    \        {\n                res.add((i, j));\n            }\n        }\n    }\n\
    \    \n    return res;\n}", "{\n    long[] res = new long[lst[0].Length];\n  \
    \  for(int i = 0; i < lst[0].Length; i++)\n    {\n        res[i] = lst[0][i];\n\
    \    }\n    for(int i = 1; i < lst.Length; i++)\n    {\n        for(int j = 0;\
    \ j < lst[i].Length; j++)\n        {\n            if(lst[i][j] == x)\n       \
    \     {\n                res[i] = j;\n                break;\n            }\n\
    \        }\n    }\n    \n    Array.Sort(res);\n    Array.Sort(res, (x, y) => {\
    \ return y - x; });\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[res.Length];\n\
    \    for(int i = 0; i < res.Length; i++)\n    {\n        res[i] = new Tuple!(long,\
    \ long)(i, res[i]);\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n       \
    \ {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[](row,col);\n                break;\n            }\n        }\n      \
    \  if(res != null)\n            break;\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(i : 0..lst.length-1)\n\
    \    {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[res.length] = Tuple!(i, j);\n    \
    \        }\n        }\n    }\n    sort(res);\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = null;\n    foreach(row: lst, row_index: long) \n    {\n   \
    \     foreach(column: row, column_index: long) \n        {\n            if(column_index\
    \ == x) \n            {\n                result = Tuple!(long, long)[](row_index,\
    \ column_index);\n                break;\n            }\n        }\n        if(result\
    \ != null) break;\n    }\n    return result;\n}", "{\n    long[][] res = new long[lst.Length][];\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i].Length == x)\n\
    \        {\n            res[i] = lst[i];\n        }\n    }\n    Array.Sort(res,\
    \ (x, y) => x.CompareTo(y));\n    Array.Sort(res, (x, y) => y.CompareTo(x));\n\
    \    return res;\n}", "{\n    int[] row = new int[lst.Length];\n    int[] col\
    \ = new int[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n    {\n   \
    \     row[i] = i;\n        col[i] = i;\n    }\n    Array.Sort(row);\n    Array.Sort(col);\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        if(row[i] == x)\n   \
    \     {\n            for(int j = i; j < lst.Length; j++)\n            {\n    \
    \            if(col[j] > i)\n                {\n                    col[j] = i;\n\
    \                    break;\n                }\n            }\n            break;\n\
    \        }\n    }\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.Length];\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        res[i] = new Tuple!(long,\
    \ long)((row[i], col[i]));\n    }\n    return res;\n}\n/*"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
