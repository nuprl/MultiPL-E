name: HumanEval_7_filter_by_substring
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
  \ only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
  \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n   \
  \ ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[] strings,\
  \ string substring) \n"
tests: "unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  foreach (string s in strings) {\n        if (s.Contains(substring)) {\n   \
    \         result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a ", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=java,arrays,string |>\n<code>\npublic class StringFilter\
    \ {", "{\n    string[] result = new string[strings.length];\n    for(int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ libraries other than std.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use any libraries.\n<|/ c |>\n<| c |>\nThanks again. I am not allowed to use\
    \ any libraries other than std.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use any libraries.\n<|/ c |>\n<| c |>\nThanks again. I am not allowed to use\
    \ any libraries other than std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ void main(String[] args) {\n    String[] strings = {\"abc\", \"bacd\", \"cde\"\
    , \"array\"};\n    System.out.println(filterBySubstring(strings, \"a\"));\n}",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nI like your answer, but I think it would be better to use a `HashSet<string>`\
    \ instead of an `ArrayList`.  It would also help to explain why you chose `HashSet`\
    \ over `ArrayList`.\n<|/ c |>\n<| c |>\nI agree with you. I was just trying to\
    \ give a solution that would not require any external libraries.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. I was just trying to give a solution that would not\
    \ require any external libraries.\n<|/ c |>\n<| c |>\nI agree with you. I was\
    \ just trying to give a solution that would not require any external libraries.\n\
    <|/ c |>\n<| c |>\nI agree with you. I was just trying to give a solution that\
    \ would not require any external libraries.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI like your answer, but I think it would be better to use a `HashSet<string>`\
    \ instead of an `ArrayList`.  It would also help to explain why you chose `HashSet`\
    \ over `ArrayList`.\n<|/ c |>\n<| c |>\nI agree with you. I was just trying to\
    \ give a solution that would not require any external libraries.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. I was just trying to give a solution that would not\
    \ require any external libraries.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore", "{\n \
    \   string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#,list\
    \ |>\n<| a tags=string,arrays,c#,list |>\n<code>\nstring[] stringArray = { \"\
    abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(searchString)).ToArray();\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis solution will throw an exception if the string\
    \ is not found.\n<|/ c |>\n<| c |>\nThis solution will throw an exception if the\
    \ string is not found.\n<|/ c |>\n<| c |>\nThis solution will throw an exception\
    \ if the string is not found.\n<|/ c |>\n<| c |>\nThis solution will throw an\
    \ exception if the string is not found.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c#,list |>\n<| c |>\nThis solution will throw\
    \ an exception if the string is not found.\n<|/ c |>\n<| c |>\nThis solution will\
    \ throw an exception if the string is not found.\n<|/ c |>\n<| c |>\nThis solution\
    \ will throw an exception if the string is not found.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string searchString = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c#,list |>\n<| c |>\nThis solution will throw\
    \ an exception if the string is not found.\n<|/ c |>\n<| a tags=string,arrays,c#,list\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string searchString = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis solution will throw an exception if\
    \ the string is not found.\n<|/ c |>\n<|", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/11182921)\n<|/ c |>\n<| c |>\n\
    I believe it does answer the question. He asked how to filter out strings that\
    \ don't contain \"a\" in the strings. I provided a solution that does exactly\
    \ that. He also asked how to do this with multiple strings. I provided a solution\
    \ that does exactly that. He also asked how to do this with multiple strings.\
    \ I provided a solution that does exactly that. He also asked how to do this with\
    \ multiple strings. I provided a solution that does exactly that. He also asked\
    \ how to do this with multiple strings. I provided a solution that does exactly\
    \ that. He also asked how to do this with multiple strings. I provided a solution\
    \ that does exactly that. He also asked how to do this with multiple strings.\
    \ I provided a solution that does exactly that. He also asked how to do this with\
    \ multiple strings. I provided a solution that does exactly that. He also asked\
    \ how to do this with multiple strings. I provided a solution that does exactly\
    \ that. He also asked how to do this with multiple strings. I provided a solution\
    \ that does exactly that. He also asked how to do this with multiple strings.\
    \ I provided a solution that does exactly that. He also asked how to do this with\
    \ multiple strings. I provided a solution that does exactly that. He also asked\
    \ how to do this with multiple strings. I provided a solution that does exactly\
    \ that. He also asked how to do this with multiple strings. I provided a solution\
    \ that does exactly that. He also asked how to do this with multiple strings.\
    \ I provided a solution that does exactly that. He also asked how to do this with\
    \ multiple strings. I provided a solution that does exactly that. He also asked\
    \ how to do this with multiple strings. I provided a solution that does exactly\
    \ that. He also asked how to do this with multiple strings. I provided a solution\
    \ that does exactly that. He also asked how to do this with multiple strings.\
    \ I provided a solution that does exactly that. He also asked how to do this ",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String s : list) {\n        if (s.contains(substring)) {\n         \
    \   result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String s : list) {\n        if (s.contains(substring)) {\n         \
    \   result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String s : list) {\n        if (s.contains(substring)) {\n         \
    \   result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String s : list) {\n        if (s.contains(substring)) {\n         \
    \   result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String s : list) {\n        if (s.contains(substring)) {\n         \
    \   result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String s : list) {\n        if (s.contains(substring)) {\n         \
    \   result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String s : list) {\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays,.net |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays,.net\
    \ |>\n<| a tags=string,c#,arrays,.net |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,.net dscore=2 |>\n<| a tags=string,c#,arrays,.net\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,.net\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,.net\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\
    \ {\n        if(s.contains(substring)) {\n            result[i++] = s;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,.net,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,.net,linq\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,.net,linq |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,.net,linq |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,.net,linq\
    \ |>\n<| a tags=c#,string,.net,linq |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 tags=c#,string,.net,linq |>\n<| a tags=c#,string,.net,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,.net,linq |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=c#,string,.net,linq |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,.net,linq\
    \ |>\n<code>\nstring[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you have a string like \"abcde\"\
    \ in the list\n<|/ c |>\n<| c |>\nI didn't say it wouldn't, I said it wouldn't.\
    \ :)\n<|/ c |>\n<| c |>\nI didn't say it wouldn't, I said it wouldn't. :)\n<|/\
    \ c |>\n<| c |>\nI didn't say it wouldn't, I said it wouldn't. :)\n<|/ c |>\n\
    <| c |>\nI didn't say it wouldn't, I said it wouldn't. :)\n<|/ c |>\n<| a tags=string,c#,list\
    \ |>\n<code>\nList<string> list = new List<string>();\nlist.Add(\"abc\");\nlist.Add(\"\
    bacd\");\nlist.Add(\"cde\");\nlist.Add(\"array\");\nlist.Add(\"abce\");\nlist.Add(\"\
    abcef\");\nlist.Add(\"abcf\");\nlist.Add(\"abcfg\");\nlist.Add(\"abcfgh\");\n\
    list.Add(\"abcfghi\");\nlist.Add(\"abcfghij\");\nlist.Add(\"abcfghijk\");\nlist.Add(\"\
    abcfghijkl\");\nlist.Add(\"abcfghijklm\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"\
    abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"\
    abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"\
    abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"\
    abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"\
    abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"abcfghijklmn\");\nlist.Add(\"\
    abcfghijklmn\");\n", "{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to filter out all strings that don't contain the substring.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that does that.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to filter out all strings that don't contain the\
    \ substring.\n<|/ c |>\n<| c |>\nI added a solution that does that.\n<|/ c |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to filter out all strings\
    \ that don't contain the substring.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring[] result = new\
    \ string[strings.length];", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.List;", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'cde']\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.List;", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `string[] result =\
    \ new string[strings.length];` will throw an `ArrayIndexOutOfBoundsException`\
    \ because `strings.length` will be `0` at this point. `strings.length` will never\
    \ be `0` because `strings` will never be `null`.\n<|/ c |>\n<| c |>\nYes, I realized\
    \ that after I posted it. I fixed it now.\n<|/ c |>\n<| a tags=string,java,arrays\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : strings) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result.toArray(new String[result.size()]);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,java,arrays |>\n<code>\npublic static\
    \ String[] filterBySubstring(String[] strings, String substring) {\n    List<String>\
    \ result = new ArrayList<>();\n    for (String s : strings) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result.toArray(new\
    \ String[result.size()]);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add\
    \ some explanation to your answer such that others can learn from it\n<|/ c |>\n\
    <| a |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : strings) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result.toArray(new String[result.size()]);\n}\n\
    </code>\n<|/ a dscore=0 tags=string,java,arrays |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=string,java,arrays\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : strings) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result.toArray(new String[result.size()]);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,java,arrays |>\n<code>\npublic static\
    \ String[] filterBySubstring(String[] strings, String substring) {", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n        {\n      \
    \      result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string,arrays |>\n<| c |>\nThanks, I didn't know about that\
    \ method. I'm still new to C# and I didn't know about that method. Thanks for\
    \ your help.\n<|/ c |>\n<| c |>\nI added a version that uses `Contains`, which\
    \ might be more efficient.\n<|/ c |>\n<| c |>\nThanks, I didn't know about that\
    \ method. I'm still new to C# and I didn't know about that method. Thanks for\
    \ your help.\n<|/ c |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks, I didn't know about that method.\
    \ I'm still new to C# and I didn't know about that method. Thanks for your help.\n\
    <|/ c |>\n<| a |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(searchString)).ToArray();\n</code>\n<|/ a dscore=2 tags=c#,.net,string,arrays\
    \ |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[] stringArray = { \"\
    abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,linq |>\n<code>\n\
    var result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=string,c#,linq |>\n<| a tags=string,c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,linq |>\n<code>\nvar result =\
    \ strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=string,c#,linq |>\n<| a tags=string,c#,linq |>\n<code>\nvar\
    \ result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,linq |>\n<code>\n\
    var result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=string,c#,linq |>\n<| a |>\n<code>\nvar\
    \ result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ tags=string,c#,linq |>\n<| a tags=string,c#,linq |>", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays dscore=0 |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 tags=string,c#,arrays |>\n<| a dscore=0 ", "{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\n\
    Thanks so much for this. I really appreciate it. I will try this out and let you\
    \ know how it goes.\n<|/ c |>\n<| c |>\nI added a version that uses LINQ to filter\
    \ the strings. I hope it helps.\n<|/ c |>\n<| c |>\nThanks so much for this. I\
    \ really appreciate it. I will try this out and let you know how it goes.\n<|/\
    \ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filtered = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] filtered = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filtered\
    \ = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filtered = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] filtered = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filtered\
    \ = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\n\
    This doesn't work if you have a string array that has multiple occurrences of\
    \ the substring.\n<|/ c |>\n<| c |>\n: It does. `string[] strings = new string[]\
    \ { \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"\
    abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"\
    , \"abc\", \"abc", "{\n    string[] result = new string[strings.length];\n   \
    \ for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question. He\
    \ wants to remove all strings that don't contain the substring \"abc\".\n<|/ c\
    \ |>\n<| c |>\n: I guess I misunderstood the question. I'll edit my answer accordingly.\n\
    <|/ c |>\n<| c |>\n: I edited my answer to reflect your comment. Thanks.\n<|/\
    \ c |>\n<| c |>\n: I edited my answer to reflect your comment. Thanks.\n<|/ c\
    \ |>\n<| c |>\n: I edited my answer to reflect your comment. Thanks.\n<|/ c |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring[]\
    \ substrings = new string[] { \"abc\" };\nstring[] result = strings.Where(s =>\
    \ !substrings.Contains(s)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring[] substrings = new\
    \ string[] { \"abc\" };\nstring[] result = strings.Where(s => !substrings.Contains(s)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"\
    , \"vwx\", \"yz\" };\nstring[] substrings = new string[] { \"abc\" };\nstring[]\
    \ result = strings.Where(s => !substrings.Contains(s)).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"\
    vwx\", \"yz\" };\nstring[] substrings = new string[] { \"abc\" };\nstring[] result\
    \ = strings.Where(s => ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static List<String>\
    \ filterBySubstring(List<String> list, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for (String s : list) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays,list |>\n<| a dscore=1 |>\n<code>\npublic static List<String>\
    \ filterBySubstring(List<String> list, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for (String s : list) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays,list |>\n<| a tags=java,arrays,list |>\n<code>\npublic\
    \ static List<String> filterBySubstring(List<String> list, String substring) {\n\
    \    List<String> result = new ArrayList<>();\n    for (String s : list) {\n \
    \       if (s.contains(substring)) {\n            result.add(s);\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,arrays,list\
    \ |>\n<code>\npublic static List<String> filterBySubstring(List<String> list,\
    \ String substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static List<String> filterBySubstring(List<String> list,\
    \ String substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,list\
    \ |>\n<| a tags=java,arrays,list |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,arrays,list |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks, this was very helpful!\n<|/ c |>\n<| a tags=c#,linq,string\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = list.Where(x => x.Contains(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string |>\n<| a dscore=0 |>\n<code>\n\
    var result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string\
    \ |>\n<| a tags=c#,linq,string |>\n<code>\nvar result = list.Where(x => x.Contains(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,string |>\n<code>\n\
    var result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,string |>\n<| a tags=c#,linq,string\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,linq,string |>\n<code>\nvar result = list.Where(x\
    \ => x.Contains(\"a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,string\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.Contains(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string |>\n<| a tags=c#,linq,string\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/", "{\n    string[] result = new string[strings.length];\n    for (int i =\
    \ 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nI like the `string[] result = new string[strings.length];`\
    \ line - I didn't know you could do that. Thanks!\n<|/ c |>\n<| c |>\nYes, you\
    \ can do that. `string[]` is an array, and you can initialize it with an array\
    \ of any length.\n<|/ c |>\n<| c |>\nThis code will throw an exception when `strings[i]`\
    \ is `null`\n<|/ c |>\n<| c |>\nYes, it will. That's why I added the null check.\
    \ Thanks.\n<|/ c |>\n<| c |>\nI added a null check to the `for` loop. Thanks.\n\
    <|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i] == substring)\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i] == substring)\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i] == substring)\n    {\n\
    \        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i] == substring)\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i] == substring)\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < string", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,substring |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays,substring |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays,substring |>\n<| a |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 tags=c#,string,arrays,substring |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays,substring |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays,substring |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays,substring |>\n<| a tags=c#,string,arrays,substring\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nstring[] result = stringArray.Where(s ", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ answer the question of how to do this in LINQ. Also, `ToArray` isn't necessary\
    \ here.\n<|/ c |>\n<| c |>\nThis answer is correct, just not as efficient as using\
    \ LINQ. `Contains` will iterate over each string in the list, whereas LINQ will\
    \ stop iterating as soon as it finds a match.\n<|/ c |>\n<| c |>\nThis answer\
    \ is wrong. Contains iterates over each string in the list, whereas LINQ will\
    \ stop iterating as soon as it finds a match.\n<|/ c |>\n<| c |>\nThis answer\
    \ is wrong. Contains iterates over each string in the list, whereas LINQ will\
    \ stop iterating as soon as it finds a match.\n<|/ c |>\n<| c |>\nThis answer\
    \ is wrong. Contains iterates over each string in the list, whereas LINQ will\
    \ stop iterating as soon as it finds a match.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    var result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a\
    \ tags=c#,linq,.net,string |>\n<| c |>\nThis answer is wrong. Contains iterates\
    \ over each string in the list, whereas LINQ will stop iterating as soon as it\
    \ finds a match.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n\
    <| c |>\nThis answer is wrong. Contains iterates over each string in the list,\
    \ whereas LINQ will stop iterating as soon as it finds a match.\n<|/ c |>\n<|\
    \ a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe OP wants to filter out all strings that do not\
    \ contain `substring`, not just those that contain `substring`.\n<|/ c |>\n<|\
    \ c |>\nThanks for the comment. I misunderstood the question. I've edited my answer\
    \ to reflect that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    String[] arr = {\"abc\", \"bacd\", \"cde\", \"array\"};\n    System.out.println(filterBySubstring(arr,\
    \ \"a\"));\n}", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,.net,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=string,c#,.net,arrays |>\n<| a tags=string,c#,.net,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n      \
    \  result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n      \
    \  result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,.net,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,.net,arrays\
    \ |>\n<| a tags=string,c#,.net,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n\
    \        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,.net,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,.net,arrays\
    \ |>\n<| a tags=string,c#,.net,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,c#,string |>\n<| c |>\nThanks for your answer. Your\
    \ code is very similar to mine, but I wanted to avoid using LINQ. Thanks anyway!\n\
    <|/ c |>\n<| c |>\n: I added a version without LINQ. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your code is very similar to mine, but I wanted\
    \ to avoid using LINQ. Thanks anyway!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nList<string> result = new List<string>();\nforeach (string s in strings)\n\
    {\n    if (s.Contains(substring))\n    {\n        result.Add(s);\n    }\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| c |>\nThanks for your answer. Your code is\
    \ very similar to mine, but I wanted to avoid using LINQ. Thanks anyway!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nList<string> result\
    \ = new List<string>();\nforeach (string s in strings)\n{\n    if (s.Contains(substring))\n\
    \    {\n        result.Add(s);\n    }\n}\n</code>\n<|/ a tags=arrays,c#,string\
    \ |>\n<| c |>\nThanks for your answer. Your code is very similar to mine, but\
    \ I wanted to avoid using LINQ. Thanks anyway!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ substring = \"a\";\nList<string> result = new List<string>();\nforeach (string\
    \ s in strings)\n{\n    if (s.Contains(substring))\n    {\n        result.Add(s);\n\
    \    }\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n<| c |>\nThanks for your answer.\
    \ Your code is very similar to mine, but I wanted to avoid using LINQ. Thanks\
    \ anyway!\n<|/ c |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] ", "{\n \
    \   string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,list\
    \ |>\n<| a tags=string,c#,list |>\n<code>\nvar list = new List<string>();\nlist.Add(\"\
    abc\");\nlist.Add(\"bacd\");\nlist.Add(\"cde\");\nlist.Add(\"array\");", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] array = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result\
    \ = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x =>\
    \ x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] array\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] array = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\n\
    var result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\n", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n\
    <| a tags=c#,linq,.net,string,list |>\n<code>\nvar result = list.Where(x => x.Contains(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\n<code>\nvar result\
    \ = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list\
    \ |>\n<| a dscore=4 |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a dscore=4 |>\n\
    <code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/\
    \ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list |>\n\
    <code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/\
    \ a dscore=4 |>\n<| a dscore=3 |>\n<code>\nvar result = list.Where(x => x.Contains(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a dscore=3\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list |>\n\
    <code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/\
    \ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = list.Where(x => x.Contains(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a dscore=3\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net,string,list |>\n<| a dscore", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n \
    \   ['abc', 'cde']\n    \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['bacd', 'cde']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(caseSensitive)\n        {\n            if(strings[i].contains(substring))\n\
    \                result[i] = strings[i];\n        }\n        else\n        {\n\
    \            if(strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \                result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(caseSensitive)\n        {\n            if(strings[i].contains(substring))\n\
    \                result[i] = strings[i];\n        }\n        else\n        {\n\
    \            if(strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \                result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n", "{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThanks for the answer. I am not allowed to use any library functions.\
    \ I should implement it myself. I guess I should use recursion to solve this problem.\n\
    <|/ c |>\n<| c |>\nI added a recursive solution to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for the answer. I am not allowed to use any library\
    \ functions. I should implement it myself. I guess I should use recursion to solve\
    \ this problem.\n<|/ c |>\n<| c |>\nI added a recursive solution to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the answer. I am not allowed to\
    \ use any library functions. I should implement it myself. I guess I should use\
    \ recursion to solve this problem.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction\
    \ filterBySubstring(string[] strings, string substring) {\n    var result = [];\n\
    \    for(var i = 0; i < strings.length; i++) {\n        if(strings[i].indexOf(substring)\
    \ !== -1) {\n            result.push(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,string |>\n<| c |>\nThanks for the\
    \ answer. I am not allowed to use any library functions. I should implement it\
    \ myself. I guess I should use recursion to solve this problem.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\npublic static void main(String[] args) {\n    String[]\
    \ strings = new String[]{\"abc\", \"bacd\", \"cde\", \"array\"};\n    System.out.println(filterBySubstring(strings,\
    \ \"a\"));\n}", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1 tags=string,c#,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\"\
    ;\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.List;", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string,arrays |>\n<| c |>\nI like this solution, but I believe\
    \ it would be better to use a `HashSet<string>` instead of an array. `HashSet<string>.Contains`\
    \ will perform better than `Array.Contains`.\n<|/ c |>\n<| c |>\n: I agree that\
    \ `HashSet<string>` would be better, but I wanted to keep it simple and avoid\
    \ the overhead of hashing strings. Also, `HashSet<string>` doesn't have a `Contains`\
    \ method, so you'd have to write your own `Contains` method or use LINQ to do\
    \ the same thing.\n<|/ c |>\n<| c |>\nI agree that `HashSet<string>` would be\
    \ better, but I wanted to keep it simple and avoid the overhead of hashing strings.\
    \ Also, `HashSet<string>` doesn't have a `Contains` method, so you'd have to write\
    \ your own `Contains` method or use LINQ to do the same thing.\n<|/ c |>\n<| c\
    \ |>\n: I agree that `HashSet<string>` would be better, but I wanted to keep it\
    \ simple and avoid the overhead of hashing strings. Also, `HashSet<string>` doesn't\
    \ have a `Contains` method, so you'd have to write your own `Contains` method\
    \ or use LINQ to do the same thing.\n<|/ c |>\n<| c |>\n: I agree that `HashSet<string>`\
    \ would be better, but I wanted to keep it simple and avoid the overhead of hashing\
    \ strings. Also, `HashSet<string>` doesn't have a `Contains` method, so you'd\
    \ have to write your own `Contains` method or use LINQ to do the same thing.\n\
    <|/ c |>\n<| a |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.Contains(\"a\"\
    )).ToArray();\n</code>\n<|/ a tags=c#,.net,string,arrays dscore=5 |>\n<| c |>\n\
    This is not the best solution. `Where` will iterate over the entire array even\
    \ if the first element does not match. `Contains` will stop as soon as it finds\
    \ a match.\n<|/ c |>\n<| c |>\n: Yes, that's why I said \"best solution\". I don't\
    \ know what \"", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'cde']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'cde']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'cde']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'cde']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'cde']\n    \n*/", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| c |>\nThis code will throw an exception when `strings[i]` is `null`.\n<|/ c\
    \ |>\n<| c |>\nYes, I know. That's why I wrote \"or use string.Contains(substring)\"\
    \ in the first place.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0;\
    \ i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n      \
    \  result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a ", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a |>\n\
    <code>\npublic static string[] FilterBySubstring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=string,c#,arrays dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 tags=string,c#,arrays |>\n\
    <| a dscore=2 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a ", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach (string s\
    \ in strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.List;", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings) {\n        if (s.contains(substring)) {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,c#,linq |>\n<code>\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,c#,linq\
    \ |>\n<| a tags=string,c#,linq |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 tags=string,c#,linq\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=string,c#,linq |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=string,c#,linq |>\n<| a tags=string,c#,linq |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=string,c#,linq |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=string,c#,linq |>\n<| a tags=string,c#,linq |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = new List<string>();\nforeach (var\
    \ item in list)\n{\n    if (item.Contains(\"a\"))\n    {\n        result.Add(item);\n\
    \    }\n}\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about LINQ\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = list.Where(x\
    \ => x.Contains(\"a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/\
    \ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.Contains(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nvar\
    \ result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar\
    \ result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = list.Where(", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\npublic static string[]\
    \ FilterString(string[] stringArray,string searchString)\n{\n    List<string>\
    \ filteredStrings = new List<string>();\n    foreach (string s in stringArray)\n\
    \    {\n        if (s.Contains(searchString))\n        {\n            filteredStrings.Add(s);\n\
    \        }\n    }\n    return filteredStrings.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterString(string[] stringArray,string\
    \ searchString)\n{\n    List<string> filteredStrings = new List<string>();\n \
    \   foreach (string s in stringArray)\n    {\n        if (s.Contains(searchString))\n\
    \        {\n            filteredStrings.Add(s);\n        }\n    }\n    return\
    \ filteredStrings.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n        {\n            result.Add(s);\n        }\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a d", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using any external libraries. I guess it would be a lot more efficient to just\
    \ use regular expressions.\n<|/ c |>\n<| c |>\nI added a solution without using\
    \ any external libraries.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a solution that\
    \ uses only built-in functions. I used a recursive function and I used a map to\
    \ keep track of which substrings I have already seen. \n<code>\nfunction filter_by_substring(string[]\
    \ strings, string substring) {\n    var result = new string[strings.length];\n\
    \    var seen = new Map<string, bool>();\n    seen[substring] = true;\n    for(var\
    \ i = 0; i < strings.length; ++i) {\n        if(seen[strings[i]]) {\n        \
    \    continue;\n        }\n        if(strings[i].contains(substring)) {\n    \
    \        result[i] = strings[i];\n        }\n        else {\n            seen[strings[i]]\
    \ = true;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,filtering,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n        {\n\
    \            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,c#,filtering,arrays |>\n<| c |>\nThis doesn't work.\
    \ `s.Contains(substring)` will always return `true` because `s` is a `string[]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work either. `s.Contains(substring)` will always\
    \ return `true` because `s` is a `string[]`.\n<|/ c |>\n<| c |>\nI fixed the code.\
    \ Now it works. I tested it before posting.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ either. `s.Contains(substring)` will always return `true` because `s` is a `string[]`.\n\
    <|/ c |>\n<| c |>\nI fixed the code. Now it works. I tested it before posting.\n\
    <|/ c |>\n<| a tags=string,c#,filtering,arrays |>\n<code>\nstring", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nI like this solution. Just a small suggestion: instead of `string[] result\
    \ = new string[strings.length];` you could use `string[] result = new string[strings.length\
    \ - 1];` because you know that `strings.length` is always at least 1.\n<|/ c |>\n\
    <| c |>\nI like your solution. Thanks for sharing!\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ i++)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ i++)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n \
    \   string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a dscore=1 |>\n<code>\nstring[] strings\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\n\
    string[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\" };\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,arrays,c# |>\n\
    <code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\" };\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a dscore=1 |>\n<code>\nstring[] strings\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n \
    \   ['abc', 'cde']\n    \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['bacd', 'cde']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(caseSensitive ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'bacd', 'cde', 'array']\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ 'a')\n    []\n    >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'b')\n    ['abc', 'bacd', 'cde', 'array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n        {\n      \
    \      result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=2 |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n        {\n      \
    \      result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n\
    \        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n\
    \        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0;\
    \ i < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n    \
    \    result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n\
    \        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if (s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c#,substring |>\n<| a dscore=0 |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Text.RegularExpressions;", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,string,arrays |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(strings[i].contains(substring))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static string[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\npublic static string[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\npublic static\
    \ string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\npublic static string[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\npublic static\
    \ string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI added a more efficient solution that doesn't require\
    \ the use of a `for` loop.\n<|/ c |>\n<| c |>\nI added a more efficient solution\
    \ that doesn't require the use of a `for` loop.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic static List<String> filterBySubstring(List<String> list, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for(String s\
    \ : list) {\n        if(s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for(String s : list) {\n        if(s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=java,arrays,string |>\n<code>\npublic static List<String>\
    \ filterBySubstring(List<String> list, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for(String s : list) {\n        if(s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a tags=java,arrays,string |>\n<code>\npublic\
    \ static List<String> filterBySubstring(List<String> list, String substring) {\n\
    \    List<String> result = new ArrayList<>();\n    for(String s : list) {\n  \
    \      if(s.contains(substring)) {\n            result.add(s);\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public static List<String> filterBySubstring(List<String> list, String substring)\
    \ {\n    List<String> result = new ArrayList<>();\n    for(String s : list) {\n\
    \        if(s.contains(substring)) {\n            result.add(s);\n        }\n\
    \    }\n    return result;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,java,arrays\
    \ |>\n<| a tags=string,java,arrays |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,java,arrays\
    \ |>\n<| a tags=string,java,arrays |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,java,arrays |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\n\
    var result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new string[] { \"\
    abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result\
    \ = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\npublic\
    \ static string[] FilterBySubstring(string[] strings, string substring)\n{\n \
    \   List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.To", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. Your code works fine but i was looking\
    \ for a solution using std.algorithm.\n<|/ c |>\n<| c |>\nI added a solution using\
    \ `std.algorithm` which uses `std.algorithm` functions. I hope it helps.\n<|/\
    \ c |>\n<| a tags=string,c++,stl,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <vector>\n#include <string>", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=2\
    \ |>\n<| a ", "{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,linq,.net |>\n<| c |>\nI like your solution, but I believe\
    \ it would be better to use a `HashSet<string>` instead of a `List<string>` for\
    \ the `result` array. `HashSet` has `O(1)` lookup time instead of `O(n)` lookup\
    \ time.\n<|/ c |>\n<| c |>\n: I agree, but I wanted to keep it close to the OP's\
    \ code as much as possible. I'll add that to the answer.\n<|/ c |>\n<| c |>\n\
    I agree with you. I just wanted to point out that `HashSet` has `O(1)` lookup\
    \ time instead of `O(n)` lookup time.\n<|/ c |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nThis doesn't answer the question, which is about LINQ,\
    \ not LINQ to Objects.\n<|/ c |>\n<| c |>\n: It does answer the question. He wants\
    \ to filter out all strings that don't contain \"a\".\n<|/ c |>\n<| c |>\n: No,\
    \ he wants to filter out all strings that don't contain \"a\".\n<|/ c |>\n<| c\
    \ |>\n: No, he wants to filter out all strings that don't contain \"a\".\n<|/\
    \ c |>\n<| c |>\n: No, he wants to filter out all strings that don't contain \"\
    a\".\n<|/ c |>\n<| a dscore=4 |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a tags=c#,linq,",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a tags=", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nI like your solution, however it only\
    \ works if you know that the substring will always be at the start of the string.\
    \ Otherwise it won't work. Also it only works with strings. If you have a list\
    \ of ints or floats it will not work. Also it only works with strings. If you\
    \ have a list of ints or floats it will not work. Also it only works with strings.\
    \ If you have a list of ints or floats it will not work. Also it only works with\
    \ strings. If you have a list of ints or floats it will not work. Also it only\
    \ works with strings. If you have a list of ints or floats it will not work. Also\
    \ it only works with strings. If you have a list of ints or floats it will not\
    \ work. Also it only works with strings. If you have a list of ints or floats\
    \ it will not work. Also it only works with strings. If you have a list of ints\
    \ or floats it will not work. Also it only works with strings. If you have a list\
    \ of ints or floats it will not work. Also it only works with strings. If you\
    \ have a list of ints or floats it will not work. Also it only works with strings.\
    \ If you have a list of ints or floats it will not work. Also it only works with\
    \ strings. If you have a list of ints or floats it will not work. Also it only\
    \ works with strings. If you have a list of ints or floats it will not work. Also\
    \ it only works with strings. If you have a list of ints or floats it will not\
    \ work. Also it only works with strings. If you have a list of ints or floats\
    \ it will not work. Also it only works with strings. If you have a list of ints\
    \ or floats it will not work. Also it only works with strings. If you have a list\
    \ of ints or floats it will not work. Also it only works with strings. If you\
    \ have a list of ints or floats it will not work. Also it only works with strings.\
    \ If you have a list of ints or floats it will not work. Also it only works with\
    \ strings. If you have a list of ints or floats it will not work. Also it only\
    \ works with strings. If you have a list of ints or floats it will not work. Also\
    \ it only works with strings. If you have a list of ints or floats it will not\
    \ work. Also it only works with strings. If you have a list of ints or floats\
    \ it will not work. Also it only works with strings. If you have a list of ints\
    \ or float", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Arrays;\nimport java.util.List;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do it without using an external library?\n<|/ c |>\n<| c |>\nI added a solution\
    \ without external libraries.\n<|/ c |>\n<| c |>\nI added a solution without external\
    \ libraries.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,string,list\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,string,list\
    \ |>\n<| a tags=java,string,list |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,string,list |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,string,list\
    \ |>\n<| a tags=java,string,list |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 ", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays,search\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays,search\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays,search\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,search |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,search |>\n<| a tags=string,c#,arrays,search\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,search |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tag", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach (string s in strings) {\n\
    \        if (s.contains(substring)) {\n            result[i++] = s;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| a tags=string,c#,arrays,substring |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result =\
    \ new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n{\n \
    \   if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n{\n\
    \    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n{\n\
    \    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Arrays;\nimport java.util.List;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays,string |>\n<| c |>\nI like your solution, but I believe\
    \ that `substring` should be `substringToFind` as per the OP's example. Also,\
    \ `substring` should be `substringToFind` as per the OP's example. Also, `substring`\
    \ should be `substringToFind` as per the OP's example. Also, `substring` should\
    \ be `substringToFind` as per the OP's example. Also, `substring` should be `substringToFind`\
    \ as per the OP's example. Also, `substring` should be `substringToFind` as per\
    \ the OP's example. Also, `substring` should be `substringToFind` as per the OP's\
    \ example. Also, `substring` should be `substringToFind` as per the OP's example.\
    \ Also, `substring` should be `substringToFind` as per the OP's example. Also,\
    \ `substring` should be `substringToFind` as per the OP's example. Also, `substring`\
    \ should be `substringToFind` as per the OP's example. Also, `substring` should\
    \ be `substringToFind` as per the OP's example. Also, `substring` should be `substringToFind`\
    \ as per the OP's example. Also, `substring` should be `substringToFind` as per\
    \ the OP's example. Also, `substring` should be `substringToFind` as per the OP's\
    \ example. Also, `substring` should be `substringToFind` as per the OP's example.\
    \ Also, `substring` should be `substringToFind` as per the OP's example. Also,\
    \ `substring` should be `substringToFind` as per the OP's example. Also, `substring`\
    \ should be `substringToFind` as per the OP's example. Also, `substring` should\
    \ be `substringToFind` as per the OP's example. Also, `substring` should be `substringToFind`\
    \ as per the OP's example. Also, `substring` should be `substringToFind` as per\
    \ the OP's example. Also, `substring` should be `substringToFind` as per the OP's\
    \ example. Also, `substring` should be `substringToFind` as per the OP's example.\
    \ Also, `substring` should be `substringToFind` as per the OP's example. Also,\
    \ `substring` should be `substringToFind` as per the OP's example. Also, `substring`\
    \ should be ", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ i++)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ i++)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. `filter_by_substring` returns an empty array when\
    \ `substring` is an empty string. `filter_by_substring` should return `string[]`\
    \ with one empty string in it.\n<|/ c |>\n<| c |>\n: Yes, I see that now. Thanks\
    \ for pointing that out. I've updated the answer.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThank you so much! This was exactly what I was looking for!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings =\
    \ new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring =\
    \ \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring substring = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" ", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;", "{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/\
    \ c |>\n<| c |>\nYou're welcome. I'm glad it helped. :)\n<|/ c |>\n<| a |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Text.RegularExpressions;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a small function which does this\
    \ for me:\n<code>\npublic static List<String> filterBySubstring(List<String> list,\
    \ String substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,java,arraylist\
    \ |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ i++)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ i++)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder if it will perform better than\
    \ a LINQ solution. LINQ will have to do more work to find the matches.\n<|/ c\
    \ |>\n<| c |>\n: I doubt it, but I haven't tested it yet. LINQ is just syntactic\
    \ sugar for looping through collections and calling methods on each element, so\
    \ I doubt it would be any faster. Also, LINQ isn't a magic bullet, it's just a\
    \ tool that makes code easier to read. Sometimes it's better to write your own\
    \ loops than to rely on LINQ.\n<|/ c |>\n<| c |>\n: I added a LINQ solution that\
    \ is probably faster than the other LINQ solutions.\n<|/ c |>\n<| c |>\n: I added\
    \ a LINQ solution that is probably faster than the other LINQ solutions.\n<|/\
    \ c |>\n<| c |>\n: I added a LINQ solution that is probably faster than the other\
    \ LINQ solutions.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if it\
    \ will perform better than a LINQ solution. LINQ will have to do more work to\
    \ find the matches.\n<|/ c |>\n<| c |>\n: I doubt it, but I haven't tested it\
    \ yet. LINQ is just syntactic sugar for looping through collections and calling\
    \ methods on each element, so I doubt it would be any faster. Also, LINQ isn't\
    \ a magic bullet, it's just a tool that makes code easier to read. Sometimes it's\
    \ better to write your own loops than to rely on LINQ.\n<|/ c |>\n<| c |>\n: I\
    \ added a LINQ solution that is probably faster than the other LINQ solutions.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nfunction filterBySubstring(strings: string[],\
    \ substring: string): string[] {\n    return strings.filter(s => s.indexOf(substring)\
    \ > -1);\n}\n</code>\n<|/ a dscore=1 tags=string,arrays,filter,javascript |>\n\
    <| a dscore=1 |>\n<code>\nfunction filterBySubstring(strings: string[], substring:\
    \ string): string[] {\n    return strings.filter(s => s.indexOf(substring) > -1);\n\
    }\n</code>\n<|/ a tags=string,arrays,filter,javascript |>\n<| a tags=string,arrays,filter,javascript\
    \ |>\n<code>\nfunction filterBySubstring(strings: string[], substring: string):\
    \ string[] {\n    return strings.filter(s => s.indexOf(substring) > -1);\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction filterBySubstring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(s => s.indexOf(substring)\
    \ > -1);\n}\n</code>\n<|/ a tags=string,arrays,filter,javascript |>\n<| a tags=string,arrays,filter,javascript\
    \ |>\n<code>\nfunction filterBySubstring(strings: string[], substring: string):\
    \ string[] {\n    return strings.filter(s => s.indexOf(substring) > -1);\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,arrays,filter,javascript |>\n<code>\n\
    function filterBySubstring(strings: string[], substring: string): string[] {\n\
    \    return strings.filter(s => s.indexOf(substring) > -1);\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=string,arrays,filter,javascript |>\n<code>\nfunction\
    \ filterBySubstring(strings: string[], substring: string): string[] {\n    return\
    \ strings.filter(s => s.indexOf(substring) > -1);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,arrays,filter,javascript |>\n<code>\nfunction filterBySubstring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(s => s.indexOf(substring)\
    \ > -1);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,arrays,filter,javascript\
    \ |>\n<code>\nfunction filterBySubstring(strings: string[], substring: string):\
    \ string[] {\n    return strings.filter(s => s.indexOf(substring", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThanks for your answer. I'm a beginner in C# and I didn't know\
    \ about LINQ. I'll try to use it now.\n<|/ c |>\n<| c |>\nLINQ is very powerful\
    \ and can make your code much more readable. LINQ also makes your code more efficient.\n\
    <|/ c |>\n<| c |>\nI agree with you. I'll try to learn LINQ now.\n<|/ c |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] result = stringArray.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer.\
    \ I'm a beginner in C# and I didn't know about LINQ. I'll try to use it now.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] result = stringArray.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string[] result = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result = stringArray.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string[] result = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. `string[] result = new string[strings.length];` doesn't\
    \ copy the array, it just creates a new array with the same length as the old\
    \ one. Try it out and you'll see what I mean.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've edited my answer to show how to copy the array instead of just creating\
    \ a new one.\n<|/ c |>\n<| a |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays dscore=0 |>\n<| c |>\nThis doesn't work. `string[]\
    \ result = new string[strings.length];` doesn't copy the array, it just creates\
    \ a new array with the same length as the old one. Try it out and you'll see what\
    \ I mean.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to show\
    \ how to copy the array instead of just creating a new one.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ creates a new array with the same length as the old one. Try it out and you'll\
    \ see what I mean.\nTry this instead:\n<code>\nstring[] result = new string[strings.length];\n\
    Array.Copy(strings, result, strings.length);\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\npublic static string[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work. `string[] result =\
    \ new string[strings.length];` doesn't copy the array, it just creates a new array\
    \ with the same length as the old one. Try it out and you'll see what I mean.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edi", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,list |>\n\
    <| c |>\nThanks so much for the help! I really appreciate it!\n<|/ c |>\n<| a\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 tags=string,c#,arrays,list |>\n<| a dscore=2 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ substring = \"a\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays,list |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays,list |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays,list |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays,list |>\n<| a tags=string,c#,arrays,list\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nvar result\
    \ = ", "{\n    string[] result = new string[strings.length];\n    for (int i =\
    \ 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.List;", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis solution does not work if you have a string like \"abcabc\"\
    \ and the substring \"abc\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it. The OP asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also asked for \"substring\" not \"\
    substrings\". He also asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also asked for \"substring\" not \"\
    substrings\". He also asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also asked for \"substring\" not \"\
    substrings\". He also asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also asked for \"substring\" not \"\
    substrings\". He also asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also asked for \"substring\" not \"\
    substrings\". He also asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also asked for \"substring\" not \"\
    substrings\". He also asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also asked for \"substring\" not \"\
    substrings\". He also asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also asked for \"substring\" not \"\
    substrings\". He also asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also asked for \"substring\" not \"\
    substrings\". He also asked for \"substring\" not \"substrings\". He also asked\
    \ for \"substring\" not \"substrings\". He also as", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[result.length-1]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have multiple occurrences of the substring\
    \ in the string. For example, if you have \"abcabc\" and the substring is \"abc\"\
    , the result will be \"abcabc\" instead of \"abc\".\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    int i = 0;\n    for\
    \ (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[result.length-1] = strings[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[result.length-1] = strings[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[result.length-1]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    int i = 0;\n    for\
    \ (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[result.length-1] = strings[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    int i = 0;\n    for\
    \ (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[result.length-1] = strings[i];\n    }\n    return result;",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings) {\n        if (s.contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\n\
    This doesn't answer the question. He wants to filter out all strings that don't\
    \ contain \"a\" not only those that contain \"a\".\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to reflect that.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] {\n    \"abc\",\n    \"def\",\n\
    \    \"ghi\",\n    \"jkl\",\n    \"mno\",\n    \"pqr\",\n    \"stu\",\n    \"\
    vwx\",\n    \"yz\"\n};", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if you\
    \ have a string like \"abc def ghi\" and the substring \"abc\"\n<|/ c |>\n<| c\
    \ |>\n: I added a version that works with that case. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\n: I added a version that works with that case. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ that case. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that works with that case. Thanks for pointing that out.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 ", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,list\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to filter out all strings\
    \ that don't contain `substring`, not just those that contain it.\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated my answer to reflect that.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays,list\
    \ |>\n<| a tags=string,c#,arrays,list |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=string,c#,arrays,list |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays,list |>\n<| a tags=string,c#,arrays,list |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ substring = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=string,c#,list |>\n<| a tags=string,c#,list |>\n<code>\nList<string>\
    \ list = new List<string>();\nlist.Add(\"a\");\nlist.Add(\"b\");\nlist.Add(\"\
    c\");\nlist.Add(\"d\");\nlist.Add(\"e\");\nlist.Add(\"f\");\nlist.Add(\"g\");\n\
    list.Add(\"h\");\nlist.Add(\"i\");\nlist.Add(\"j\");\nlist.Add(\"k\");\nlist.Add(\"\
    l\");\nlist.Add(\"m\");\nlist.Add(\"n\");\nlist.Add(\"o\");\nlist.Add(\"p\");\n\
    list.Add(\"q\");\nlist.Add(\"r\");\nlist.Add(\"s\");\nlist.Add(\"t\");\nlist.Add(\"\
    u\");\nlist.Add(\"v\");\nlist.Add(\"w\");\nlist.Add(\"x\");\nlist.Add(\"y\");\n\
    list.Add(\"z\");", "{\n    string[] result = new string[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns `string[]`\
    \ but `filter_by_substring` expects `string`\n<|/ c |>\n<| c |>\nI fixed the return\
    \ type. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,string,substring\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=arrays,c#,string,substring |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,c#,string,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=arrays,c#,string,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays,string |>\n<| c |>\nI believe this would return an empty\
    \ array if the substring is not found in the first string in the array. Is that\
    \ correct?\n<|/ c |>\n<| c |>\nYes, it would. But I believe that would be the\
    \ desired behavior, since it seems like the OP wants to return all strings that\
    \ contain the substring.\n<|/ c |>\n<| c |>\nYes, I believe that would be the\
    \ desired behavior. My apologies for not being clear enough in my original post.\
    \ Thank you for your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tag", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,c#,arrays dscore=0 |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays dscore=0 |>\n<| a ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without having to use LINQ?\n<|/ c |>\n<| c |>\n: I added a solution without\
    \ LINQ\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there is a way\
    \ to do this without having to use LINQ?\n<|/ c |>\n<| c |>\n: I added a solution\
    \ without LINQ\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to do this without having to use LINQ?\n<|/ c |>\n<| a |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ substring = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ substring = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| a dscore=1 |>", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 ", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0;\
    \ i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n      \
    \  result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 tags=string,c#,arrays |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,", "{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| c |>\nThis doesn't work\
    \ if you have a string like \"abc def ghi\"\n<|/ c |>\n<| c |>\n: It does work\
    \ if you have a string like \"abc def ghi\".  It returns `[\"abc def ghi\"]`.\
    \  It doesn't return `[\"abc\", \"def\", \"ghi\"]`.  It returns `[\"abc def ghi\"\
    ]`.  It doesn't return `[\"abc\", \"def\", \"ghi\"]`.  It returns `[\"abc\", \"\
    def\", \"ghi\"]`.  It doesn't return `[\"abc\", \"def\", \"ghi\"]`.  It returns\
    \ `[\"abc\", \"def\", \"ghi\"]`.  It doesn't return `[\"abc\", \"def\", \"ghi\"\
    ]`.  It returns `[\"abc\", \"def\", \"ghi\"]`.  It doesn't return `[\"abc\", \"\
    def\", \"ghi\"]`.  It returns `[\"abc\", \"def\", \"ghi\"]`.  It doesn't return\
    \ `[\"abc\", \"def\", \"ghi\"]`.  It returns `[\"abc\", \"def\", \"ghi\"]`.  It\
    \ doesn't return `[\"abc\", \"def\", \"ghi\"]`.  It returns `[\"abc\", \"def\"\
    , \"ghi\"]`.  It doesn't return `[\"abc\", \"def\", \"ghi\"]`.  It returns `[\"\
    abc\", \"def\", \"ghi\"]`.  It doesn't return `[\"abc\", \"def\", \"ghi\"]`. \
    \ It returns `[\"abc\", \"def\", \"ghi\"]`.  It doesn't return `[\"abc\", \"def\"\
    , \"ghi\"]`.  It returns `[\"abc\", \"def\", \"ghi\"]`.  It doesn't return `[\"\
    abc\", \"def\", \"ghi\"]`.  It returns `[\"abc\", \"def\", \"ghi\"]`.  It doesn't\
    \ return `[\"abc\", \"def\", \"ghi\"]`.  It returns `[\"abc\", \"def\", \"ghi\"\
    ]`.  It doesn't return `[\"abc\", \"def\", \"ghi\"]`.  It returns `[\"abc\", \"\
    def\", \"ghi\"]`.  It doesn't return `[\"abc\", \"def\", \"ghi\"]`.  It returns\
    \ `[\"abc\", \"def\", \"ghi\"]`.  It doesn't return `[\"abc\", \"def\", \"", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis code doesn't work. `string[] result = new string[strings.length];`\
    \ should be `string[] result = new string[strings.length - 1];`\n<|/ c |>\n<|\
    \ c |>\nI fixed the code. Thanks for pointing that out.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length returns the number of elements in the array, but you\
    \ want the number of elements in the array minus one. \n<code>\nstring[] result\
    \ = new string[strings.length - 1];\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length returns the number of elements in the array, but you\
    \ want the number of elements in the array minus one. \n<code>\nstring[] result\
    \ = new string[strings.length - 1];\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a dscore=1 tags=string,c#,arrays |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length - 1];\n</code>\n<|/ a dscore=1 tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a dscore=1 tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length - 1];\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays,string |>\n<| c |>\nThis answer was flagged as low-quality\
    \ because of its length and content. Could you please add some explanation to\
    \ your answer?\n<|/ c |>\n<| c |>\nI added some explanation to the answer. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=java,arrays,string |>\n<code>\npublic static\
    \ void main(String[] args) {\n    String[] arr = {\"abc\", \"bacd\", \"cde\",\
    \ \"array\"};\n    System.out.println(filterBySubstring(arr, \"a\"));\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings) {\n\
    \        if(s.contains(substring)) {\n            result[i++] = s;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,linq |>\n<| c |>\n\
    This doesn't work. `s.Contains(substring)` will always return `true` if the substring\
    \ is the empty string. `s.Contains(substring, StringComparison.OrdinalIgnoreCase)`\
    \ will work, but it's probably not what OP wants.\n<|/ c |>\n<| c |>\n: I agree,\
    \ `s.Contains(substring, StringComparison.OrdinalIgnoreCase)` would probably be\
    \ better. I'll update my answer.\n<|/ c |>\n<| c |>\n: I updated my answer with\
    \ another solution that doesn't use `Contains`.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer with another solution that doesn't use `Contains`.\n<|/ c |>\n<| c\
    \ |>\n: I updated my answer with another solution that doesn't use `Contains`.\n\
    <|/ c |>\n<| a |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,linq dscore=5 |>\n<| c |>\nThis doesn't work. `s.Contains(substring)`\
    \ will always return `true` if the substring is the empty string. `s.Contains(substring,\
    \ StringComparison.OrdinalIgnoreCase)` will work, but it's probably not what OP\
    \ wants.\n<|/ c |>\n<| c |>\n: I agree, `s.Contains(substring, StringComparison.OrdinalIgnoreCase)`\
    \ would probably be better. I'll update my answer.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer with another solution that doesn't use `Contains`.\n<|/ c |>\n<| a\
    \ dscore=5 |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,linq |>\n<| a dscore=4 |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,linq\
    \ |>\n<| a tags=string,c#,linq |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe\
    \ OP wants to filter out strings that don't contain substring. Your code returns\
    \ strings that do contain substring.\n<|/ c |>\n<| c |>\n: Yes, I noticed that\
    \ after I posted my answer. I've updated my answer with my own solution that does\
    \ exactly what OP wants.\n<|/ c |>\n<| a |>\n<code>\npublic static List<String>\
    \ filterBySubstring(List<String> list, String substring) {\n    List<String> result\
    \ = new ArrayList<String>();\n    for (String s : list) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=4 tags=java,string,list |>\n<| c |>\nThis doesn't work if `list`\
    \ is empty. `result` will be empty and `list` will be unmodified.\n<|/ c |>\n\
    <| c |>\nYes, I noticed that after I posted my answer. I've updated my answer\
    \ with my own solution that does exactly what OP wants.\n<|/ c |>\n<| a tags=java,string,list\
    \ |>\n<code>\npublic static List<String> filterBySubstring(List<String> list,\
    \ String substring) {\n    List<String> result = new ArrayList<String>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't work if `list` is empty. `result` will be empty and\
    \ `list` will be unmodified.\n<|/ c |>\n<| a dscore=3 |>\n<code>\npublic static\
    \ List<String> filterBySubstring(List<String> list, String substring) {\n    List<String>\
    \ result = new ArrayList<String>();\n    for (String s : list) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,string,list |>\n<| a tags=java,string,list |>\n<code>\npublic\
    \ static List<String> filterBySubstring(List<String> list, String substring) {\n\
    \    List<String> result = new ArrayList<String>();\n    for (String s : list)\
    \ {\n        if (s.contains(substring)) {\n            result.add(s);\n      \
    \  }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=java,string,",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=0\
    \ tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nI like this solution, but I believe it\
    \ can be improved a bit. For example, `string[] result = new string[strings.length];`\
    \ can be replaced with `string[] result = strings.Where(s => s.Contains(substring)).ToArray();`\n\
    <|/ c |>\n<| c |>\nYes, that's a good point. Although I believe that `string[]\
    \ result = new string[strings.length];` will perform better than `string[] result\
    \ = strings.Where(s => s.Contains(substring)).ToArray();` because `Where` will\
    \ create new array and `ToArray` will copy the elements into new array. Although\
    \ I believe that `string[] result = strings.Where(s => s.Contains(substring)).ToArray();`\
    \ will perform better than `string[] result = new string[strings.length];` because\
    \ `Where` will create new array and `ToArray` will copy the elements into new\
    \ array.\n<|/ c |>\n<| c |>\nI believe that `string[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();` will perform better than `string[] result\
    \ = new string[strings.length];` because `Where` will create new array and `ToArray`\
    \ will copy the elements into new array.\n<|/ c |>\n<| c |>\nI believe that `string[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();` will perform\
    \ better than `string[] result = new string[strings.length];` because `Where`\
    \ will create new array and `ToArray` will copy the elements into new array.\n\
    <|/ c |>\n<| c |>\nI believe that `string[] result = strings.Where(s => s.Contains(substring)).ToArray();`\
    \ will perform better than `string[] result = new string[strings.length];` because\
    \ `Where` will create new array and `ToArray` will copy the elements into new\
    \ array.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'cde']\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(caseSensitive ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(caseSensitive ? strings[i].contains(substring) : strings[i].",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'cde']\n    \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['bacd', 'cde']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (caseSensitive ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['array']\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!caseSensitive ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (ignoreCase ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't answer the question. OP wants to filter out all strings that\
    \ don't contain `substring`, not just those that contain it.\n<|/ c |>\n<| c |>\n\
    The question was edited after I posted my answer. Now it does answer the question.\
    \ Sorry for the confusion.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction filterBySubstring(string[]\
    \ strings, string substring) {\n    var result = new List<string>();\n    foreach\
    \ (var s in strings) {\n        if (s.Contains(substring)) {\n            result.Add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring substring = \"a\";\nvar result = stringArray.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\n\
    This doesn't answer the question. OP wants to filter out all strings that don't\
    \ contain `substring`, not just those that contain it.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nvar result = stringArray.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to filter out all strings that don't contain `substring`, not just those that\
    \ contain it.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nvar\
    \ result = stringArray.Where(s => s.Contains(substring));\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to filter out all strings\
    \ that don't contain `substring`, not just those that contain it.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'cde']\n    \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \ >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'cde']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].startsWith(substring))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not start with given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'cde']\n    \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n    >>>\
    \ filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'cde']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'cde']\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (!strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      if (caseSensitive ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      if (caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\
    \ {\n            result[i] = string", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# dscore=2\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a tag", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if there are multiple substrings in the same string.\
    \ For example, if `strings` contains `[\"abc\", \"ab\", \"ac\"]`, then `filter_by_substring`\
    \ will return `[\"abc\", \"ab\"]`, but `filter_by_substring` should return `[\"\
    abc\", \"ac\"]`.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that will handle multiple substrings in the same string.\n<|/ c |>\n<| c |>\n\
    : I updated my answer to include a solution that will handle multiple substrings\
    \ in the same string.\n<|/ c |>\n<| a tags=string,c#,substring |>\n<code>\nstring[]\
    \ substrings = { \"a\", \"b\", \"c\" };\nstring input = \"abcabc\";\nstring output\
    \ = \"\";\nforeach (string substring in substrings)\n{\n    output = input.Replace(substring,\
    \ \"\");\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are\
    \ multiple substrings in the same string. For example, if `substrings` contains\
    \ `[\"abc\", \"ab\", \"ac\"]`, then `output` will return `\"\"`, but `output`\
    \ should return `\"\"`.\n<|/ c |>\n<| c |>\n: I updated my answer to include a\
    \ solution that will handle multiple substrings in the same string.\n<|/ c |>\n\
    <| a tags=string,c#,substring |>\n<code>\nstring[] substrings = { \"a\", \"b\"\
    , \"c\" };\nstring input = \"abcabc\";\nstring output = \"\";\nforeach (string\
    \ substring in substrings)\n{\n    output = input.Replace(substring, \"\");\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,substring |>\n<code>\nstring\
    \ input = \"abcabc\";\nstring output = \"\";\nforeach (string substring in substrings)\n\
    {\n    output = input.Replace(substring, \"\");\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work if there are multiple substrings in the same string.\
    \ For example, if `substrings` contains `[\"abc\", \"ab\", \"ac\"]`, then `output`\
    \ will return `\"\"`, but `output` should return `\"\"`.\n<|/ c |>\n<| a tags=string,c#",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post.\n<|/\
    \ c |>\n<| c |>\nI added an answer that does provide an answer. He asked how to\
    \ filter an input list of strings only for ones that contain given substring.\
    \ He didn't ask for an algorithm to solve the problem. He asked how to do it in\
    \ C#. He didn't ask for an algorithm to solve the problem in any language. He\
    \ asked how to do it in C#. He didn't ask for an algorithm to solve the problem\
    \ in any language. He asked how to do it in C#. He didn't ask for an algorithm\
    \ to solve the problem in any language. He asked how to do it in C#. He didn't\
    \ ask for an algorithm to solve the problem in any language. He asked how to do\
    \ it in C#. He didn't ask for an algorithm to solve the problem in any language.\
    \ He asked how to do it in C#. He didn't ask for an algorithm to solve the problem\
    \ in any language. He asked how to do it in C#. He didn't ask for an algorithm\
    \ to solve the problem in any language. He asked how to do it in C#. He didn't\
    \ ask for an algorithm to solve the problem in any language. He asked how to do\
    \ it in C#. He didn't ask for an algorithm to solve the problem in any language.\
    \ He asked how to do it in C#. He didn't ask for an algorithm to solve the problem\
    \ in any language. He asked how to do it in C#. He didn't ask for an algorithm\
    \ to solve the problem in any language. He asked how to do it in C#. He didn't\
    \ ask for an algorithm to solve the problem in any language. He asked how to do\
    \ it in C#. He didn't ask for an algorithm to solve the problem in any language.\
    \ He asked how to do it in C#. He didn't ask for an algorithm to solve the problem\
    \ in any language. He asked how to do it in C#. He didn't ask for an algorithm\
    \ to solve the problem in any language. He asked ", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a d", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i) {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=4 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nstring[] stringArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a dscore=3 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=string,c#", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for the answer. I'm\
    \ a beginner at C# and I haven't learned LINQ yet. I'm going to try this out and\
    \ see how it works.\n<|/ c |>\n<| c |>\nI added a LINQ solution to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the LINQ solution. I tried it\
    \ out and it works great. I'm going to try and understand it so I can use it in\
    \ the future. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for the answer. I'm a\
    \ beginner at C# and I haven't learned LINQ yet. I'm going to try this out and\
    \ see how it works.\n<|/ c |>\n<| a |>\n<code>\nstring[] stringArray = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays dscore=0 |>\n<| c |>\nThanks for the answer. I'm a\
    \ beginner at C# and I haven't learned LINQ yet. I'm going to try this out and\
    \ see how it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe question was about a specific language, not a\
    \ general solution. Your solution is in Java.\n<|/ c |>\n<| c |>\nThe question\
    \ was about a specific language, not a general solution. Your solution is in Java.\n\
    <|/ c |>\n<| c |>\nThe question was about a specific language, not a general solution.\
    \ Your solution is in Java.\n<|/ c |>\n<| c |>\nThe question was about a specific\
    \ language, not a general solution. Your solution is in Java.\n<|/ c |>\n<| c\
    \ |>\nThe question was about a specific language, not a general solution. Your\
    \ solution is in Java.\n<|/ c |>\n<| a tags=string,java |>\n<code>\npublic class\
    \ StringFilter {", "{\n    string[] result = new string[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution. Just a question, why do you use \"string[]\
    \ result = new string[strings.length];\" instead of \"string[] result = new string[strings.length\
    \ - 1];\"?\n<|/ c |>\n<| c |>\nBecause I wanted to keep the original array untouched.\
    \ Otherwise I would have to copy it to a new array and return the new array instead\
    \ of the original one.\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation!\n\
    <|/ c |>\n<| a tags=string,arrays,c#,substring |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c#,substring\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c#,substring\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c#,substring\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c#,substring\
    \ |>\n<| a tags=string,arrays,c#,substring |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=string,c#,arrays,search |>\n<| c |>\nThanks for your answer. I'm a beginner\
    \ so I didn't know about that method. I'm going to try it out and see if it works.\n\
    <|/ c |>\n<| c |>\nI added a method which uses `System.Linq` which I believe is\
    \ more efficient than my method. Let me know if it works.\n<|/ c |>\n<| c |>\n\
    I added a method which uses `System.Linq` which I believe is more efficient than\
    \ my method. Let me know if it works.\n<|/ c |>\n<| c |>\nI added a method which\
    \ uses `System.Linq` which I believe is more efficient than my method. Let me\
    \ know if it works.\n<|/ c |>\n<| c |>\nI added a method which uses `System.Linq`\
    \ which I believe is more efficient than my method. Let me know if it works.\n\
    <|/ c |>\n<| a |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = strings.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays,search\
    \ dscore=2 |>\n<| a tags=string,c#,arrays,search |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays,search |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result\
    \ = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.indexOf(substring)\
    \ != -1) {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,list |>\n<| a tags=string,c#,arrays,list\
    \ |>\n<code>\npublic static List<string> FilterBySubstring(List<string> strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.IndexOf(substring) != -1)\n    \
    \    {\n            result.Add(s);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,list |>\n<code>\npublic\
    \ static List<string> FilterBySubstring(List<string> strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.IndexOf(substring) != -1)\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\npublic static List<string> FilterBySubstring(List<string> strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.IndexOf(substring) != -1)\n    \
    \    {\n            result.Add(s);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=string,c#,arrays,list |>\n<| a tags=string,c#,arrays,list\
    \ |>\n<code>\npublic static List<string> FilterBySubstring(List<string> strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.IndexOf(substring) != -1)\n    \
    \    {\n            result.Add(s);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<string>\
    \ FilterBySubstring(List<string> strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.IndexOf(substring) != -1)\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,list\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static List<string> FilterBySubstring(List<string>\
    \ strings, string substring)\n{\n    List<string> result = new List<", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nI believe this solution will fail if there are multiple occurrences of\
    \ the substring in the string. For example, `filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')` will return `['abc', 'bacd', 'array']` instead of `['abc',\
    \ 'bacd', 'cde']`.\n<|/ c |>\n<| c |>\nYes, you're right. I've edited my answer\
    \ to fix this issue.\n<|/ c |>\n<| a |>\nI believe this solution will fail if\
    \ there are multiple occurrences of the substring in the string. For example,\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') will return ['abc',\
    \ 'bacd', 'array'] instead of ['abc', 'bacd', 'cde'].\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ a |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[string", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer. Your code is very\
    \ similar to mine, but I wanted to know if there is a way to do it without using\
    \ LINQ. Thanks anyway!\n<|/ c |>\n<| c |>\nI added a non-LINQ solution that is\
    \ more efficient than yours.\n<|/ c |>\n<| c |>\nThanks again! Your code works\
    \ perfectly fine. I'm still trying to understand how it works, but I guess I'll\
    \ have to read some more about LINQ. Thanks again!\n<|/ c |>\n<| a |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ substring = \"a\";\nstring[] result = new string[strings.Length];\nfor (int\
    \ i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=1 tags=string,c#,arrays\
    \ |>\n<| c |>\nThanks for your answer. Your code is very similar to mine, but\
    \ I wanted to know if there is a way to do it without using LINQ. Thanks anyway!\n\
    <|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = new string[strings.Length];\nfor (int i = 0; i < strings.Length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n    {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ substring = \"a\";\nstring[] result = new string[strings.Length];\nfor (int\
    \ i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = new string[strings.Length];\nfor (int ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nI like your solution, but I wonder if\
    \ there is a way to do it without using LINQ. I'm just trying to learn more about\
    \ C#.\n<|/ c |>\n<| c |>\nI added a solution without LINQ\n<|/ c |>\n<| c |>\n\
    I added a solution without LINQ\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ substring = \"a\";\nstring[] result = new string[strings.Length];\nfor (int\
    \ i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring substring = \"a\";\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for the answer. I'm a beginner at programming and I\
    \ didn't know that there was a contains method. I'll definitely look into it.\n\
    <|/ c |>\n<| c |>\n`contains` was introduced in Java 1.4, so if you need to support\
    \ older versions, you'll need to write your own `contains` method or use a third-party\
    \ library.\n<|/ c |>\n<| c |>\nI added a version that doesn't require Java 1.4\n\
    <|/ c |>\n<| a tags=java,arrays,string |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\n\
    Thanks for the answer. I am not allowed to use any libraries other than System.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't use any libraries.\n<|/ c\
    \ |>\n<| c |>\nThanks for the answer. I am not allowed to use any libraries other\
    \ than System.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't use any libraries.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring search = \"a\";\nList<string> result = new List<string>();\n\
    foreach (string s in strArray)\n{\n    if (s.Contains(search))\n    {\n      \
    \  result.Add(s);\n    }\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a |>\n\
    <code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ search = \"a\";\nList<string> result = new List<string>();\nforeach (string\
    \ s in strArray)\n{\n    if (s.Contains(search))\n    {\n        result.Add(s);\n\
    \    }\n}\n</code>\n<|/ a dscore=1 tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nList<string> result = new List<string>();\nforeach (string\
    \ s in strArray)\n{\n    if (s.Contains(search))\n    {\n        result.Add(s);\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nList<string> result = new List<string>();\nforeach (string s in strArray)\n\
    {\n    if (s.Contains(search))\n    {\n        result.Add(s);\n    }\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nList<string> result = new\
    \ List<string>();\n", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, however I cannot use any external libraries.\
    \ I should have mentioned that in the original question.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't use any external libraries.\n<|/ c |>\n<| a tags=c#,linq,string,list\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI cannot use any external libraries. I should have\
    \ mentioned that in the original question.\n<|/ c |>\n<| a tags=c#,linq,string,list\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI cannot use any external libraries. I should have\
    \ mentioned that in the original question.\n<|/ c |>\n<| a |>\n<code>\nvar result\
    \ = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string,list\
    \ dscore=2 |>\n<| c |>\nI cannot use any external libraries. I should have mentioned\
    \ that in the original question.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nvar result\
    \ = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string,list\
    \ |>\n<| a |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,string,list dscore=2 |>\n<| a tags=c#,linq,string,list\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI cannot use any external libraries. I should have\
    \ mentioned that in the original question.\n<|/ c |>\n<| a tags=c#,linq,string,list\
    \ |>\n<code>\nvar result = list.Where(x => x.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,linq,string,list |>\n<code>\nvar ", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n\
    \    ['abc', 'cde']\n    \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i) {\n        if (!strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n    ['array']\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        if (strings[i].contains(substring)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \n*/\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to filter out all strings that don't contain `substring`,\
    \ not just the first one.\n<|/ c |>\n<| c |>\nI thought the question was \"how\
    \ do I filter out all strings that don't contain substring?\" I guess I misunderstood\
    \ the question. I'll update my answer.\n<|/ c |>\n<| c |>\nI updated my answer\
    \ to include a function that does exactly what the OP wants.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I tried it but I get an error saying \"cannot find symbol\"\
    \ for the line \"if (strings[i].contains(substring))\". Do you know why this is?\n\
    <|/ c |>\n<| c |>\nI fixed the typo in my answer. Try it now.\n<|/ c |>\n<| a\
    \ tags=java,arrays,string |>\n<code>\npublic static void main(String[] args) {\n\
    \    String[] strings = new String[]{\"abc\", \"bacd\", \"cde\", \"array\"};\n\
    \    String[] filtered = filterBySubstring(strings, \"a\");\n    System.out.println(Arrays.toString(filtered));\n\
    }", "{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction filterBySubstring(string[]\
    \ strings, string substring) {\n    var result = new Array();\n    for(var i =\
    \ 0; i < strings.length; i++) {\n        if(strings[i].indexOf(substring) != -1)\
    \ {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,substring |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,c#,arrays,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,substring dscore=1 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,c#,arrays,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a |>", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring str = \"a\";\n\
    var result = strArray.Where(x => x.Contains(str)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring str = \"a\";\nvar result = strArray.Where(x\
    \ => x.Contains(str)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    string[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring str = \"\
    a\";\nvar result = strArray.Where(x => x.Contains(str)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring str = \"\
    a\";\nvar result = strArray.Where(x => x.Contains(str)).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring str = \"a\";\nvar result = strArray.Where(x\
    \ => x.Contains(str)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring str = \"a\";\nvar result = strArray.Where(x =>\
    \ x.Contains(str)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string str = \"a\";\nvar result = strArray.Where(x => x.Contains(str)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis code will fail for `filter_by_substring(\"ab\", \"a\")` because\
    \ `s.Contains(substring)` returns `true` for `\"ab\"` and `\"a\"` but `s.Contains(\"\
    a\")` returns `false` for `\"ab\"` and `\"a\"`\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. I've fixed the code now.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings) {\n        if(s.Contains(substring)) {\n            result[i++] = s;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"abc def ghi\".  It\
    \ will match \"abc\" but not \"def\".\n<|/ c |>\n<| c |>\n: Yes, I realized that\
    \ after I posted it.  I fixed it now.\n<|/ c |>\n<| c |>\n: I fixed it now.  I\
    \ added a version that doesn't require the string to be sorted.\n<|/ c |>\n<|\
    \ c |>\n: I added a version that doesn't require the string to be sorted.\n<|/\
    \ c |>\n<| c |>\n: I added a version that doesn't require the string to be sorted.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] stringArray = new string[]{\"abc\", \"bacd\", \"cde\",\
    \ \"array\"};\nstring search = \"a\";\nstring[] result = stringArray.Where(x =>\
    \ x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n<|\
    \ c |>\nThis doesn't answer the question, which is about how to filter an array.\n\
    <|/ c |>\n<| c |>\nThe question was how to filter an array. Your answer doesn't\
    \ do that. Also, your answer doesn't compile.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] stringArray = new string[]{\"abc\", \"bacd\", \"cde\",\
    \ \"array\"};\nstring search = \"a\";\nstring[] result = stringArray.Where(x =>\
    \ x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about how to filter an array.\n<|/ c |>\n<| c\
    \ |>\nThe question was how to filter an array. Your answer doesn't do that. Also,\
    \ your answer doesn't compile.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring search = \"a\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question, which\
    \ is about how to filter an array.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring[] stringArray = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"\
    };\nstring search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question, which is\
    \ about how to filter an array.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ stringArray = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring search\
    \ = \"a\";\nstring", "{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like the idea of using contains. But it seems that\
    \ it only works with strings. I need a solution that works with any type that\
    \ implements IEnumerable. Do you know how I could do this?\n<|/ c |>\n<| c |>\n\
    I added a solution that works with any type that implements IEnumerable\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I tried it out and it works great. However\
    \ I realized that my question was wrong. I meant that I need to filter out any\
    \ string that does not contain the substring \"abc\". Your solution would filter\
    \ out all strings that contain the substring \"abc\".\n<|/ c |>\n<| c |>\nOh I\
    \ see, I misunderstood your question. I'll update my answer in a minute\n<|/ c\
    \ |>\n<| c |>\nI updated my answer, I hope it helps\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\npublic static IEnumerable<string> FilterBySubstring(IEnumerable<string>\
    \ strings, string substring)\n{\n    return strings.Where(s => s.Contains(substring));\n\
    }\n</code>\n<|/ a tags=c#,linq |>\n<| a |>\n<code>\npublic static IEnumerable<string>\
    \ FilterBySubstring(IEnumerable<string> strings, string substring)\n{\n    return\
    \ strings.Where(s => s.Contains(substring));\n}\n</code>\n<|/ a dscore=0 tags=c#,linq\
    \ |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a tags=c#,linq\
    \ |>\n<code>\npublic static IEnumerable<string> FilterBySubstring(IEnumerable<string>\
    \ strings, string substring)\n{\n    return strings.Where(s => s.Contains(substring));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\npublic static IEnumerable<string> FilterBySubstring(IEnumerable<string>\
    \ strings, string substring)\n{\n    return strings.Where(s => s.Contains(substring));\n\
    }\n</code>\n<|/ a ", "{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    for(int i = 0;\
    \ i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,c# |>\n<code>\npublic static string RemoveDuplicates(string input)\n\
    {\n    HashSet<string> hashSet = new HashSet<string>();\n    foreach (string s\
    \ in input.Split(' '))\n    {\n        hashSet.Add(s);\n    }\n    return string.Join(\"\
    \ \", hashSet);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static string RemoveDuplicates(string input)\n{\n    HashSet<string> hashSet\
    \ = new HashSet<string>();\n    foreach (string s in input.Split(' '))\n    {\n\
    \        hashSet.Add(s);\n    }\n    return string.Join(\" \", hashSet);\n}\n\
    </code>\n<|/ a tags=string,c# |>\n<| a tags=string,c# |>\n<code>\npublic static\
    \ string RemoveDuplicates(string input)\n{\n    HashSet<string> hashSet = new\
    \ HashSet<string>();\n    foreach (string s in input.Split(' '))\n    {\n    \
    \    hashSet.Add(s);\n    }\n    return string.Join(\" \", hashSet);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static string RemoveDuplicates(string\
    \ input)\n{\n    HashSet<string> hashSet = new HashSet<string>();\n    foreach\
    \ (string s in input.Split(' '))\n    {\n        hashSet.Add(s);\n    }\n    return\
    \ string.Join(\" \", hashSet);\n}\n</code>\n<|/ a tags=string,c# |>\n<| a dscore=0\
    \ |>\n<code>\npublic static string RemoveDuplicates(string input)\n{\n    HashSet<string>\
    \ hashSet = new HashSet<string>();\n    foreach (string s in input.Split(' '))\n\
    \    {\n        hashSet.Add(s);\n    }\n    return string.Join(\" \", hashSet);\n\
    }\n</code>\n<|/ a tags=string,c# |>\n<| c |>\nPlease don't post only code as an\
    \ answer, but also provide an explanation of what your code does and how it solves\
    \ the problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<|\
    \ c |>\nWhile this code may ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n  \
    \  foreach(string s in strings)\n    {\n        if(s.contains(substring))\n  \
    \      {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for the answer. I'm\
    \ going to try this out and see if it works. I appreciate it.\n<|/ c |>\n<| c\
    \ |>\nThis worked great! Thank you so much. I'm going to have to read up on foreach\
    \ loops now that I know what they are. Thanks again!\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for the answer. I'm going to try this out and see if it works.\
    \ I appreciate it.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = new string[strings.Length];\nfor (int i = 0; i <\
    \ strings.Length; i++)\n{\n    if (strings[i].Contains(substring))\n    {\n  \
    \      result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for the answer. I'm going to try this out and see if it works. I appreciate\
    \ it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"\
    abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = new string[strings.Length];\nfor (int i = 0; i < strings.Length; i++)\n{\n\
    \    if (strings[i].Contains(substring))\n    {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for the answer.\
    \ I'm going to try this out and see if it works. I appreciate it.\n<|/ c |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a tags=string,c", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i) {\n\
    \        if (strings[i].contains(substring)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe `string[]\
    \ result = new string[strings.length];` line is unnecessary. `string[] result\
    \ = strings;` will suffice.\n<|/ c |>\n<| c |>\nI agree, but I wanted to show\
    \ that you can do that in one line :)\n<|/ c |>\n<| c |>\nI agree with you, but\
    \ I wanted to show that you can do that in one line :)\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work if you want to search for\
    \ a substring in a string that has other characters in it (like \"a\" in \"abcde\"\
    ).\n<|/ c |>\n<| c |>\n: It will work if you use `s.Contains(\"a\", StringComparison.OrdinalIgnoreCase)`.\n\
    <|/ c |>\n<| c |>\n: It will work if you use `s.IndexOf(\"a\", StringComparison.OrdinalIgnoreCase)\
    \ >= 0`.\n<|/ c |>\n<| c |>\n: It will work if you use `s.IndexOf(\"a\", StringComparison.OrdinalIgnoreCase)\
    \ >= 0`.\n<|/ c |>\n<| c |>\n: It will work if you use `s.IndexOf(\"a\", StringComparison.OrdinalIgnoreCase)\
    \ >= 0`.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| c |>\nThis doesn't work if you want to search for a substring in a string that\
    \ has other characters in it (like \"a\" in \"abcde\").\n<|/ c |>\n<| c |>\n:\
    \ It will work if you use `s.Contains(\"a\", StringComparison.OrdinalIgnoreCase)`.\n\
    <|/ c |>\n<| c |>\n: It will work if you use `s.IndexOf(\"a\", StringComparison.OrdinalIgnoreCase)\
    \ >= 0`.\n<|/ c |>\n<| c |>\n: It will work if you use `s.IndexOf(\"a\", StringComparison.OrdinalIgnoreCase)\
    \ >= 0`.\n<|/ c |>\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    for(int i = 0;\
    \ i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to filter out any string\
    \ that doesn't contain `substring`, not just any string that contains the substring.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to reflect that.\n\
    <|/ c |>\n<| c |>\nI believe this answer is wrong. OP wants to filter out any\
    \ string that doesn't contain `substring`, not just any string that contains the\
    \ substring.\n<|/ c |>\n<| c |>\nI believe this answer is correct. OP wants to\
    \ filter out any string that doesn't contain `substring`, not just any string\
    \ that contains the substring.\n<|/ c |>\n<| c |>\nI believe this answer is correct.\
    \ OP wants to filter out any string that doesn't contain `substring`, not just\
    \ any string that contains the substring.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| a tags=string,c#,arrays,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nI like your solution but i think it would\
    \ be better to use a foreach loop instead of a for loop. Also the result array\
    \ should be initialized with `string[] result = new string[strings.length];`\n\
    <|/ c |>\n<| c |>\nThanks, I fixed the initialization.\n<|/ c |>\n<| c |>\nI like\
    \ your solution but i think it would be better to use a foreach loop instead of\
    \ a for loop. Also the result array should be initialized with `string[] result\
    \ = new string[strings.length];`\n<|/ c |>\n<| c |>\nI agree with you, foreach\
    \ is more readable. But the question was about a for loop. Anyway, I added a foreach\
    \ solution.\n<|/ c |>\n<| c |>\nI like your solution but i think it would be better\
    \ to use a foreach loop instead of a for loop. Also the result array should be\
    \ initialized with `string[] result = new string[strings.length];`\n<|/ c |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a dscore=1 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result =\
    \ strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[]\
    \ result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,arrays,c#\
    \ dscore=1 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result =\
    \ strings.Where(", "{\n    string[] result = new string[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.", "{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[result.length] = strings[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. I'm a beginner at programming\
    \ and I didn't know about `contains` method. I'll try to use it next time I encounter\
    \ a problem like this.\n<|/ c |>\n<| a |>\n<code>\npublic static void main(String[]\
    \ args) {\n    String[] strings = new String[]{\"abc\", \"bacd\", \"cde\", \"\
    array\"};\n    System.out.println(filter_by_substring(strings, \"a\"));\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,c#,arrays,substring |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n        {\n            result.Add(s);\n        }\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,substring |>\n<| a dscore=1 |>\n<code>\n\
    public static string[] FilterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| a tags=string,c#,arrays,substring |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n        {\n            result.Add(s);\n        }\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n", "{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    for (string s : strings) {\n        if (s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question, which is about how\
    \ to do this in Haskell, not Java.\n<|/ c |>\n<| c |>\nI didn't realize that Haskell\
    \ had a contains method. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI added\
    \ a Haskell solution. Thanks for pointing that out.\n<|/ c |>\n<| a tags=java,string,algorithm\
    \ |>\n<code>\npublic static void main(String[] args) {\n    String[] strings =\
    \ {\"abc\", \"bacd\", \"cde\", \"array\"};\n    System.out.println(filterBySubstring(strings,\
    \ \"a\"));\n}", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    foreach(string s in strings)\n    {\n        if(s.indexOf(substring)\
    \ != -1)\n        {\n            result[i++] = s;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to do this without having to loop through the\
    \ entire array twice. Maybe some kind of LINQ solution?\n<|/ c |>\n<| c |>\n:\
    \ I added a LINQ solution to my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ substring = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to remove all strings that don't contain the substring.\n<|/ c |>\n\
    <| c |>\n: I added a LINQ solution to my answer.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring substring = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to remove all strings that don't contain the substring.\n<|/ c |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to remove all strings\
    \ that don't contain the substring.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to remove all strings that don't contain the substring.\n", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,string,list\
    \ |>\n<| c |>\nThis doesn't work if the substring appears more than once in the\
    \ string. For example, if the input string is \"abc abc abc\", the output will\
    \ be \"abc abc\".\n<|/ c |>\n<| c |>\n: Yes, I forgot about that case. Thanks\
    \ for pointing that out. I've updated my answer to fix it.\n<|/ c |>\n<| a tags=c#,.net,string,list\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string,list\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string,list\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 tags=c#,.net,string,list |>\n<| a tags=c#,.net,string,list\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string,list\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string,list\
    \ |>\n<code>\nstring[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static List<String>\
    \ filterBySubstring(List<String> list, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for (String s : list) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,java,arrays,list |>\n<| a tags=string,java,arrays,list |>\n\
    <code>\npublic static List<String> filterBySubstring(List<String> list, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,java,arrays,list\
    \ |>\n<code>\npublic static List<String> filterBySubstring(List<String> list,\
    \ String substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,java,arrays,list\
    \ |>\n<code>\npublic static List<String> filterBySubstring(List<String> list,\
    \ String substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,java,arrays,list\
    \ |>\n<code>\npublic static List<String> filterBySubstring(List<String> list,\
    \ String substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,java,arrays,list\
    \ |>\n<code>\npublic static List<String> filterBySubstring(List<String> list,\
    \ String substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static List<String> filterBySubstring(List<String> list,\
    \ String substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,.net,arrays,search\
    \ |>\n<code>\npublic static string[] FindStringInArray(string[] array, string\
    \ searchString)\n{\n    List<string> found = new List<string>();\n    foreach\
    \ (string s in array)\n    {\n        if (s.Contains(searchString))\n        {\n\
    \            found.Add(s);\n        }\n    }\n    return found.ToArray();\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,.net,arrays,search |>\n<code>\n\
    public static string[] FindStringInArray(string[] array, string searchString)\n\
    {\n    List<string> found = new List<string>();\n    foreach (string s in array)\n\
    \    {\n        if (s.Contains(searchString))\n        {\n            found.Add(s);\n\
    \        }\n    }\n    return found.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\npublic static string[] FindStringInArray(string[] array,\
    \ string searchString)\n{\n    List<string> found = new List<string>();\n    foreach\
    \ (string s in array)\n    {\n        if (s.Contains(searchString))\n        {\n\
    \            found.Add(s);\n        }\n    }\n    return found.ToArray();\n}\n\
    </code>\n<|/ a tags=string,c#,.net,arrays,search |>\n<| a tags=string,c#,.net,arrays,search\
    \ |>\n<code>\npublic static string[] FindStringInArray(string[] array, string\
    \ searchString)\n{\n    List<string> found = new List<string>();\n    foreach\
    \ (string s in array)\n    {\n        if (s.Contains(searchString))\n        {\n\
    \            found.Add(s);\n        }\n    }\n    return found.ToArray();\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[] FindStringInArray(string[]\
    \ array, string searchString)\n{\n    List<string> found = new List<string>();\n\
    \    foreach (string s in array)\n    {\n        if (s.Contains(searchString))\n\
    \        {\n            found.Add(s);\n        }\n    }\n    return found.ToArray();\n\
    }\n</code>\n<|/ a tags=string,c#,.net,arrays,search |>\n<| a tags=string,c#,.net,arrays,search\
    \ |>\n", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThank you so much for this. I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(searchString)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string searchString = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] ",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. `filter_by_substring` returns an array of strings that\
    \ don't contain the substring `substring`, but `filter_by_substring` doesn't return\
    \ an array of strings that contain the substring `substring`.\n<|/ c |>\n<| c\
    \ |>\nI see what you mean. I've edited my answer to include a function that does\
    \ what you want.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; i++)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns an array of strings that don't contain the substring `substring`, but\
    \ `filter_by_substring` doesn't return an array of strings that contain the substring\
    \ `substring`.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer\
    \ to include a function that does what you want.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns an array of strings that don't contain the substring `substring`, but\
    \ `filter_by_substring` doesn't return an array of strings that contain the substring\
    \ `substring`.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; i++)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns an array of strings that don't contain the substring `substring`, but\
    \ `filter_by_substring` doesn't return an array of strings that contain the substring\
    \ `substring`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.List;", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"abcabc\" and the\
    \ substring \"abc\"\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting\
    \ it, and it works fine.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work.\
    \ Try it with a string like \"abcabc\" and a substring \"abc\".\n<|/ c |>\n<|\
    \ c |>\n: I tested it and it works fine. Try it with a string like \"abcabc\"\
    \ and a substring \"abc\".\n<|/ c |>\n<| c |>\n: I tested it and it works fine.\
    \ Try it with a string like \"abcabc\" and a substring \"abc\".\n<|/ c |>\n<|\
    \ a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0;\
    \ i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\n      \
    \  result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays dscore=4 |>\n\
    <| c |>\nThis doesn't work if you have a string like \"abcabc\" and the substring\
    \ \"abc\"\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result =\
    \ new string[strings.length];\nfor (int i = 0; i < strings.length; ++i) {\n  \
    \  if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i) {\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i) {\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
