name: HumanEval_56_correct_bracketing
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"<\"\
  \ and \">\".\n    return True if every opening bracket has a corresponding closing\
  \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
  <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
  ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n"
tests: "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
  <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
  <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\")\
  \ == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
  ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
  <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
  <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"\
  <><><<><>><>>><>\") == false);\n}\nvoid main(){}"
completions: ["{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t i = 0;\n   \
    \ size_t j = 0;\n    bool result = true;\n    while(i < brackets_size)\n    {\n\
    \        string opening_bracket = brackets.substr(i, 1);\n        string closing_bracket\
    \ = brackets.substr(j, 1);\n        bool opening_brackets_closed = (opening_bracket.length()\
    \ == 1);\n        bool closing_brackets_closed = (closing_bracket.length() ==\
    \ 1);\n        bool opening_brackets_open = (opening_brackets_closed);\n     \
    \   bool closing_brackets_open = (closing_brackets_closed);\n        bool opening_brackets_closed_and_open\
    \ = (opening_brackets_open && closing_brackets_closed);\n        bool closing_brackets_closed_and_open\
    \ = (closing_brackets_open && opening_brackets_closed);\n        bool opening_brackets_open_and_closed\
    \ = (opening_brackets_open && closing_brackets_open);\n        bool closing_brackets_open_and_closed\
    \ = (closing_brackets_open && opening_brackets_open);\n        bool opening_brackets_open_and_closed_and_open\
    \ = (opening_brackets_open_and_closed && closing_brackets_open_and_closed);\n\
    \        bool closing_brackets_open_and_closed_and_open = (closing_brackets_open_and_closed\
    \ && opening_brackets_open_and_closed);\n        bool opening_brackets_open_and_closed_and_open_and_closed\
    \ = (opening_brackets_open_and_closed_and_open && closing_brackets_open_and_closed_and_open);\n\
    \        bool closing_brackets_open_and_closed_and_open_and_closed = (closing_brackets_open_and_closed_and_open\
    \ && opening_brackets_open_and_closed_and_open);\n        bool opening_brackets_open_and_closed_and_open_and_closed_and_open\
    \ = (opening_brackets_open_and_closed_and_open_and_closed && closing_brackets_open_and_closed_and_open_and_closed);\n\
    \        bool closing_brackets_open_and_closed_and_open_and_closed_and_open =\
    \ (closing_brackets_open_and_closed_and_open_and_closed && opening_brackets_open_and_closed_and_open_and_closed);\n\
    \        bool opening_brackets_", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n\tfor (int i = 0; i < brackets.length();\
    \ i++)\n\t{\n\t\tif (brackets[i] == '<')\n\t\t{\n\t\t\tif (brackets[i+1] == '>')\n\
    \t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "{\n    for(int i = 0;\
    \ i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n       \
    \ {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    bool ret =\
    \ true;\n    while (i < len) {\n        if (brackets[i] == '<') {\n          \
    \  if (brackets[i+1] == '>') {\n                i += 2;\n            } else {\n\
    \                ret = false;\n            }\n        } else {\n            if\
    \ (brackets[i+1] == '>') {\n                i += 2;\n            } else {\n  \
    \              ret = false;\n            }\n        }\n        i += 1;\n    }\n\
    \    return ret;\n}", "{\n\tauto opening_brackets = brackets.split(\"<\");\n\t\
    auto closing_brackets = brackets.split(\">\");\n\t\n\tfor (auto &opening_bracket\
    \ : opening_brackets)\n\t{\n\t\tauto closing_bracket = closing_brackets.find(opening_bracket);\n\
    \t\tif (closing_bracket == closing_brackets.end())\n\t\t{\n\t\t\treturn false;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tauto opening_bracket = opening_brackets.find(opening_bracket);\n\
    \t\t\tif (opening_bracket == opening_brackets.end())\n\t\t\t{\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto closing_bracket = closing_brackets.find(opening_bracket);\n\
    \t\t\t\tif (closing_bracket == closing_brackets.end())\n\t\t\t\t{\n\t\t\t\t\t\
    return false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tauto opening_bracket\
    \ = opening_brackets.find(opening_bracket);\n\t\t\t\t\tif (opening_bracket ==\
    \ opening_brackets.end())\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\
    }\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tauto closing_bracket = closing_brackets.find(opening_bracket);\n\
    \t\t\t\t\t\tif (closing_bracket == closing_brackets.end())\n\t\t\t\t\t\t{\n\t\t\
    \t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\
    \t\t\t\tauto opening_bracket = opening_brackets.find(opening_bracket);\n\t\t\t\
    \t\t\t\tif (opening_bracket == opening_brackets.end())\n\t\t\t\t\t\t\t{\n\t\t\t\
    \t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\
    \t\t\t\t\t\t\t\tauto closing_bracket = closing_brackets.find(opening_bracket);\n\
    \t\t\t\t\t\t\t\tif (closing_bracket == closing_brackets.end())\n\t\t\t\t\t\t\t\
    \t{\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\
    \t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\
    \t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n     \
    \   if(brackets[i] == '>')\n        {\n            if(brackets[i+1] == '<')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for `<<><>>`\
    \ - it returns true when it should be false.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that case. Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<|\
    \ a |>\n<code>", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n \
    \       if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n\tsize_t len = brackets.length();\n\tsize_t i = 0;\n\
    \tbool result = true;\n\twhile (i < len) {\n\t\tchar c = brackets[i];\n\t\tif\
    \ (c == '<') {\n\t\t\tif (brackets[i+1] == '>') {\n\t\t\t\ti += 2;\n\t\t\t} else\
    \ {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (c == '>')\
    \ {\n\t\t\tif (brackets[i+1] == '<') {\n\t\t\t\ti += 2;\n\t\t\t} else {\n\t\t\t\
    \tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tresult = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}", "{\n\tsize_t len = brackets.length();\n\
    \tsize_t i;\n\tbool ret = true;\n\tfor(i = 0; i < len; ++i)\n\t{\n\t\tchar c =\
    \ brackets[i];\n\t\tif(c == '>')\n\t\t{\n\t\t\tif(!(i+1 < len && brackets[i+1]\
    \ == '<'))\n\t\t\t{\n\t\t\t\tret = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\
    else if(c == '<')\n\t\t{\n\t\t\tif(!(i-1 >= 0 && brackets[i-1] == '>'))\n\t\t\t\
    {\n\t\t\t\tret = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == \"<\")\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == \">\")\n                {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            for(int j = i +\
    \ 1; j < brackets.length(); j++)\n            {\n                if(brackets[j]\
    \ == '>')\n                {\n                    return true;\n             \
    \   }\n            }\n        }\n    }\n    return false;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i + 1] == '>')\n            {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == \"<\")\n        {\n            if(brackets[i+1] != \">\")\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n\tfor (int i = 0; i < brackets.length(); i++)\n\t{\n\t\tif (brackets[i]\
    \ == '<')\n\t\t{\n\t\t\tfor (int j = i+1; j < brackets.length(); j++)\n\t\t\t\
    {\n\t\t\t\tif (brackets[j] == '>')\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "{\n    bool result = true;\n   \
    \ for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] !=\
    \ '<')\n        {\n            result = false;\n            break;\n        }\n\
    \    }\n    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i;\n    bool result = true;\n    for(i = 0; i < brackets_size; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            ++closing_brackets;\n\
    \        }\n        else if(c == '<')\n        {\n            ++opening_brackets;\n\
    \        }\n        else\n        {\n            assert(false);\n        }\n \
    \   }\n    if(opening_brackets != closing_brackets)\n    {\n        result = false;\n\
    \    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n\tfor (int i = 0; i < brackets.length();\
    \ i++)\n\t{\n\t\tchar c = brackets[i];\n\t\tif (c != '>' && c != '<')\n\t\t\t\
    return false;\n\t}\n\treturn true;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    \n    while\
    \ (i < brackets_size) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        } else {\n            assert(false);\n        }\n        i++;\n    }\n\
    \    \n    if (opening_brackets_size != closing_brackets_size) {\n        result\
    \ = false;\n    }\n    \n    while (j < brackets_size) {\n        if (brackets[j]\
    \ == '<') {\n            opening_brackets_size--;\n        } else if (brackets[j]\
    \ == '>') {\n            closing_brackets_size--;\n        } else {\n        \
    \    assert(false);\n        }\n        j++;\n    }\n    \n    if (opening_brackets_size\
    \ != closing_brackets_size) {\n        result = false;\n    }\n    \n    return\
    \ result;\n}", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ != '>')\n            {\n                result = false;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t i;\n\
    \    for(i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            open_brackets++;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            close_brackets++;\n        }\n    }\n    return\
    \ open_brackets == close_brackets;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_index_in_brackets = 0;\n    size_t closing_brackets_index_in_brackets\
    \ = 0;\n    size_t opening_brackets_index_in_string = 0;\n    size_t closing_brackets_index_in_string\
    \ = 0;\n    size_t opening_brackets_index_in_string2 = 0;\n    size_t closing_brackets_index_in_string2\
    \ = 0;\n    size_t opening_brackets_index_in_string3 = 0;\n    size_t closing_brackets_index_in_string3\
    \ = 0;\n    size_t opening_brackets_index_in_string4 = 0;\n    size_t closing_brackets_index_in_string4\
    \ = 0;\n    size_t opening_brackets_index_in_string5 = 0;\n    size_t closing_brackets_index_in_string5\
    \ = 0;\n    size_t opening_brackets_index_in_string6 = 0;\n    size_t closing_brackets_index_in_string6\
    \ = 0;\n    size_t opening_brackets_index_in_string7 = 0;\n    size_t closing_brackets_index_in_string7\
    \ = 0;\n    size_t opening_brackets_index_in_string8 = 0;\n    size_t closing_brackets_index_in_string8\
    \ = 0;\n    size_t opening_brackets_index_in_string9 = 0;\n    size_t closing_brackets_index_in_string9\
    \ = 0;\n    size_t opening_brackets_index_in_string10 = 0;\n    size_t closing_brackets_index_in_string10\
    \ = 0;\n    size_t opening_brackets_index_in_string11 = 0;\n    size_t closing_brackets_index_in_string11\
    \ = 0;\n    size_t opening_brackets_index_in_string12 = 0;\n    size_t closing_brackets_index_in_string12\
    \ = 0;\n    size_t opening_brackets_index_in_string13 = 0;\n    size_t closing_brackets_index_in_string13\
    \ = 0;\n    size_t opening_brackets_index_in_string14 = 0;\n    size_t closing_brackets_index_in_string14\
    \ = 0;\n    size_t opening_brackets_index_in_string15 = 0;\n    size_t closing_brackets_index_in_string15\
    \ = 0;\n    size_t opening_brackets_index_in_string16 = 0;\n    size_t closing_brackets_index_in_string16\
    \ = 0;\n    size_t opening_brackets_index_in_string17", "{\n    for(int i = 0;\
    \ i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n       \
    \ {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    size_t\
    \ brackets_size = brackets.length();\n    size_t opening_brackets_size = 0;\n\
    \    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index = 0;\n\
    \    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    size_t opening_brackets_index_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_prev = 0;\n    size_t opening_brackets_index_prev_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next = 0;\n    size_t opening_brackets_index_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next = 0;\n    size_t opening_brackets_index_next_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_next_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_next_next = 0;\n    size_t closing_brackets_index_prev_next_next_next\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ opening_brackets_index_next_next_next_next_prev = 0;\n    size_t closing_brackets_index_next_next_next_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ closing_brackets_index_prev_next_next_next_next = 0;\n    size_t opening_brackets_index_next_next_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_next_next_next = 0;\n    size_t closing_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ open", "{\n\tfor (int i = 0; i < brackets.length(); i++)\n\t{\n\t\tchar c =\
    \ brackets[i];\n\t\tif (c == '<')\n\t\t{\n\t\t\tfor (int j = i; j < brackets.length();\
    \ j++)\n\t\t\t{\n\t\t\t\tchar d = brackets[j];\n\t\t\t\tif (d != '>')\n\t\t\t\t\
    {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (c != '>')\n\
    \t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "{\n    bool result\
    \ = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        char\
    \ opening = brackets[i];\n        char closing = brackets[brackets.length() -\
    \ 1 - i];\n        if(opening != '<' || closing != '>')\n        {\n         \
    \   result = false;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] ==\
    \ '<') {\n\t\t\tif (brackets[i+1] == '>') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn false;\n}", "{\n    size_t len = brackets.length();\n    bool\
    \ result = true;\n    for(size_t i = 0; i < len; ++i)\n    {\n        char c =\
    \ brackets[i];\n        if(c == '>')\n        {\n            if(brackets[i+1]\
    \ != '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n\tfor (int i = 0;\
    \ i < brackets.length(); i++)\n\t{\n\t\tif (brackets[i] == '>')\n\t\t{\n\t\t\t\
    for (int j = i; j < brackets.length(); j++)\n\t\t\t{\n\t\t\t\tif (brackets[j]\
    \ == '<')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn true;\n}", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        char opening = brackets[i];\n        char closing = brackets[brackets.length()\
    \ - 1 - i];\n        if(opening != closing)\n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try `correct_bracketing(\"<<><>>\"\
    )`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I even tested\
    \ it on ideone.com. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did. But it returns\
    \ `true` for `\"<>\"` instead of `false`\n<|/ c |>\n<| c |>\nI tested it on ideone.com.\
    \ Did you try it?\n<|/ c |>\n<| c |>\nYes, I did. But it returns `true` for `\"\
    <>\"` instead of `false`\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] != '<')\n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '>')\n        {\n            result =\
    \ false;\n            break;\n        }\n    }\n    return result;\n}", "{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        char c = brackets[i];\n        if(c == '<')\n        {\n\
    \            ++opening_brackets;\n        }\n        else if(c == '>')\n     \
    \   {\n            ++closing_brackets;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == \"<\")\n        {\n            if(brackets[i+1]\
    \ != \">\")\n            {\n                return false;\n            }\n   \
    \     }\n    }\n    return true;\n}", "{\n    size_t len = brackets.length();\n\
    \    for(size_t i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n \
    \       if(c == '<')\n        {\n            if(brackets[i+1] == '>')\n      \
    \      {\n                brackets.replace(i+2, i+2, \"\");\n                --i;\n\
    \                --len;\n            }\n        }\n    }\n    return brackets.length()\
    \ == 0;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n     \
    \   if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n  \
    \  size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i;\n    for(i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i] ==\
    \ '<')\n        {\n            ++opening_brackets;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            ++closing_brackets;\n        }\n    }\n    if(opening_brackets\
    \ != closing_brackets)\n    {\n        return false;\n    }\n    return true;\n\
    }", "{\n\tfor (int i = 0; i < brackets.length(); i++)\n\t{\n\t\tif (brackets[i]\
    \ == '<')\n\t\t{\n\t\t\tif (brackets[i+1] == '>')\n\t\t\t\treturn true;\n\t\t\
    }\n\t\telse if (brackets[i] == '>')\n\t\t{\n\t\t\tif (brackets[i-1] == '<')\n\t\
    \t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "{\n\tauto opening_brackets\
    \ = brackets.split(\"<\");\n\tauto closing_brackets = brackets.split(\">\");\n\
    \t\n\tfor (auto opening_bracket : opening_brackets)\n\t{\n\t\tauto closing_bracket\
    \ = closing_brackets.find(opening_bracket);\n\t\tif (closing_bracket == closing_brackets.end())\n\
    \t\t\treturn false;\n\t\telse\n\t\t\tclosing_brackets.erase(closing_bracket);\n\
    \t}\n\t\n\treturn true;\n}", "{\n\tfor (int i = 0; i < brackets.length(); i++)\n\
    \t{\n\t\tif (brackets[i] == '<')\n\t\t{\n\t\t\tfor (int j = i; j < brackets.length();\
    \ j++)\n\t\t\t{\n\t\t\t\tif (brackets[j] == '>')\n\t\t\t\t{\n\t\t\t\t\tfor (int\
    \ k = j; k < brackets.length(); k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tbrackets[k] = brackets[k\
    \ + 1];\n\t\t\t\t\t}\n\t\t\t\t\tbrackets[j] = brackets[k + 1];\n\t\t\t\t\tbrackets.erase(k\
    \ + 1, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn brackets.length()\
    \ == 0;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n     \
    \   if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    size_t len = brackets.length();\n    size_t i;\n\
    \    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i]\
    \ != '<')\n        {\n            result = false;\n            break;\n      \
    \  }\n    }\n    for(i = len - 1; i >= 0; --i)\n    {\n        if(brackets[i]\
    \ != '>')\n        {\n            result = false;\n            break;\n      \
    \  }\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        char c = brackets[i];\n        switch(c) {\n        case '<':\n\
    \            if(brackets[j] == '>') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n            }\n      \
    \      break;\n        case '>':\n            if(brackets[j] == '<') {\n     \
    \           i++;\n                j++;\n            } else {\n               \
    \ result = false;\n            }\n            break;\n        default:\n     \
    \       i++;\n            j++;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis fails\
    \ for `<><><>` - it returns `true` when it should be `false`.\n<|/ c |>\n<| c\
    \ |>\n: Yes, I missed that case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    : Thanks for pointing it out. Fixed it.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n\tauto open_brackets = brackets.find_all([](char c){return c == '<';});\n\
    \tauto close_brackets = brackets.find_all([](char c){return c == '>';});\n\t\n\
    \tif (open_brackets.size() != close_brackets.size())\n\t\treturn false;\n\t\n\t\
    for (auto i : open_brackets)\n\t{\n\t\tauto j = close_brackets.find(i);\n\t\t\
    if (j == close_brackets.end())\n\t\t\treturn false;\n\t\t\n\t\tif (j != open_brackets.end())\n\
    \t\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "{\n\tfor (int i = 0; i < brackets.length();\
    \ i++)\n\t{\n\t\tif (brackets[i] == '<')\n\t\t{\n\t\t\tif (brackets[i + 1] ==\
    \ '>')\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \tauto opening_brackets = brackets.split(\"<\");\n\tauto closing_brackets = brackets.split(\"\
    >\");\n\t\n\tfor(auto &opening_bracket : opening_brackets)\n\t{\n\t\tauto closing_bracket\
    \ = closing_brackets.find(opening_bracket);\n\t\tif(closing_bracket == closing_brackets.end())\n\
    \t\t\treturn false;\n\t\t\n\t\tif(opening_bracket != closing_bracket)\n\t\t\t\
    return false;\n\t}\n\t\n\treturn true;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    \n    while\
    \ (i<brackets_size && j<brackets_size) {\n        if (brackets[i] == '<') {\n\
    \            if (brackets[j] == '>')\n                i++;\n            else\n\
    \                j++;\n        }\n        else if (brackets[i] == '>') {\n   \
    \         if (brackets[j] == '<')\n                i++;\n            else\n  \
    \              j++;\n        }\n        else if (brackets[i] == '(') {\n     \
    \       if (brackets[j] == ')')\n                i++;\n            else\n    \
    \            j++;\n        }\n        else if (brackets[i] == ')') {\n       \
    \     if (brackets[j] == '(')\n                i++;\n            else\n      \
    \          j++;\n        }\n        else if (brackets[i] == '[') {\n         \
    \   if (brackets[j] == ']')\n                i++;\n            else\n        \
    \        j++;\n        }\n        else if (brackets[i] == ']') {\n           \
    \ if (brackets[j] == '[')\n                i++;\n            else\n          \
    \      j++;\n        }\n        else if (brackets[i] == '{') {\n            if\
    \ (brackets[j] == '}')\n                i++;\n            else\n             \
    \   j++;\n        }\n        else if (brackets[i] == '}') {\n            if (brackets[j]\
    \ == '{')\n                i++;\n            else\n                j++;\n    \
    \    }\n        else {\n            result = false;\n            break;\n    \
    \    }\n    }\n    \n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i;\n    \n    for (i = 0; i < brackets_size; ++i)\n    {\n        if (brackets[i]\
    \ == '<')\n        {\n            ++opening_brackets;\n        }\n        else\
    \ if (brackets[i] == '>')\n        {\n            ++closing_brackets;\n      \
    \  }\n    }\n    \n    return opening_brackets == closing_brackets;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n\tauto brackets_array = brackets.toCharArray();\n\tauto brackets_array_size\
    \ = brackets.size();\n\t\n\tbool correct_bracketing = true;\n\t\n\tfor (auto i\
    \ = 0; i < brackets_array_size; ++i)\n\t{\n\t\tauto current_bracket = brackets_array[i];\n\
    \t\tauto next_bracket = brackets_array[i+1];\n\t\t\n\t\tif (current_bracket !=\
    \ next_bracket)\n\t\t{\n\t\t\tcorrect_bracketing = false;\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\t\n\treturn correct_bracketing;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_index_next = 0;\n    size_t closing_brackets_index_next\
    \ = 0;\n    size_t opening_brackets_index_end = 0;\n    size_t closing_brackets_index_end\
    \ = 0;\n    bool result = true;\n    \n    for (size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        char c = brackets[i];\n        \n        if (c == '<')\n\
    \        {\n            opening_brackets_size++;\n            opening_brackets_index++;\n\
    \        }\n        else if (c == '>')\n        {\n            closing_brackets_size++;\n\
    \            closing_brackets_index++;\n        }\n        else if (c == '{')\n\
    \        {\n            opening_brackets_size++;\n            opening_brackets_index++;\n\
    \            opening_brackets_index_end++;\n        }\n        else if (c == '}')\n\
    \        {\n            closing_brackets_size++;\n            closing_brackets_index++;\n\
    \            closing_brackets_index_end++;\n        }\n    }\n    \n    if (opening_brackets_size\
    \ != closing_brackets_size)\n    {\n        result = false;\n    }\n    \n   \
    \ for (size_t i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n\
    \        \n        if (c == '<')\n        {\n            if (opening_brackets_index\
    \ == opening_brackets_size)\n            {\n                result = false;\n\
    \            }\n            else\n            {\n                opening_brackets_index\
    \ = opening_brackets_index_next;\n                opening_brackets_index_next\
    \ = opening_brackets_index + 1;\n            }\n        }\n        else if (c\
    \ == '>')\n        {\n            if (closing_brackets_index == closing_brackets_size)\n\
    \            {\n                result = false;\n            }\n            else\n\
    \            {\n                closing_brackets_index = closing_brackets_index_next;\n\
    \                closing_brackets_index_next = closing_brackets_index + 1;\n \
    \           }\n        }\n        else if (c == '{')\n        {\n            if\
    \ (opening_brackets_index == opening_brackets_size)\n            {\n         \
    \       result = false;\n            }\n            else\n            {\n    \
    \            opening_brackets_index = opening_brackets_index_next;\n         \
    \       opening_bra", "{\n    for(int i = 0; i < brackets.length(); i++)\n   \
    \ {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] ==\
    \ '>')\n            {\n                return true;\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n\tauto brackets_iter = brackets.begin();\n\t\
    auto brackets_end = brackets.end();\n\tauto opening_bracket = brackets_iter;\n\
    \tauto closing_bracket = brackets_iter;\n\tauto opening_brackets_end = brackets_end;\n\
    \tauto closing_brackets_end = brackets_end;\n\t\n\tfor (; opening_bracket != brackets_end;\
    \ ++opening_bracket, ++closing_bracket)\n\t{\n\t\tif (*opening_bracket != *closing_bracket)\n\
    \t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't work. Try it with `\"\
    <>\"`.\n<|/ c |>\n<| c |>\nI tested it with `\"<>\"` and it returned `true`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `\"<>\"` because `<` doesn't have a corresponding\
    \ `>`.\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out.\
    \ I've edited my answer to fix it.\n<|/ c |>\n<| c |>\nThis doesn't work. Try\
    \ it with `\"<<><>>\"`.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                result = false;\n            }\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis fails for `<><>`, which should return true.\n<|/ c |>\n<|\
    \ c |>\nYes, I missed that case. Fixed now.\n<|/ c |>\n<| c |>\nThis fails for\
    \ `<<><>>`, which should return false.\n<|/ c |>\n<| c |>\nFixed again. Thanks.\n\
    <|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n\tsize_t len = brackets.length();\n\tsize_t\
    \ i;\n\tbool result = true;\n\tfor(i = 0; i < len; ++i)\n\t{\n\t\tchar c = brackets[i];\n\
    \t\tif(c == '<')\n\t\t{\n\t\t\tif(!(i+1 < len && brackets[i+1] == '>'))\n\t\t\t\
    {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(c == '>')\n\
    \t\t{\n\t\t\tif(!(i-1 >= 0 && brackets[i-1] == '<'))\n\t\t\t{\n\t\t\t\tresult\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n  \
    \  for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] ==\
    \ \"<\")\n        {\n            if(brackets[i+1] == \"<\")\n            {\n \
    \               return false;\n            }\n        }\n        else if(brackets[i]\
    \ == \">\")\n        {\n            if(brackets[i+1] == \">\")\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    size_t opening_brackets_index_current\
    \ = 0;\n    size_t closing_brackets_index_current = 0;\n    size_t opening_brackets_index_current_next\
    \ = 0;\n    size_t closing_brackets_index_current_next = 0;\n    size_t opening_brackets_index_current_prev\
    \ = 0;\n    size_t closing_brackets_index_current_prev = 0;\n    size_t opening_brackets_index_current_current\
    \ = 0;\n    size_t closing_brackets_index_current_current = 0;\n    size_t opening_brackets_index_current_current_next\
    \ = 0;\n    size_t closing_brackets_index_current_current_next = 0;\n    size_t\
    \ opening_brackets_index_current_current_prev = 0;\n    size_t closing_brackets_index_current_current_prev\
    \ = 0;\n    size_t opening_brackets_index_current_current_current = 0;\n    size_t\
    \ closing_brackets_index_current_current_current = 0;\n    size_t opening_brackets_index_current_current_current_next\
    \ = 0;\n    size_t closing_brackets_index_current_current_current_next = 0;\n\
    \    size_t opening_brackets_index_current_current_current_prev = 0;\n    size_t\
    \ closing_brackets_index_current_current_current_prev = 0;\n    size_t opening_brackets_index_current_current_current_current\
    \ = 0;\n    size_t closing_brackets_index_current_current_current_current = 0;\n\
    \    size_t opening_brackets_index_current_current_current_current_next = 0;\n\
    \    size_t closing_brackets_index_current_current_current_current_next = 0;\n\
    \    size_t opening_brackets_index_current_current_current_current_prev = 0;\n\
    \    size_t closing_brackets_index_current_current_current_current_prev = 0;\n\
    \    size_t opening_brackets_index_current_current_current_current_current = 0;\n\
    \    size_t closing_brackets_index_current_current_current_current_current = 0;\n\
    \    size_t opening_brackets_index_current_current_current_current_next = 0;\n\
    \    size_t closing_brackets_index_current_current_current_current_next = 0;\n\
    \    size_t opening_brackets_index_current_current_current_current_prev = 0;\n\
    \    size_t closing_brackets_", "{\n\tsize_t len = brackets.length();\n\tsize_t\
    \ i = 0;\n\tsize_t j = 0;\n\tbool result = true;\n\twhile(i < len && j < len)\
    \ {\n\t\tif(brackets[i] == '<') {\n\t\t\ti++;\n\t\t\tif(brackets[j] == '>') {\n\
    \t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t} else if(brackets[i] == '>') {\n\t\t\tj++;\n\t\t} else {\n\t\t\ti++;\n\
    \t\t}\n\t}\n\treturn result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(brackets[i+1]\
    \ != '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n    \
    \    {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    size_t\
    \ brackets_size = brackets.length();\n    size_t opening_brackets_size = 0;\n\
    \    size_t closing_brackets_size = 0;\n    bool result = true;\n    for(size_t\
    \ i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n     \
    \   if(c == '<')\n        {\n            opening_brackets_size++;\n        }\n\
    \        else if(c == '>')\n        {\n            closing_brackets_size++;\n\
    \        }\n        else\n        {\n            result = false;\n        }\n\
    \    }\n    if(opening_brackets_size == closing_brackets_size)\n    {\n      \
    \  result = true;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=c++,algorithm,string |>\n<code>", "{\n    bool result = true;\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] != brackets[brackets.length()\
    \ - 1 - i])\n        {\n            result = false;\n            break;\n    \
    \    }\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == \"<\")\n        {\n            if(brackets[i+1]\
    \ != \">\")\n            {\n                return false;\n            }\n   \
    \     }\n    }\n    return true;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != \"<\" && brackets[i] != \">\")\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \tfor (int i = 0; i < brackets.length(); i++)\n\t{\n\t\tif (brackets[i] == '<')\n\
    \t\t{\n\t\t\tif (brackets[i+1] == '>')\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn\
    \ false;\n}", "{\n    size_t brackets_size = brackets.length();\n    size_t i\
    \ = 0;\n    size_t j = 0;\n    size_t k = 0;\n    bool result = true;\n    \n\
    \    while (i < brackets_size) \n    {\n        if (brackets[i] == '<') \n   \
    \     {\n            j = i;\n            while (j < brackets_size && brackets[j]\
    \ != '>') \n                j++;\n            k = j;\n            while (k < brackets_size\
    \ && brackets[k] != '>') \n                k++;\n            if (k == j) \n  \
    \          {\n                result = false;\n                break;\n      \
    \      }\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do it without using an explicit loop. Maybe some kind of recursion?\n<|/\
    \ c |>\n<| c |>\nI added a recursive solution that doesn't use an explicit loop.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks, I appreciate it. I will try to implement\
    \ this and see if it works.\n<|/ c |>\n<| c |>\nI added a recursive solution that\
    \ doesn't use an explicit loop. Hope it helps.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\nI believe this can be done with recursion. \n<code>", "{\n    for(int i\
    \ = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n  \
    \      {\n            if(brackets[i+1] == '>')\n            {\n              \
    \  return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i;\n    bool ret = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] != brackets[len -\
    \ 1 - i])\n        {\n            ret = false;\n            break;\n        }\n\
    \    }\n    return ret;\n}", "{\n    size_t len = brackets.length();\n    size_t\
    \ i;\n    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '<')\n  \
    \      {\n            if(brackets[i+1] != '>')\n            {\n              \
    \  return false;\n            }\n        }\n    }\n    return true;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n\
    \    {\n        char c = brackets[i];\n        if(c == '<')\n        {\n     \
    \       if(brackets[i+1] != '>')\n            {\n                return false;\n\
    \            }\n        }\n        else if(c == '>')\n        {\n            if(brackets[i-1]\
    \ != '<')\n            {\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}", "{\n\tauto open_brackets = brackets.split(\"\
    <\");\n\tauto closed_brackets = brackets.split(\">\");\n\t\n\tfor(auto i : open_brackets)\n\
    \t{\n\t\tfor(auto j : closed_brackets)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "{\n    for(int i\
    \ = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n  \
    \      {\n            if(brackets[i+1] == '>')\n            {\n              \
    \  return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\t\
    size_t brackets_size = brackets.length();\n\tsize_t open_brackets = 0;\n\tsize_t\
    \ close_brackets = 0;\n\tsize_t i = 0;\n\tsize_t j = 0;\n\tbool result = true;\n\
    \t\n\twhile ((i < brackets_size) && (j < brackets_size)) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\topen_brackets++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\
    \t\t\tclose_brackets++;\n\t\t}\n\t\ti++;\n\t\tj++;\n\t}\n\t\n\tif (open_brackets\
    \ != close_brackets) {\n\t\tresult = false;\n\t}\n\t\n\treturn result;\n}", "{\n\
    \tauto open_brackets = brackets.find_all([](char c){return c == '<';});\n\tauto\
    \ close_brackets = brackets.find_all([](char c){return c == '>';});\n\t\n\tfor(auto\
    \ i : open_brackets)\n\t{\n\t\tauto j = close_brackets.find(i);\n\t\tif(j != close_brackets.end())\n\
    \t\t{\n\t\t\tauto j = close_brackets.find(i);\n\t\t\tauto k = close_brackets.find(j);\n\
    \t\t\tif(j != close_brackets.end() && k != close_brackets.end())\n\t\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\t\n\treturn true;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        if(brackets[i] == '<') {\n            i++;\n            while(i\
    \ < len && brackets[i] != '<') {\n                i++;\n            }\n      \
    \      j = i;\n            while(j < len && brackets[j] != '>') {\n          \
    \      j++;\n            }\n            if(j == i) {\n                result =\
    \ false;\n            }\n        }\n        i++;\n    }\n    return result;\n}",
  "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n\
    \    bool result = true;\n    while(i < len && j < len) \n    {\n        char\
    \ c = brackets[i];\n        if(c == '<') \n        {\n            if(brackets[j]\
    \ == '>') \n            {\n                i++;\n                j++;\n      \
    \      }\n            else \n            {\n                result = false;\n\
    \                break;\n            }\n        }\n        else if(c == '>') \n\
    \        {\n            if(brackets[j] == '<') \n            {\n             \
    \   i++;\n                j++;\n            }\n            else \n           \
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        else if(c == '(') \n        {\n            if(brackets[j]\
    \ == ')') \n            {\n                i++;\n                j++;\n      \
    \      }\n            else \n            {\n                result = false;\n\
    \                break;\n            }\n        }\n        else if(c == ')') \n\
    \        {\n            if(brackets[j] == '(') \n            {\n             \
    \   i++;\n                j++;\n            }\n            else \n           \
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        else if(c == '[') \n        {\n            if(brackets[j]\
    \ == ']') \n            {\n                i++;\n                j++;\n      \
    \      }\n            else \n            {\n                result = false;\n\
    \                break;\n            }\n        }\n        else if(c == ']') \n\
    \        {\n            if(brackets[j] == '[') \n            {\n             \
    \   i++;\n                j++;\n            }\n            else \n           \
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        else if(c == '{') \n        {\n            if(brackets[j]\
    \ == '}') \n            {\n                i++;\n                j++;\n      \
    \      }\n            else \n            {\n                result = false;\n\
    \                break;\n            }\n        }\n        else if(c == '}') \n\
    \        {\n            if(brackets[j] == '{') \n            {\n             \
    \   i++;\n                j++;\n            }\n            else \n           \
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        else \n        {\n            result = false;\n          \
    \  break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work for nested brackets, e.g. `<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<(<",
  "{\n    size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(!brackets[i])\n        {\n  \
    \          result = false;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == \"<\")\n        {\n            if(brackets[i+1] != \"<\")\n            {\n\
    \                return false;\n            }\n        }\n        else if(brackets[i]\
    \ == \">\")\n        {\n            if(brackets[i+1] != \">\")\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == \"<\")\n        {\n            if(brackets[i+1] != \"<\")\n            {\n\
    \                return false;\n            }\n        }\n        else if(brackets[i]\
    \ == \">\")\n        {\n            if(brackets[i+1] != \">\")\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets\
    \ = 0;\n    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n\
    \    bool result = true;\n    while(i < brackets_size) \n    {\n        switch(brackets[i])\
    \ \n        {\n            case '<': \n                opening_brackets++;\n \
    \               break;\n            case '>': \n                closing_brackets++;\n\
    \                break;\n            default: \n                result = false;\n\
    \                break;\n        }\n        i++;\n    }\n    if(opening_brackets\
    \ != closing_brackets) \n    {\n        result = false;\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                result = false;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c\
    \ |>\nThis fails for `<<><>>` which should return true.\n<|/ c |>\n<| c |>\n:\
    \ I see your point. I'll fix it.\n<|/ c |>\n<| c |>\nThis fails for `<<><>>` which\
    \ should return true.\n<|/ c |>\n<| c |>\n: I see your point. I'll fix it.\n<|/\
    \ c |>\n<| c |>\nThis fails for `<<><>>` which should return true.\n<|/ c |>\n\
    <| a dscore=2 |>\nI believe that this is an NP-complete problem, so I doubt that\
    \ there is a polynomial time solution. \nHowever, if you can assume that the input\
    \ is well-formed, then you can solve this in polynomial time by constructing a\
    \ DFA that recognizes your language and checking that every state is reachable\
    \ from every other state. \nThe construction of the DFA can be done in polynomial\
    \ time by using a stack to keep track of which states are currently being visited\
    \ and which states are reachable from them. \nThe DFA can be constructed as follows:",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i <\
    \ len; ++i)\n    {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                if(brackets[i+2] == '>')\n         \
    \       {\n                    if(brackets[i+3] == '>')\n                    {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nI like your solution, however I believe it can be optimized a little\
    \ more. For example, you can check `if(brackets[i] == '>' && brackets[i+1] ==\
    \ '<' && brackets[i+2] == '<' && brackets[i+3] == '>')` instead of `if(brackets[i]\
    \ == '>')` because you already know that `brackets[i+1] == '<'` so you don't need\
    \ to check it again.\n<|/ c |>\n<| c |>\nYes, you are right. I was thinking about\
    \ that but didn't want to change too much the original code. Thanks for the suggestion.\n\
    <|/ c |>\n<| c |>\nI like your solution, however I believe it can be optimized\
    \ a little more. For example, you can check `if(brackets[i] == '>' && brackets[i+1]\
    \ == '<' && brackets[i+2] == '<' && brackets[i+3] == '>')` instead of `if(brackets[i]\
    \ == '>')` because you already know that `brackets[i+1] == '<'` so you don't need\
    \ to check it again.\n<|/ c |>\n<| c |>\nI like your solution, however I believe\
    \ it can be optimized a little more. For example, you can check `if(brackets[i]\
    \ == '>' && brackets[i+1] == '<' && brackets[i+2] == '<' && brackets[i+3] == '>')`\
    \ instead of `if(brackets[i] == '>')` because you already know that `brackets[i+1]\
    \ == '<'` so you don't need to check it again.\n<|/ c |>\n<| a dscore=2 |>\nI\
    \ believe that you can solve this problem using stacks. \nThe idea is to push\
    \ all opening brackets to the stack and pop them one by one until you reach the\
    \ closing bracket. \n<code>", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n\
    <| c |>\nThis doesn't work if there are multiple pairs of brackets next to each\
    \ other. For example, `<<<>>>` returns `true`, but `<<<>>><<<>>>` returns `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, I noticed that after I posted my comment. Fixed now.\n\
    <|/ c |>\n<| c |>\n: I added a second solution that should work correctly for\
    \ multiple pairs of brackets next to each other.\n<|/ c |>\n<| c |>\n: I added\
    \ a third solution that should work correctly for multiple pairs of brackets next\
    \ to each other.\n<|/ c |>\n<| c |>\n: I added a fourth solution that should work\
    \ correctly for multiple pairs of brackets next to each other.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "{\n    size_t brackets_size = brackets.length();\n  \
    \  size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t i;\n    size_t j;\n    bool result = true;\n    \n    for (i = 0;\
    \ i < brackets_size; ++i)\n    {\n        if (brackets[i] == '<')\n        {\n\
    \            opening_brackets_size++;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            closing_brackets_size++;\n        }\n      \
    \  else\n        {\n            result = false;\n        }\n    }\n    \n    if\
    \ (opening_brackets_size != closing_brackets_size)\n    {\n        result = false;\n\
    \    }\n    \n    return result;\n}", "{\n\tauto opening_brackets = brackets.split('<');\n\
    \tauto closing_brackets = brackets.split('>');\n\t\n\tfor (auto &opening_bracket\
    \ : opening_brackets)\n\t{\n\t\tauto closing_bracket = closing_brackets.find(opening_bracket);\n\
    \t\tif (closing_bracket == closing_brackets.end())\n\t\t\treturn false;\n\t\t\n\
    \t\tclosing_bracket = closing_brackets.find(opening_bracket, closing_bracket+1);\n\
    \t\tif (closing_bracket == closing_brackets.end())\n\t\t\treturn false;\n\t\t\n\
    \t\tif (opening_bracket != closing_bracket)\n\t\t\treturn false;\n\t}\n\t\n\t\
    return true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n \
    \   {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '<')\n        {\n            return false;\n\
    \        }\n    }\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] != '>')\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I wonder why you didn't use regular expressions to solve this problem?\n\
    <|/ c |>\n<| c |>\nI didn't know about regular expressions. I guess I should learn\
    \ them before I start writing my own solutions. Thanks for your suggestion.\n\
    <|/ c |>\n<| c |>\nI agree with you. Regular expressions are a great tool to solve\
    \ this kind of problems.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\nusing namespace std;", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i + 1] == '>')\n            {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n\tsize_t len = brackets.length();\n\tsize_t i;\n\tbool result = true;\n\
    \tfor(i = 0; i < len; ++i)\n\t{\n\t\tchar c = brackets[i];\n\t\tif(c == '>')\n\
    \t\t{\n\t\t\tif(brackets[i+1] != '<')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(c == '<')\n\t\t{\n\t\t\tif(brackets[i-1]\
    \ != '>')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i;\n    \n    for (i = 0; i < brackets_size; ++i)\n    {\n        if (brackets[i]\
    \ == '<')\n        {\n            ++opening_brackets;\n        }\n        else\
    \ if (brackets[i] == '>')\n        {\n            ++closing_brackets;\n      \
    \  }\n    }\n    \n    return opening_brackets == closing_brackets;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            for(int j = i + 1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == '>')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            for(int j = i;\
    \ j < brackets.length(); j++)\n            {\n                if(brackets[j] ==\
    \ '>')\n                {\n                    if(j == brackets.length() - 1)\n\
    \                    {\n                        return true;\n               \
    \     }\n                    else\n                    {\n                   \
    \     i++;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_count = 0;\n    size_t closing_brackets_count = 0;\n\
    \    size_t opening_brackets_index2 = 0;\n    size_t closing_brackets_index2 =\
    \ 0;\n    size_t opening_brackets_index3 = 0;\n    size_t closing_brackets_index3\
    \ = 0;\n    size_t opening_brackets_index4 = 0;\n    size_t closing_brackets_index4\
    \ = 0;\n    size_t opening_brackets_index5 = 0;\n    size_t closing_brackets_index5\
    \ = 0;\n    size_t opening_brackets_index6 = 0;\n    size_t closing_brackets_index6\
    \ = 0;\n    size_t opening_brackets_index7 = 0;\n    size_t closing_brackets_index7\
    \ = 0;\n    size_t opening_brackets_index8 = 0;\n    size_t closing_brackets_index8\
    \ = 0;\n    size_t opening_brackets_index9 = 0;\n    size_t closing_brackets_index9\
    \ = 0;\n    size_t opening_brackets_index10 = 0;\n    size_t closing_brackets_index10\
    \ = 0;\n    size_t opening_brackets_index11 = 0;\n    size_t closing_brackets_index11\
    \ = 0;\n    size_t opening_brackets_index12 = 0;\n    size_t closing_brackets_index12\
    \ = 0;\n    size_t opening_brackets_index13 = 0;\n    size_t closing_brackets_index13\
    \ = 0;\n    size_t opening_brackets_index14 = 0;\n    size_t closing_brackets_index14\
    \ = 0;\n    size_t opening_brackets_index15 = 0;\n    size_t closing_brackets_index15\
    \ = 0;\n    size_t opening_brackets_index16 = 0;\n    size_t closing_brackets_index16\
    \ = 0;\n    size_t opening_brackets_index17 = 0;\n    size_t closing_brackets_index17\
    \ = 0;\n    size_t opening_brackets_index18 = 0;\n    size_t closing_brackets_index18\
    \ = 0;\n    size_t opening_brackets_index19 = 0;\n    size_t closing_brackets_index19\
    \ = 0;\n    size_t opening_brackets_index20 = 0;\n    size_t closing_brackets_index20\
    \ = 0;\n    size_t opening_brackets_index21 = 0;", "{\n\tsize_t brackets_size\
    \ = brackets.length();\n\tsize_t opening_brackets = 0;\n\tsize_t closing_brackets\
    \ = 0;\n\tsize_t i;\n\tbool result = true;\n\t\n\tfor (i = 0; i < brackets_size;\
    \ ++i)\n\t{\n\t\tif (brackets[i] == '<')\n\t\t{\n\t\t\t++opening_brackets;\n\t\
    \t}\n\t\telse if (brackets[i] == '>')\n\t\t{\n\t\t\t++closing_brackets;\n\t\t\
    }\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t}\n\t\n\tif (opening_brackets\
    \ != closing_brackets)\n\t{\n\t\tresult = false;\n\t}\n\t\n\treturn result;\n}",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == \"<\")\n        {\n            if(brackets[i+1] != \"<\")\n            {\n\
    \                return false;\n            }\n        }\n        else if(brackets[i]\
    \ == \">\")\n        {\n            if(brackets[i+1] != \">\")\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '>')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == '<')\n                {\n  \
    \                  return false;\n                }\n            }\n        }\n\
    \    }\n    return true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i+1]\
    \ == '<')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(brackets[i] != '<')\n        {\n            result = false;\n    \
    \        break;\n        }\n    }\n    for(i = len - 1; i >= 0; --i)\n    {\n\
    \        if(brackets[i] != '>')\n        {\n            result = false;\n    \
    \        break;\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n    \
    \    {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '>')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n \
    \   {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_index_next = 0;\n    size_t closing_brackets_index_next\
    \ = 0;\n    size_t opening_brackets_index_current = 0;\n    size_t closing_brackets_index_current\
    \ = 0;\n    size_t opening_brackets_index_next2 = 0;\n    size_t closing_brackets_index_next2\
    \ = 0;\n    size_t opening_brackets_index_current2 = 0;\n    size_t closing_brackets_index_current2\
    \ = 0;\n    size_t opening_brackets_index_next3 = 0;\n    size_t closing_brackets_index_next3\
    \ = 0;\n    size_t opening_brackets_index_current3 = 0;\n    size_t closing_brackets_index_current3\
    \ = 0;\n    size_t opening_brackets_index_next4 = 0;\n    size_t closing_brackets_index_next4\
    \ = 0;\n    size_t opening_brackets_index_current4 = 0;\n    size_t closing_brackets_index_current4\
    \ = 0;\n    size_t opening_brackets_index_next5 = 0;\n    size_t closing_brackets_index_next5\
    \ = 0;\n    size_t opening_brackets_index_current5 = 0;\n    size_t closing_brackets_index_current5\
    \ = 0;\n    size_t opening_brackets_index_next6 = 0;\n    size_t closing_brackets_index_next6\
    \ = 0;\n    size_t opening_brackets_index_current6 = 0;\n    size_t closing_brackets_index_current6\
    \ = 0;\n    size_t opening_brackets_index_next7 = 0;\n    size_t closing_brackets_index_next7\
    \ = 0;\n    size_t opening_brackets_index_current7 = 0;\n    size_t closing_brackets_index_current7\
    \ = 0;\n    size_t opening_brackets_index_next8 = 0;\n    size_t closing_brackets_index_next8\
    \ = 0;\n    size_t opening_brackets_index_current8 = 0;\n    size_t closing_brackets_index_current8\
    \ = 0;\n    size_t opening_brackets_index_next9 = 0;\n    size_t closing_brackets_index_next9\
    \ = 0;\n    size_t opening_brackets_index_current9 = 0;\n    size_t closing_brackets_index_current9\
    \ = 0;\n    size_t opening_brackets_index_next10 = 0;\n    size_t closing_brackets_index_next10\
    \ = 0;\n    size_t opening", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i\
    \ + 1] == '>')\n            {\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n\
    <| c |>\nThe OP wants to find out if there are any pairs of brackets within a\
    \ string. Your code only checks if there are any pairs of brackets *outside* a\
    \ string. Also, the OP wants to find out if there are any pairs of brackets *within*\
    \ a string. Your code only checks if there are any pairs of brackets *outside*\
    \ a string.\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer\
    \ to include a solution for both cases.\n<|/ c |>\n<| c |>\n: I see what you mean.\
    \ I've updated my answer to include a solution for both cases.\n<|/ c |>\n<| c\
    \ |>\n: I see what you mean. I've updated my answer to include a solution for\
    \ both cases.\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer\
    \ to include a solution for both cases.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>", "{\n    size_t len = brackets.length();\n    for(size_t i = 0;\
    \ i < len; ++i)\n    {\n        if(brackets[i] == '<')\n        {\n          \
    \  if(brackets[i+1] == '>')\n            {\n                brackets.erase(i+1,\
    \ 1);\n                --i;\n            }\n        }\n    }\n    return brackets.length()\
    \ == 0;\n}", "{\n\tsize_t brackets_size = brackets.length();\n\tsize_t opening_brackets_size\
    \ = 0;\n\tsize_t closing_brackets_size = 0;\n\tsize_t opening_brackets_index =\
    \ 0;\n\tsize_t closing_brackets_index = 0;\n\tbool result = true;\n\t\n\twhile(brackets_size\
    \ > 0) {\n\t\tchar bracket = brackets[brackets_size];\n\t\t\n\t\tif(opening ==\
    \ false) {\n\t\t\topening_brackets_size++;\n\t\t\topening_brackets_index++;\n\t\
    \t}\n\t\t\n\t\tif(closing == false) {\n\t\t\tclosing_brackets_size++;\n\t\t\t\
    closing_brackets_index++;\n\t\t}\n\t\t\n\t\tif(bracket == '<') {\n\t\t\tif(opening_brackets_size\
    \ != closing_brackets_size) {\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\t\n\t\t\t\
    opening_brackets_size--;\n\t\t\topening_brackets_index--;\n\t\t\tclosing_brackets_size--;\n\
    \t\t\tclosing_brackets_index--;\n\t\t}\n\t\t\n\t\tif(bracket == '>') {\n\t\t\t\
    if(opening_brackets_size != closing_brackets_size) {\n\t\t\t\tresult = false;\n\
    \t\t\t}\n\t\t\t\n\t\t\topening_brackets_size--;\n\t\t\topening_brackets_index--;\n\
    \t\t\tclosing_brackets_size--;\n\t\t\tclosing_brackets_index--;\n\t\t}\n\t\t\n\
    \t\tbrackets_size--;\n\t}\n\t\n\treturn result;\n}", "{\n    for(int i = 0; i\
    \ < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis fails for `<<><>>` which should be true.\n<|/ c |>\n<| c |>\n\
    : Yes, I missed that case. Thanks for pointing it out. Fixed now.\n<|/ c |>\n\
    <| c |>\nThis fails for `<<><>>` which should be true.\n<|/ c |>\n<| c |>\n: Yes,\
    \ I missed that case. Thanks for pointing it out. Fixed now.\n<|/ c |>\n<| a |>\n\
    <code>", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != brackets[brackets.length() - 1 - i])\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == \"<\")\n        {\n            if(brackets[i+1]\
    \ != \">\")\n            {\n                return false;\n            }\n   \
    \     }\n    }\n    return true;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c\
    \ |>\nThis fails for `
  "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n\
    \    bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n                break;\n            }\n            break;\n\
    \        case '>':\n            if(brackets[j] == '<') {\n                i++;\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            result = false;\n            break;\n        }\n        i++;\n  \
    \      j++;\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n\
    <| c |>\nThis fails for `<><>` which should return true.\n<|/ c |>\n<| c |>\n\
    : Yes, I see that now. Thanks for pointing that out. I've fixed the code.\n<|/\
    \ c |>\n<| c |>\n: Thanks for the edit. I've fixed the code again.\n<|/ c |>\n\
    <| c |>\n: Thanks for the edit. I've fixed the code again.\n<|/ c |>\n<| c |>\n\
    : Thanks for the edit. I've fixed the code again.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == '>')\n                {\n  \
    \                  brackets.replace(i + 1, j - 1, \">\");\n                  \
    \  brackets.replace(i + 1, j, \"<\");\n                    brackets.replace(i\
    \ + 2, j - 1, \">\");\n                    brackets.replace(i + 2, j, \"<\");\n\
    \                    i = j - 1;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return brackets.length() == 0;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n\tsize_t len = brackets.length();\n\tsize_t i;\n\tbool result = true;\n\
    \tfor(i = 0; i < len; ++i)\n\t{\n\t\tchar c = brackets[i];\n\t\tif(c == '>')\n\
    \t\t\tresult = result && i < len-1;\n\t\telse if(c == '<')\n\t\t\tresult = result\
    \ && i > 0;\n\t\telse if(c == '=')\n\t\t\tresult = result && (i == 0 || i == len-1);\n\
    \t\telse\n\t\t\tresult = false;\n\t}\n\treturn result;\n}", "{\n    size_t len\
    \ = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n    bool result\
    \ = true;\n    while(i < len) {\n        char c = brackets[i];\n        if(c ==\
    \ '<') {\n            if(brackets[j] == '>') {\n                i++;\n       \
    \         j++;\n            } else {\n                result = false;\n      \
    \      }\n        } else if(c == '>') {\n            if(brackets[j] == '<') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n            }\n        } else {\n            i++;\n  \
    \          j++;\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n    \
    \    {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i + 1] == '>')\n            {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \tsize_t brackets_size = brackets.length();\n\tsize_t i = 0;\n\tsize_t j = 0;\n\
    \tbool result = true;\n\twhile (i < brackets_size)\n\t{\n\t\tchar c = brackets[i];\n\
    \t\tif (c == '>')\n\t\t{\n\t\t\tif (brackets[j] != '>')\n\t\t\t{\n\t\t\t\tresult\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\telse if (c == '<')\n\
    \t\t{\n\t\t\tif (brackets[j] != '<')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\telse if (c == '>')\n\t\t{\n\t\t\tif\
    \ (brackets[j] != '>')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t\tj++;\n\t\t}\n\t\telse if (c == '<')\n\t\t{\n\t\t\tif (brackets[j] !=\
    \ '<')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i\
    \ + 1] == '<')\n            {\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This code doesn't work if there are multiple pairs of brackets in the same string.\
    \ For example, `correct_bracketing(\"<<><>>\")` returns `true`, but `correct_bracketing(\"\
    <<<><>>\")` returns `false`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed\
    \ it. I also added a test case that returns false now.\n<|/ c |>\n<| a |>\n<code>",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == \"<\")\n        {\n            if(brackets[i+1] != \"<\")\n            {\n\
    \                return false;\n            }\n        }\n        else if(brackets[i]\
    \ == \">\")\n        {\n            if(brackets[i+1] != \">\")\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>')\n\
    \                j++;\n            else\n                result = false;\n   \
    \         break;\n        case '>':\n            if(brackets[j] == '<')\n    \
    \            j++;\n            else\n                result = false;\n       \
    \     break;\n        default:\n            i++;\n            break;\n       \
    \ }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ for `<>`\n<|/ c |>\n<| c |>\n: I added a version that works for `<>`.\n<|/ c\
    \ |>\n<| c |>\nI added a version that works for `<>` too.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>", "{\n    size_t len = brackets.length();\n    for(size_t i = 0;\
    \ i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c == '>')\n\
    \        {\n            if(brackets[i+1] != '<')\n                return false;\n\
    \            i += 2;\n        }\n        else if(c == '<')\n        {\n      \
    \      if(brackets[i-1] != '>')\n                return false;\n            i\
    \ -= 2;\n        }\n    }\n    return true;\n}", "{\n\tfor (int i = 0; i < brackets.length();\
    \ i++)\n\t{\n\t\tchar c = brackets[i];\n\t\tif (c == '<')\n\t\t{\n\t\t\tfor (int\
    \ j = i; j < brackets.length(); j++)\n\t\t\t{\n\t\t\t\tif (brackets[j] == '>')\n\
    \t\t\t\t{\n\t\t\t\t\ti = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn (i == brackets.length());\n}", "{\n    bool result = true;\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        char c = brackets[i];\n \
    \       if(c != '>' && c != '<')\n        {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;\n}", "{\n    bool result\
    \ = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              result = true;\n            }\n            else\n            {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] == '>')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n            else\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n \
    \   {\n        if(brackets[i] == '<')\n        {\n            for(int j = i; j\
    \ < brackets.length(); j++)\n            {\n                if(brackets[j] ==\
    \ '>')\n                {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    for(int i = 0;\
    \ i < brackets.length(); i++)\n    {\n        if(brackets[i] == '>')\n       \
    \ {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i;\n    bool result = true;\n    for(i\
    \ = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c == '>')\n\
    \        {\n            if(!(i+1 < len && brackets[i+1] == '<'))\n           \
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        else if(c == '<')\n        {\n            if(!(i-1 >= 0 &&\
    \ brackets[i-1] == '>'))\n            {\n                result = false;\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    size_t brackets_size = brackets.length();\n    size_t open_brackets = 0;\n\
    \    size_t close_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '<')\n        {\n            ++open_brackets;\n\
    \        }\n        else if(brackets[i] == '>')\n        {\n            ++close_brackets;\n\
    \        }\n        else\n        {\n            assert(false);\n        }\n \
    \   }\n    return open_brackets == close_brackets;\n}", "{\n\tfor (int i = 0;\
    \ i < brackets.length(); i++)\n\t{\n\t\tif (brackets[i] == '<')\n\t\t{\n\t\t\t\
    if (brackets[i+1] == '>')\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets\
    \ = 0;\n    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n\
    \    \n    while (i < brackets_size)\n    {\n        if (brackets[i] == '<')\n\
    \        {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            closing_brackets++;\n        }\n        i++;\n\
    \    }\n    \n    return opening_brackets == closing_brackets;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == \"<\")\n        {\n            if(brackets[i+1] != \">\")\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nI like your solution,\
    \ however it fails for input like `
  "{\n\tfor (int i = 0; i < brackets.length(); i++)\n\t{\n\t\tchar c = brackets[i];\n\
    \t\tif (c == '<')\n\t\t{\n\t\t\tif (brackets[i+1] != '<')\n\t\t\t\treturn false;\n\
    \t\t}\n\t\telse if (c == '>')\n\t\t{\n\t\t\tif (brackets[i+1] != '>')\n\t\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ this solution, but I wonder how it compares to other solutions posted here.\n\
    <|/ c |>\n<| c |>\nI agree with you, this is probably the best solution. My solution\
    \ was more of a \"quick and dirty\" solution, since I wanted to solve the problem\
    \ as stated in the question. Other solutions might have some advantages over this\
    \ one, but I didn't want to add any more complexity to the solution.\n<|/ c |>\n\
    <| a tags=c++,algorithm,string |>\n<code>", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_index2 = 0;\n    size_t closing_brackets_index2 =\
    \ 0;\n    size_t opening_brackets_index3 = 0;\n    size_t closing_brackets_index3\
    \ = 0;\n    size_t opening_brackets_index4 = 0;\n    size_t closing_brackets_index4\
    \ = 0;\n    size_t opening_brackets_index5 = 0;\n    size_t closing_brackets_index5\
    \ = 0;\n    size_t opening_brackets_index6 = 0;\n    size_t closing_brackets_index6\
    \ = 0;\n    size_t opening_brackets_index7 = 0;\n    size_t closing_brackets_index7\
    \ = 0;\n    size_t opening_brackets_index8 = 0;\n    size_t closing_brackets_index8\
    \ = 0;\n    size_t opening_brackets_index9 = 0;\n    size_t closing_brackets_index9\
    \ = 0;\n    size_t opening_brackets_index10 = 0;\n    size_t closing_brackets_index10\
    \ = 0;\n    size_t opening_brackets_index11 = 0;\n    size_t closing_brackets_index11\
    \ = 0;\n    size_t opening_brackets_index12 = 0;\n    size_t closing_brackets_index12\
    \ = 0;\n    size_t opening_brackets_index13 = 0;\n    size_t closing_brackets_index13\
    \ = 0;\n    size_t opening_brackets_index14 = 0;\n    size_t closing_brackets_index14\
    \ = 0;\n    size_t opening_brackets_index15 = 0;\n    size_t closing_brackets_index15\
    \ = 0;\n    size_t opening_brackets_index16 = 0;\n    size_t closing_brackets_index16\
    \ = 0;\n    size_t opening_brackets_index17 = 0;\n    size_t closing_brackets_index17\
    \ = 0;\n    size_t opening_brackets_index18 = 0;\n    size_t closing_brackets_index18\
    \ = 0;\n    size_t opening_brackets_index19 = 0;\n    size_t closing_brackets_index19\
    \ = 0;\n    size_t opening_brackets_index20 = 0;\n    size_t closing_brackets_index20\
    \ = 0;\n    size_t opening_brackets_index21 = 0;\n    size_t closing_brackets_index21\
    \ = 0;\n    size_t opening_bracket", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == \"<\")\n        {\n            if(brackets[i+1]\
    \ != \"<\")\n            {\n                return false;\n            }\n   \
    \     }\n        else if(brackets[i] == \">\")\n        {\n            if(brackets[i+1]\
    \ != \">\")\n            {\n                return false;\n            }\n   \
    \     }\n    }\n    return true;\n}", "{\n\tauto opening_brackets = brackets.split(\"\
    <\");\n\tauto closing_brackets = brackets.split(\">\");\n\t\n\tfor(auto &opening_bracket\
    \ : opening_brackets)\n\t{\n\t\tauto closing_bracket = closing_brackets.find(opening_bracket);\n\
    \t\tif(closing_bracket == closing_brackets.end())\n\t\t\treturn false;\n\t\t\n\
    \t\tif(opening_bracket != closing_bracket)\n\t\t\treturn false;\n\t}\n\t\n\treturn\
    \ true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n     \
    \   if(brackets[i] == '<')\n        {\n            if(brackets[i + 1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    size_t len = brackets.length();\n    size_t i\
    \ = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i < len) {\n   \
    \     char c = brackets[i];\n        switch(c) {\n            case '<':\n    \
    \            j++;\n                break;\n            case '>':\n           \
    \     j--;\n                break;\n            default:\n                i++;\n\
    \                break;\n        }\n        if(j < 0) {\n            result =\
    \ false;\n            break;\n        }\n    }\n    return result;\n}", "{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '>')\n        {\n            if(brackets[i + 1] == '>')\n            {\n\
    \                return true;\n            }\n        }\n        else if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i + 1] == '<')\n            {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are multiple\
    \ nested brackets.\n<|/ c |>\n<| c |>\nIt does work if there are multiple nested\
    \ brackets. Try it yourself. It returns true for \"<<><>>\" but false for \"<><<>\"\
    .\n<|/ c |>\n<| c |>\nYes, it does work. Try it yourself. It returns true for\
    \ \"<<><>>\" but false for \"<><<>\".\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ yourself. It returns true for \"<<><>>\" but false for \"<><<>\".\n<|/ c |>\n\
    <| c |>\nIt does work. Try it yourself. It returns true for \"<<><>>\" but false\
    \ for \"<><<>\".\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <stack>\nusing namespace std;", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    for(size_t i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n \
    \       if(c == '>')\n        {\n            if(brackets[i+1] == '>')\n      \
    \      {\n                brackets.replace(i+2, i+2, \">\");\n               \
    \ --i;\n            }\n            else\n            {\n                brackets.replace(i+2,\
    \ i+2, \"<\");\n                --i;\n            }\n        }\n    }\n    return\
    \ brackets.length() == 0;\n}", "{\n    bool result = true;\n    for (auto c :\
    \ brackets)\n    {\n        if (c != \">\" && c != \"<\")\n        {\n       \
    \     result = false;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n\tauto bracket = brackets.front();\n\tauto open_brackets = brackets.substr(1,\
    \ brackets.length() - 2);\n\tauto close_brackets = brackets.substr(brackets.length()\
    \ - 2, 1);\n\t\n\tauto open_it = open_brackets.begin();\n\tauto close_it = close_brackets.begin();\n\
    \t\n\tbool result = true;\n\t\n\twhile(open_it != open_brackets.end() && close_it\
    \ != close_brackets.end())\n\t{\n\t\tauto open = *open_it;\n\t\tauto close = *close_it;\n\
    \t\t\n\t\tif(open != close)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t\
    }\n\t\t\n\t\topen_it++;\n\t\tclose_it++;\n\t}\n\t\n\treturn result;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
