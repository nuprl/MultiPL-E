name: HumanEval_143_words_in_sentence
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a string\
  \ representing a sentence,\n    the sentence contains some words separated by a\
  \ space,\n    and you have to return a string that contains the words from the original\
  \ sentence,\n    whose lengths are prime numbers,\n    the order of the words in\
  \ the new string should be the same as the original one.\n\n    Example 1:\n   \
  \     Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example\
  \ 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\
  \n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains\
  \ only letters\n    \n*/\nstring words_in_sentence(string sentence) \n"
tests: "unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
  This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") ==\
  \ \"go for\");\n    assert(candidate(\"there is no place available here\") == \"\
  there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
  );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
  here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
