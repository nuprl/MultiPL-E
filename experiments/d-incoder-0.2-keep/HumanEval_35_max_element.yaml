name: HumanEval_35_max_element
language: humaneval_to_dlang.py
prompt: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
  \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  \    123\n    \n*/\nlong max_element(long[] l) \n"
tests: "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
  \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
  \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
completions: ["{\n    long max = 0;\n    long i = 0;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    int i;\n    long max;\n    \n    max = l[0];\n    for (i =\
    \ 1; i < l.length; i++) \n        if (l[i] > max) \n            max = l[i];\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    int i;\n    long max_val = l[0];\n    for (i = 1;\
    \ i < l.length; ++i) {\n        if (l[i] > max_val)\n            max_val = l[i];\n\
    \    }\n    return max_val;\n}", "{\n    long max = 0;\n    long i = 0;\n    \n\
    \    foreach(long x, l) \n    {\n        if (x > max) \n        {\n          \
    \  max = x;\n        }\n    }\n    return max;\n}", "{\n    long max = l[0];\n\
    \    long i;\n    for(i=1; i<l.length; i++)\n        if(l[i] > max)\n        \
    \    max = l[i];\n    return max;\n}", "{\n    long max = 0;\n    long i;\n  \
    \  for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n            max\
    \ = l[i];\n    }\n    return max;\n}", "{\n    long max = l[0];\n    long i;\n\
    \    for (i = 1; i < l.length; i++) \n        if (l[i] > max) \n            max\
    \ = l[i];\n    return max;\n}", "{\n    int i;\n    long max = 0;\n    for(i =\
    \ 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n        \
    \    max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for (i = 0; i < l.length; ++i)\n        if (l[i] > max)\n  \
    \          max = l[i];\n    return max;\n}", "{\n    long max = 0;\n    long i;\n\
    \    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n          \
    \  max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n    long i\
    \ = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n        i++;\n    }\n    return max;\n\
    }", "{\n    int i;\n    long max = l[0];\n    for (i = 1; i < l.length; i++) \n\
    \        if (l[i] > max) \n            max = l[i];\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ min_element(long[] l) \n{\n    int i;\n    long min = l[0];\n    for (i = 1;\
    \ i < l.length; i++) \n        if (l[i] < min) \n            min = l[i];\n   \
    \ return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong sum(long[] l) \n{\n    int i;\n    long sum = 0;\n    for (i =\
    \ 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n  \
    \  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ product(long[] l) \n{\n    int i;\n    long prod = 1;\n    for (i = 0; i < l.length;\
    \ i++) \n        prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements\
    \ in the list that are less than the given value.\n    >>> sum([1, 2, 3], 1)\n\
    \    3\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n    -10\n \
    \   \n*/\nlong sum(long[] l, long x) \n{\n    int i;\n    long sum = 0;\n    for\
    \ (i = 0; i < l.length; i++) \n        if (l[i] < x) \n            sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list that are less\
    \ than the given value.\n    >>> product([1, 2, 3], 1)\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n    -10\n    \n*/\nlong product(long[]\
    \ l, long x) \n{\n    int i;\n    long prod = 1;\n    for (i = 0; i < l.length;\
    \ i++) \n        if (l[i] < x) \n            prod *= l[i];\n    return prod;\n\
    }\n/*\nReturn sum of all elements in the list that are greater than the given\
    \ value.\n    >>> sum([1, 2, 3], 2)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10], 10)\n    60\n    \n*/\nlong sum(long", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n    >>> abs([1, 2, 3])\n    [1, 2, 3]\n\
    \    >>> abs([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10]\n    \n*/\nlong[] abs(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n\
    \        result[i] = l[i] < 0 ? -l[i] : l[i];\n    }\n    return result;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n    >>> abs([1, 2, 3])\n\
    \    [1, 2, 3]\n    >>> abs([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n    \n*/\ndouble[] abs(double[] l) \n{\n\
    \    double[] result = new double[l.length];\n    double i;\n    for(i = 0; i\
    \ < l.length; ++i)\n    {\n        result[i] = l[i] < 0 ? -l[i] : l[i];\n    }\n\
    \    return result;\n}\n/*\n", "{\n    long max = 0;\n    long i;\n    for (i\
    \ = 0; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++)\n        if (l[i] < min)\n          \
    \  min = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble\
    \ sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l) \n{\n    float\
    \ sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1, 2, 3])\n \
    \   1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long i;\n  \
    \  for(i = 0; i < l.length; i++)\n    {\n        if(l[i] < min)\n            min\
    \ = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -123\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -123\n    \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n\
    \    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        prod *= l[i];\n\
    \    }\n    return prod;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ type.\n    >>> sum([1, 2, 3], int)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10], int)\n    -123\n    \n*/\nlong sum(long[] l, int type) \n\
    {\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list with specified type.\n    >>> product([1, 2, 3], int)\n    6\n \
    \   >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n    -123\n    \n\
    */\nlong product(long[] l, int type) \n{\n    long prod = 1;\n    long i;\n  \
    \  for(i = 0; i < l.length; i++)\n    {\n        prod *= l[i];\n    }\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1, 2, 3], float)\n    6.000000\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10], float)\n    -12", "{\n    long max = l[0];\n    long i;\n\
    \    for(i = 1; i < l.length; i++) \n    {\n        if(l[i] > max) \n        \
    \    max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max) \n \
    \       {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length;\
    \ i++) \n    {\n        if(l[i] > max) \n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    long i;\n    for(i=1; i<l.length; i++)\n\
    \        if(l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n  \
    \  int i;\n    long max;\n    max = l[0];\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n \
    \   long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return max_val;\n}", "{\n   \
    \ long max = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n      \
    \  if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}", "{\n    int i;\n    long max = 0;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max_value = l[0];\n    long max_pos = 0;\n    for(int i = 1;\
    \ i < l.length; ++i)\n    {\n        if(l[i] > max_value)\n        {\n       \
    \     max_value = l[i];\n            max_pos = i;\n        }\n    }\n    return\
    \ max_pos;\n}", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length;\
    \ i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n\
    \        if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n  \
    \  {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all\
    \ elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble product(double[]\
    \ l) \n{\n    double product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l",
  "{\n    long max_value = l[0];\n    long max_index = -1;\n    for(int i = 1; i <\
    \ l.length; ++i)\n    {\n        if(l[i] > max_value)\n        {\n           \
    \ max_value = l[i];\n            max_index = i;\n        }\n    }\n    return\
    \ max_index;\n}", "{\n    int i;\n    long max = 0;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max;\n    max = l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}",
  "{\n    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length;\
    \ i++) \n    {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ min_element(long[] l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n\
    \    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] < min_val)\n \
    \       {\n            min_val = l[i];\n            min_idx = i;\n        }\n\
    \    }\n    return min_val;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product([1, 2, 3])\n\
    \    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n  \
    \  \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n    for(int i = 0; i\
    \ < l.length; i++) \n    {\n        prod *= l[i];\n    }\n    return prod;\n}\n\
    /*\nReturn sum of all elements in the list with specified type.\n    >>> sum([1,\
    \ 2, 3], int)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n\
    \    -10\n    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list with specified type.\n    >>>\
    \ product([1, 2, 3], int)\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10], int)\n    -10\n    \n*/\nlong product(long[] l, int type) \n{\n   \
    \ long prod = 1;\n    for(int i = 0; i < l.length; i++) \n    {\n        prod\
    \ *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in the\
    \ list with specified type.\n    >>> sum([1, 2, 3], float)\n    6.5\n    >>> sum([5, ",
  "{\n    long max_val = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n  \
    \      if (l[i] > max_val)\n        {\n            max_val = l[i];\n        }\n\
    \    }\n    return max_val;\n}\n/*\nReturn minimum element in the list.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n    long min_val\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < min_val)\n\
    \        {\n            min_val = l[i];\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -1231\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    for (int i = 0; i < l.length; ++i)\n    {\n\
    \        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements\
    \ in the list that are less than n.\n    >>> sum([1, 2, 3], 3)\n    3\n    >>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n    3\n    \n*/\nlong sum(long[]\
    \ l, long n) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n\
    \    {\n        if (l[i] < n)\n        {\n            sum += l[i];\n        }\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list that\
    \ are less than n.\n    >>> product([1, 2, 3], 3)\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n    -1231\n    \n*/\nlong product(long[]\
    \ l, long n) \n{\n    long prod = 1;\n    for (int i = 0; i < l.length; ++i)\n\
    \    {\n        if (l[i] < n)\n        {\n            prod *= l[i];\n        }\n\
    \    }\n    return prod;\n}\n/*\nReturn sum of all elements in the list that are\
    \ less than or equal to n.\n    >>> sum([1, 2, 3], 3)\n    3\n    >>> sum([5,\
    \ 3, -", "{\n    long max_value = l[0];\n    long max_index = 0;\n    for(int\
    \ i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_value)\n        {\n\
    \            max_value = l[i];\n            max_index = i;\n        }\n    }\n\
    \    return max_value;\n}", "{\n    long max_val = l[0];\n    long max_idx = 1;\n\
    \    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] > max_val)\n  \
    \      {\n            max_val = l[i];\n            max_idx = i;\n        }\n \
    \   }\n    return max_val;\n}", "{\n    long max = l[0];\n    long i;\n    for\
    \ (i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max = l[i];\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; ++i)\n        if (l[i] < min)\n     \
    \       min = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n\
    \    long i;\n    for (i = 0; i < l.length; ++i)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n\
    */\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for (i =\
    \ 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l)\
    \ \n{\n    float sum = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n \
    \       sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/", "{\n    int i, max_idx = 0;\n    long max_val\
    \ = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max_val) {\n\
    \            max_idx = i;\n            max_val = l[i];\n        }\n    }\n   \
    \ return max_idx;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i <\
    \ l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    int i;\n    long max_val = l[0];\n    for\
    \ (i = 1; i < l.length; ++i) {\n        if (l[i] > max_val)\n            max_val\
    \ = l[i];\n    }\n    return max_val;\n}", "{\n    long max = l[0];\n    for (int\
    \ i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max = l[i];\n\
    \    return max;\n}", "{\n    int i;\n    long max_val = l[0];\n    for(i = 1;\
    \ i < l.length; ++i)\n        if(l[i] > max_val)\n            max_val = l[i];\n\
    \    return max_val;\n}", "{\n    long max = l[0];\n    for (int i = 1; i < l.length;\
    \ ++i) {\n        if (l[i] > max) max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n \
    \       if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max_val = l[0];\n    for (int i = 1; i < l.length;\
    \ ++i) {\n        if (l[i] > max_val)\n            max_val = l[i];\n    }\n  \
    \  return max_val;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nlong min_element(long[] l) \n{\n    long min_val = l[0];\n\
    \    for (int i = 1; i < l.length; ++i) {\n        if (l[i] < min_val)\n     \
    \       min_val = l[i];\n    }\n    return min_val;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l)\
    \ \n{\n    float sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/", "{\n    long max = 0;\n    long i;\n    for(i = 0;\
    \ i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = l[0];\n\
    \    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n  \
    \          max = l[i];\n    return max;\n}", "{\n    long max = 0;\n    long i\
    \ = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n        i++;\n    }\n    return max;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\
    \ \n        if (l[i] > max) \n            max = l[i];\n    return max;\n}", "{\n\
    \    int i;\n    long max_val = l[0];\n    for (i = 1; i < l.length; i++)\n  \
    \  {\n        if (l[i] > max_val)\n            max_val = l[i];\n    }\n    return\
    \ max_val;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    int i;\n    long max = l[0];\n    for (i = 1; i < l.length; i++) \n\
    \        if (l[i] > max) \n            max = l[i];\n    return max;\n}", "{\n\
    \    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n     \
    \   if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n    long\
    \ max = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}", "{\n\
    \    long max_value = l[0];\n    long max_pos = 0;\n    \n    for(int i = 1; i\
    \ < l.length; i++){\n        if(l[i] > max_value){\n            max_value = l[i];\n\
    \            max_pos = i;\n        }\n    }\n    \n    return max_value;\n}",
  "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n  \
    \      if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n  \
    \      if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return max_val;\n}", "{\n   \
    \ long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n    \
    \    if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n \
    \   return max;\n}", "{\n    long max_val = l[0];\n    long max_idx = 1;\n   \
    \ for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_val)\n     \
    \   {\n            max_val = l[i];\n            max_idx = i;\n        }\n    }\n\
    \    return max_val;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nlong min_element(long[] l) \n{\n    long min_val = l[0];\n\
    \    long min_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] < min_val)\n        {\n            min_val = l[i];\n            min_idx\
    \ = i;\n        }\n    }\n    return min_val;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum\
    \ = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n \
    \   }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat\
    \ sum(float[] l) \n{\n    float sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/", "{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}", "{\n    long max = 0;\n   \
    \ long i = 0;\n    \n    while(i < l.length) {\n        if(l[i] > max) {\n   \
    \         max = l[i];\n        }\n        i++;\n    }\n    return max;\n}", "{\n\
    \    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return max_val;\n}", "{\n   \
    \ long max = l[0];\n    long i;\n    for(i = 1; i < l.length; ++i)\n        if(l[i]\
    \ > max)\n            max = l[i];\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}", "{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}", "{\n    long max = 0;\n   \
    \ long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i = 0;\n    long j = 0;\n    \n    while (i < l.length && l[i] > max)\
    \ \n    {\n        max = l[i];\n        i++;\n    }\n    \n    while (j < l.length\
    \ && l[j] > max) \n    {\n        max = l[j];\n        j++;\n    }\n    \n   \
    \ return max;\n}", "{\n    int i;\n    long max = l[0];\n    for (i = 1; i < l.length;\
    \ i++) \n        if (l[i] > max) \n            max = l[i];\n    return max;\n}",
  "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n  \
    \      if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max;\n    max = l[0];\n    for(int i = 1; i < l.length; i++){\n    \
    \    if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i\
    \ < l.length; i++) \n    {\n        if(l[i] > max_val) \n        {\n         \
    \   max_val = l[i];\n            max_idx = i;\n        }\n    }\n    return max_val;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1, 2, 3])\n \
    \   1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min_val = l[0];\n    long\
    \ min_idx = 1;\n    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ < min_val) \n        {\n            min_val = l[i];\n            min_idx = i;\n\
    \        }\n    }\n    return min_val;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        product *= l[i];\n   \
    \ }\n    return product;\n}\n/*\nReturn sum of all elements in the list that are\
    \ less than the given value.\n    >>> sum([1, 2, 3], 3)\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n    -10\n    \n*/\nlong sum(long[]\
    \ l, long val) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < val) \n        {\n            sum += l[i];\n       \
    \ }\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the list\
    \ that are less than the given value.\n    >>> product([1, 2, 3], 3)\n    6\n\
    \    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n    -10\n    \n\
    */\nlong product(long[] l, long val) \n{\n    long product = 1;\n    for(int i\
    \ = 0; i < l.length; i++) \n    {\n        if(l[i] < val) \n        {\n      \
    \      product *= l[i];\n        }\n    }\n    return product;", "{\n    long\
    \ max;\n    max = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i]\
    \ > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; ++i)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n\
    \    for (int i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat\
    \ sum(float[] l) \n{\n    float sum = 0;\n    for (int i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l, int start) \n{\n    long\
    \ sum = 0;\n    for (int i = start; i < l.length; ++i)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\ndouble sum(double[] l, int start) \n{\n    double sum = 0;\n    for\
    \ (int i = start; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([", "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length;\
    \ i++) \n    {\n        if(l[i] > max) \n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max_val = l[0];\n    long max_idx = 1;\n    \n    for\
    \ (int i = 1; i < l.length; i++)\n    {\n        if (l[i] > max_val)\n       \
    \ {\n            max_val = l[i];\n            max_idx = i;\n        }\n    }\n\
    \    \n    return max_val;\n}", "{\n    long max = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}", "{\n    long max = l[0];\n    long i;\n    for (i\
    \ = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n   \
    \ long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] < min)\n     \
    \       min = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n\
    \    long i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product([1,\
    \ 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  \
    \  -10\n    \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n    long i;\n\
    \    for (i = 0; i < l.length; i++)\n        prod *= l[i];\n    return prod;\n\
    }\n/*\nReturn sum of all elements in the list excluding zero.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong sum_excl(long l) \n{\n    long sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list excluding zero.\n    >>> product([1, 2,\
    \ 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong product_excl(long l) \n{\n    long prod = 1;\n    long i;\n  \
    \  for (i = 0; i < l.length; i++)\n        prod *= l[i];\n    return prod;\n}\n\
    /*\nReturn sum of all elements in the list excluding zero.\n    >>> sum([1, 2,\
    \ 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong sum_excl(long[] l) \n{\n    long sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++)\n        sum += l[i];", "{\n    long max = 0;\n \
    \   long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n        {\n            max = l[i];\n        }\n    }\n    return max;\n}",
  "{\n    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ min_element(long[] l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < min_val)\n  \
    \      {\n            min_val = l[i];\n            min_idx = i;\n        }\n \
    \   }\n    return min_val;\n}\n/*\nReturn sum of all elements in the list.\n \
    \   >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble\
    \ sum(double[] l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l) \n{\n\
    \    float sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/", "{\n    long max = 0;\n    long i;\n    for(i = 0;\
    \ i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n    \
    \    }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long i = 0;\n \
    \   \n    while(i < l.length) \n    {\n        if(l[i] > max) \n        {\n  \
    \          max = l[i];\n        }\n        i++;\n    }\n    return max;\n}", "{\n\
    \    int i;\n    long max_val = l[0];\n    long max_pos = 0;\n    \n    for (i\
    \ = 1; i < l.length; ++i) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n            max_pos = i;\n        }\n    }\n    return max_pos;\n}",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n \
    \       if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max_value = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max_value)\n        {\n            max_value\
    \ = l[i];\n            max_pos = i;\n        }\n    }\n    return max_pos;\n}",
  "{\n    int i;\n    long max;\n    max = l[0];\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n \
    \   long max = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i]\
    \ > max)\n            max = l[i];\n    return max;\n}", "{\n    long max = l[0];\n\
    \    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n  \
    \          max = l[i];\n    return max;\n}", "{\n    long max_val = l[0];\n  \
    \  long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max_val)\n        {\n            max_val = l[i];\n            max_idx = i;\n\
    \        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n\
    \    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < min_val)\n        {\n            min_val = l[i];\n\
    \            min_idx = i;\n        }\n    }\n    return min_val;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n     \
    \   sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10])\n    -123\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -123\n    \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n  \
    \      if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max_value = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max_value)\n        {\n            max_value\
    \ = l[i];\n            max_pos = i;\n        }\n    }\n    return max_pos;\n}",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n \
    \       if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i]\
    \ > max)\n            max = l[i];\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\nlong\
    \ sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\nfloat sum(float[] l) \n{\n\
    \    float sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n \
    \       sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -123\n    \n*/\nlong sum(long[] l, int start) \n{\n\
    \    long sum = 0;\n    long i;\n    for(i = start; i < l.length; ++i)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -123\n    \n*/\ndouble sum(double[] l, int start) \n",
  "{\n    long max_el = 0;\n    long max_val = l[0];\n    for(int i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max_val){\n            max_el = i;\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_el;\n}", "{\n    int i, max_idx =\
    \ 0;\n    long max_val = l[0];\n    for (i = 1; i < l.length; ++i) {\n       \
    \ if (l[i] > max_val) {\n            max_idx = i;\n            max_val = l[i];\n\
    \        }\n    }\n    return max_idx;\n}", "{\n    long max = 0;\n    long i\
    \ = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max) \n   \
    \     {\n            max = l[i];\n        }\n        i++;\n    }\n    return max;\n\
    }", "{\n    long max = 0;\n    long i = 0;\n    long j = 0;\n    \n    while (i\
    \ < l.length && l[i] > max) \n    {\n        max = l[i];\n        i++;\n    }\n\
    \    \n    while (j < l.length && l[j] > max) \n    {\n        max = l[j];\n \
    \       j++;\n    }\n    \n    return max;\n}", "{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n \
    \           max = l[i];\n    }\n    return max;\n}", "{\n    long max_value =\
    \ l[0];\n    long max_pos = 0;\n    for(long i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_value)\n        {\n            max_value = l[i];\n    \
    \        max_pos = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(long i =\
    \ 1; i < l.length; ++i)\n    {\n        if(l[i] < min_value)\n        {\n    \
    \        min_value = l[i];\n            min_pos = i;\n        }\n    }\n    return\
    \ min_pos;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2,\
    \ 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(long i = 0; i <\
    \ l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list with specified precision.\n    >>> sum([1,\
    \ 2, 3], 1)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n\
    \    -10\n    \n*/\nlong sum(long[] l, long precision) \n{\n    long sum = 0;\n\
    \    for(long i = 0; i < l.length; ++i)\n    {\n        sum += l[i] * precision;\n\
    \    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ precision.\n    >>> sum([1, 2, 3], 1)\n    6\n    >>> sum([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10], 1)\n    -10\n    \n*/\ndouble sum(double[] l, long precision)\
    \ \n{\n    double sum = 0;\n    for(long i = 0; i < l.length; ++i)\n    {\n  \
    \      sum += l[i] * precision;\n    }\n    return sum;\n}\n/*\nReturn sum of\
    \ all elements in the list with specified precision.\n    >>> sum([1, 2, 3], 1)\n\
    \    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n    -10\n   \
    \ \n*/\nfloat sum(float[] l, long precision) \n{\n    float sum = 0;\n    for(long\
    \ i = 0; i < l.length; ++i)\n    {\n        sum += l[i] * precision;\n    }\n\
    \    return sum;\n}\n/*\nReturn sum of ", "{\n    long max = l[0];\n    long i;\n\
    \    for (i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}", "{\n    long max = l[0];\n    long i;\n    for\
    \ (i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max = l[i];\n\
    \    return max;\n}", "{\n    int i, j, max = l[0];\n    for (i = 1; i < l.length;\
    \ ++i)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}",
  "{\n    long max;\n    max = l[0];\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length; ++i)\n\
    \        if(l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n  \
    \  long max_value = l[0];\n    long max_index = -1;\n    for(int i = 1; i < l.length;\
    \ i++) \n    {\n        if(l[i] > max_value) \n        {\n            max_value\
    \ = l[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }", "{\n    long max_val = l[0];\n    long max_idx = 1;\n    \n    for (int i\
    \ = 1; i < l.length; ++i)\n    {\n        if (l[i] > max_val)\n        {\n   \
    \         max_val = l[i];\n            max_idx = i;\n        }\n    }\n    \n\
    \    return max_val;\n}", "{\n    long max;\n    max = l[0];\n    for (int i =\
    \ 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n  \
    \  return max;\n}", "{\n    long max_val = l[0];\n    long max_idx = 1;\n    for(int\
    \ i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_val)\n        {\n  \
    \          max_val = l[i];\n            max_idx = i;\n        }\n    }\n    return\
    \ max_val;\n}", "{\n    int i, j, max = l[0];\n    for (i = 1; i < l.length; ++i)\
    \ {\n        for (j = 0; j < i; ++j) {\n            if (l[j] > max) {\n      \
    \          max = l[j];\n            }\n        }\n    }\n    return max;\n}",
  "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n\
    /*\nReturn minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n\
    \    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n\
    */\nlong min_element(long[] l) \n{\n    long min = l[0];\n    long i;\n    for(i\
    \ = 1; i < l.length; i++)\n    {\n        if(l[i] < min)\n            min = l[i];\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n \
    \   for(i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n\
    */\ndouble sum(double[] l) \n{\n    double sum = 0;\n    double i;\n    for(i\
    \ = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat\
    \ sum(float[] l) \n{\n    float sum = 0;\n    float i;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/", "{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}", "{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; ++i)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}", "{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] > max_val)\n        {\n            max_val = l[i];\n       \
    \     max_idx = i;\n        }\n    }\n    \n    return max_val;\n}", "{\n    long\
    \ max_value = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] > max_value)\n        {\n            max_value = l[i];\n\
    \            max_pos = i;\n        }\n    }\n    return max_pos;\n}", "{\n   \
    \ int i, j, max = l[0];\n    for (i = 1; i < l.length; ++i) {\n        for (j\
    \ = 0; j < i; ++j) {\n            if (l[j] > max) {\n                max = l[j];\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n        {\n            max = l[i];\n        }\n    }\n    return max;\n}",
  "{\n    long max = 0;\n    long i = 0;\n    long n = l.length;\n    \n    while\
    \ (i < n) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n \
    \       i++;\n    }\n    return max;\n}", "{\n    long max_val = l[0];\n    long\
    \ max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max_val)\n        {\n            max_val = l[i];\n            max_idx = i;\n\
    \        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l) \n{\n\
    \    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < min_val)\n        {\n            min_val = l[i];\n\
    \            min_idx = i;\n        }\n    }\n    return min_val;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n     \
    \   sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[] l) \n\
    {\n    long prod = 1;\n    for(int i = 0; i < l.length; ++i)\n    {\n        prod\
    \ *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in the\
    \ list that are greater than zero.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum_greaterequal(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      if(l[i] > 0)\n        {\n            sum += l[i];\n        }\n    }\n \
    \   return sum;\n}\n/*\nReturn sum of all elements in the list that are less than\
    \ zero.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum_lessequal(long[] l) \n{\n    long\
    \ sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] < 0)\n\
    \        {\n            sum += l[i];\n        }\n    }\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list that are ", "{\n    int i;\n    long max_val\
    \ = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    }\n    return max_val;\n}", "{\n    long max\
    \ = l[0];\n    long i;\n    for(i=1; i<l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}", "{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[] l)\
    \ \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong product(long[] l) \n{\n    long prod\
    \ = 1;\n    for (int i = 0; i < l.length; i++)\n        prod *= l[i];\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1, 2, 3], int)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10], int)\n    -10\n    \n*/", "{\n    long max = l[0];\n    long i;\n \
    \   for (i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}", "{\n    long max = l[0];\n  \
    \  long i;\n    for(i = 1; i < l.length; i++){\n        if(l[i] > max){\n    \
    \        max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n      \
    \  if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ min_element(long[] l) \n{\n    long min = 0;\n    long i = 0;\n    for(i = 0;\
    \ i < l.length; i++)\n    {\n        if(l[i] < min)\n            min = l[i];\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i = 0;\n\
    \    for(i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product([1,\
    \ 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  \
    \  -10\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        product *= l[i];\n\
    \    }\n    return product;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n    >>> sum([1, 2, 3], int)\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10], int)\n    -10\n    \n*/\nlong sum(long[] l, int\
    \ type) \n{\n    long sum = 0;\n    long i = 0;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        if(type == int)\n            sum += l[i];\n        else\
    \ if(type == float)\n            sum += l[i] * l[i];\n        else if(type ==\
    \ double)\n            sum += l[i] * l[i] * l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list with specified type.\n    >>> product([1,\
    \ 2, 3], int)\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10],\
    \ int)\n    -10\n    \n*/\nlong product(long[] l, int type) \n{\n    long product\
    \ = 1;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(type\
    \ == int)\n            product *= l[i];\n        else if(type == float)\n    \
    \        product *= l[i] * l[i];\n        else if(type == ", "{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}", "{\n    long max_value = l[0];\n\
    \    long max_index = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n     \
    \   if(l[i] > max_value)\n        {\n            max_value = l[i];\n         \
    \   max_index = i;\n        }\n    }\n    return max_value;\n}", "{\n    long\
    \ max = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i]\
    \ > max)\n            max = l[i];\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max_element\
    \ = l[0];\n    long max_element_index = 0;\n    for(int i = 1; i < l.length; i++){\n\
    \        if(l[i] > max_element){\n            max_element = l[i];\n          \
    \  max_element_index = i;\n        }\n    }\n    return max_element;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n \
    \       if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}",
  "{\n    int i;\n    long max_val = l[0];\n    for (i = 1; i < l.length; ++i)\n \
    \       if (l[i] > max_val)\n            max_val = l[i];\n    return max_val;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\n\
    \        if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n \
    \   long max = l[0];\n    long i;\n    for(i = 1; i < l.length; ++i)\n       \
    \ if(l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\n\
    \    {\n        if (l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    \n    return max_val;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n \
    \       if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for(i=1; i<l.length; i++)\n   \
    \ {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n  \
    \  {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n \
    \       if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length;\
    \ ++i) {\n        if (l[i] > max) max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n  \
    \      if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n  \
    \      if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    int i;\n    long max_val = l[0];\n    for (i = 1; i < l.length; ++i) {\n\
    \        if (l[i] > max_val)\n            max_val = l[i];\n    }\n    return max_val;\n\
    }", "{\n    int i;\n    long max_val = l[0];\n    for (i = 1; i < l.length; ++i)\n\
    \        if (l[i] > max_val)\n            max_val = l[i];\n    return max_val;\n\
    }", "{\n    int i, max_idx = 0;\n    long max_val = l[0];\n    for (i = 1; i <\
    \ l.length; ++i) {\n        if (l[i] > max_val) {\n            max_idx = i;\n\
    \            max_val = l[i];\n        }\n    }\n    return max_idx;\n}", "{\n\
    \    int i, j, max = l[0];\n    for (i = 1; i < l.length; i++)\n    {\n      \
    \  for (j = 0; j < i; j++)\n        {\n            if (l[j] > max)\n         \
    \   {\n                max = l[j];\n            }\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length;\
    \ ++i) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] < min){\n          \
    \  min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -123\n    \n*/\nlong sum(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -123\n    \n*/\nlong product(long[] l) \n{\n    long product\
    \ = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n        product *= l[i];\n\
    \    }\n    return product;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n    >>> sum([1, 2, 3], int)\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10], int)\n    -123\n    \n*/\nlong sum(long[] l, int\
    \ type) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(type == int.class){\n            sum += (int)l[i];\n        }else\
    \ if(type == long.class){\n            sum += l[i];\n        }else if(type ==\
    \ double.class){\n            sum += (double)l[i];\n        }else if(type == float.class){\n\
    \            sum += (float)l[i];\n        }else if(type == short.class){\n   \
    \         sum += (short)l[i];\n        }else if(type == byte.class){\n       \
    \     sum += (byte)l[i];\n        }else if(type == char.class){\n            sum\
    \ += (char)(int)l[i];\n        }else if(type == boolean.class){\n            sum\
    \ += (boolean)l[i];\n        }\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list with specified type.\n    >>> product([1, 2, 3],\
    \ int)", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length;\
    \ ++i) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for (i = 0; i <\
    \ l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1, 2,\
    \ 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   -10\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++)\n        if (l[i] < min)\n          \
    \  min = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product([1, 2, 3])\n\
    \    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n  \
    \  \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++)\n        product *= l[i];\n    return product;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble\
    \ sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\ndouble product(double[] l)\
    \ \n{\n    double product = 1;\n    long i;\n    for (i = 0; i < l.length; i++)\n\
    \        product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \n*/\nfloat sum(float[] l) \n{\n    float\
    \ sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product([1, 2, 3])\n    6", "{\n    long max = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}", "{\n    long max_value = l[0];\n    long max_pos\
    \ = 0;\n    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] > max_value)\
    \ \n        {\n            max_value = l[i];\n            max_pos = i;\n     \
    \   }\n    }\n    return max_pos;\n}", "{\n    int i;\n    long max;\n    max\
    \ = l[0];\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n \
    \           max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    int i;\n    long min;\n    min = l[0];\n    for (i = 1; i < l.length;\
    \ ++i) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    int i;\n    for (i =\
    \ 0; i < l.length; ++i) {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> product([1, 2, 3])\n    6\n\
    \    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -123\n    \n*/\n\
    long product(long[] l) \n{\n    long prod = 1;\n    int i;\n    for (i = 0; i\
    \ < l.length; ++i) {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\n\
    Return sum of all elements in the list with specified type.\n    >>> sum([1, 2,\
    \ 3], int)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n\
    \    -123\n    \n*/", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = l[0];\n    for (long i = 1; i < l.length;\
    \ ++i)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n \
    \       if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n  \
    \      if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = l[0];\n    long i;\n    for(i = 1; i < l.length; ++i)\n      \
    \  if(l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; ++i)\n\
    \        if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n   \
    \     sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product(long[] l) \n{\n\
    \    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n        prod\
    \ *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list, excluding\
    \ zero.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \n*/\nlong sum_excl(long l) \n{\n    long sum =\
    \ 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n        if(l[i] != 0)\n\
    \            sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list, excluding zero.\n    >>> product([1, 2, 3])\n    6\n    >>> product([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong product_excl(long\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \        if(l[i] != 0)\n            prod *= l[i];\n    return prod;\n}\n/*\nReturn\
    \ sum of all elements in the list, excluding zero.\n    >>> sum([1, 2, 3])\n \
    \   6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\n\
    long sum_excl(long", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i\
    \ < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    for (long i = 1; i < l.length; i++)\
    \ \n        if (l[i] > max) \n            max = l[i];\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n  \
    \      if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max_val = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i\
    \ < l.length; ++i)\n    {\n        if (l[i] > max_val)\n        {\n          \
    \  max_val = l[i];\n            max_idx = i;\n        }\n    }\n    \n    return\
    \ max_val;\n}", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length;\
    \ ++i) {\n        if (l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max_value = l[0];\n    long max_pos = 0;\n    for(long\
    \ i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_value)\n        {\n\
    \            max_value = l[i];\n            max_pos = i;\n        }\n    }\n \
    \   return max_pos;\n}", "{\n    long max = l[0];\n    long i;\n    for(i=1; i<l.length;\
    \ i++) \n    {\n        if(l[i] > max) \n        {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long max_val = l[0];\n    long\
    \ max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max_val)\n        {\n            max_val = l[i];\n            max_idx = i;\n\
    \        }\n    }\n    return max_val;\n}", "{\n    long max_val = l[0];\n   \
    \ long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max_val)\n        {\n            max_val = l[i];\n            max_idx = i;\n\
    \        }\n    }\n    return max_val;\n}", "{\n    long max;\n    max = l[0];\n\
    \    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max) max = l[i];\n\
    \    }\n    return max;\n}", "{\n    long max = l[0];\n    for (int i = 1; i <\
    \ l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return\
    \ max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i\
    \ < l.length; ++i)\n    {\n        if(l[i] > max_val)\n        {\n           \
    \ max_val = l[i];\n            max_idx = i;\n        }\n    }\n    return max_idx;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n\
    \    {\n        if(l[i] > max) \n        {\n            max = l[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long max_val = l[0];\n    long max_idx =\
    \ 1;\n    for(long i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_val)\n\
    \        {\n            max_val = l[i];\n            max_idx = i;\n        }\n\
    \    }\n    return max_idx;\n}", "{\n    long max = 0;\n    long i = 0;\n    \n\
    \    while (i < l.length) \n    {\n        if (l[i] > max) \n        {\n     \
    \       max = l[i];\n        }\n        i++;\n    }\n    return max;\n}", "{\n\
    \    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \n*/\nlong\
    \ min_element(long[] l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < min_val)\n  \
    \      {\n            min_val = l[i];\n            min_idx = i;\n        }\n \
    \   }\n    return min_val;\n}\n/*\nReturn sum of all elements in the list.\n \
    \   >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    -10\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product([1, 2, 3])\n\
    \    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n  \
    \  \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n    for(int i = 0; i\
    \ < l.length; ++i)\n    {\n        prod *= l[i];\n    }\n    return prod;\n}\n\
    /*\nReturn sum of all elements in the list with specified type.\n    >>> sum([1,\
    \ 2, 3], int)\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], int)\n\
    \    -10\n    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        if(type == int)\n        {\n     \
    \       sum += l[i];\n        }\n        else if(type == float)\n        {\n \
    \           sum += l[i] * l[i];\n        }\n    }\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list with specified type.\n    >>> product([1,\
    \ 2, 3], int)\n    6\n    >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10],\
    \ int)\n    -10\n    \n*/\nlong product(long[] l, int type) \n{\n    long prod\
    \ = 1;\n    for(int i = 0; i < l.length; ++i)\n    {\n        if(type == int)\n\
    \        {\n            prod *= l[i];\n        }", "{\n    long max = 0;\n   \
    \ long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i = 0;\n    \n    while(i < l.length) \n    {\n        if(l[i] > max)\
    \ \n        {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length;\
    \ i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n \
    \       if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max_value = l[0];\n    long max_index = 0;\n    \n    for (long i =\
    \ 0; i < l.length; i++) \n    {\n        if (l[i] > max_value)\n        {\n  \
    \          max_value = l[i];\n            max_index = i;\n        }\n    }\n \
    \   \n    return max_value;\n}", "{\n    long max;\n    max = l[0];\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (l[i] > max) \n        {\n   \
    \         max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long max\
    \ = l[0];\n    long i;\n    for(i=1; i<l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
