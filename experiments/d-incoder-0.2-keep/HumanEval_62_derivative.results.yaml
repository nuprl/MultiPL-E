name: HumanEval_62_derivative
language: humaneval_to_dlang.py
results:
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length)+1];\n  \
    \  for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n\
    \    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length)+1];\n\
    \    for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i+1] - xs[i] *\
    \ xs[i+1];\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length)+1];\n\
    \    for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i+1] - xs[i] *\
    \ xs[i+1];\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp37d4dcon.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42951e]\\n??:? long[] tmp37d4dcon.derivative(long[])\
    \ [0x428b2a]\\n??:? void tmp37d4dcon.__unittest_L67_C1() [0x428e9b]\\n??:? void\
    \ tmp37d4dcon.__modtest() [0x4291f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dafb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c98e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4320c8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431ba5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c965]\\n??:? runModuleUnitTests [0x42d8d1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b7]\\n??:? _d_run_main [0x429822]\\n??:? main [0x429203]\\\
    n??:? __libc_start_main [0xf2318554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        y = xs[i + 1];\n        result[i] = 1;\n        for(int j = i; j\
    \ < xs.length; j++)\n        {\n            x += (j - i) * xs[j];\n          \
    \  result[i] += (j - i) * y;\n        }\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result\
    \ = new double[(xs.length - 1)];\n    double x = 0;\n    double y = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        y = xs[i + 1];\n        result[i]\
    \ = 1;\n        for(int j = i; j < xs.length; j++)\n        {\n            x +=\
    \ (j - i) * xs[j];\n            result[i] += (j - i) * y;\n        }\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    float x = 0;\n\
    \    float y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        y =\
    \ xs[i + 1];\n        result[i] = 1;\n        for(int j = i; j < xs.length; j++)\n\
    \        {\n            x += (j - i) * xs[j];\n            result[i] += (j - i)\
    \ * y;\n        }\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkqaukwom.d(20): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4295ae]\\n??:? long[] tmpkqaukwom.derivative(long[])\
    \ [0x428af7]\\n??:? void tmpkqaukwom.__unittest_L94_C1() [0x428f2b]\\n??:? void\
    \ tmpkqaukwom.__modtest() [0x429280]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ca1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431ca9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432158]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431c35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c9f5]\\n??:? runModuleUnitTests [0x42d961]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4299c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429947]\\n??:? _d_run_main [0x4298b2]\\n??:? main [0x429293]\\\
    n??:? __libc_start_main [0xa07bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[xs.length];\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[xs.length];\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpsvhi3jeq.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42935e]\\n??:? long[] tmpsvhi3jeq.derivative(long[])\
    \ [0x428b11]\\n??:? void tmpsvhi3jeq.__unittest_L70_C1() [0x428cdb]\\n??:? void\
    \ tmpsvhi3jeq.__modtest() [0x429030]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d93b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f08]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7a5]\\n??:? runModuleUnitTests [0x42d711]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429770]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4296f7]\\n??:? _d_run_main [0x429662]\\n??:? main [0x429043]\\\
    n??:? __libc_start_main [0x581f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  result[0] = xs[0];\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = xs[0];\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    result[0] = xs[0];\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_gn7jxb9.d(71): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429415]\\n??:? void tmp_gn7jxb9.__unittest_L67_C1()\
    \ [0x428eae]\\n??:? void tmp_gn7jxb9.__modtest() [0x429198]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42daa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c90d]\\n??:? runModuleUnitTests [0x42d879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4298d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42985f]\\n??:? _d_run_main [0x4297ca]\\n??:? main [0x4291ab]\\\
    n??:? __libc_start_main [0x9b414554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmprvguy48d.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285d6]\\n??:? long[] tmprvguy48d.derivative(long[])\
    \ [0x427eaf]\\n??:? void tmprvguy48d.__unittest_L20_C1() [0x427f4f]\\n??:? void\
    \ tmprvguy48d.__modtest() [0x4282a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c603]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b496]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430721]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b46d]\\n??:? runModuleUnitTests [0x42c3d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42896f]\\n??:? _d_run_main [0x4288da]\\n??:? main [0x4282b7]\\\
    n??:? __libc_start_main [0xeac0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  \n    result[0] = xs[0];\n    for (int i = 1; i < xs.length; i++)\n       \
    \ result[i] = result[i-1] + xs[i] * xs[i];\n    \n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    \n    result[0] = xs[0];\n    for (int\
    \ i = 1; i < xs.length; i++)\n        result[i] = result[i-1] + xs[i] * xs[i];\n\
    \    \n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[xs.length + 1];\n    \n    result[0]\
    \ = xs[0];\n    for (int i = 1; i < xs.length; i++)\n        result[i] = result[i-1]\
    \ + xs[i] * xs[i];\n    \n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmperv0kf1s.d(77): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42949d]\\n??:? void tmperv0kf1s.__unittest_L73_C1()\
    \ [0x428f36]\\n??:? void tmperv0kf1s.__modtest() [0x429220]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c9be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4320f8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431bd5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c995]\\n??:? runModuleUnitTests [0x42d901]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429960]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298e7]\\n??:? _d_run_main [0x429852]\\n??:? main [0x429233]\\\
    n??:? __libc_start_main [0x24f57554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result];\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = xs[i] - 1;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n        result\
    \ += 1;\n    }\n    double[] result = new double[result];\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result += 1;\n    }\n    float[] result = new float[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr2u9o740.d(21): Error: declaration `tmpr2u9o740.derivative.result`\
    \ is already defined\\n/tmp/tmpr2u9o740.d(24): Error: only one index allowed to\
    \ index `long`\\n/tmp/tmpr2u9o740.d(26): Error: cannot implicitly convert expression\
    \ `result` of type `long` to `long[]`\\n/tmp/tmpr2u9o740.d(46): Error: cannot\
    \ implicitly convert expression `result` of type `double` to `ulong`\\n/tmp/tmpr2u9o740.d(46):\
    \ Error: declaration `tmpr2u9o740.derivative.result` is already defined\\n/tmp/tmpr2u9o740.d(49):\
    \ Error: only one index allowed to index `double`\\n/tmp/tmpr2u9o740.d(51): Error:\
    \ cannot implicitly convert expression `result` of type `double` to `double[]`\\\
    n/tmp/tmpr2u9o740.d(71): Error: cannot implicitly convert expression `result`\
    \ of type `float` to `ulong`\\n/tmp/tmpr2u9o740.d(71): Error: declaration `tmpr2u9o740.derivative.result`\
    \ is already defined\\n/tmp/tmpr2u9o740.d(74): Error: only one index allowed to\
    \ index `float`\\n/tmp/tmpr2u9o740.d(76): Error: cannot implicitly convert expression\
    \ `result` of type `float` to `float[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpr2u9o740.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d *= xs[i];\n    }\n    long[] result = new long[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n\
    \        d *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxt4w53k8.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42857d]\\n??:? void tmpxt4w53k8.__unittest_L29_C1()\
    \ [0x428012]\\n??:? void tmpxt4w53k8.__modtest() [0x4282fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c65b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430779]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c28]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430705]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4c5]\\n??:? runModuleUnitTests [0x42c431]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a40]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289c7]\\n??:? _d_run_main [0x428932]\\n??:? main [0x42830f]\\\
    n??:? __libc_start_main [0x338fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for (int i = 0; i < n; i++) {\n       \
    \ x = xs[i];\n        y = x * y;\n        ys[i] = y;\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] ys = new double[n];\n    double x = 0;\n    double\
    \ y = 0;\n    for (int i = 0; i < n; i++) {\n        x = xs[i];\n        y = x\
    \ * y;\n        ys[i] = y;\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] ys = new float[n];\n\
    \    float x = 0;\n    float y = 0;\n    for (int i = 0; i < n; i++) {\n     \
    \   x = xs[i];\n        y = x * y;\n        ys[i] = y;\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdeh7hq12.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpdeh7hq12.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpdeh7hq12.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdeh7hq12.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x = xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    double x = 0;\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = xs[i] - x;\n        x = xs[i];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    float x = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x = xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa2gspr0f.d(83): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42941d]\\n??:? void tmpa2gspr0f.__unittest_L79_C1()\
    \ [0x428eb2]\\n??:? void tmpa2gspr0f.__modtest() [0x42919c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42daab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432078]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c915]\\n??:? runModuleUnitTests [0x42d881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4298e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429867]\\n??:? _d_run_main [0x4297d2]\\n??:? main [0x4291af]\\\
    n??:? __libc_start_main [0xe4d9b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long x = 0;\n    long[] result = new long[xs.length];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i] - x;\n\
    \        x = xs[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwidmqxft.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42852d]\\n??:? void tmpwidmqxft.__unittest_L24_C1()\
    \ [0x427fc6]\\n??:? void tmpwidmqxft.__modtest() [0x4282b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c60b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b49e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430729]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b475]\\n??:? runModuleUnitTests [0x42c3e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428977]\\n??:? _d_run_main [0x4288e2]\\n??:? main [0x4282c3]\\\
    n??:? __libc_start_main [0xf6cdb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long x = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        d[i] = 1;\n \
    \       for(int j = 0; j < i; ++j)\n            d[i] *= xs[j];\n        d[i] *=\
    \ x;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] d = new double[n];\n    double\
    \ x = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        d[i] = 1;\n        for(int\
    \ j = 0; j < i; ++j)\n            d[i] *= xs[j];\n        d[i] *= x;\n    }\n\
    \    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n    float x\
    \ = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        d[i] = 1;\n        for(int\
    \ j = 0; j < i; ++j)\n            d[i] *= xs[j];\n        d[i] *= x;\n    }\n\
    \    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp93653pa7.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp93653pa7.d(39): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp93653pa7.d(63):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93653pa7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    long d = 0;\n    for(int i = 0; i < n;\
    \ i++){\n        x = xs[i];\n        y = xs[i+1];\n        d = x*y;\n        result[i]\
    \ = d;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    double\
    \ x = 0;\n    double y = 0;\n    double d = 0;\n    for(int i = 0; i < n; i++){\n\
    \        x = xs[i];\n        y = xs[i+1];\n        d = x*y;\n        result[i]\
    \ = d;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    float\
    \ x = 0;\n    float y = 0;\n    float d = 0;\n    for(int i = 0; i < n; i++){\n\
    \        x = xs[i];\n        y = xs[i+1];\n        d = x*y;\n        result[i]\
    \ = d;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8wc7r002.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp8wc7r002.d(40): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp8wc7r002.d(65):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8wc7r002.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++) {\n        x\
    \ = xs[i];\n        y = x * y;\n        ys[i] = y;\n    }\n    return ys;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] ys = new double[n];\n    double x = 0;\n    double\
    \ y = 0;\n    for(int i = 0; i < n; i++) {\n        x = xs[i];\n        y = x\
    \ * y;\n        ys[i] = y;\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] ys = new float[n];\n\
    \    float x = 0;\n    float y = 0;\n    for(int i = 0; i < n; i++) {\n      \
    \  x = xs[i];\n        y = x * y;\n        ys[i] = y;\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqajh14v2.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpqajh14v2.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpqajh14v2.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqajh14v2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++){\n        x\
    \ = xs[i];\n        y = x * x;\n        d[i] = y;\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] d = new double[n];\n    double x = 0;\n    double\
    \ y = 0;\n    for(int i = 0; i < n; i++){\n        x = xs[i];\n        y = x *\
    \ x;\n        d[i] = y;\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n\
    \    float x = 0;\n    float y = 0;\n    for(int i = 0; i < n; i++){\n       \
    \ x = xs[i];\n        y = x * x;\n        d[i] = y;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy17a7fcm.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpy17a7fcm.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpy17a7fcm.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy17a7fcm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        ys[i] = xs[i] - xs[i-1];\n    }\n \
    \   return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ys = new double[n];\n    for(int\
    \ i = 0; i < n; i++) {\n        ys[i] = xs[i] - xs[i-1];\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] ys = new float[n];\n    for(int i = 0; i < n; i++)\
    \ {\n        ys[i] = xs[i] - xs[i-1];\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppo2czr6r.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmppo2czr6r.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmppo2czr6r.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppo2czr6r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n  \
    \      result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpigfoukrj.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4293fe]\\n??:? long[] tmpigfoukrj.derivative(long[])\
    \ [0x428b1f]\\n??:? void tmpigfoukrj.__unittest_L64_C1() [0x428d77]\\n??:? void\
    \ tmpigfoukrj.__modtest() [0x4290cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c86e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431af9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c845]\\n??:? runModuleUnitTests [0x42d7b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429797]\\n??:? _d_run_main [0x429702]\\n??:? main [0x4290df]\\\
    n??:? __libc_start_main [0x4ac48554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnslinhec.d(71): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293d5]\\n??:? void tmpnslinhec.__unittest_L67_C1()\
    \ [0x428e6e]\\n??:? void tmpnslinhec.__modtest() [0x429158]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8cd]\\n??:? runModuleUnitTests [0x42d839]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429898]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42981f]\\n??:? _d_run_main [0x42978a]\\n??:? main [0x42916b]\\\
    n??:? __libc_start_main [0x5b7f7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for (int i = 0; i < n; i++)\n        result[i] = xs[i + 1] - xs[i];\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for\
    \ (int i = 0; i < n; i++)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for (int i = 0; i < n;\
    \ i++)\n        result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpldl4oi1r.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpldl4oi1r.d(33): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpldl4oi1r.d(51):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldl4oi1r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n        result[i] = xs[i + 1] - xs[i];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < xs.length - 1; i++)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1)];\n    for(int i = 0; i < xs.length - 1;\
    \ i++)\n        result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqm16jf1i.d(68): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429365]\\n??:? void tmpqm16jf1i.__unittest_L64_C1()\
    \ [0x428dfe]\\n??:? void tmpqm16jf1i.__modtest() [0x4290e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c886]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c85d]\\n??:? runModuleUnitTests [0x42d7c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429828]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297af]\\n??:? _d_run_main [0x42971a]\\n??:? main [0x4290fb]\\\
    n??:? __libc_start_main [0xf0c64554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length)+1];\n  \
    \  long x = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x = xs[i] * x;\n    }\n    result[xs.length] = 1;\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppu1staz2.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42855d]\\n??:? void tmppu1staz2.__unittest_L25_C1()\
    \ [0x427ff2]\\n??:? void tmppu1staz2.__modtest() [0x4282dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c63b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430759]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c08]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4a5]\\n??:? runModuleUnitTests [0x42c411]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a20]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289a7]\\n??:? _d_run_main [0x428912]\\n??:? main [0x4282ef]\\\
    n??:? __libc_start_main [0xb766a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < result.length; i++)\n        result[i] = xs[i + 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = xs[i + 1];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxvdh8bo_.d(68): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4292bd]\\n??:? void tmpxvdh8bo_.__unittest_L64_C1()\
    \ [0x428d52]\\n??:? void tmpxvdh8bo_.__modtest() [0x42903c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d94b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7b5]\\n??:? runModuleUnitTests [0x42d721]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429707]\\n??:? _d_run_main [0x429672]\\n??:? main [0x42904f]\\\
    n??:? __libc_start_main [0x6a6aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] ys = new long[xs.length + 1];\n    ys[0]\
    \ = 1;\n    for (int i = 1; i < xs.length; i++) \n    {\n        ys[i] = ys[i\
    \ - 1] * xs[i];\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] ys = new double[xs.length + 1];\n\
    \    ys[0] = 1;\n    for (int i = 1; i < xs.length; i++) \n    {\n        ys[i]\
    \ = ys[i - 1] * xs[i];\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] ys = new float[xs.length + 1];\n   \
    \ ys[0] = 1;\n    for (int i = 1; i < xs.length; i++) \n    {\n        ys[i] =\
    \ ys[i - 1] * xs[i];\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpex56t5t4.d(77): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293d5]\\n??:? void tmpex56t5t4.__unittest_L73_C1()\
    \ [0x428e6e]\\n??:? void tmpex56t5t4.__modtest() [0x429158]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8cd]\\n??:? runModuleUnitTests [0x42d839]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429898]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42981f]\\n??:? _d_run_main [0x42978a]\\n??:? main [0x42916b]\\\
    n??:? __libc_start_main [0xab9fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     y = xs[i];\n        ds[i] = 1;\n        for(int j = n - 1; j >= 0; j--)\n\
    \        {\n            x += xs[j] * y; \n            ds[i] *= x;\n        }\n\
    \    }\n    return ds;\n}\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmmkc4t25.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpmmkc4t25.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n    }\n   \
    \ result[n-1] = 1;\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] result = new\
    \ double[n];\n    for(int i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n\
    \    }\n    result[n-1] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] result = new\
    \ float[n];\n    for(int i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n\
    \    }\n    result[n-1] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcav0_fu_.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpcav0_fu_.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpcav0_fu_.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcav0_fu_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppz8ssfde.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4292bd]\\n??:? void tmppz8ssfde.__unittest_L70_C1()\
    \ [0x428d52]\\n??:? void tmppz8ssfde.__modtest() [0x42903c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d94b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7b5]\\n??:? runModuleUnitTests [0x42d721]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429707]\\n??:? _d_run_main [0x429672]\\n??:? main [0x42904f]\\\
    n??:? __libc_start_main [0xc4038554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n-2; i >= 0; i--) {\n        result[i] *= xs[i+1];\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++) {\n        result[i] = xs[i];\n    }\n    result[n-1] = 1;\n\
    \    for(int i = n-2; i >= 0; i--) {\n        result[i] *= xs[i+1];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++) {\n        result[i] = xs[i];\n    }\n    result[n-1] = 1;\n\
    \    for(int i = n-2; i >= 0; i--) {\n        result[i] *= xs[i+1];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqcy40o52.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpqcy40o52.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpqcy40o52.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcy40o52.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n\
    \    for(int i = n - 1; i >= 0; i--)\n    {\n        result[i] = result[i + 1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] result = new\
    \ double[n];\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i\
    \ + 1];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n        result[i]\
    \ = result[i + 1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] result = new\
    \ float[n];\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i +\
    \ 1];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n        result[i] =\
    \ result[i + 1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpju7e24gq.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpju7e24gq.d(39): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpju7e24gq.d(63):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpju7e24gq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result];\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = xs[i] - 1;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n        result\
    \ += 1;\n    }\n    double[] result = new double[result];\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result += 1;\n    }\n    float[] result = new float[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplz8gmif0.d(21): Error: declaration `tmplz8gmif0.derivative.result`\
    \ is already defined\\n/tmp/tmplz8gmif0.d(24): Error: only one index allowed to\
    \ index `long`\\n/tmp/tmplz8gmif0.d(26): Error: cannot implicitly convert expression\
    \ `result` of type `long` to `long[]`\\n/tmp/tmplz8gmif0.d(46): Error: cannot\
    \ implicitly convert expression `result` of type `double` to `ulong`\\n/tmp/tmplz8gmif0.d(46):\
    \ Error: declaration `tmplz8gmif0.derivative.result` is already defined\\n/tmp/tmplz8gmif0.d(49):\
    \ Error: only one index allowed to index `double`\\n/tmp/tmplz8gmif0.d(51): Error:\
    \ cannot implicitly convert expression `result` of type `double` to `double[]`\\\
    n/tmp/tmplz8gmif0.d(71): Error: cannot implicitly convert expression `result`\
    \ of type `float` to `ulong`\\n/tmp/tmplz8gmif0.d(71): Error: declaration `tmplz8gmif0.derivative.result`\
    \ is already defined\\n/tmp/tmplz8gmif0.d(74): Error: only one index allowed to\
    \ index `float`\\n/tmp/tmplz8gmif0.d(76): Error: cannot implicitly convert expression\
    \ `result` of type `float` to `float[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmplz8gmif0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += xs[i+1];\n    }\n \
    \   long[] result = new long[result.__len__()];\n    for(int i = 0; i < result.__len__();\
    \ i++)\n    {\n        result[i] = result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result += xs[i+1];\n    }\n    double[] result = new double[result.__len__()];\n\
    \    for(int i = 0; i < result.__len__(); i++)\n    {\n        result[i] = result;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n        result += xs[i+1];\n    }\n    float[]\
    \ result = new float[result.__len__()];\n    for(int i = 0; i < result.__len__();\
    \ i++)\n    {\n        result[i] = result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp18pclfc5.d(21): Error: no property `__len__` for type `long`\\\
    n/tmp/tmp18pclfc5.d(21): Error: declaration `tmp18pclfc5.derivative.result` is\
    \ already defined\\n/tmp/tmp18pclfc5.d(22): Error: no property `__len__` for type\
    \ `long`\\n/tmp/tmp18pclfc5.d(24): Error: only one index allowed to index `long`\\\
    n/tmp/tmp18pclfc5.d(26): Error: cannot implicitly convert expression `result`\
    \ of type `long` to `long[]`\\n/tmp/tmp18pclfc5.d(46): Error: no property `__len__`\
    \ for type `double`\\n/tmp/tmp18pclfc5.d(46): Error: declaration `tmp18pclfc5.derivative.result`\
    \ is already defined\\n/tmp/tmp18pclfc5.d(47): Error: no property `__len__` for\
    \ type `double`\\n/tmp/tmp18pclfc5.d(49): Error: only one index allowed to index\
    \ `double`\\n/tmp/tmp18pclfc5.d(51): Error: cannot implicitly convert expression\
    \ `result` of type `double` to `double[]`\\n/tmp/tmp18pclfc5.d(71): Error: no\
    \ property `__len__` for type `float`\\n/tmp/tmp18pclfc5.d(71): Error: declaration\
    \ `tmp18pclfc5.derivative.result` is already defined\\n/tmp/tmp18pclfc5.d(72):\
    \ Error: no property `__len__` for type `float`\\n/tmp/tmp18pclfc5.d(74): Error:\
    \ only one index allowed to index `float`\\n/tmp/tmp18pclfc5.d(76): Error: cannot\
    \ implicitly convert expression `result` of type `float` to `float[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18pclfc5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 0;\n    for(int i = 0; i <= xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x = xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    double x = 0;\n    for(int i = 0; i\
    \ <= xs.length; i++)\n    {\n        result[i] = xs[i] - x;\n        x = xs[i];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    float x = 0;\n    for(int i = 0; i <= xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x = xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpaj56vgtm.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4294ce]\\n??:? long[] tmpaj56vgtm.derivative(long[])\
    \ [0x428b2c]\\n??:? void tmpaj56vgtm.__unittest_L79_C1() [0x428e47]\\n??:? void\
    \ tmpaj56vgtm.__modtest() [0x42919c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42daab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432078]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c915]\\n??:? runModuleUnitTests [0x42d881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4298e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429867]\\n??:? _d_run_main [0x4297d2]\\n??:? main [0x4291af]\\\
    n??:? __libc_start_main [0x56c75554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for (int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i\
    \ + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for (int i\
    \ = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for (int i =\
    \ 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5yjoop5s.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4292cd]\\n??:? void tmp5yjoop5s.__unittest_L70_C1()\
    \ [0x428d62]\\n??:? void tmp5yjoop5s.__modtest() [0x42904c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d95b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f28]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7c5]\\n??:? runModuleUnitTests [0x42d731]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429790]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429717]\\n??:? _d_run_main [0x429682]\\n??:? main [0x42905f]\\\
    n??:? __libc_start_main [0x3d07e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n  \
    \      result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp1_s6xv6i.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4293fe]\\n??:? long[] tmp1_s6xv6i.derivative(long[])\
    \ [0x428b1f]\\n??:? void tmp1_s6xv6i.__unittest_L64_C1() [0x428d77]\\n??:? void\
    \ tmp1_s6xv6i.__modtest() [0x4290cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c86e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431af9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c845]\\n??:? runModuleUnitTests [0x42d7b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429797]\\n??:? _d_run_main [0x429702]\\n??:? main [0x4290df]\\\
    n??:? __libc_start_main [0xe8fd8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    for(int i = 1; i < xs.length; i++) \n    {\n        result[i]\
    \ = xs[i] - x; \n        x = xs[i]; \n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result = new double[(xs.length\
    \ - 1)];\n    double x = 0;\n    for(int i = 1; i < xs.length; i++) \n    {\n\
    \        result[i] = xs[i] - x; \n        x = xs[i]; \n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1)];\n    float x = 0;\n    for(int i = 1; i\
    \ < xs.length; i++) \n    {\n        result[i] = xs[i] - x; \n        x = xs[i];\
    \ \n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp6q7ksrh3.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x429446]\\n??:? long[] tmp6q7ksrh3.derivative(long[])\
    \ [0x428af9]\\n??:? void tmp6q7ksrh3.__unittest_L76_C1() [0x428dc3]\\n??:? void\
    \ tmp6q7ksrh3.__modtest() [0x429118]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431ff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431acd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c88d]\\n??:? runModuleUnitTests [0x42d7f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429858]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297df]\\n??:? _d_run_main [0x42974a]\\n??:? main [0x42912b]\\\
    n??:? __libc_start_main [0xdefa4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = xs[0];\n    long y = xs[1];\n    for(int i = 2; i < xs.length; i++){\n\
    \        result[i - 2] = x * y;\n        x = y;\n        y = xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    double x =\
    \ xs[0];\n    double y = xs[1];\n    for(int i = 2; i < xs.length; i++){\n   \
    \     result[i - 2] = x * y;\n        x = y;\n        y = xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1)];\n    float x = xs[0];\n    float y = xs[1];\n\
    \    for(int i = 2; i < xs.length; i++){\n        result[i - 2] = x * y;\n   \
    \     x = y;\n        y = xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp39n_0q6g.d(83): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429405]\\n??:? void tmp39n_0q6g.__unittest_L79_C1()\
    \ [0x428e9a]\\n??:? void tmp39n_0q6g.__modtest() [0x429184]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c926]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432060]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8fd]\\n??:? runModuleUnitTests [0x42d869]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4298c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42984f]\\n??:? _d_run_main [0x4297ba]\\n??:? main [0x429197]\\\
    n??:? __libc_start_main [0xe988f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphnltho6_.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmphnltho6_.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmphnltho6_.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnltho6_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long x = 0;\n    long y = 0;\n    long sum = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        sum += xs[i];\n    }\n    result[0] = sum;\n\
    \    for (int i = 1; i < xs.length; i++)\n    {\n        x = i;\n        y = xs[i]\
    \ - sum;\n        result[i] = y;\n        sum += y;\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work when xs is empty. Try it\
    \ with `xs = new long[0];`\n<|/ c |>\n<| c |>\nIt works with empty arrays. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nYes, it works. But it fails with empty arrays.\
    \ Try it with `xs = new long[0];`\n<|/ c |>\n<| c |>\nYes, it works. But it fails\
    \ with empty arrays. Try it with `xs = new long[0];`\n<|/ c |>\n<| c |>\nYes,\
    \ it works. But it fails with empty arrays. Try it with `xs = new long[0];`\n\
    <|/ c |>\n<| a tags=java,math |>\n<code>\npublic class Polynomial {\n    private\
    \ long[] coefficients;\n    private int degree;\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpic3xcqfw.d(33): Error: declaration expected, not `<`\\n/tmp/tmpic3xcqfw.d(36):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpic3xcqfw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = xs[0];\n    result[0] = xs[1];\n    for (int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * x + xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    double x = xs[0];\n    result[0] =\
    \ xs[1];\n    for (int i = 1; i < xs.length; i++)\n    {\n        result[i] =\
    \ result[i-1] * x + xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    float x = xs[0];\n    result[0] = xs[1];\n    for (int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * x + xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq1yj5dru.d(80): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294a5]\\n??:? void tmpq1yj5dru.__unittest_L76_C1()\
    \ [0x428f3a]\\n??:? void tmpq1yj5dru.__modtest() [0x429224]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431bdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c99d]\\n??:? runModuleUnitTests [0x42d909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ef]\\n??:? _d_run_main [0x42985a]\\n??:? main [0x429237]\\\
    n??:? __libc_start_main [0x214b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1) * 2];\n\
    \    long x = 1;\n    long y = 1;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        result[i] = y;\n        y += x * xs[i];\n        x *= xs[i];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3c5qosij.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428555]\\n??:? void tmp3c5qosij.__unittest_L26_C1()\
    \ [0x427fee]\\n??:? void tmp3c5qosij.__modtest() [0x4282d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c633]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430751]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b49d]\\n??:? runModuleUnitTests [0x42c409]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a18]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42899f]\\n??:? _d_run_main [0x42890a]\\n??:? main [0x4282eb]\\\
    n??:? __libc_start_main [0xbc58b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[xs.length];\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[xs.length];\n    for(int i = 0; i <\
    \ xs.length; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmplezyrs8e.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4293fe]\\n??:? long[] tmplezyrs8e.derivative(long[])\
    \ [0x428b1f]\\n??:? void tmplezyrs8e.__unittest_L70_C1() [0x428d77]\\n??:? void\
    \ tmplezyrs8e.__modtest() [0x4290cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c86e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431af9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c845]\\n??:? runModuleUnitTests [0x42d7b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429797]\\n??:? _d_run_main [0x429702]\\n??:? main [0x4290df]\\\
    n??:? __libc_start_main [0x2e457554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = xs[i] - 1;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n        result\
    \ += 1;\n    }\n    double[] result = new double[result];\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ *= xs[i];\n        result += 1;\n    }\n    float[] result = new float[result];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnmx1hka1.d(21): Error: declaration `tmpnmx1hka1.derivative.result`\
    \ is already defined\\n/tmp/tmpnmx1hka1.d(24): Error: only one index allowed to\
    \ index `long`\\n/tmp/tmpnmx1hka1.d(26): Error: cannot implicitly convert expression\
    \ `result` of type `long` to `long[]`\\n/tmp/tmpnmx1hka1.d(46): Error: cannot\
    \ implicitly convert expression `result` of type `double` to `ulong`\\n/tmp/tmpnmx1hka1.d(46):\
    \ Error: declaration `tmpnmx1hka1.derivative.result` is already defined\\n/tmp/tmpnmx1hka1.d(49):\
    \ Error: only one index allowed to index `double`\\n/tmp/tmpnmx1hka1.d(51): Error:\
    \ cannot implicitly convert expression `result` of type `double` to `double[]`\\\
    n/tmp/tmpnmx1hka1.d(71): Error: cannot implicitly convert expression `result`\
    \ of type `float` to `ulong`\\n/tmp/tmpnmx1hka1.d(71): Error: declaration `tmpnmx1hka1.derivative.result`\
    \ is already defined\\n/tmp/tmpnmx1hka1.d(74): Error: only one index allowed to\
    \ index `float`\\n/tmp/tmpnmx1hka1.d(76): Error: cannot implicitly convert expression\
    \ `result` of type `float` to `float[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpnmx1hka1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; ++i) {\n        ys[i] = xs[i] - xs[i - 1];\n    }\n\
    \    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ys = new double[n];\n    for(int\
    \ i = 0; i < n; ++i) {\n        ys[i] = xs[i] - xs[i - 1];\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] ys = new float[n];\n    for(int i = 0; i < n; ++i)\
    \ {\n        ys[i] = xs[i] - xs[i - 1];\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2_p9avmm.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp2_p9avmm.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp2_p9avmm.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_p9avmm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1)];\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp7gupngot.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42936e]\\n??:? long[] tmp7gupngot.derivative(long[])\
    \ [0x428ae9]\\n??:? void tmp7gupngot.__unittest_L70_C1() [0x428ce7]\\n??:? void\
    \ tmp7gupngot.__modtest() [0x42903c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d94b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7b5]\\n??:? runModuleUnitTests [0x42d721]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429707]\\n??:? _d_run_main [0x429672]\\n??:? main [0x42904f]\\\
    n??:? __libc_start_main [0xd4282554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long n = xs.length;\n    long[] ds = new long[n];\n\
    \    long m = 0;\n    for(int i = 0; i < n; i++)\n    {\n        ds[i] = 1;\n\
    \        for(int j = 0; j < n; j++)\n        {\n            if(i == j)\n     \
    \           ds[i] *= xs[j];\n            else\n                ds[i] *= xs[j];\n\
    \        }\n        m += ds[i];\n    }\n    long[] result = new long[n];\n   \
    \ for(int i = 0; i < n; i++)\n    {\n        result[i] = ds[i] / m;\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double n = xs.length;\n    double[] ds = new double[n];\n    double\
    \ m = 0;\n    for(int i = 0; i < n; i++)\n    {\n        ds[i] = 1;\n        for(int\
    \ j = 0; j < n; j++)\n        {\n            if(i == j)\n                ds[i]\
    \ *= xs[j];\n            else\n                ds[i] *= xs[j];\n        }\n  \
    \      m += ds[i];\n    }\n    double[] result = new double[n];\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        result[i] = ds[i] / m;\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ n = xs.length;\n    float[] ds = new float[n];\n    float m = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        ds[i] = 1;\n        for(int j = 0; j < n;\
    \ j++)\n        {\n            if(i == j)\n                ds[i] *= xs[j];\n \
    \           else\n                ds[i] *= xs[j];\n        }\n        m += ds[i];\n\
    \    }\n    float[] result = new float[n];\n    for(int i = 0; i < n; i++)\n \
    \   {\n        result[i] = ds[i] / m;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_3vi8jzp.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_3vi8jzp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for(int i = 0; i < n;\
    \ i++) {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp97a9yq7o.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp97a9yq7o.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp97a9yq7o.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp97a9yq7o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++) {\n        x\
    \ = xs[i];\n        y = x * y;\n        ys[i] = y;\n    }\n    return ys;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] ys = new double[n];\n    double x = 0;\n    double\
    \ y = 0;\n    for(int i = 0; i < n; i++) {\n        x = xs[i];\n        y = x\
    \ * y;\n        ys[i] = y;\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] ys = new float[n];\n\
    \    float x = 0;\n    float y = 0;\n    for(int i = 0; i < n; i++) {\n      \
    \  x = xs[i];\n        y = x * y;\n        ys[i] = y;\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp19mmcdij.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp19mmcdij.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp19mmcdij.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19mmcdij.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result.__len()];\n    for (int i = 0; i < result.__len();\
    \ i++)\n        result[i] = result / xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n        result\
    \ += 1;\n    }\n    double[] result = new double[result.__len()];\n    for (int\
    \ i = 0; i < result.__len(); i++)\n        result[i] = result / xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ *= xs[i];\n        result += 1;\n    }\n    float[] result = new float[result.__len()];\n\
    \    for (int i = 0; i < result.__len(); i++)\n        result[i] = result / xs[i];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqiwrgf0g.d(21): Error: no property `__len` for type `long`\\\
    n/tmp/tmpqiwrgf0g.d(21): Error: declaration `tmpqiwrgf0g.derivative.result` is\
    \ already defined\\n/tmp/tmpqiwrgf0g.d(22): Error: no property `__len` for type\
    \ `long`\\n/tmp/tmpqiwrgf0g.d(23): Error: only one index allowed to index `long`\\\
    n/tmp/tmpqiwrgf0g.d(24): Error: cannot implicitly convert expression `result`\
    \ of type `long` to `long[]`\\n/tmp/tmpqiwrgf0g.d(44): Error: no property `__len`\
    \ for type `double`\\n/tmp/tmpqiwrgf0g.d(44): Error: declaration `tmpqiwrgf0g.derivative.result`\
    \ is already defined\\n/tmp/tmpqiwrgf0g.d(45): Error: no property `__len` for\
    \ type `double`\\n/tmp/tmpqiwrgf0g.d(46): Error: only one index allowed to index\
    \ `double`\\n/tmp/tmpqiwrgf0g.d(47): Error: cannot implicitly convert expression\
    \ `result` of type `double` to `double[]`\\n/tmp/tmpqiwrgf0g.d(67): Error: no\
    \ property `__len` for type `float`\\n/tmp/tmpqiwrgf0g.d(67): Error: declaration\
    \ `tmpqiwrgf0g.derivative.result` is already defined\\n/tmp/tmpqiwrgf0g.d(68):\
    \ Error: no property `__len` for type `float`\\n/tmp/tmpqiwrgf0g.d(69): Error:\
    \ only one index allowed to index `float`\\n/tmp/tmpqiwrgf0g.d(70): Error: cannot\
    \ implicitly convert expression `result` of type `float` to `float[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqiwrgf0g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < result.length; i++)\n        result[i] = xs[i + 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = xs[i + 1];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvbhj97hy.d(68): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4292bd]\\n??:? void tmpvbhj97hy.__unittest_L64_C1()\
    \ [0x428d52]\\n??:? void tmpvbhj97hy.__modtest() [0x42903c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d94b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7b5]\\n??:? runModuleUnitTests [0x42d721]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429707]\\n??:? _d_run_main [0x429672]\\n??:? main [0x42904f]\\\
    n??:? __libc_start_main [0x9d775554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long x = 1;\n    long y = 1;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        result[i] = y;\n        y += xs[i] * x;\n        x *= xs[i];\n \
    \   }\n    result[xs.length] = y;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6mx_gl76.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42856d]\\n??:? void tmp6mx_gl76.__unittest_L27_C1()\
    \ [0x428002]\\n??:? void tmp6mx_gl76.__modtest() [0x4282ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c64b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430769]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4b5]\\n??:? runModuleUnitTests [0x42c421]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a30]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289b7]\\n??:? _d_run_main [0x428922]\\n??:? main [0x4282ff]\\\
    n??:? __libc_start_main [0x5a86d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long d = 1;\n    for (int i = 0; i < n; i++) {\n        d *= xs[i];\n   \
    \     result[i] = d;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] result = new\
    \ double[n];\n    double d = 1;\n    for (int i = 0; i < n; i++) {\n        d\
    \ *= xs[i];\n        result[i] = d;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ result = new float[n];\n    float d = 1;\n    for (int i = 0; i < n; i++) {\n\
    \        d *= xs[i];\n        result[i] = d;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4in1lpcp.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp4in1lpcp.d(36): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp4in1lpcp.d(57):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4in1lpcp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5_x3ra4q.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429365]\\n??:? void tmp5_x3ra4q.__unittest_L70_C1()\
    \ [0x428dfe]\\n??:? void tmp5_x3ra4q.__modtest() [0x4290e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c886]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c85d]\\n??:? runModuleUnitTests [0x42d7c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429828]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297af]\\n??:? _d_run_main [0x42971a]\\n??:? main [0x4290fb]\\\
    n??:? __libc_start_main [0x21e16554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length + 1)];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length + 1)];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4z0okjhp.d(77): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293d5]\\n??:? void tmp4z0okjhp.__unittest_L73_C1()\
    \ [0x428e6e]\\n??:? void tmp4z0okjhp.__modtest() [0x429158]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8cd]\\n??:? runModuleUnitTests [0x42d839]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429898]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42981f]\\n??:? _d_run_main [0x42978a]\\n??:? main [0x42916b]\\\
    n??:? __libc_start_main [0xc793d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i] - xs[i-1];\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,polynomial-math,math,polynomial-approximation\
    \ |>\n<| c |>\nI believe this should be the accepted answer. Very elegant and\
    \ simple.\n<|/ c |>\n<| c |>\nI believe this should be the accepted answer. Very\
    \ elegant and simple.\n<|/ c |>\n<| a dscore=4 |>\n<code>\npublic static class\
    \ Math\n{\n    public static double Power(double x, int exponent)\n    {\n   \
    \     if (exponent == 0)\n            return 1;\n        if (exponent == 1)\n\
    \            return x;\n        if (exponent == 2)\n            return x * x;\n\
    \        if (exponent == 3)\n            return x * x * x;\n        if (exponent\
    \ == 4)\n            return x * x * x * x;\n        if (exponent == 5)\n     \
    \       return x * x * x * x * x;\n        if (exponent == 6)\n            return\
    \ x * x * x * x * x * x;\n        if (exponent == 7)\n            return x * x\
    \ * x * x * x * x * x;\n        if (exponent == 8)\n            return x * x *\
    \ x * x * x * x * x * x;\n        if (exponent == 9)\n            return x * x\
    \ * x * x * x * x * x * x * x;\n        if (exponent == 10)\n            return\
    \ x * x * x * x * x * x * x * x * x * x;\n        if (exponent == 11)\n      \
    \      return x * x * x * x * x * x * x * x * x * x * x;\n        if (exponent\
    \ == 12)\n            return x * x * x * x * x * x * x * x * x * x * x * x;\n\
    \        if (exponent == 13)\n            return x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x;\n        if (exponent == 14)\n            return x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x;\n        if (exponent == 15)\n\
    \            return x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n\
    \        if (exponent == 16)\n            return x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x;\n        if (exponent == 17)\n            return\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n       \
    \ if (exponent == 18)\n            return x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x;\n        if (exponent == 19)\n            return\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n   \
    \     if (exponent == 20)\n            return x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x;\n        if (exponent == 21)\n      \
    \      return x * x * x * x * x * x * x * x * x * x * x * x * \nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbmtdon7_.d(20): Error: declaration expected, not `<`\\n/tmp/tmpbmtdon7_.d(36):\
    \ Error: declaration expected, not `if`\\n/tmp/tmpbmtdon7_.d(38): Error: declaration\
    \ expected, not `if`\\n/tmp/tmpbmtdon7_.d(40): Error: declaration expected, not\
    \ `if`\\n/tmp/tmpbmtdon7_.d(42): Error: declaration expected, not `if`\\n/tmp/tmpbmtdon7_.d(44):\
    \ Error: declaration expected, not `if`\\n/tmp/tmpbmtdon7_.d(46): Error: declaration\
    \ expected, not `if`\\n/tmp/tmpbmtdon7_.d(48): Error: declaration expected, not\
    \ `if`\\n/tmp/tmpbmtdon7_.d(50): Error: declaration expected, not `if`\\n/tmp/tmpbmtdon7_.d(52):\
    \ Error: declaration expected, not `if`\\n/tmp/tmpbmtdon7_.d(54): Error: declaration\
    \ expected, not `if`\\n/tmp/tmpbmtdon7_.d(56): Error: declaration expected, not\
    \ `if`\\n/tmp/tmpbmtdon7_.d(58): Error: declaration expected, not `if`\\n/tmp/tmpbmtdon7_.d(60):\
    \ Error: declaration expected, not `if`\\n/tmp/tmpbmtdon7_.d(62): Error: declaration\
    \ expected, not `if`\\n/tmp/tmpbmtdon7_.d(64): Error: declaration expected, not\
    \ `if`\\n/tmp/tmpbmtdon7_.d(66): Error: declaration expected, not `if`\\n/tmp/tmpbmtdon7_.d(68):\
    \ Error: declaration expected, not `if`\\n/tmp/tmpbmtdon7_.d(70): Error: declaration\
    \ expected, not `if`\\n/tmp/tmpbmtdon7_.d(72): Error: declaration expected, not\
    \ `if`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbmtdon7_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long x = 1;\n    long xx = 1;\n    for(int i = 0; i < xs.length; i++)\n \
    \   {\n        result[i] = xs[i] - x;\n        x = xs[i];\n        xx = x * xx;\n\
    \    }\n    result[xs.length] = xx - x;\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu_apif8j.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42856d]\\n??:? void tmpu_apif8j.__unittest_L27_C1()\
    \ [0x428002]\\n??:? void tmpu_apif8j.__modtest() [0x4282ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c64b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430769]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4b5]\\n??:? runModuleUnitTests [0x42c421]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a30]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289b7]\\n??:? _d_run_main [0x428922]\\n??:? main [0x4282ff]\\\
    n??:? __libc_start_main [0x725f9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpilwl4csu.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4292bd]\\n??:? void tmpilwl4csu.__unittest_L70_C1()\
    \ [0x428d52]\\n??:? void tmpilwl4csu.__modtest() [0x42903c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d94b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7b5]\\n??:? runModuleUnitTests [0x42d721]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429707]\\n??:? _d_run_main [0x429672]\\n??:? main [0x42904f]\\\
    n??:? __libc_start_main [0x5ada9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 1;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x * xs[i];\n        x *= xs[i];\n    }\n    result[xs.length] = 1;\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[xs.length + 1];\n    double x = 1;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i] - x\
    \ * xs[i];\n        x *= xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[xs.length + 1];\n    float x = 1;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = xs[i] - x * xs[i];\n        x\
    \ *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2s7fpsay.d(83): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294a5]\\n??:? void tmp2s7fpsay.__unittest_L79_C1()\
    \ [0x428f3a]\\n??:? void tmp2s7fpsay.__modtest() [0x429224]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431bdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c99d]\\n??:? runModuleUnitTests [0x42d909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ef]\\n??:? _d_run_main [0x42985a]\\n??:? main [0x429237]\\\
    n??:? __libc_start_main [0xb1004554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1) * 2];\n\
    \    long x = 1;\n    long y = 1;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        result[i * 2] = x;\n        result[i * 2 + 1] = y;\n        x +=\
    \ (long)xs[i] * y;\n        y *= x;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result = new double[(xs.length\
    \ - 1) * 2];\n    double x = 1;\n    double y = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i * 2] = x;\n        result[i * 2 + 1] = y;\n  \
    \      x += (double)xs[i] * y;\n        y *= x;\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1) * 2];\n    float x = 1;\n    float y = 1;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i * 2] = x;\n \
    \       result[i * 2 + 1] = y;\n        x += (float)xs[i] * y;\n        y *= x;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphd2fvur9.d(22): Error: C style cast illegal, use `cast(long)xs[i]`\\\
    n/tmp/tmphd2fvur9.d(46): Error: C style cast illegal, use `cast(double)xs[i]`\\\
    n/tmp/tmphd2fvur9.d(70): Error: C style cast illegal, use `cast(float)xs[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd2fvur9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpggzl8z4i.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429365]\\n??:? void tmpggzl8z4i.__unittest_L70_C1()\
    \ [0x428dfe]\\n??:? void tmpggzl8z4i.__modtest() [0x4290e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c886]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c85d]\\n??:? runModuleUnitTests [0x42d7c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429828]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297af]\\n??:? _d_run_main [0x42971a]\\n??:? main [0x4290fb]\\\
    n??:? __libc_start_main [0x254a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        ys[i] = xs[i];\n    }\n    for(int\
    \ i = n - 1; i >= 0; --i)\n    {\n        ys[i] = xs[i + 1];\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] ys = new double[n];\n    for(int i = 0; i < n;\
    \ ++i)\n    {\n        ys[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0; --i)\n\
    \    {\n        ys[i] = xs[i + 1];\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ ys = new float[n];\n    for(int i = 0; i < n; ++i)\n    {\n        ys[i] = xs[i];\n\
    \    }\n    for(int i = n - 1; i >= 0; --i)\n    {\n        ys[i] = xs[i + 1];\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqamslp1.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpcqamslp1.d(39): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpcqamslp1.d(63):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqamslp1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] ys = new long[xs.length + 1];\n    ys[0]\
    \ = 1;\n    for (int i = 1; i < xs.length; i++)\n    {\n        ys[i] = ys[i -\
    \ 1] * xs[i];\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] ys = new double[xs.length + 1];\n    ys[0] = 1;\n    for\
    \ (int i = 1; i < xs.length; i++)\n    {\n        ys[i] = ys[i - 1] * xs[i];\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] ys = new float[xs.length + 1];\n    ys[0] = 1;\n    for\
    \ (int i = 1; i < xs.length; i++)\n    {\n        ys[i] = ys[i - 1] * xs[i];\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz17c_b3d.d(77): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293d5]\\n??:? void tmpz17c_b3d.__unittest_L73_C1()\
    \ [0x428e6e]\\n??:? void tmpz17c_b3d.__modtest() [0x429158]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8cd]\\n??:? runModuleUnitTests [0x42d839]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429898]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42981f]\\n??:? _d_run_main [0x42978a]\\n??:? main [0x42916b]\\\
    n??:? __libc_start_main [0x15973554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long n = xs.length;\n    long[] result = new\
    \ long[n];\n    long i;\n    for(i = 0; i < n; ++i)\n        result[i] = xs[i\
    \ + 1] - xs[i];\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkjzngjuc.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285de]\\n??:? long[] tmpkjzngjuc.derivative(long[])\
    \ [0x427eb0]\\n??:? void tmpkjzngjuc.__unittest_L22_C1() [0x427f5b]\\n??:? void\
    \ tmpkjzngjuc.__modtest() [0x4282b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c60b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b49e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430729]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b475]\\n??:? runModuleUnitTests [0x42c3e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428977]\\n??:? _d_run_main [0x4288e2]\\n??:? main [0x4282c3]\\\
    n??:? __libc_start_main [0x42754554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long d = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        d *= xs[i];\n    }\n    long[] result = new long[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n\
    \        d *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double\
    \ d = 1;\n    for(int i = 1; i < xs.length; i++)\n    {\n        d *= xs[i];\n\
    \    }\n    double[] result = new double[xs.length + 1];\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = d;\n        d *= xs[i];\n    }\n\
    \    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float d = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        d *= xs[i];\n    }\n    float[] result = new float[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n\
    \        d *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps6fj_o3c.d(95): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294ad]\\n??:? void tmps6fj_o3c.__unittest_L91_C1()\
    \ [0x428f42]\\n??:? void tmps6fj_o3c.__modtest() [0x42922c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432108]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431be5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c9a5]\\n??:? runModuleUnitTests [0x42d911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298f7]\\n??:? _d_run_main [0x429862]\\n??:? main [0x42923f]\\\
    n??:? __libc_start_main [0xbff2d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long x = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        result[i] = 1;\n\
    \        for(int j = 0; j < i; ++j)\n        {\n            result[i] *= xs[j];\n\
    \        }\n        result[i] *= x;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n    double[]\
    \ result = new double[n];\n    double x = 0;\n    for(int i = 0; i < n; ++i)\n\
    \    {\n        result[i] = 1;\n        for(int j = 0; j < i; ++j)\n        {\n\
    \            result[i] *= xs[j];\n        }\n        result[i] *= x;\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    float\
    \ x = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        result[i] = 1;\n    \
    \    for(int j = 0; j < i; ++j)\n        {\n            result[i] *= xs[j];\n\
    \        }\n        result[i] *= x;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpisz9cuwk.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpisz9cuwk.d(41): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpisz9cuwk.d(67):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpisz9cuwk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1) * 2];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        y = xs[i + 1];\n        result[i] = 1;\n        for(int j = i; j\
    \ < xs.length; j++)\n        {\n            result[i] += xs[j] * y;\n        }\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1) * 2];\n    double\
    \ x = 0;\n    double y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       y = xs[i + 1];\n        result[i] = 1;\n        for(int j = i; j < xs.length;\
    \ j++)\n        {\n            result[i] += xs[j] * y;\n        }\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1) * 2];\n    float x =\
    \ 0;\n    float y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n      \
    \  y = xs[i + 1];\n        result[i] = 1;\n        for(int j = i; j < xs.length;\
    \ j++)\n        {\n            result[i] += xs[j] * y;\n        }\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp6igp0te3.d(20): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42953e]\\n??:? long[] tmp6igp0te3.derivative(long[])\
    \ [0x428af6]\\n??:? void tmp6igp0te3.__unittest_L91_C1() [0x428eb7]\\n??:? void\
    \ tmp6igp0te3.__modtest() [0x42920c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4320e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431bc5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c985]\\n??:? runModuleUnitTests [0x42d8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429950]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298d7]\\n??:? _d_run_main [0x429842]\\n??:? main [0x42921f]\\\
    n??:? __libc_start_main [0x53f34554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  result[0] = 1;\n    for (int i = 1; i < xs.length; i++) \n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work. `derivative([1, 2, 3])` returns `[4, 9, 18]`\
    \ instead of `[4, 12, 20]`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing\
    \ it out. Now it works.\n<|/ c |>\n<| a tags=c#,polynomial-math,math |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpolgw_xix.d(23): Error: declaration expected, not `<`\\n/tmp/tmpolgw_xix.d(26):\
    \ Error: unterminated character constant\\n/tmp/tmpolgw_xix.d(34): Error: semicolon\
    \ expected, not `.`\\n/tmp/tmpolgw_xix.d(34): Error: no identifier for declarator\
    \ `.Collections.Generic`\\n/tmp/tmpolgw_xix.d(35): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmpolgw_xix.d(35): Error: no identifier for declarator `.Linq`\\\
    n/tmp/tmpolgw_xix.d(36): Error: semicolon expected, not `.`\\n/tmp/tmpolgw_xix.d(36):\
    \ Error: no identifier for declarator `.Text`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpolgw_xix.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long x = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        result[i] = xs[i];\n\
    \        x += xs[i];\n    }\n    for(int i = n-1; i >= 0; --i)\n    {\n      \
    \  result[i] = result[i+1];\n        x -= xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] result = new double[n];\n    double x = 0;\n  \
    \  for(int i = 0; i < n; ++i)\n    {\n        result[i] = xs[i];\n        x +=\
    \ xs[i];\n    }\n    for(int i = n-1; i >= 0; --i)\n    {\n        result[i] =\
    \ result[i+1];\n        x -= xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ result = new float[n];\n    float x = 0;\n    for(int i = 0; i < n; ++i)\n \
    \   {\n        result[i] = xs[i];\n        x += xs[i];\n    }\n    for(int i =\
    \ n-1; i >= 0; --i)\n    {\n        result[i] = result[i+1];\n        x -= xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd3hzojep.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpd3hzojep.d(42): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpd3hzojep.d(69):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3hzojep.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    long x = 0;\n    for(int i = 0; i < n; i++) {\n        x += xs[i];\n    \
    \    ys[i] = 1;\n    }\n    for(int i = n - 1; i >= 0; i--) {\n        x += xs[i];\n\
    \        ys[i] = x * xs[i];\n    }\n    return ys;\n}\n</code>\n<|/ a tags=math,c#,polynomial-math,algorithm\
    \ |>\n<| c |>\nThis doesn't seem to work when xs is an array of negative numbers.\
    \ For example: derivative([-1, -2, -3]) = [1, -4, 9] instead of [1, 0, -1]\n<|/\
    \ c |>\n<| c |>\nThis doesn't seem to work when xs is an array of negative numbers.\
    \ For example: derivative([-1, -2, -3]) = [1, -4, 9] instead of [1, 0, -1]\n<|/\
    \ c |>\n<| c |>\nI fixed the problem with negative numbers. I used the absolute\
    \ value of the first element of the array as initial value of x.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't seem to work when xs is an array of negative numbers. For\
    \ example: derivative([-1, -2, -3]) = [1, -4, 9] instead of [1, 0, -1]\n<|/ c\
    \ |>\n<| c |>\nThis doesn't seem to work when xs is an array of negative numbers.\
    \ For example: derivative([-1, -2, -3]) = [1, -4, 9] instead of [1, 0, -1]\n<|/\
    \ c |>\n<| a tags=math,c#,polynomial-math,algorithm |>\n<code>\npublic static\
    \ double CalculateDerivative(double x, double[] coefficients)\n{\n    double derivative\
    \ = 0;\n    for (int i = 0; i < coefficients.Length; i++)\n    {\n        derivative\
    \ += coefficients[i] * Math.Pow(x, i);\n    }\n    return derivative;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work when xs is an array of negative\
    \ numbers. For example: derivative([-1, -2, -3]) = [1, -4, 9] instead of [1, 0,\
    \ -1]\n<|/ c |>\n<| c |>\nThis doesn't seem to work when xs is an array of negative\
    \ numbers. For example: derivative([-1, -2, -3]) = [1, -4, 9] instead of [1, 0,\
    \ -1]\n<|/ c |>\n<| c |>\nThis doesn't seem to work when xs is an array of negative\
    \ numbers. For example: derivative([-1, -2, -3]) = [1, -4, 9] instead of [1, 0,\
    \ -1]\n<|/ c |>\n<| c |>\nThis doesn't seem to work when xs is an array of negative\
    \ numbers. For example: derivative([-1, -2, -3]) = [1, -4, 9] instead of [1, 0,\
    \ -1]\n<|/ c \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmqv1mjun.d(28): Error: declaration expected, not `<`\\n/tmp/tmpmqv1mjun.d(31):\
    \ Error: unterminated character constant\\n/tmp/tmpmqv1mjun.d(34): Error: unterminated\
    \ character constant\\n/tmp/tmpmqv1mjun.d(40): Error: unterminated character constant\\\
    n/tmp/tmpmqv1mjun.d(43): Error: unterminated character constant\\n/tmp/tmpmqv1mjun.d(50):\
    \ Error: declaration expected, not `for`\\n/tmp/tmpmqv1mjun.d(50): Error: no identifier\
    \ for declarator `i`\\n/tmp/tmpmqv1mjun.d(50): Error: declaration expected, not\
    \ `<`\\n/tmp/tmpmqv1mjun.d(50): Error: no identifier for declarator `i`\\n/tmp/tmpmqv1mjun.d(50):\
    \ Error: declaration expected, not `++`\\n/tmp/tmpmqv1mjun.d(53): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqv1mjun.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result -= xs[i - 1];\n    }\n\
    \    return new long[]{result};\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp74grloyh.d(21): Error: found `{` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp74grloyh.d(21): Error: found `}` when expecting\
    \ `;` following statement\\n/tmp/tmp74grloyh.d(21): Deprecation: use `{ }` for\
    \ an empty statement, not `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp74grloyh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        ys[i] = xs[i+1];\n    }\n    for(int\
    \ i = n - 2; i >= 0; --i)\n    {\n        ys[i] = (xs[i+1] - xs[i]) / (xs[i+1]\
    \ - xs[i-1]);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ys = new double[n];\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        ys[i] = xs[i+1];\n    }\n    for(int i =\
    \ n - 2; i >= 0; --i)\n    {\n        ys[i] = (xs[i+1] - xs[i]) / (xs[i+1] - xs[i-1]);\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] ys = new float[n];\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        ys[i] = xs[i+1];\n    }\n    for(int i =\
    \ n - 2; i >= 0; --i)\n    {\n        ys[i] = (xs[i+1] - xs[i]) / (xs[i+1] - xs[i-1]);\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg96nsn34.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpg96nsn34.d(39): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpg96nsn34.d(63):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg96nsn34.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n  \
    \  result[n-1] = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n        result[i]\
    \ = result[i+1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] result = new\
    \ double[n];\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n\
    \    }\n    result[n-1] = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n     \
    \   result[i] = result[i+1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ result = new float[n];\n    for(int i = 0; i < n; i++)\n    {\n        result[i]\
    \ = xs[i];\n    }\n    result[n-1] = 1;\n    for(int i = n-2; i >= 0; i--)\n \
    \   {\n        result[i] = result[i+1] * xs[i];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6zrfyqx8.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp6zrfyqx8.d(40): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp6zrfyqx8.d(65):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zrfyqx8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        ys[i] = xs[i+1];\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] ys = new double[n];\n    for(int i = 0; i < n;\
    \ ++i)\n    {\n        ys[i] = xs[i+1];\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ ys = new float[n];\n    for(int i = 0; i < n; ++i)\n    {\n        ys[i] = xs[i+1];\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmhv92at4.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpmhv92at4.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpmhv92at4.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhv92at4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1];\n    result[xs.length]\
    \ = 1;\n    for(int i = xs.length - 1; i >= 0; i--)\n        result[i] *= xs[i];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hm1r9jm.d(19): Error: cannot implicitly convert expression `xs.length\
    \ - 1LU` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp4hm1r9jm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result];\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = xs[i] - 1;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n        result\
    \ += 1;\n    }\n    double[] result = new double[result];\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result += 1;\n    }\n    float[] result = new float[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjco1hfs.d(21): Error: declaration `tmpjjco1hfs.derivative.result`\
    \ is already defined\\n/tmp/tmpjjco1hfs.d(24): Error: only one index allowed to\
    \ index `long`\\n/tmp/tmpjjco1hfs.d(26): Error: cannot implicitly convert expression\
    \ `result` of type `long` to `long[]`\\n/tmp/tmpjjco1hfs.d(46): Error: cannot\
    \ implicitly convert expression `result` of type `double` to `ulong`\\n/tmp/tmpjjco1hfs.d(46):\
    \ Error: declaration `tmpjjco1hfs.derivative.result` is already defined\\n/tmp/tmpjjco1hfs.d(49):\
    \ Error: only one index allowed to index `double`\\n/tmp/tmpjjco1hfs.d(51): Error:\
    \ cannot implicitly convert expression `result` of type `double` to `double[]`\\\
    n/tmp/tmpjjco1hfs.d(71): Error: cannot implicitly convert expression `result`\
    \ of type `float` to `ulong`\\n/tmp/tmpjjco1hfs.d(71): Error: declaration `tmpjjco1hfs.derivative.result`\
    \ is already defined\\n/tmp/tmpjjco1hfs.d(74): Error: only one index allowed to\
    \ index `float`\\n/tmp/tmpjjco1hfs.d(76): Error: cannot implicitly convert expression\
    \ `result` of type `float` to `float[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjjco1hfs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        result[i] = xs[i+1] - xs[i];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx55jsyll.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpx55jsyll.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i <= xs.length - 1; i++)\n\
    \    {\n        y = xs[i + 1];\n        result[i] = y;\n    }\n    for(int i =\
    \ 0; i <= xs.length - 1; i++)\n    {\n        x = xs[i];\n        result[i] =\
    \ x * result[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length - 1)];\n\
    \    double x = 0;\n    double y = 0;\n    for(int i = 0; i <= xs.length - 1;\
    \ i++)\n    {\n        y = xs[i + 1];\n        result[i] = y;\n    }\n    for(int\
    \ i = 0; i <= xs.length - 1; i++)\n    {\n        x = xs[i];\n        result[i]\
    \ = x * result[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length - 1)];\n\
    \    float x = 0;\n    float y = 0;\n    for(int i = 0; i <= xs.length - 1; i++)\n\
    \    {\n        y = xs[i + 1];\n        result[i] = y;\n    }\n    for(int i =\
    \ 0; i <= xs.length - 1; i++)\n    {\n        x = xs[i];\n        result[i] =\
    \ x * result[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpiswkt0ja.d(20): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4295de]\\n??:? long[] tmpiswkt0ja.derivative(long[])\
    \ [0x428af1]\\n??:? void tmpiswkt0ja.__unittest_L94_C1() [0x428f5b]\\n??:? void\
    \ tmpiswkt0ja.__modtest() [0x4292b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dbbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ca4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431cd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432188]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431c65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ca25]\\n??:? runModuleUnitTests [0x42d991]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4299f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429977]\\n??:? _d_run_main [0x4298e2]\\n??:? main [0x4292c3]\\\
    n??:? __libc_start_main [0x7aa54554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ys[i] = xs[i + 1];\n    }\n  \
    \  return ys;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp20y1pv81.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp20y1pv81.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx5rtp44f.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpx5rtp44f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for (int i = 0; i < n; ++i) {\n        result[i] = xs[i + 1] - xs[i];\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for\
    \ (int i = 0; i < n; ++i) {\n        result[i] = xs[i + 1] - xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for\
    \ (int i = 0; i < n; ++i) {\n        result[i] = xs[i + 1] - xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3rc1_7g0.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp3rc1_7g0.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp3rc1_7g0.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rc1_7g0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        result[i] = xs[i+1] - xs[i] * xs[i] /\
    \ i;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        result[i] = xs[i+1] - xs[i] * xs[i] / i;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for(int i = 0; i < n;\
    \ ++i)\n        result[i] = xs[i+1] - xs[i] * xs[i] / i;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppnjpndlw.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmppnjpndlw.d(33): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmppnjpndlw.d(51):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnjpndlw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n\
    \    \n    for (int i = 0; i < n; i++) {\n        ds[i] = xs[i] - xs[n - i];\n\
    \    }\n    \n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ds = new double[n];\n    \n  \
    \  for (int i = 0; i < n; i++) {\n        ds[i] = xs[i] - xs[n - i];\n    }\n\
    \    \n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] ds = new float[n];\n    \n    for\
    \ (int i = 0; i < n; i++) {\n        ds[i] = xs[i] - xs[n - i];\n    }\n    \n\
    \    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp01nmf0yj.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp01nmf0yj.d(36): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp01nmf0yj.d(57):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01nmf0yj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1];\n        x = x * xs[i + 1];\n    }\n    result[0] = x;\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6bid6xe8.d(25): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bid6xe8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length)+1];\n  \
    \  for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i+1];\n \
    \   }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length)+1];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i+1];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length)+1];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i+1];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpuqs987uj.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4293fe]\\n??:? long[] tmpuqs987uj.derivative(long[])\
    \ [0x428b14]\\n??:? void tmpuqs987uj.__unittest_L73_C1() [0x428d77]\\n??:? void\
    \ tmpuqs987uj.__modtest() [0x4290cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c86e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431af9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c845]\\n??:? runModuleUnitTests [0x42d7b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429797]\\n??:? _d_run_main [0x429702]\\n??:? main [0x4290df]\\\
    n??:? __libc_start_main [0x65398554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppg0i3whe.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428545]\\n??:? void tmppg0i3whe.__unittest_L21_C1()\
    \ [0x427fde]\\n??:? void tmppg0i3whe.__modtest() [0x4282c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c623]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430741]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bf0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b48d]\\n??:? runModuleUnitTests [0x42c3f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a08]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42898f]\\n??:? _d_run_main [0x4288fa]\\n??:? main [0x4282db]\\\
    n??:? __libc_start_main [0x7a20a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x * xs[i];\n        x *= xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[(xs.length - 1)];\n    double x = 1;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - x * xs[i];\n       \
    \ x *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length - 1)];\n\
    \    float x = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x * xs[i];\n        x *= xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvoyyf4nt.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4294be]\\n??:? long[] tmpvoyyf4nt.derivative(long[])\
    \ [0x428af9]\\n??:? void tmpvoyyf4nt.__unittest_L76_C1() [0x428e3b]\\n??:? void\
    \ tmpvoyyf4nt.__modtest() [0x429190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c905]\\n??:? runModuleUnitTests [0x42d871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4298d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429857]\\n??:? _d_run_main [0x4297c2]\\n??:? main [0x4291a3]\\\
    n??:? __libc_start_main [0x21fd2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        y = xs[i];\n        result[i] = y;\n        x = x * y;\n    }\n\
    \    result[xs.length] = 1;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp30_1y55i.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42852d]\\n??:? void tmp30_1y55i.__unittest_L27_C1()\
    \ [0x427fc2]\\n??:? void tmp30_1y55i.__modtest() [0x4282ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c60b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b49e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430729]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b475]\\n??:? runModuleUnitTests [0x42c3e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428977]\\n??:? _d_run_main [0x4288e2]\\n??:? main [0x4282bf]\\\
    n??:? __libc_start_main [0x6559a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long sum = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        sum\
    \ += xs[i];\n        result[i] = sum;\n    }\n    result[xs.length] = 1;\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length + 1)];\n    double sum\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        sum += xs[i];\n\
    \        result[i] = sum;\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length + 1)];\n    float sum = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        sum += xs[i];\n        result[i] = sum;\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyy1u8_w9.d(83): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293ad]\\n??:? void tmpyy1u8_w9.__unittest_L79_C1()\
    \ [0x428e46]\\n??:? void tmpyy1u8_w9.__modtest() [0x429130]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431ae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8a5]\\n??:? runModuleUnitTests [0x42d811]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429870]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297f7]\\n??:? _d_run_main [0x429762]\\n??:? main [0x429143]\\\
    n??:? __libc_start_main [0xf33cd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long x = 0;\n    for(int i = 0; i < n; i++)\n    {\n        d[i] = xs[i];\n\
    \        x = x * xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n \
    \       d[i] = d[i] + x;\n        x = x * xs[i];\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] d = new double[n];\n    double x = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        d[i] = xs[i];\n        x = x * xs[i];\n \
    \   }\n    for(int i = n - 1; i >= 0; i--)\n    {\n        d[i] = d[i] + x;\n\
    \        x = x * xs[i];\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n\
    \    float x = 0;\n    for(int i = 0; i < n; i++)\n    {\n        d[i] = xs[i];\n\
    \        x = x * xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n \
    \       d[i] = d[i] + x;\n        x = x * xs[i];\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp98uiikhi.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp98uiikhi.d(42): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp98uiikhi.d(69):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp98uiikhi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result.intValue()];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result.intValue() / xs.length;\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        result *= xs[i];\n        result += 1;\n    }\n    double[] result\
    \ = new double[result.intValue()];\n    for(int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = result.intValue() / xs.length;\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result += 1;\n    }\n    float[] result = new float[result.intValue()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result.intValue()\
    \ / xs.length;\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5hnannbp.d(21): Error: no property `intValue` for type `long`\\\
    n/tmp/tmp5hnannbp.d(21): Error: declaration `tmp5hnannbp.derivative.result` is\
    \ already defined\\n/tmp/tmp5hnannbp.d(22): Error: no property `length` for type\
    \ `long`\\n/tmp/tmp5hnannbp.d(24): Error: only one index allowed to index `long`\\\
    n/tmp/tmp5hnannbp.d(26): Error: cannot implicitly convert expression `result`\
    \ of type `long` to `long[]`\\n/tmp/tmp5hnannbp.d(46): Error: no property `intValue`\
    \ for type `double`\\n/tmp/tmp5hnannbp.d(46): Error: declaration `tmp5hnannbp.derivative.result`\
    \ is already defined\\n/tmp/tmp5hnannbp.d(47): Error: no property `length` for\
    \ type `double`\\n/tmp/tmp5hnannbp.d(49): Error: only one index allowed to index\
    \ `double`\\n/tmp/tmp5hnannbp.d(51): Error: cannot implicitly convert expression\
    \ `result` of type `double` to `double[]`\\n/tmp/tmp5hnannbp.d(71): Error: no\
    \ property `intValue` for type `float`\\n/tmp/tmp5hnannbp.d(71): Error: declaration\
    \ `tmp5hnannbp.derivative.result` is already defined\\n/tmp/tmp5hnannbp.d(72):\
    \ Error: no property `length` for type `float`\\n/tmp/tmp5hnannbp.d(74): Error:\
    \ only one index allowed to index `float`\\n/tmp/tmp5hnannbp.d(76): Error: cannot\
    \ implicitly convert expression `result` of type `float` to `float[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5hnannbp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++) {\n        x\
    \ = xs[i];\n        y = x * x;\n        d[i] = y;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvhoy2x2l.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvhoy2x2l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i\
    \ - 1] = (long) (xs[i] - x * xs[i - 1]);\n        x = xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[(xs.length - 1)];\n    double x = 0;\n    for(int i = 1;\
    \ i < xs.length; i++)\n    {\n        result[i - 1] = (double) (xs[i] - x * xs[i\
    \ - 1]);\n        x = xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ - 1)];\n    float x = 0;\n    for(int i = 1; i < xs.length; i++)\n    {\n  \
    \      result[i - 1] = (float) (xs[i] - x * xs[i - 1]);\n        x = xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiq499cf3.d(19): Error: C style cast illegal, use `cast(long)(xs[i]\
    \ - x * xs[i - 1])`\\n/tmp/tmpiq499cf3.d(40): Error: C style cast illegal, use\
    \ `cast(double)(xs[i] - x * xs[i - 1])`\\n/tmp/tmpiq499cf3.d(61): Error: C style\
    \ cast illegal, use `cast(float)(xs[i] - x * xs[i - 1])`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq499cf3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        result[i] = xs[i+1] - xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        result[i] = xs[i+1] - xs[i];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        result[i] = xs[i+1] - xs[i];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfbngnll8.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpfbngnll8.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpfbngnll8.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfbngnll8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long d = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d = d * xs[i];\n    }\n    long[] result = new long[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n\
    \        d = d * xs[i];\n    }\n    result[xs.length] = d;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double\
    \ d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d = d * xs[i];\n\
    \    }\n    double[] result = new double[xs.length + 1];\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = d;\n        d = d * xs[i];\n \
    \   }\n    result[xs.length] = d;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float d = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d = d * xs[i];\n    }\n    float[] result = new float[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n\
    \        d = d * xs[i];\n    }\n    result[xs.length] = d;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfg5ljjpv.d(95): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42947d]\\n??:? void tmpfg5ljjpv.__unittest_L91_C1()\
    \ [0x428f16]\\n??:? void tmpfg5ljjpv.__modtest() [0x429200]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4320d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431bb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c975]\\n??:? runModuleUnitTests [0x42d8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429940]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298c7]\\n??:? _d_run_main [0x429832]\\n??:? main [0x429213]\\\
    n??:? __libc_start_main [0xc6c7e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n    long l =\
    \ xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o = xs[14];\n\
    \    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n    long s\
    \ = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n\
    \    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n    long z\
    \ = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n\
    \    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n    long g\
    \ = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n\
    \    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n    long n\
    \ = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n\
    \    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n    long u\
    \ = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n\
    \    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n    long b\
    \ = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n\
    \    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n    long i\
    \ = xs[60];\n    long j = xs[61];\n    long k = xs[\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7nw82vhx.d(79): Error: expression expected, not `unittest`\\\
    n/tmp/tmp7nw82vhx.d(80): Error: found `{` when expecting `,`\\n/tmp/tmp7nw82vhx.d(81):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp7nw82vhx.d(81): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp7nw82vhx.d(81): Error: expression expected,\
    \ not `=`\\n/tmp/tmp7nw82vhx.d(81): Error: found `derivative` when expecting `,`\\\
    n/tmp/tmp7nw82vhx.d(81): Error: expression expected, not `;`\\n/tmp/tmp7nw82vhx.d(83):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp7nw82vhx.d(83): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp7nw82vhx.d(84): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp7nw82vhx.d(85): Error: found `;` when expecting `,`\\n/tmp/tmp7nw82vhx.d(86):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmp7nw82vhx.d(87): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmp7nw82vhx.d(88): Error: expression expected, not\
    \ `}`\\n/tmp/tmp7nw82vhx.d(89): Error: found `void` when expecting `,`\\n/tmp/tmp7nw82vhx.d(89):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp7nw82vhx.d(89): Error: expression\
    \ expected, not `}`\\n/tmp/tmp7nw82vhx.d(89): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmp7nw82vhx.d(89): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmp7nw82vhx.d(89): Error: semicolon expected, not `End of File`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nw82vhx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n    }\n   \
    \ for(int i = n - 2; i >= 0; i--) {\n        result[i] = result[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n    }\n    for(int i =\
    \ n - 2; i >= 0; i--) {\n        result[i] = result[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for(int i = 0; i < n;\
    \ i++) {\n        result[i] = xs[i + 1];\n    }\n    for(int i = n - 2; i >= 0;\
    \ i--) {\n        result[i] = result[i + 1];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaqbowtyx.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpaqbowtyx.d(37): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpaqbowtyx.d(59):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqbowtyx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for (int i\
    \ = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for (int i =\
    \ 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnnijl45u.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4292bd]\\n??:? void tmpnnijl45u.__unittest_L70_C1()\
    \ [0x428d52]\\n??:? void tmpnnijl45u.__modtest() [0x42903c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d94b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7b5]\\n??:? runModuleUnitTests [0x42d721]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429707]\\n??:? _d_run_main [0x429672]\\n??:? main [0x42904f]\\\
    n??:? __libc_start_main [0xd6de3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        ys[i] = xs[i+1] - xs[i] * xs[i]\
    \ / derivative(xs);\n    }\n    return ys;\n}\n</code>\n<|/ a tags=java,math |>\n\
    <| c |>\nThanks for your answer. Could you please explain why you used `long`\
    \ instead of `int`?\n<|/ c |>\n<| c |>\nBecause the result of `xs[i+1] - xs[i]\
    \ * xs[i] / derivative(xs)` will be a long and `long` can hold more values than\
    \ `int` can hold. `int` can hold only `2^31-1` values.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Could you please explain why you used `long` instead of `int`?\n\
    <|/ c |>\n<| c |>\nBecause the result of `xs[i+1] - xs[i] * xs[i] / derivative(xs)`\
    \ will be a long and `long` can hold more values than `int` can hold. `int` can\
    \ hold only `2^31-1` values.\n<|/ c |>\n<| c |>\nThanks for your answer. Could\
    \ you please explain why you used `long` instead of `int`?\n<|/ c |>\n<| a tags=java,math\
    \ |>\nThe formula for calculating the derivative of a polynomial is as follows:\n\
    <code>\nf'(x) = (f(x+h) - f(x)) / h\n</code>\nwhere h is the step size.\nThe code\
    \ below implements this formula.\n<code>\npublic class Polynomial {\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpakjyihjz.d(23): Error: declaration expected, not `<`\\n/tmp/tmpakjyihjz.d(43):\
    \ Error: unterminated character constant\\n/tmp/tmpakjyihjz.d(53): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpakjyihjz.d(54): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpakjyihjz.d(55): Error: declaration expected, not `assert`\\\
    n/tmp/tmpakjyihjz.d(56): Error: declaration expected, not `assert`\\n/tmp/tmpakjyihjz.d(57):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpakjyihjz.d(58): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpakjyihjz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1];\n    }\n    for(int i = xs.length - 1; i >= 0; i--)\n    {\n  \
    \      result[i] = result[i + 1];\n    }\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result[i] * x;\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[(xs.length - 1)];\n    double x = 0;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    for(int\
    \ i = xs.length - 1; i >= 0; i--)\n    {\n        result[i] = result[i + 1];\n\
    \    }\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ result[i] * x;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length - 1)];\n\
    \    float x = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1];\n    }\n    for(int i = xs.length - 1; i >= 0; i--)\n    {\n  \
    \      result[i] = result[i + 1];\n    }\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result[i] * x;\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstugztkw.d(21): Error: cannot implicitly convert expression `xs.length\
    \ - 1LU` of type `ulong` to `int`\\n/tmp/tmpstugztkw.d(49): Error: cannot implicitly\
    \ convert expression `xs.length - 1LU` of type `ulong` to `int`\\n/tmp/tmpstugztkw.d(77):\
    \ Error: cannot implicitly convert expression `xs.length - 1LU` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpstugztkw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i+1] - xs[i];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpn57pjli1.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285d6]\\n??:? long[] tmpn57pjli1.derivative(long[])\
    \ [0x427eaf]\\n??:? void tmpn57pjli1.__unittest_L20_C1() [0x427f4f]\\n??:? void\
    \ tmpn57pjli1.__modtest() [0x4282a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c603]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b496]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430721]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b46d]\\n??:? runModuleUnitTests [0x42c3d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42896f]\\n??:? _d_run_main [0x4288da]\\n??:? main [0x4282b7]\\\
    n??:? __libc_start_main [0x7d3e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length)+1];\n  \
    \  result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length)+1];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length)+1];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjrvd6x_a.d(77): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293d5]\\n??:? void tmpjrvd6x_a.__unittest_L73_C1()\
    \ [0x428e6e]\\n??:? void tmpjrvd6x_a.__modtest() [0x429158]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8cd]\\n??:? runModuleUnitTests [0x42d839]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429898]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42981f]\\n??:? _d_run_main [0x42978a]\\n??:? main [0x42916b]\\\
    n??:? __libc_start_main [0xc5a7d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long x = 0;\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i]\
    \ - x;\n        x = xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] result = new\
    \ double[n];\n    double x = 0;\n    for(int i = 0; i < n; i++)\n    {\n     \
    \   result[i] = xs[i] - x;\n        x = xs[i];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    float x = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i] - x;\n        x = xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8oc43khe.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp8oc43khe.d(37): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp8oc43khe.d(59):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8oc43khe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    long x = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        x += xs[i];\n\
    \        ys[i] = 1;\n    }\n    for(int i = n - 1; i >= 0; --i)\n    {\n     \
    \   x -= xs[i];\n        ys[i] *= x;\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n    double[]\
    \ ys = new double[n];\n    double x = 0;\n    for(int i = 0; i < n; ++i)\n   \
    \ {\n        x += xs[i];\n        ys[i] = 1;\n    }\n    for(int i = n - 1; i\
    \ >= 0; --i)\n    {\n        x -= xs[i];\n        ys[i] *= x;\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] ys = new float[n];\n    float x = 0;\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        x += xs[i];\n        ys[i] = 1;\n    }\n\
    \    for(int i = n - 1; i >= 0; --i)\n    {\n        x -= xs[i];\n        ys[i]\
    \ *= x;\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx0ejxo0e.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpx0ejxo0e.d(42): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpx0ejxo0e.d(69):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0ejxo0e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long n = xs.length;\n    long[] result = new\
    \ long[n];\n    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n  \
    \  long d = xs[3];\n    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n\
    \    long h = xs[7];\n    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n\
    \    long l = xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o\
    \ = xs[14];\n    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n\
    \    long s = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v\
    \ = xs[21];\n    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n\
    \    long z = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c\
    \ = xs[28];\n    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n\
    \    long g = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j\
    \ = xs[35];\n    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n\
    \    long n = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q\
    \ = xs[42];\n    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n\
    \    long u = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x\
    \ = xs[49];\n    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n\
    \    long b = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e\
    \ = xs[56];\n    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n\
    \    long i = xs[60];\n    long j = xs[61];\n    long \nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw2wmg1jj.d(80): Error: no identifier for declarator `long`\\\
    n/tmp/tmpw2wmg1jj.d(80): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2wmg1jj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++) {\n        x\
    \ = xs[i];\n        y = x * x;\n        d[i] = y;\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] d = new double[n];\n    double x = 0;\n    double\
    \ y = 0;\n    for(int i = 0; i < n; i++) {\n        x = xs[i];\n        y = x\
    \ * x;\n        d[i] = y;\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n\
    \    float x = 0;\n    float y = 0;\n    for(int i = 0; i < n; i++) {\n      \
    \  x = xs[i];\n        y = x * x;\n        d[i] = y;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpet76b1sl.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpet76b1sl.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpet76b1sl.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpet76b1sl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        result[i] = xs[i];\n    for(int i = n\
    \ - 1; i >= 0; --i)\n        result[i] = result[i + 1] * xs[i];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] result = new double[n];\n    for(int i = 0; i <\
    \ n; ++i)\n        result[i] = xs[i];\n    for(int i = n - 1; i >= 0; --i)\n \
    \       result[i] = result[i + 1] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ result = new float[n];\n    for(int i = 0; i < n; ++i)\n        result[i] =\
    \ xs[i];\n    for(int i = n - 1; i >= 0; --i)\n        result[i] = result[i +\
    \ 1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk0yfivyk.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpk0yfivyk.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpk0yfivyk.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0yfivyk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n  \
    \      result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpoqem10m6.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4293fe]\\n??:? long[] tmpoqem10m6.derivative(long[])\
    \ [0x428b1f]\\n??:? void tmpoqem10m6.__unittest_L64_C1() [0x428d77]\\n??:? void\
    \ tmpoqem10m6.__modtest() [0x4290cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c86e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431af9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c845]\\n??:? runModuleUnitTests [0x42d7b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429797]\\n??:? _d_run_main [0x429702]\\n??:? main [0x4290df]\\\
    n??:? __libc_start_main [0xed9a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for (int i = 0; i < n; ++i) {\n        result[i] = xs[i + 1];\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzw8ep1i0.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzw8ep1i0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for (int i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for\
    \ (int i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for (int i = 0; i < n;\
    \ i++) {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1scyrpjj.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp1scyrpjj.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp1scyrpjj.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1scyrpjj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[length(xs)];\n    long\
    \ x = 0;\n    long y = 0;\n    for(int i = 0; i < length(xs); i++)\n    {\n  \
    \      y = xs[i];\n        result[i] = 1;\n        for(int j = 0; j < i; j++)\n\
    \        {\n            y += xs[j] * result[j];\n        }\n        result[i]\
    \ = y;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[length(xs)];\n    double x = 0;\n\
    \    double y = 0;\n    for(int i = 0; i < length(xs); i++)\n    {\n        y\
    \ = xs[i];\n        result[i] = 1;\n        for(int j = 0; j < i; j++)\n     \
    \   {\n            y += xs[j] * result[j];\n        }\n        result[i] = y;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[length(xs)];\n    float x = 0;\n   \
    \ float y = 0;\n    for(int i = 0; i < length(xs); i++)\n    {\n        y = xs[i];\n\
    \        result[i] = 1;\n        for(int j = 0; j < i; j++)\n        {\n     \
    \       y += xs[j] * result[j];\n        }\n        result[i] = y;\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbbtezphd.d(15): Error: undefined identifier `length`\\n/tmp/tmpbbtezphd.d(18):\
    \ Error: undefined identifier `length`\\n/tmp/tmpbbtezphd.d(42): Error: undefined\
    \ identifier `length`\\n/tmp/tmpbbtezphd.d(45): Error: undefined identifier `length`\\\
    n/tmp/tmpbbtezphd.d(69): Error: undefined identifier `length`\\n/tmp/tmpbbtezphd.d(72):\
    \ Error: undefined identifier `length`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpbbtezphd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result];\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = xs[i] - 1;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n        result\
    \ += 1;\n    }\n    double[] result = new double[result];\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result += 1;\n    }\n    float[] result = new float[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6lghntdj.d(21): Error: declaration `tmp6lghntdj.derivative.result`\
    \ is already defined\\n/tmp/tmp6lghntdj.d(24): Error: only one index allowed to\
    \ index `long`\\n/tmp/tmp6lghntdj.d(26): Error: cannot implicitly convert expression\
    \ `result` of type `long` to `long[]`\\n/tmp/tmp6lghntdj.d(46): Error: cannot\
    \ implicitly convert expression `result` of type `double` to `ulong`\\n/tmp/tmp6lghntdj.d(46):\
    \ Error: declaration `tmp6lghntdj.derivative.result` is already defined\\n/tmp/tmp6lghntdj.d(49):\
    \ Error: only one index allowed to index `double`\\n/tmp/tmp6lghntdj.d(51): Error:\
    \ cannot implicitly convert expression `result` of type `double` to `double[]`\\\
    n/tmp/tmp6lghntdj.d(71): Error: cannot implicitly convert expression `result`\
    \ of type `float` to `ulong`\\n/tmp/tmp6lghntdj.d(71): Error: declaration `tmp6lghntdj.derivative.result`\
    \ is already defined\\n/tmp/tmp6lghntdj.d(74): Error: only one index allowed to\
    \ index `float`\\n/tmp/tmp6lghntdj.d(76): Error: cannot implicitly convert expression\
    \ `result` of type `float` to `float[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp6lghntdj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for (int i = 0; i < n; i++)\n        result[i] = xs[i + 1];\n    for (int\
    \ i = n - 1; i >= 0; i--)\n        result[i] = result[i + 1] * xs[i];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0i_6m11n.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0i_6m11n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ys[i] = xs[i + 1] - xs[i];\n \
    \   }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ys = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        ys[i] = xs[i + 1] - xs[i];\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] ys = new float[n];\n    for(int i = 0; i < n; i++)\n\
    \    {\n        ys[i] = xs[i + 1] - xs[i];\n    }\n    return ys;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpro58kfcu.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpro58kfcu.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpro58kfcu.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpro58kfcu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  \n    result[0] = xs[0];\n    \n    for (int i = 1; i < xs.length; i++)\n \
    \   {\n        result[i] = result[i-1] * xs[i];\n    }\n    \n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    \n    result[0] = xs[0];\n    \n  \
    \  for (int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    \n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    \n    result[0] = xs[0];\n    \n    for (int i = 1; i < xs.length; i++)\n\
    \    {\n        result[i] = result[i-1] * xs[i];\n    }\n    \n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpafcjfc7f.d(86): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429415]\\n??:? void tmpafcjfc7f.__unittest_L82_C1()\
    \ [0x428eae]\\n??:? void tmpafcjfc7f.__modtest() [0x429198]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42daa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c90d]\\n??:? runModuleUnitTests [0x42d879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4298d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42985f]\\n??:? _d_run_main [0x4297ca]\\n??:? main [0x4291ab]\\\
    n??:? __libc_start_main [0x793c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    ys[0] = 1;\n    for (int i = 1; i < n; i++) {\n        ys[i] = ys[i-1] *\
    \ xs[i];\n    }\n    return ys;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk83s8gze.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpk83s8gze.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n    long l =\
    \ xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o = xs[14];\n\
    \    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n    long s\
    \ = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n\
    \    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n    long z\
    \ = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n\
    \    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n    long g\
    \ = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n\
    \    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n    long n\
    \ = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n\
    \    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n    long u\
    \ = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n\
    \    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n    long b\
    \ = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n\
    \    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n    long i\
    \ = xs[60];\n    long j = xs[61];\n    long k = \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppploe5ex.d(80): Error: expression expected, not `unittest`\\\
    n/tmp/tmppploe5ex.d(81): Error: semicolon expected, not `{`\\n/tmp/tmppploe5ex.d(90):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppploe5ex.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppwgzjz9n.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429365]\\n??:? void tmppwgzjz9n.__unittest_L70_C1()\
    \ [0x428dfe]\\n??:? void tmppwgzjz9n.__modtest() [0x4290e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c886]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c85d]\\n??:? runModuleUnitTests [0x42d7c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429828]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297af]\\n??:? _d_run_main [0x42971a]\\n??:? main [0x4290fb]\\\
    n??:? __libc_start_main [0xa8264554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpag1ji6hx.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429365]\\n??:? void tmpag1ji6hx.__unittest_L70_C1()\
    \ [0x428dfe]\\n??:? void tmpag1ji6hx.__modtest() [0x4290e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c886]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c85d]\\n??:? runModuleUnitTests [0x42d7c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429828]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297af]\\n??:? _d_run_main [0x42971a]\\n??:? main [0x4290fb]\\\
    n??:? __libc_start_main [0x9baf8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i+1] - xs[i];\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[xs.length];\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = xs[i+1] - xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[xs.length];\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result[i] = xs[i+1] - xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpz0x7t4zv.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4293fe]\\n??:? long[] tmpz0x7t4zv.derivative(long[])\
    \ [0x428b1f]\\n??:? void tmpz0x7t4zv.__unittest_L70_C1() [0x428d77]\\n??:? void\
    \ tmpz0x7t4zv.__modtest() [0x4290cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c86e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431af9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c845]\\n??:? runModuleUnitTests [0x42d7b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429797]\\n??:? _d_run_main [0x429702]\\n??:? main [0x4290df]\\\
    n??:? __libc_start_main [0xac2a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += xs[i];\n\
    \        result[i] = sum;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] result = new\
    \ double[n];\n    double sum = 0;\n    for (int i = 0; i < n; i++) {\n       \
    \ sum += xs[i];\n        result[i] = sum;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    float sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += xs[i];\n        result[i] = sum;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcns_1xb6.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpcns_1xb6.d(36): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpcns_1xb6.d(57):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcns_1xb6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long d = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d += xs[i] * xs[i];\n    }\n    long[] result = new long[xs.length\
    \ + 1];\n    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n \
    \       result[i] = result[i-1] + xs[i];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double d = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        d += xs[i] * xs[i];\n\
    \    }\n    double[] result = new double[xs.length + 1];\n    result[0] = d;\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ + xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float d = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d += xs[i] * xs[i];\n    }\n    float[] result = new float[xs.length\
    \ + 1];\n    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n \
    \       result[i] = result[i-1] + xs[i];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5vb0_s78.d(92): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42954d]\\n??:? void tmp5vb0_s78.__unittest_L88_C1()\
    \ [0x428fe2]\\n??:? void tmp5vb0_s78.__modtest() [0x4292cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dbdb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ca6e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431cf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4321a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431c85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ca45]\\n??:? runModuleUnitTests [0x42d9b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429a10]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429997]\\n??:? _d_run_main [0x429902]\\n??:? main [0x4292df]\\\
    n??:? __libc_start_main [0xc9e40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n\
    \    for(int i = 0; i < n; ++i) {\n        ds[i] = xs[i + 1];\n    }\n    return\
    \ ds;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoopxx1bq.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpoopxx1bq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        ys[i] = xs[i] - xs[i-1];\n    }\n \
    \   return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ys = new double[n];\n    for(int\
    \ i = 0; i < n; i++) {\n        ys[i] = xs[i] - xs[i-1];\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] ys = new float[n];\n    for(int i = 0; i < n; i++)\
    \ {\n        ys[i] = xs[i] - xs[i-1];\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpddxggs0f.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpddxggs0f.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpddxggs0f.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpddxggs0f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] result = new double[n];\n    for(int i = 0; i <\
    \ n; ++i)\n        result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for(int i = 0; i < n;\
    \ ++i)\n        result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4m5yszsy.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp4m5yszsy.d(33): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp4m5yszsy.d(51):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4m5yszsy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n\
    \    \n    for (int i = 0; i < n; ++i) {\n        ds[i] = xs[i];\n    }\n    \n\
    \    for (int i = n - 1; i >= 0; --i) {\n        ds[i] = ds[i + 1] * xs[i + 1];\n\
    \    }\n    \n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ds = new double[n];\n    \n  \
    \  for (int i = 0; i < n; ++i) {\n        ds[i] = xs[i];\n    }\n    \n    for\
    \ (int i = n - 1; i >= 0; --i) {\n        ds[i] = ds[i + 1] * xs[i + 1];\n   \
    \ }\n    \n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] ds = new float[n];\n    \n    for\
    \ (int i = 0; i < n; ++i) {\n        ds[i] = xs[i];\n    }\n    \n    for (int\
    \ i = n - 1; i >= 0; --i) {\n        ds[i] = ds[i + 1] * xs[i + 1];\n    }\n \
    \   \n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n   \
    \ xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp3x9oxnd.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpp3x9oxnd.d(40): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpp3x9oxnd.d(65):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp3x9oxnd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxwmxayay.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpxwmxayay.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpxwmxayay.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwmxayay.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += xs[i+1];\n    }\n \
    \   long[] result = new long[result.__len__()];\n    for(int i = 0; i < result.__len__();\
    \ i++)\n    {\n        result[i] = result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result += xs[i+1];\n    }\n    double[] result = new double[result.__len__()];\n\
    \    for(int i = 0; i < result.__len__(); i++)\n    {\n        result[i] = result;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n        result += xs[i+1];\n    }\n    float[]\
    \ result = new float[result.__len__()];\n    for(int i = 0; i < result.__len__();\
    \ i++)\n    {\n        result[i] = result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe4d697xf.d(21): Error: no property `__len__` for type `long`\\\
    n/tmp/tmpe4d697xf.d(21): Error: declaration `tmpe4d697xf.derivative.result` is\
    \ already defined\\n/tmp/tmpe4d697xf.d(22): Error: no property `__len__` for type\
    \ `long`\\n/tmp/tmpe4d697xf.d(24): Error: only one index allowed to index `long`\\\
    n/tmp/tmpe4d697xf.d(26): Error: cannot implicitly convert expression `result`\
    \ of type `long` to `long[]`\\n/tmp/tmpe4d697xf.d(46): Error: no property `__len__`\
    \ for type `double`\\n/tmp/tmpe4d697xf.d(46): Error: declaration `tmpe4d697xf.derivative.result`\
    \ is already defined\\n/tmp/tmpe4d697xf.d(47): Error: no property `__len__` for\
    \ type `double`\\n/tmp/tmpe4d697xf.d(49): Error: only one index allowed to index\
    \ `double`\\n/tmp/tmpe4d697xf.d(51): Error: cannot implicitly convert expression\
    \ `result` of type `double` to `double[]`\\n/tmp/tmpe4d697xf.d(71): Error: no\
    \ property `__len__` for type `float`\\n/tmp/tmpe4d697xf.d(71): Error: declaration\
    \ `tmpe4d697xf.derivative.result` is already defined\\n/tmp/tmpe4d697xf.d(72):\
    \ Error: no property `__len__` for type `float`\\n/tmp/tmpe4d697xf.d(74): Error:\
    \ only one index allowed to index `float`\\n/tmp/tmpe4d697xf.d(76): Error: cannot\
    \ implicitly convert expression `result` of type `float` to `float[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4d697xf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i) {\n        result[i] = xs[i] - xs[n - i];\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpirstrxqj.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpirstrxqj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp9e0yfwm4.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285d6]\\n??:? long[] tmp9e0yfwm4.derivative(long[])\
    \ [0x427eaf]\\n??:? void tmp9e0yfwm4.__unittest_L20_C1() [0x427f4f]\\n??:? void\
    \ tmp9e0yfwm4.__modtest() [0x4282a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c603]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b496]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430721]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b46d]\\n??:? runModuleUnitTests [0x42c3d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42896f]\\n??:? _d_run_main [0x4288da]\\n??:? main [0x4282b7]\\\
    n??:? __libc_start_main [0xc5ea5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result -= xs[i+1];\n    }\n \
    \   long[] result = new long[result.__len__()];\n    for(int i = 0; i < result.__len__();\
    \ i++)\n    {\n        result[i] = result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result -= xs[i+1];\n    }\n    double[] result = new double[result.__len__()];\n\
    \    for(int i = 0; i < result.__len__(); i++)\n    {\n        result[i] = result;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n        result -= xs[i+1];\n    }\n    float[]\
    \ result = new float[result.__len__()];\n    for(int i = 0; i < result.__len__();\
    \ i++)\n    {\n        result[i] = result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5q0a7qek.d(21): Error: no property `__len__` for type `long`\\\
    n/tmp/tmp5q0a7qek.d(21): Error: declaration `tmp5q0a7qek.derivative.result` is\
    \ already defined\\n/tmp/tmp5q0a7qek.d(22): Error: no property `__len__` for type\
    \ `long`\\n/tmp/tmp5q0a7qek.d(24): Error: only one index allowed to index `long`\\\
    n/tmp/tmp5q0a7qek.d(26): Error: cannot implicitly convert expression `result`\
    \ of type `long` to `long[]`\\n/tmp/tmp5q0a7qek.d(46): Error: no property `__len__`\
    \ for type `double`\\n/tmp/tmp5q0a7qek.d(46): Error: declaration `tmp5q0a7qek.derivative.result`\
    \ is already defined\\n/tmp/tmp5q0a7qek.d(47): Error: no property `__len__` for\
    \ type `double`\\n/tmp/tmp5q0a7qek.d(49): Error: only one index allowed to index\
    \ `double`\\n/tmp/tmp5q0a7qek.d(51): Error: cannot implicitly convert expression\
    \ `result` of type `double` to `double[]`\\n/tmp/tmp5q0a7qek.d(71): Error: no\
    \ property `__len__` for type `float`\\n/tmp/tmp5q0a7qek.d(71): Error: declaration\
    \ `tmp5q0a7qek.derivative.result` is already defined\\n/tmp/tmp5q0a7qek.d(72):\
    \ Error: no property `__len__` for type `float`\\n/tmp/tmp5q0a7qek.d(74): Error:\
    \ only one index allowed to index `float`\\n/tmp/tmp5q0a7qek.d(76): Error: cannot\
    \ implicitly convert expression `result` of type `float` to `float[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5q0a7qek.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for (int i = 0; i < n; ++i) {\n        result[i] = xs[i] - xs[n - i];\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for\
    \ (int i = 0; i < n; ++i) {\n        result[i] = xs[i] - xs[n - i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for\
    \ (int i = 0; i < n; ++i) {\n        result[i] = xs[i] - xs[n - i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb6g4mpxq.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpb6g4mpxq.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpb6g4mpxq.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6g4mpxq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsi7karbi.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4292bd]\\n??:? void tmpsi7karbi.__unittest_L70_C1()\
    \ [0x428d52]\\n??:? void tmpsi7karbi.__modtest() [0x42903c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d94b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7b5]\\n??:? runModuleUnitTests [0x42d721]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429707]\\n??:? _d_run_main [0x429672]\\n??:? main [0x42904f]\\\
    n??:? __libc_start_main [0x3afdb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ys[i] = xs[i+1] - xs[i] * xs[i]\
    \ / i;\n    }\n    return ys;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpku8v_m21.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpku8v_m21.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long[] p = new long[n];\n    long s = 0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        s[i] = xs[i];\n        p[i] = 1;\n    }\n    for(int i = n - 1;\
    \ i >= 0; i--)\n    {\n        for(int j = 0; j < i; j++)\n        {\n       \
    \     long t = s[j] * p[j];\n            s[j] = t;\n            p[j] = p[j] -\
    \ t;\n        }\n        s[i] = s[i];\n        s[i] = s[i] + p[i];\n    }\n  \
    \  return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n  \
    \  >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] d = new double[n];\n    double[]\
    \ p = new double[n];\n    double s = 0;\n    for(int i = 0; i < n; i++)\n    {\n\
    \        s[i] = xs[i];\n        p[i] = 1;\n    }\n    for(int i = n - 1; i >=\
    \ 0; i--)\n    {\n        for(int j = 0; j < i; j++)\n        {\n            double\
    \ t = s[j] * p[j];\n            s[j] = t;\n            p[j] = p[j] - t;\n    \
    \    }\n        s[i] = s[i];\n        s[i] = s[i] + p[i];\n    }\n    return d;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] d = new float[n];\n    float[] p = new float[n];\n\
    \    float s = 0;\n    for(int i = 0; i < n; i++)\n    {\n        s[i] = xs[i];\n\
    \        p[i] = 1;\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n      \
    \  for(int j = 0; j < i; j++)\n        {\n            float t = s[j] * p[j];\n\
    \            s[j] = t;\n            p[j] = p[j] - t;\n        }\n        s[i]\
    \ = s[i];\n        s[i] = s[i] + p[i];\n    }\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\nunittest\n{\n  \
    \  alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprfr3xyus.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfr3xyus.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d *= xs[i];\n    }\n    long[] result = new long[xs.length\
    \ + 1];\n    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n \
    \       result[i] = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double d = 1;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n \
    \   double[] result = new double[xs.length + 1];\n    result[0] = d;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n \
    \   result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa22cvle4.d(92): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpa22cvle4.__unittest_L88_C1()\
    \ [0x428f72]\\n??:? void tmpa22cvle4.__modtest() [0x42925c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432138]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431c15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c9d5]\\n??:? runModuleUnitTests [0x42d941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4299a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429927]\\n??:? _d_run_main [0x429892]\\n??:? main [0x42926f]\\\
    n??:? __libc_start_main [0xe3f3a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long sum = 0;\n    for(int i = 0; i < xs.length; i++) \n    {\n        sum\
    \ += xs[i];\n        result[i] = sum;\n    }\n    result[xs.length] = 1;\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[xs.length + 1];\n    double sum =\
    \ 0;\n    for(int i = 0; i < xs.length; i++) \n    {\n        sum += xs[i];\n\
    \        result[i] = sum;\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[xs.length + 1];\n    float sum = 0;\n    for(int i = 0; i\
    \ < xs.length; i++) \n    {\n        sum += xs[i];\n        result[i] = sum;\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvfys61kk.d(83): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293ad]\\n??:? void tmpvfys61kk.__unittest_L79_C1()\
    \ [0x428e46]\\n??:? void tmpvfys61kk.__modtest() [0x429130]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431ae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8a5]\\n??:? runModuleUnitTests [0x42d811]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429870]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297f7]\\n??:? _d_run_main [0x429762]\\n??:? main [0x429143]\\\
    n??:? __libc_start_main [0xd0dda554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        result[i] = xs[i] - xs[n - i];\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++) {\n        result[i] = xs[i] - xs[n - i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for(int i = 0; i < n;\
    \ i++) {\n        result[i] = xs[i] - xs[n - i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp54ttwcj0.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp54ttwcj0.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp54ttwcj0.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54ttwcj0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for (int i\
    \ = 0; i < result.length; i++)\n        result[i] = xs[i + 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1)];\n    for (int i = 0; i < result.length;\
    \ i++)\n        result[i] = xs[i + 1];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2k5ytqut.d(68): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4292bd]\\n??:? void tmp2k5ytqut.__unittest_L64_C1()\
    \ [0x428d52]\\n??:? void tmp2k5ytqut.__modtest() [0x42903c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d94b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7b5]\\n??:? runModuleUnitTests [0x42d721]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429707]\\n??:? _d_run_main [0x429672]\\n??:? main [0x42904f]\\\
    n??:? __libc_start_main [0x83637554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++) {\n        x\
    \ = xs[i];\n        y = x * x;\n        result[i] = y;\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] result = new double[n];\n    double x = 0;\n  \
    \  double y = 0;\n    for(int i = 0; i < n; i++) {\n        x = xs[i];\n     \
    \   y = x * x;\n        result[i] = y;\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    float x = 0;\n    float y = 0;\n    for(int\
    \ i = 0; i < n; i++) {\n        x = xs[i];\n        y = x * x;\n        result[i]\
    \ = y;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpim5b1hca.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpim5b1hca.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpim5b1hca.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpim5b1hca.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] d = new long[(xs.length + 1)];\n    long\
    \ sum = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        sum += xs[i];\n\
    \        d[i] = sum;\n    }\n    d[xs.length] = 1;\n    return d;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] d =\
    \ new double[(xs.length + 1)];\n    double sum = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        sum += xs[i];\n        d[i] = sum;\n    }\n    d[xs.length]\
    \ = 1;\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] d = new float[(xs.length + 1)];\n    float sum = 0;\n \
    \   for (int i = 0; i < xs.length; i++)\n    {\n        sum += xs[i];\n      \
    \  d[i] = sum;\n    }\n    d[xs.length] = 1;\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphid9nngo.d(83): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293ad]\\n??:? void tmphid9nngo.__unittest_L79_C1()\
    \ [0x428e46]\\n??:? void tmphid9nngo.__modtest() [0x429130]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431ae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8a5]\\n??:? runModuleUnitTests [0x42d811]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429870]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297f7]\\n??:? _d_run_main [0x429762]\\n??:? main [0x429143]\\\
    n??:? __libc_start_main [0x3d07c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp6jbem2s8.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285ce]\\n??:? long[] tmp6jbem2s8.derivative(long[])\
    \ [0x427ea4]\\n??:? void tmp6jbem2s8.__unittest_L23_C1() [0x427f47]\\n??:? void\
    \ tmp6jbem2s8.__modtest() [0x42829c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5fb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b48e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430719]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b465]\\n??:? runModuleUnitTests [0x42c3d1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428967]\\n??:? _d_run_main [0x4288d2]\\n??:? main [0x4282af]\\\
    n??:? __libc_start_main [0xbd954554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    long\
    \ x = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i];\n\
    \        x += xs[i];\n    }\n    for(int i = xs.length - 1; i >= 0; i--)\n   \
    \ {\n        result[i] = result[i] / x;\n        x -= xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length];\n    double x = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i];\n        x += xs[i];\n    }\n    for(int\
    \ i = xs.length - 1; i >= 0; i--)\n    {\n        result[i] = result[i] / x;\n\
    \        x -= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length];\n   \
    \ float x = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i];\n        x += xs[i];\n    }\n    for(int i = xs.length - 1; i >= 0;\
    \ i--)\n    {\n        result[i] = result[i] / x;\n        x -= xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcfesf0g9.d(22): Error: cannot implicitly convert expression `xs.length\
    \ - 1LU` of type `ulong` to `int`\\n/tmp/tmpcfesf0g9.d(48): Error: cannot implicitly\
    \ convert expression `xs.length - 1LU` of type `ulong` to `int`\\n/tmp/tmpcfesf0g9.d(74):\
    \ Error: cannot implicitly convert expression `xs.length - 1LU` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfesf0g9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long d0 = 1;\n    long dn = 1;\n    for (int i = 1; i < n; i++) {\n     \
    \   d[i] = d0;\n        d0 = dn;\n        dn = d[i] * xs[i];\n    }\n    return\
    \ d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] d = new double[n];\n    double d0 = 1;\n    double\
    \ dn = 1;\n    for (int i = 1; i < n; i++) {\n        d[i] = d0;\n        d0 =\
    \ dn;\n        dn = d[i] * xs[i];\n    }\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ d = new float[n];\n    float d0 = 1;\n    float dn = 1;\n    for (int i = 1;\
    \ i < n; i++) {\n        d[i] = d0;\n        d0 = dn;\n        dn = d[i] * xs[i];\n\
    \    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpizftlexg.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpizftlexg.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpizftlexg.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizftlexg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        y = xs[i];\n        result[i] = 1;\n        for(int j = i; j < xs.length;\
    \ j++)\n        {\n            x += (j - i) * xs[j];\n            result[i] =\
    \ result[i] * y;\n        }\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length - 1)];\n\
    \    double x = 0;\n    double y = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        y = xs[i];\n        result[i] = 1;\n        for(int j = i; j <\
    \ xs.length; j++)\n        {\n            x += (j - i) * xs[j];\n            result[i]\
    \ = result[i] * y;\n        }\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ - 1)];\n    float x = 0;\n    float y = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        y = xs[i];\n        result[i] = 1;\n        for(int j =\
    \ i; j < xs.length; j++)\n        {\n            x += (j - i) * xs[j];\n     \
    \       result[i] = result[i] * y;\n        }\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpdnqtxnk8.d(21): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42962e]\\n??:? long[] tmpdnqtxnk8.derivative(long[])\
    \ [0x428b29]\\n??:? void tmpdnqtxnk8.__unittest_L94_C1() [0x428fa7]\\n??:? void\
    \ tmpdnqtxnk8.__modtest() [0x4292fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ca9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431d29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4321d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431cb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ca75]\\n??:? runModuleUnitTests [0x42d9e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429a40]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4299c7]\\n??:? _d_run_main [0x429932]\\n??:? main [0x42930f]\\\
    n??:? __libc_start_main [0xf69db554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++){\n        x\
    \ = xs[i];\n        y = x * x;\n        result[i] = y;\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] result = new double[n];\n    double x = 0;\n  \
    \  double y = 0;\n    for(int i = 0; i < n; i++){\n        x = xs[i];\n      \
    \  y = x * x;\n        result[i] = y;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ result = new float[n];\n    float x = 0;\n    float y = 0;\n    for(int i =\
    \ 0; i < n; i++){\n        x = xs[i];\n        y = x * x;\n        result[i] =\
    \ y;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptlq5b25h.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmptlq5b25h.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmptlq5b25h.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlq5b25h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++) \n   \
    \ {\n        y = xs[i] * x;\n        result[i] = y;\n        x = y;\n    }\n \
    \   result[xs.length] = x;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzz8l0res.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428525]\\n??:? void tmpzz8l0res.__unittest_L27_C1()\
    \ [0x427fbe]\\n??:? void tmpzz8l0res.__modtest() [0x4282a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c603]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b496]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430721]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b46d]\\n??:? runModuleUnitTests [0x42c3d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42896f]\\n??:? _d_run_main [0x4288da]\\n??:? main [0x4282bb]\\\
    n??:? __libc_start_main [0x99cde554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 0;\n    for(int i = 0; i < xs.length; i++){\n        result[i] = xs[i];\n\
    \        x += xs[i];\n    }\n    result[xs.length] = 1;\n    for(int i = xs.length\
    \ - 1; i >= 0; i--){\n        result[i] = result[i] * x;\n        x -= xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[xs.length + 1];\n    double x = 0;\n\
    \    for(int i = 0; i < xs.length; i++){\n        result[i] = xs[i];\n       \
    \ x += xs[i];\n    }\n    result[xs.length] = 1;\n    for(int i = xs.length -\
    \ 1; i >= 0; i--){\n        result[i] = result[i] * x;\n        x -= xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[xs.length + 1];\n    float x = 0;\n\
    \    for(int i = 0; i < xs.length; i++){\n        result[i] = xs[i];\n       \
    \ x += xs[i];\n    }\n    result[xs.length] = 1;\n    for(int i = xs.length -\
    \ 1; i >= 0; i--){\n        result[i] = result[i] * x;\n        x -= xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvwn819uk.d(22): Error: cannot implicitly convert expression `xs.length\
    \ - 1LU` of type `ulong` to `int`\\n/tmp/tmpvwn819uk.d(47): Error: cannot implicitly\
    \ convert expression `xs.length - 1LU` of type `ulong` to `int`\\n/tmp/tmpvwn819uk.d(72):\
    \ Error: cannot implicitly convert expression `xs.length - 1LU` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwn819uk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n    long l =\
    \ xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o = xs[14];\n\
    \    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n    long s\
    \ = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n\
    \    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n    long z\
    \ = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n\
    \    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n    long g\
    \ = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n\
    \    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n    long n\
    \ = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n\
    \    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n    long u\
    \ = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n\
    \    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n    long b\
    \ = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n\
    \    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n    long i\
    \ = xs[60];\n    long j = xs[61];\n    long k = \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6cn70ud.d(80): Error: expression expected, not `unittest`\\\
    n/tmp/tmpt6cn70ud.d(81): Error: semicolon expected, not `{`\\n/tmp/tmpt6cn70ud.d(90):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6cn70ud.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long x = 0;\n    for(int i = 0; i < n; i++) {\n        d[i] = 1;\n      \
    \  for(int j = 0; j < n; j++) {\n            x += xs[j] * d[j];\n        }\n \
    \   }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n   \
    \ xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] d = new double[n];\n    double\
    \ x = 0;\n    for(int i = 0; i < n; i++) {\n        d[i] = 1;\n        for(int\
    \ j = 0; j < n; j++) {\n            x += xs[j] * d[j];\n        }\n    }\n   \
    \ return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] d = new float[n];\n    float x = 0;\n    for(int i\
    \ = 0; i < n; i++) {\n        d[i] = 1;\n        for(int j = 0; j < n; j++) {\n\
    \            x += xs[j] * d[j];\n        }\n    }\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdoqv56t8.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpdoqv56t8.d(38): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpdoqv56t8.d(61):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdoqv56t8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long n = xs.length;\n    long[] ys = new long[n];\n\
    \    long k = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        long x = xs[i];\n\
    \        long y = 1;\n        for(int j = i; j < n; ++j)\n        {\n        \
    \    y += xs[j] * ys[j];\n        }\n        ys[k] = y;\n        ++k;\n    }\n\
    \    return ys;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not\
    \ the correct answer to the question. He wants to find the derivative of a polynomial\
    \ given its coefficients.\n<|/ c |>\n<| c |>\nThe question was \"how do I find\
    \ the derivative of a polynomial given its coefficients?\" The answer was \"use\
    \ the derivative function\". The code I posted is just a demonstration of how\
    \ to find the derivative of a polynomial given its coefficients.\n<|/ c |>\n<|\
    \ c |>\nThe question was \"how do I find the derivative of a polynomial given\
    \ its coefficients?\" The answer was \"use the derivative function\". The code\
    \ I posted is just a demonstration of how to find the derivative of a polynomial\
    \ given its coefficients.\n<|/ c |>\n<| c |>\nThe question was \"how do I find\
    \ the derivative of a polynomial given its coefficients?\" The answer was \"use\
    \ the derivative function\". The code I posted is just a demonstration of how\
    \ to find the derivative of a polynomial given its coefficients.\n<|/ c |>\n<|\
    \ c |>\nThe question was \"how do I find the derivative of a polynomial given\
    \ its coefficients?\" The answer was \"use the derivative function\". The code\
    \ I posted is just a demonstration of how to find the derivative of a polynomial\
    \ given its coefficients.\n<|/ c |>\n<| a tags=c++,algorithm |>\nI wrote a program\
    \ to find the derivative of a polynomial given its coefficients. I used the derivative\
    \ function from my previous answer to this question. \n<code>\n#include <iostream>\n\
    #include <vector>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_aasnzxt.d(31): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_aasnzxt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1];\n    result[xs.length]\
    \ = 1;\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpgxuymfti.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285ce]\\n??:? long[] tmpgxuymfti.derivative(long[])\
    \ [0x427ea4]\\n??:? void tmpgxuymfti.__unittest_L21_C1() [0x427f47]\\n??:? void\
    \ tmpgxuymfti.__modtest() [0x42829c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5fb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b48e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430719]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b465]\\n??:? runModuleUnitTests [0x42c3d1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428967]\\n??:? _d_run_main [0x4288d2]\\n??:? main [0x4282af]\\\
    n??:? __libc_start_main [0x4b111554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x *= xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    double x = 1;\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = xs[i] - x;\n        x *= xs[i];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    float x = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x *= xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppxfjqroq.d(83): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429445]\\n??:? void tmppxfjqroq.__unittest_L79_C1()\
    \ [0x428ede]\\n??:? void tmppxfjqroq.__modtest() [0x4291c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4320a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c93d]\\n??:? runModuleUnitTests [0x42d8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42988f]\\n??:? _d_run_main [0x4297fa]\\n??:? main [0x4291db]\\\
    n??:? __libc_start_main [0xf6b93554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long x = 0;\n    for(int i = 0; i < n; i++) {\n        x = xs[i];\n     \
    \   result[i] = 1;\n        for(int j = 1; j < n; j++) {\n            result[i]\
    \ += xs[j] * result[j - 1];\n        }\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    double x = 0;\n    for(int i = 0; i\
    \ < n; i++) {\n        x = xs[i];\n        result[i] = 1;\n        for(int j =\
    \ 1; j < n; j++) {\n            result[i] += xs[j] * result[j - 1];\n        }\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    float\
    \ x = 0;\n    for(int i = 0; i < n; i++) {\n        x = xs[i];\n        result[i]\
    \ = 1;\n        for(int j = 1; j < n; j++) {\n            result[i] += xs[j] *\
    \ result[j - 1];\n        }\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgmu5dwv6.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpgmu5dwv6.d(39): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpgmu5dwv6.d(63):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmu5dwv6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n        result[i] = xs[i + 1] - xs[i];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0hr449ti.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42852d]\\n??:? void tmp0hr449ti.__unittest_L20_C1()\
    \ [0x427fc2]\\n??:? void tmp0hr449ti.__modtest() [0x4282ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c60b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b49e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430729]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b475]\\n??:? runModuleUnitTests [0x42c3e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428977]\\n??:? _d_run_main [0x4288e2]\\n??:? main [0x4282bf]\\\
    n??:? __libc_start_main [0xd5381554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long sum = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        sum\
    \ += xs[i];\n        result[i] = sum;\n    }\n    result[xs.length] = 1;\n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe `derivative` function does\
    \ not work as intended. `derivative([3, 1, 2, 4, 5])` returns `[1, 4, 12, 20]`\
    \ instead of `[1, 4, 12, 20]`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a tags=java,polynomial-math,math |>\n<code>\n\
    public class Polynomial {\n    private int[] coefficients;\n    private int degree;\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkrgcdwtg.d(25): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkrgcdwtg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long d = 0;\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        y = xs[i];\n        z = i;\n        d = 1;\n        while(y !=\
    \ 0)\n        {\n            d *= z;\n            y /= z;\n            z--;\n\
    \        }\n        result += d;\n    }\n    long[] result = new long[result.intValue()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result.intValue()\
    \ * i;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ code doesn't work. `derivative([1, 2, 3])` returns `[4, 3, 0]` instead of `[4,\
    \ 6, 3]`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/\
    \ c |>\n<| a tags=math,algorithm,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] a = {1, 2, 3, 4, 5};\n    int[] b = {1, 2, 3, 4, 5};\n  \
    \  int[] c = {1, 2, 3, 4, 5};\n    int[] d = {1, 2, 3, 4, 5};\n    int[] e = {1,\
    \ 2, 3, 4, 5};\n    int[] f = {1, 2, 3, 4, 5};\n    int[] g = {1, 2, 3, 4, 5};\n\
    \    int[] h = {1, 2, 3, 4, 5};\n    int[] i = {1, 2, 3, 4, 5};\n    int[] j =\
    \ {1, 2, 3, 4, 5};\n    int[] k = {1, 2, 3, 4, 5};\n    int[] l = {1, 2, 3, 4,\
    \ 5};\n    int[] m = {1, 2, 3, 4, 5};\n    int[] n = {1, 2, 3, 4, 5};\n    int[]\
    \ o = {1, 2, 3, 4, 5};\n    int[] p = {1, 2, 3, 4, 5};\n    int[] q = {1, 2, 3,\
    \ 4, 5};\n    int[] r = {1, 2, 3, 4, 5};\n    int[] s = {1, 2, 3, 4, 5};\n   \
    \ int[] t = {1, 2, 3, 4, 5};\n    int[] u = {1, 2, 3, 4, 5};\n    int[] v = {1,\
    \ 2, 3, 4, 5};\n    int[] w = {1, 2, 3, 4, 5};\n    int[] x = {1, 2, 3, 4, 5};\n\
    \    int[] y = {1, 2, 3, 4, 5};\n    int[] z = {1, 2, 3, 4, 5};\n    int[] a1\
    \ = {1, 2, 3, 4, 5};\n    int[] b1 = {1, 2, 3, 4, 5};\n    int[] c1 = {1, 2, 3,\
    \ 4, 5};\n    int[] d1 = {1, 2, 3, 4, 5};\n    int[] e1 = {1, 2, 3, 4, 5};\n \
    \   int[] \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp73er6jd9.d(40): Error: declaration expected, not `<`\\n/tmp/tmp73er6jd9.d(43):\
    \ Error: unterminated character constant\\n/tmp/tmp73er6jd9.d(83): Error: no identifier\
    \ for declarator `int[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp73er6jd9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n\
    \    long d = 0;\n    for (int i = 0; i < n; i++)\n    {\n        ds[i] = 1;\n\
    \        d += xs[i];\n        for (int j = i; j < n; j++)\n        {\n       \
    \     ds[i] *= xs[j];\n            d += xs[j];\n        }\n    }\n    return ds;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] ds = new double[n];\n    double d = 0;\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        ds[i] = 1;\n        d += xs[i];\n  \
    \      for (int j = i; j < n; j++)\n        {\n            ds[i] *= xs[j];\n \
    \           d += xs[j];\n        }\n    }\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ ds = new float[n];\n    float d = 0;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        ds[i] = 1;\n        d += xs[i];\n        for (int j = i; j < n; j++)\n\
    \        {\n            ds[i] *= xs[j];\n            d += xs[j];\n        }\n\
    \    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2na2s4ca.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp2na2s4ca.d(42): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp2na2s4ca.d(69):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2na2s4ca.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long x = 1;\n    long xx = 1;\n    long xxx = 1;\n    long xxxxx = 1;\n \
    \   long xxxx = 1;\n    long xxxxx = 1;\n    long xxxxxxx = 1;\n    long xxxxxxx\
    \ = 1;\n    long xxxxxxxx = 1;\n    long xxxxxxxxx = 1;\n    long xxxxxxxxxx =\
    \ 1;\n    long xxxxxxxxxxx = 1;\n    long xxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxx = 1;\n    long\
    \ xxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxx = 1;\n\
    \    long xxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxx = 1;\n \
    \   long xxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxx = 1;\n\
    \    long xxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\
    \ = 1;\n    long xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1;\n    long\
    \ \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp698o5rvg.d(63): Error: no identifier for declarator `long`\\\
    n/tmp/tmp698o5rvg.d(63): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp698o5rvg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo5xmjk6q.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpo5xmjk6q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        y = xs[i + 1];\n        result[i] = 1;\n        for(int j = i; j\
    \ < xs.length; j++)\n        {\n            x += xs[j];\n            result[i]\
    \ = result[i] * x / (j + 1);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error \"Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ -1\" at line \"result[i] = result[i] * x / (j + 1);\"\n<|/ c |>\n<| c |>\nI\
    \ edited my answer, I forgot to add one line in the for loop. Now it should work.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ \"Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: -1\"\
    \ at line \"result[i] = result[i] * x / (j + 1);\"\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I forgot to add one line in the for loop. Now it should work.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ \"Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: -1\"\
    \ at line \"result[i] = result[i] * x / (j + 1);\"\n<|/ c |>\n<| a dscore=1 |>\n\
    I wrote a Java program to solve this problem. Hope it helps.\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwv8qjkg5.d(30): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwv8qjkg5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxf6yd1di.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpxf6yd1di.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpxf6yd1di.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxf6yd1di.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result];\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = xs[i] - 1;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=java,math |>\n<| c |>\nI like your answer, but I think it would be better\
    \ to explain why this works.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/\
    \ c |>\n<| c |>\nI like your answer, but I think it would be better to explain\
    \ why this works.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<|\
    \ a tags=java,math |>\n<code>\nimport java.util.Scanner;\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpda_1dy_0.d(28): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpda_1dy_0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long x = 1;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x = xs[i] * x;\n    }\n    result[xs.length] = 1;\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length + 1)];\n    double x =\
    \ 1;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i]\
    \ - x;\n        x = xs[i] * x;\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length + 1)];\n    float x = 1;\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - x;\n        x = xs[i]\
    \ * x;\n    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptlmc_b2w.d(83): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429445]\\n??:? void tmptlmc_b2w.__unittest_L79_C1()\
    \ [0x428ede]\\n??:? void tmptlmc_b2w.__modtest() [0x4291c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4320a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c93d]\\n??:? runModuleUnitTests [0x42d8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42988f]\\n??:? _d_run_main [0x4297fa]\\n??:? main [0x4291db]\\\
    n??:? __libc_start_main [0xcc433554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        result[i] = xs[i + 1];\n    }\n\
    \    result[n-1] = 1;\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] result = new\
    \ double[n];\n    for(int i = 0; i < n; ++i)\n    {\n        result[i] = xs[i\
    \ + 1];\n    }\n    result[n-1] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ result = new float[n];\n    for(int i = 0; i < n; ++i)\n    {\n        result[i]\
    \ = xs[i + 1];\n    }\n    result[n-1] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoo06d269.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpoo06d269.d(36): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpoo06d269.d(57):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoo06d269.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpy0d_8gk_.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42859e]\\n??:? long[] tmpy0d_8gk_.derivative(long[])\
    \ [0x427ea1]\\n??:? void tmpy0d_8gk_.__unittest_L22_C1() [0x427f1b]\\n??:? void\
    \ tmpy0d_8gk_.__modtest() [0x428270]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b45e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430675]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b435]\\n??:? runModuleUnitTests [0x42c3a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428937]\\n??:? _d_run_main [0x4288a2]\\n??:? main [0x428283]\\\
    n??:? __libc_start_main [0x133f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 1;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i];\n        x += (long)xs[i];\n    }\n    result[xs.length - 1] = 1;\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    double x =\
    \ 1;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i];\n\
    \        x += (double)xs[i];\n    }\n    result[xs.length - 1] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1)];\n    float x = 1;\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i];\n        x += (float)xs[i];\n\
    \    }\n    result[xs.length - 1] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfnmtafee.d(20): Error: C style cast illegal, use `cast(long)xs[i]`\\\
    n/tmp/tmpfnmtafee.d(42): Error: C style cast illegal, use `cast(double)xs[i]`\\\
    n/tmp/tmpfnmtafee.d(64): Error: C style cast illegal, use `cast(float)xs[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnmtafee.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n  \
    \      result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmph_i2ax5j.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4293fe]\\n??:? long[] tmph_i2ax5j.derivative(long[])\
    \ [0x428b1f]\\n??:? void tmph_i2ax5j.__unittest_L64_C1() [0x428d77]\\n??:? void\
    \ tmph_i2ax5j.__modtest() [0x4290cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c86e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431af9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c845]\\n??:? runModuleUnitTests [0x42d7b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429797]\\n??:? _d_run_main [0x429702]\\n??:? main [0x4290df]\\\
    n??:? __libc_start_main [0x7daa7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for (int i = 0; i < n;\
    \ i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp26u335k0.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp26u335k0.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp26u335k0.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26u335k0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result];\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = xs[i] - 1;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n        result\
    \ += 1;\n    }\n    double[] result = new double[result];\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result += 1;\n    }\n    float[] result = new float[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjipci_r.d(21): Error: declaration `tmpjjipci_r.derivative.result`\
    \ is already defined\\n/tmp/tmpjjipci_r.d(24): Error: only one index allowed to\
    \ index `long`\\n/tmp/tmpjjipci_r.d(26): Error: cannot implicitly convert expression\
    \ `result` of type `long` to `long[]`\\n/tmp/tmpjjipci_r.d(46): Error: cannot\
    \ implicitly convert expression `result` of type `double` to `ulong`\\n/tmp/tmpjjipci_r.d(46):\
    \ Error: declaration `tmpjjipci_r.derivative.result` is already defined\\n/tmp/tmpjjipci_r.d(49):\
    \ Error: only one index allowed to index `double`\\n/tmp/tmpjjipci_r.d(51): Error:\
    \ cannot implicitly convert expression `result` of type `double` to `double[]`\\\
    n/tmp/tmpjjipci_r.d(71): Error: cannot implicitly convert expression `result`\
    \ of type `float` to `ulong`\\n/tmp/tmpjjipci_r.d(71): Error: declaration `tmpjjipci_r.derivative.result`\
    \ is already defined\\n/tmp/tmpjjipci_r.d(74): Error: only one index allowed to\
    \ index `float`\\n/tmp/tmpjjipci_r.d(76): Error: cannot implicitly convert expression\
    \ `result` of type `float` to `float[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjjipci_r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ys[i] = 1;\n        for(int j\
    \ = i; j < n; j++)\n        {\n            ys[i] *= xs[j];\n        }\n    }\n\
    \    return ys;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpig7kcfxh.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpig7kcfxh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long x = 1;\n    long y = 1;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        result[i] = y;\n        y += xs[i] * x;\n        x *= xs[i];\n \
    \   }\n    result[xs.length] = y;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length + 1)];\n\
    \    double x = 1;\n    double y = 1;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i] = y;\n        y += xs[i] * x;\n        x *= xs[i];\n\
    \    }\n    result[xs.length] = y;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length + 1)];\n\
    \    float x = 1;\n    float y = 1;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i] = y;\n        y += xs[i] * x;\n        x *= xs[i];\n\
    \    }\n    result[xs.length] = y;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5m676dlj.d(89): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429485]\\n??:? void tmp5m676dlj.__unittest_L85_C1()\
    \ [0x428f1e]\\n??:? void tmp5m676dlj.__modtest() [0x429208]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4320e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431bbd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c97d]\\n??:? runModuleUnitTests [0x42d8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429948]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298cf]\\n??:? _d_run_main [0x42983a]\\n??:? main [0x42921b]\\\
    n??:? __libc_start_main [0x26a31554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  for(int i = 0; i <= xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for(int i = 0; i <= xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    for(int i = 0; i <= xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpcm4mp_g4.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4293fe]\\n??:? long[] tmpcm4mp_g4.derivative(long[])\
    \ [0x428b14]\\n??:? void tmpcm4mp_g4.__unittest_L73_C1() [0x428d77]\\n??:? void\
    \ tmpcm4mp_g4.__modtest() [0x4290cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c86e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431af9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c845]\\n??:? runModuleUnitTests [0x42d7b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429797]\\n??:? _d_run_main [0x429702]\\n??:? main [0x4290df]\\\
    n??:? __libc_start_main [0x757c5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        result[i] = xs[i + 1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4sshtknk.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4sshtknk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        y = xs[i];\n        result[i] = 1;\n        for(int j = 0; j < i; j++)\n\
    \        {\n            y += xs[j] * result[j];\n        }\n        result[i]\
    \ = y;\n    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result = new double[xs.length\
    \ + 1];\n    double x = 0;\n    double y = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        y = xs[i];\n        result[i] = 1;\n        for(int j =\
    \ 0; j < i; j++)\n        {\n            y += xs[j] * result[j];\n        }\n\
    \        result[i] = y;\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[xs.length + 1];\n    float x = 0;\n    float y = 0;\n   \
    \ for(int i = 0; i < xs.length; i++)\n    {\n        y = xs[i];\n        result[i]\
    \ = 1;\n        for(int j = 0; j < i; j++)\n        {\n            y += xs[j]\
    \ * result[j];\n        }\n        result[i] = y;\n    }\n    result[xs.length]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzv61_tc8.d(101): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4295cd]\\n??:? void tmpzv61_tc8.__unittest_L97_C1()\
    \ [0x429062]\\n??:? void tmpzv61_tc8.__modtest() [0x42934c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42caee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431d79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432228]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431d05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42cac5]\\n??:? runModuleUnitTests [0x42da31]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429a90]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429a17]\\n??:? _d_run_main [0x429982]\\n??:? main [0x42935f]\\\
    n??:? __libc_start_main [0xdb426554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     x = xs[i];\n        y = x * y;\n        ys[i] = y;\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] ys = new double[n];\n    double x = 0;\n    double\
    \ y = 0;\n    for(int i = 0; i < n; i++)\n    {\n        x = xs[i];\n        y\
    \ = x * y;\n        ys[i] = y;\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] ys = new float[n];\n\
    \    float x = 0;\n    float y = 0;\n    for(int i = 0; i < n; i++)\n    {\n \
    \       x = xs[i];\n        y = x * y;\n        ys[i] = y;\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpijon5kv4.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpijon5kv4.d(39): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpijon5kv4.d(63):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijon5kv4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmc8gcwm7.d(71): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293d5]\\n??:? void tmpmc8gcwm7.__unittest_L67_C1()\
    \ [0x428e6e]\\n??:? void tmpmc8gcwm7.__modtest() [0x429158]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8cd]\\n??:? runModuleUnitTests [0x42d839]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429898]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42981f]\\n??:? _d_run_main [0x42978a]\\n??:? main [0x42916b]\\\
    n??:? __libc_start_main [0x5d20b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    for(int i = 1; i < xs.length; i++)\n    {\n        x = x\
    \ * xs[i] - xs[i - 1];\n        result[i - 1] += x;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnzhtuacb.d(24): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnzhtuacb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 1;\n    for (int i = 0; i <= xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x = result[i];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    double x = 1;\n    for (int i = 0; i <= xs.length;\
    \ i++)\n    {\n        result[i] = xs[i] - x;\n        x = result[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[xs.length + 1];\n    float x = 1;\n\
    \    for (int i = 0; i <= xs.length; i++)\n    {\n        result[i] = xs[i] -\
    \ x;\n        x = result[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmps2ggl358.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x429466]\\n??:? long[] tmps2ggl358.derivative(long[])\
    \ [0x428b33]\\n??:? void tmps2ggl358.__unittest_L76_C1() [0x428ddf]\\n??:? void\
    \ tmps2ggl358.__modtest() [0x429134]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431aed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8ad]\\n??:? runModuleUnitTests [0x42d819]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429878]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297ff]\\n??:? _d_run_main [0x42976a]\\n??:? main [0x429147]\\\
    n??:? __libc_start_main [0x210f4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i) {\n        result[i] = xs[i + 1] - xs[i];\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; ++i) {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for(int i = 0; i < n;\
    \ ++i) {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1zrxrbtw.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp1zrxrbtw.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp1zrxrbtw.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1zrxrbtw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ys[i] = xs[i+1];\n    }\n    return\
    \ ys;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn_ig_g82.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpn_ig_g82.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n        result[i] = xs[i + 1];\n    for(int i\
    \ = n - 2; i >= 0; i--)\n        result[i] = result[i + 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] result = new double[n];\n    for(int i = 0; i <\
    \ n; i++)\n        result[i] = xs[i + 1];\n    for(int i = n - 2; i >= 0; i--)\n\
    \        result[i] = result[i + 1];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ result = new float[n];\n    for(int i = 0; i < n; i++)\n        result[i] =\
    \ xs[i + 1];\n    for(int i = n - 2; i >= 0; i--)\n        result[i] = result[i\
    \ + 1];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp49ofcy52.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp49ofcy52.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp49ofcy52.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49ofcy52.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++) {\n        result[i] = xs[i+1] - xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++) {\n        result[i] = xs[i+1] - xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for(int i = 0; i < n;\
    \ i++) {\n        result[i] = xs[i+1] - xs[i];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp90o4zzb8.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp90o4zzb8.d(34): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp90o4zzb8.d(53):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90o4zzb8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[xs.length];\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[xs.length];\n    for(int i = 0; i <\
    \ xs.length; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4wdh9sio.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4293fe]\\n??:? long[] tmp4wdh9sio.derivative(long[])\
    \ [0x428b1f]\\n??:? void tmp4wdh9sio.__unittest_L70_C1() [0x428d77]\\n??:? void\
    \ tmp4wdh9sio.__modtest() [0x4290cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c86e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431af9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c845]\\n??:? runModuleUnitTests [0x42d7b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429797]\\n??:? _d_run_main [0x429702]\\n??:? main [0x4290df]\\\
    n??:? __libc_start_main [0xe215f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 0;\n    for(int i = 0; i < xs.length; i++) \n    {\n        result[i]\
    \ = xs[i] - x;\n        x = xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    double x = 0;\n    for(int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i] = xs[i] - x;\n        x = xs[i];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    float x = 0;\n    for(int i = 0; i < xs.length; i++) \n    {\n        result[i]\
    \ = xs[i] - x;\n        x = xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeeg0bv2o.d(83): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42941d]\\n??:? void tmpeeg0bv2o.__unittest_L79_C1()\
    \ [0x428eb2]\\n??:? void tmpeeg0bv2o.__modtest() [0x42919c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42daab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432078]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c915]\\n??:? runModuleUnitTests [0x42d881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4298e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429867]\\n??:? _d_run_main [0x4297d2]\\n??:? main [0x4291af]\\\
    n??:? __libc_start_main [0xc58d7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result += 1;\n    }\n    long[]\
    \ result = new long[result];\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = xs[i] - 1;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n        result\
    \ += 1;\n    }\n    double[] result = new double[result];\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result += 1;\n    }\n    float[] result = new float[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i] - 1;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdetj4mli.d(21): Error: declaration `tmpdetj4mli.derivative.result`\
    \ is already defined\\n/tmp/tmpdetj4mli.d(24): Error: only one index allowed to\
    \ index `long`\\n/tmp/tmpdetj4mli.d(26): Error: cannot implicitly convert expression\
    \ `result` of type `long` to `long[]`\\n/tmp/tmpdetj4mli.d(46): Error: cannot\
    \ implicitly convert expression `result` of type `double` to `ulong`\\n/tmp/tmpdetj4mli.d(46):\
    \ Error: declaration `tmpdetj4mli.derivative.result` is already defined\\n/tmp/tmpdetj4mli.d(49):\
    \ Error: only one index allowed to index `double`\\n/tmp/tmpdetj4mli.d(51): Error:\
    \ cannot implicitly convert expression `result` of type `double` to `double[]`\\\
    n/tmp/tmpdetj4mli.d(71): Error: cannot implicitly convert expression `result`\
    \ of type `float` to `ulong`\\n/tmp/tmpdetj4mli.d(71): Error: declaration `tmpdetj4mli.derivative.result`\
    \ is already defined\\n/tmp/tmpdetj4mli.d(74): Error: only one index allowed to\
    \ index `float`\\n/tmp/tmpdetj4mli.d(76): Error: cannot implicitly convert expression\
    \ `result` of type `float` to `float[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpdetj4mli.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        result[i] = xs[i+1] - xs[i] * xs[i] /\
    \ i;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        result[i] = xs[i+1] - xs[i] * xs[i] / i;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for(int i = 0; i < n;\
    \ ++i)\n        result[i] = xs[i+1] - xs[i] * xs[i] / i;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp78c3yjfl.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp78c3yjfl.d(33): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp78c3yjfl.d(51):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78c3yjfl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i] - xs[i - 1];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n  \
    \      result[i] = xs[i] - xs[i - 1];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i] - xs[i - 1];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp7bu8gter.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x429406]\\n??:? long[] tmp7bu8gter.derivative(long[])\
    \ [0x428b49]\\n??:? void tmp7bu8gter.__unittest_L64_C1() [0x428d7f]\\n??:? void\
    \ tmp7bu8gter.__modtest() [0x4290d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d9e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c876]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b01]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431fb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431a8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c84d]\\n??:? runModuleUnitTests [0x42d7b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429818]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42979f]\\n??:? _d_run_main [0x42970a]\\n??:? main [0x4290e7]\\\
    n??:? __libc_start_main [0x42130554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[xs.length + 1];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz00tup0a.d(71): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4293d5]\\n??:? void tmpz00tup0a.__unittest_L67_C1()\
    \ [0x428e6e]\\n??:? void tmpz00tup0a.__modtest() [0x429158]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c8f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c8cd]\\n??:? runModuleUnitTests [0x42d839]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429898]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42981f]\\n??:? _d_run_main [0x42978a]\\n??:? main [0x42916b]\\\
    n??:? __libc_start_main [0xfe499554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        result[i] = xs[i + 1] - xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] result = new double[n];\n    for(int i = 0; i <\
    \ n; ++i)\n        result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    for(int i = 0; i < n;\
    \ ++i)\n        result[i] = xs[i + 1] - xs[i];\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyuk39q70.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpyuk39q70.d(33): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpyuk39q70.d(51):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyuk39q70.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n        result -= xs[i+1];\n    }\n \
    \   long[] result = new long[result.intValue()];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result.intValue();\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n        result -= xs[i+1];\n    }\n    double[] result = new double[result.intValue()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result.intValue();\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n        result -= xs[i+1];\n    }\n    float[]\
    \ result = new float[result.intValue()];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result.intValue();\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6iysia1y.d(21): Error: no property `intValue` for type `long`\\\
    n/tmp/tmp6iysia1y.d(21): Error: declaration `tmp6iysia1y.derivative.result` is\
    \ already defined\\n/tmp/tmp6iysia1y.d(22): Error: no property `length` for type\
    \ `long`\\n/tmp/tmp6iysia1y.d(24): Error: only one index allowed to index `long`\\\
    n/tmp/tmp6iysia1y.d(26): Error: cannot implicitly convert expression `result`\
    \ of type `long` to `long[]`\\n/tmp/tmp6iysia1y.d(46): Error: no property `intValue`\
    \ for type `double`\\n/tmp/tmp6iysia1y.d(46): Error: declaration `tmp6iysia1y.derivative.result`\
    \ is already defined\\n/tmp/tmp6iysia1y.d(47): Error: no property `length` for\
    \ type `double`\\n/tmp/tmp6iysia1y.d(49): Error: only one index allowed to index\
    \ `double`\\n/tmp/tmp6iysia1y.d(51): Error: cannot implicitly convert expression\
    \ `result` of type `double` to `double[]`\\n/tmp/tmp6iysia1y.d(71): Error: no\
    \ property `intValue` for type `float`\\n/tmp/tmp6iysia1y.d(71): Error: declaration\
    \ `tmp6iysia1y.derivative.result` is already defined\\n/tmp/tmp6iysia1y.d(72):\
    \ Error: no property `length` for type `float`\\n/tmp/tmp6iysia1y.d(74): Error:\
    \ only one index allowed to index `float`\\n/tmp/tmp6iysia1y.d(76): Error: cannot\
    \ implicitly convert expression `result` of type `float` to `float[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6iysia1y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < result.length; i++)\n        result[i] = xs[i + 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = xs[i + 1];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpge67s4ol.d(68): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4292bd]\\n??:? void tmpge67s4ol.__unittest_L64_C1()\
    \ [0x428d52]\\n??:? void tmpge67s4ol.__modtest() [0x42903c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d94b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c7de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431a69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431f18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4319f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c7b5]\\n??:? runModuleUnitTests [0x42d721]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429780]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429707]\\n??:? _d_run_main [0x429672]\\n??:? main [0x42904f]\\\
    n??:? __libc_start_main [0xbbb8e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x;\n        x = xs[i];\n    }\n    result[xs.length] = 1;\n    return\
    \ result;\n}\n</code>\n<|/ a tags=math,java,polynomial-math,algorithm |>\n<| c\
    \ |>\nThis is not correct. `derivative([1, 2, 3])` returns `[3, 6, 9]` instead\
    \ of `[1, 4, 12, 20]`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ corrected the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1jjsanks.d(25): Error: declaration expected, not `<`\\n/tmp/tmp1jjsanks.d(31):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp1jjsanks.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0xjre3ol.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp0xjre3ol.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp0xjre3ol.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xjre3ol.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long n = xs.length;\n    long[] ys = new long[n];\n\
    \    long i;\n    long j;\n    long k;\n    long sum = 0;\n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < n; j++)\n        {\n            if(i\
    \ == j)\n                ys[i] = 0;\n            else\n                ys[i] =\
    \ ys[i] + xs[i] * xs[j];\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n\
    \        for(j = 0; j < n; j++)\n        {\n            if(i == j)\n         \
    \       ys[i] = 0;\n            else\n                ys[i] = ys[i] + xs[i] *\
    \ xs[j];\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j =\
    \ 0; j < n; j++)\n        {\n            if(i == j)\n                ys[i] = 0;\n\
    \            else\n                ys[i] = ys[i] + xs[i] * xs[j];\n        }\n\
    \    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < n; j++)\n  \
    \      {\n            if(i == j)\n                ys[i] = 0;\n            else\n\
    \                ys[i] = ys[i] + xs[i] * xs[j];\n        }\n    }\n    for(i =\
    \ 0; i < n; i++)\n    {\n        for(j = 0; j < n; j++)\n        {\n         \
    \   if(i == j)\n                ys[i] = 0;\n            else\n               \
    \ ys[i] = ys[i] + xs[i] * xs[j];\n        }\n    }\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < n; j++)\n        {\n            if(i == j)\n  \
    \              ys[i] = 0;\n            else\n                ys[i] = ys[i] + xs[i]\
    \ * xs[j];\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = 0; j < n; j++)\n        {\n            if(i == j)\n                ys[i] =\
    \ 0;\n            else\n                ys[i] = ys[i] + xs[i] * xs[j];\n     \
    \   }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < n; j++)\n\
    \        {\n            if(i == j)\n                ys[i] = 0;\n            else\n\
    \                ys[i] = ys[i] + xs[i] * xs[j];\n        }\n    }\n    for(i =\
    \ 0; i < n; i++)\n    {\n        for(j = 0; j < n; j++)\n        {\n         \
    \   if(i == j)\n                ys[i] = 0;\n            else\n               \
    \ ys[i] = ys[i] + xs[i] * xs[j];\n        }\n    }\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < n; j++)\n        {\n            if(i == j)\n  \
    \              ys[i] = 0;\n            else\n                ys[i] = ys[i] + xs[i]\
    \ * xs[j];\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = 0; j < n; j++)\n        {\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmodcdqw1.d(126): Error: found `unittest` instead of statement\\\
    n/tmp/tmpmodcdqw1.d(136): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpmodcdqw1.d(136): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmodcdqw1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        result[i] = xs[i];\n    for(int i = n\
    \ - 1; i >= 0; --i)\n        result[i] = result[i + 1] * xs[i];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] result = new double[n];\n    for(int i = 0; i <\
    \ n; ++i)\n        result[i] = xs[i];\n    for(int i = n - 1; i >= 0; --i)\n \
    \       result[i] = result[i + 1] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ result = new float[n];\n    for(int i = 0; i < n; ++i)\n        result[i] =\
    \ xs[i];\n    for(int i = n - 1; i >= 0; --i)\n        result[i] = result[i +\
    \ 1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr8_1ts6n.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpr8_1ts6n.d(35): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmpr8_1ts6n.d(55):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8_1ts6n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d *= xs[i];\n    }\n    long[] result = new long[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n\
    \        d *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double\
    \ d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n\
    \    }\n    double[] result = new double[xs.length + 1];\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i] = d;\n        d *= xs[i];\n    }\n\
    \    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d *= xs[i];\n    }\n    float[] result = new float[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n\
    \        d *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_14j361j.d(95): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294ad]\\n??:? void tmp_14j361j.__unittest_L91_C1()\
    \ [0x428f42]\\n??:? void tmp_14j361j.__modtest() [0x42922c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42db3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432108]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431be5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c9a5]\\n??:? runModuleUnitTests [0x42d911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298f7]\\n??:? _d_run_main [0x429862]\\n??:? main [0x42923f]\\\
    n??:? __libc_start_main [0x43e81554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    long sum = 0;\n    for (int i = 0; i < n; ++i)\n    {\n        sum += xs[i];\n\
    \        result[i] = sum;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] result = new\
    \ double[n];\n    double sum = 0;\n    for (int i = 0; i < n; ++i)\n    {\n  \
    \      sum += xs[i];\n        result[i] = sum;\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n\
    \ = xs.length;\n    float[] result = new float[n];\n    float sum = 0;\n    for\
    \ (int i = 0; i < n; ++i)\n    {\n        sum += xs[i];\n        result[i] = sum;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppp7mk6xm.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmppp7mk6xm.d(37): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmppp7mk6xm.d(59):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppp7mk6xm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x * xs[i];\n        x *= xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[(xs.length - 1)];\n    double x = 1;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result[i] = xs[i] - x * xs[i];\n       \
    \ x *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nfloat[]\
    \ derivative(float[] xs) \n{\n    float[] result = new float[(xs.length - 1)];\n\
    \    float x = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] - x * xs[i];\n        x *= xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \  >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpcbbe4rk7.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4294be]\\n??:? long[] tmpcbbe4rk7.derivative(long[])\
    \ [0x428af9]\\n??:? void tmpcbbe4rk7.__unittest_L76_C1() [0x428e3b]\\n??:? void\
    \ tmpcbbe4rk7.__modtest() [0x429190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42da9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431bb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c905]\\n??:? runModuleUnitTests [0x42d871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4298d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429857]\\n??:? _d_run_main [0x4297c2]\\n??:? main [0x4291a3]\\\
    n??:? __libc_start_main [0xb6349554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        y = xs[i];\n        result[i] = 1;\n        for(int j = i; j < xs.length;\
    \ j++)\n        {\n            y += xs[j] * result[j];\n            result[j +\
    \ 1] = y;\n        }\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\ndouble[]\
    \ derivative(double[] xs) \n{\n    double[] result = new double[(xs.length + 1)];\n\
    \    double x = 0;\n    double y = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        y = xs[i];\n        result[i] = 1;\n        for(int j = i; j <\
    \ xs.length; j++)\n        {\n            y += xs[j] * result[j];\n          \
    \  result[j + 1] = y;\n        }\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ + 1)];\n    float x = 0;\n    float y = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        y = xs[i];\n        result[i] = 1;\n        for(int j =\
    \ i; j < xs.length; j++)\n        {\n            y += xs[j] * result[j];\n   \
    \         result[j + 1] = y;\n        }\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsk5buc86.d(98): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42954d]\\n??:? void tmpsk5buc86.__unittest_L94_C1()\
    \ [0x428fe2]\\n??:? void tmpsk5buc86.__modtest() [0x4292cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dbdb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ca6e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431cf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4321a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431c85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ca45]\\n??:? runModuleUnitTests [0x42d9b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429a10]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429997]\\n??:? _d_run_main [0x429902]\\n??:? main [0x4292df]\\\
    n??:? __libc_start_main [0x51709554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0xke_1l1.d(17): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428606]\\n??:? long[] tmp0xke_1l1.derivative(long[])\
    \ [0x427eb7]\\n??:? void tmp0xke_1l1.__unittest_L20_C1() [0x427f7f]\\n??:? void\
    \ tmp0xke_1l1.__modtest() [0x4282d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c633]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430751]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b49d]\\n??:? runModuleUnitTests [0x42c409]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a18]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42899f]\\n??:? _d_run_main [0x42890a]\\n??:? main [0x4282e7]\\\
    n??:? __libc_start_main [0x634c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n  \
    \  long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        y = xs[i];\n        result[i] = 1;\n        for(int j = i; j < xs.length;\
    \ j++)\n        {\n            x ^= xs[j];\n            result[i] += y;\n    \
    \    }\n    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n    >>> derivative([3,\
    \ 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n\
    \    \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result = new double[xs.length\
    \ + 1];\n    double x = 0;\n    double y = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        y = xs[i];\n        result[i] = 1;\n        for(int j =\
    \ i; j < xs.length; j++)\n        {\n            x ^= xs[j];\n            result[i]\
    \ += y;\n        }\n    }\n    result[xs.length] = 1;\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ result = new float[xs.length + 1];\n    float x = 0;\n    float y = 0;\n   \
    \ for(int i = 0; i < xs.length; i++)\n    {\n        y = xs[i];\n        result[i]\
    \ = 1;\n        for(int j = i; j < xs.length; j++)\n        {\n            x ^=\
    \ xs[j];\n            result[i] += y;\n        }\n    }\n    result[xs.length]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n\
    \    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjaswu75.d(52): Error: `x` is not of integral type, it is a `double`\\\
    n/tmp/tmpjjaswu75.d(52): Error: `xs[cast(ulong)j]` is not of integral type, it\
    \ is a `double`\\n/tmp/tmpjjaswu75.d(80): Error: `x` is not of integral type,\
    \ it is a `float`\\n/tmp/tmpjjaswu75.d(80): Error: `xs[cast(ulong)j]` is not of\
    \ integral type, it is a `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjjaswu75.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n        result[i] = xs[i+1] - xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \n*/\ndouble[] derivative(double[] xs) \n{\n    int\
    \ n = xs.length;\n    double[] result = new double[n];\n    for(int i = 0; i <\
    \ n; i++)\n        result[i] = xs[i+1] - xs[i];\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n    >>>\
    \ derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n\
    \    [2, 6]\n    \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    for(int i = 0; i < n; i++)\n        result[i]\
    \ = xs[i+1] - xs[i];\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp26m4ev01.d(15): Error: cannot implicitly convert expression `xs.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp26m4ev01.d(33): Error: cannot implicitly\
    \ convert expression `xs.length` of type `ulong` to `int`\\n/tmp/tmp26m4ev01.d(51):\
    \ Error: cannot implicitly convert expression `xs.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26m4ev01.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
