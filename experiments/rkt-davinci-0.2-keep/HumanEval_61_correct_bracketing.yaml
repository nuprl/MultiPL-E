name: HumanEval_61_correct_bracketing
language: racket
prompt: "#lang racket\n\n;; brackets is a string of \"(\" and \")\".\n;; return True\
  \ if every opening bracket has a corresponding closing bracket.\n;; >>> correct_bracketing(\"\
  (\")\n;; False\n;; >>> correct_bracketing(\"()\")\n;; True\n;; >>> correct_bracketing(\"\
  (()())\")\n;; True\n;; >>> correct_bracketing(\")(()\")\n;; False\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"()\") #t)\n    (check-equal? (candidate \"(()())\"\
  ) #t)\n    (check-equal? (candidate \"()()(()())()\") #t)\n    (check-equal? (candidate\
  \ \"()()((()()())())(()()(()))\") #t)\n    (check-equal? (candidate \"((()())))\"\
  ) #f)\n    (check-equal? (candidate \")(()\") #f)\n    (check-equal? (candidate\
  \ \"(\") #f)\n    (check-equal? (candidate \"((((\") #f)\n    (check-equal? (candidate\
  \ \")\") #f)\n    (check-equal? (candidate \"(()\") #f)\n    (check-equal? (candidate\
  \ \"()()(()())())(()\") #f)\n    (check-equal? (candidate \"()()(()())()))()\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? brackets) true]\n    [(equal? (first brackets)\
    \ \")\") false]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) true]\n\
    \    [(equal? (first brackets) \")\") false]\n    [(equal? (first brackets) \"\
    (\")\n     (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond ((empty?\
    \ brackets) (= count 0))\n          ((char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1)))\n          ((char=? (first brackets) #\\)) (and (> count\
    \ 0) (helper (rest brackets) (- count 1))))\n          (else (helper (rest brackets)\
    \ count))))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets)\n     #t]\n    [(and (equal?\
    \ (first brackets) \")\")\n          (empty? (rest brackets)))\n     #f]\n   \
    \ [(and (equal? (first brackets) \")\")\n          (not (empty? (rest brackets))))\n\
    \     (correct_bracketing (rest brackets))]\n    [(and (equal? (first brackets)\
    \ \"(\")\n          (empty? (rest brackets)))\n     #f]\n    [(and (equal? (first\
    \ brackets) \"(\")\n          (not (empty? (rest brackets))))\n     (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"(\")\n     (and (correct_bracketing (rest\
    \ brackets))\n          (equal? (first (rest brackets)) \")\"))]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal?\
    \ (first brackets) \")\") #f]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets)\
    \ \")\") #f]\n    [(string=? (first brackets) \"(\")\n     (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"(\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \")\") (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"(\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \")\") (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets)\
    \ \"(\")\n     (cond\n       [(equal? (first (rest brackets)) \")\")\n       \
    \ (correct_bracketing (rest (rest brackets)))]\n       [else\n        (correct_bracketing\
    \ (rest brackets))])]\n    [else\n     (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets)\n     #t]\n    [(empty? (rest brackets))\n     (equal? (first brackets)\
    \ \")\")]\n    [else\n     (and (equal? (first brackets) \"(\")\n          (correct_bracketing\
    \ (rest brackets)))]))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (zero? count)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (let loop ([brackets brackets] [open 0])\n    (cond\n      [(empty?\
    \ brackets) (= open 0)]\n      [(char=? (first brackets) #\\()\n       (loop (rest\
    \ brackets) (+ open 1))]\n      [(char=? (first brackets) #\\))\n       (and (>\
    \ open 0) (loop (rest brackets) (- open 1)))])))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(char=? (first brackets) #\\()\n           (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\))\n       \
    \    (and (not (= count 0))\n                (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets brackets] [count\
    \ 0])\n    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\()\n           (loop (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\))\n           (loop (rest brackets) (- count 1))]\n          [else\
    \ (loop (rest brackets) count)])))\n", "  (define (helper brackets count)\n  \
    \  (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond\n \
    \     [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\n\
    \       (loop (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\\
    ))\n       (and (> count 0) (loop (rest brackets) (- count 1)))]\n      [else\
    \ (loop (rest brackets) count)])))\n", "  (define (helper brackets count)\n  \
    \  (cond\n      [(empty? brackets) (= count 0)]\n      [(equal? (first brackets)\
    \ \"(\") (helper (rest brackets) (+ count 1))]\n      [(equal? (first brackets)\
    \ \")\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"(\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \")\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \")\") #f]\n    [(string=? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(= (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(= (first brackets) #\\\
    )) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (substring\
    \ brackets 0 1) \")\") #f]\n    [(string=? (substring brackets -1) \"(\") #f]\n\
    \    [else (correct_bracketing (substring brackets 1 -1))]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(equal?\
    \ (first brackets) \"(\") (helper (rest brackets) (+ count 1))]\n      [(equal?\
    \ (first brackets) \")\") (helper (rest brackets) (- count 1))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (> count 0) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond\n \
    \     [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\n\
    \       (loop (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\\
    ))\n       (and (> count 0) (loop (rest brackets) (- count 1)))]\n      [else\
    \ (loop (rest brackets) count)])))\n", "  (define (helper brackets count)\n  \
    \  (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (let loop ([brackets brackets] [open 0])\n    (cond\n  \
    \    [(empty? brackets) (= open 0)]\n      [(char=? (first brackets) #\\()\n \
    \      (loop (rest brackets) (+ open 1))]\n      [(char=? (first brackets) #\\\
    ))\n       (and (> open 0) (loop (rest brackets) (- open 1)))])))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", " \
    \ (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"(\")\n     (and (correct_bracketing (rest brackets))\n  \
    \        (equal? (first (rest brackets)) \")\"))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? brackets) true]\n    [(empty? (rest brackets)) false]\n    [else\
    \ (and (equal? (first brackets) \"(\")\n               (equal? (last brackets)\
    \ \")\")\n               (correct_bracketing (rest (butlast brackets))))]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [(equal? (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets\
    \ brackets] [count 0])\n    (cond\n      [(empty? brackets) (= count 0)]\n   \
    \   [(char=? (first brackets) #\\()\n       (loop (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\))\n       (and (> count 0) (loop (rest brackets)\
    \ (- count 1)))]\n      [else (loop (rest brackets) count)])))\n", "  (define\
    \ (helper brackets count)\n    (cond ((empty? brackets) (= count 0))\n       \
    \   ((char=? (first brackets) #\\() (helper (rest brackets) (+ count 1)))\n  \
    \        ((char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1))))\n          (else (helper (rest brackets) count))))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (first brackets) \")\") #f]\n    [(string=?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", " \
    \ (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"(\")\n     (and (equal? (first (rest brackets)) \")\")\n\
    \          (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets) \")\") #f]\n\
    \    [(string=? (first brackets) \"(\")\n     (cond\n       [(string=? (last brackets)\
    \ \")\") (correct_bracketing (substring brackets 1 (- (string-length brackets)\
    \ 1)))]\n       [else #f])]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (substring brackets 0 1) \")\") #f]\n    [(string=? (substring brackets 0 1)\
    \ \"(\")\n     (correct_bracketing (substring brackets 1))]))\n", "  (let loop\
    \ ([brackets brackets] [open-count 0])\n    (cond [(empty? brackets) (= open-count\
    \ 0)]\n          [(char=? (first brackets) #\\()\n           (loop (rest brackets)\
    \ (+ open-count 1))]\n          [(char=? (first brackets) #\\))\n           (and\
    \ (> open-count 0)\n                (loop (rest brackets) (- open-count 1)))]\n\
    \          [else (loop (rest brackets) open-count)])))\n", "  (define (helper\
    \ brackets)\n    (cond ((null? brackets) 0)\n          ((equal? (car brackets)\
    \ \"(\") (+ 1 (helper (cdr brackets))))\n          ((equal? (car brackets) \"\
    )\") (- 1 (helper (cdr brackets))))))\n  (equal? (helper brackets) 0))\n", " \
    \ (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [(equal? (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets\
    \ brackets] [count 0])\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\()\n           (loop (rest brackets) (+ count 1))]\n   \
    \       [(char=? (first brackets) #\\))\n           (and (> count 0) (loop (rest\
    \ brackets) (- count 1)))]\n          [else (loop (rest brackets) count)])))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond ((null? brackets)\
    \ (= count 0))\n          ((= (string-length brackets) 1) (error \"invalid input\"\
    ))\n          ((string=? (substring brackets 0 1) \"(\") (helper (substring brackets\
    \ 1) (+ count 1)))\n          ((string=? (substring brackets 0 1) \")\") (helper\
    \ (substring brackets 1) (- count 1)))\n          (else (error \"invalid input\"\
    ))))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\))\
    \ (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond\n \
    \     [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\n\
    \       (loop (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\\
    ))\n       (and (> count 0) (loop (rest brackets) (- count 1)))]\n      [else\
    \ (loop (rest brackets) count)])))\n", "  (cond\n    [(empty? brackets) #t]\n\
    \    [(equal? (first brackets) \")\") #f]\n    [(equal? (first brackets) \"(\"\
    )\n     (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (substring brackets 0 1) \")\") #f]\n    [(string=? (substring brackets 0 1)\
    \ \"(\")\n     (correct_bracketing (substring brackets 1))]))\n", "  (cond\n \
    \   [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", " \
    \ (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"(\")\n     (if (equal? (first (rest brackets)) \")\")\n \
    \        (correct_bracketing (rest (rest brackets)))\n         (correct_bracketing\
    \ (rest brackets)))]\n    [else (correct_bracketing (rest brackets))]))\n", " \
    \ (cond\n    [(empty? brackets)\n     #t]\n    [(empty? (rest brackets))\n   \
    \  (if (equal? (first brackets) \")\")\n         #f\n         #t)]\n    [(equal?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]\n    [(equal?\
    \ (first brackets) \")\")\n     (if (equal? (first (rest brackets)) \"(\")\n \
    \        (correct_bracketing (rest (rest brackets)))\n         #f)]))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? brackets \"()\") #t]\n    [(string=? (substring\
    \ brackets 0 1) \")\") #f]\n    [(string=? (substring brackets -1) \"(\") #f]\n\
    \    [else (correct_bracketing (substring brackets 1 -1))]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond ((null? brackets) (= count 0))\n          ((equal? (car brackets) \"(\"\
    ) (helper (cdr brackets) (+ count 1)))\n          ((equal? (car brackets) \")\"\
    ) (and (not (= count 0)) (helper (cdr brackets) (- count 1))))))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (first brackets) \")\") #f]\n    [(string=?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets)\
    \ \"(\")\n     (if (equal? (first (rest brackets)) \")\")\n         (correct_bracketing\
    \ (rest (rest brackets)))\n         (correct_bracketing (rest brackets)))]\n \
    \   [else (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (>\
    \ count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [(equal? (last brackets) \"(\") #f]\n    [else (correct_bracketing (rest\
    \ (butlast brackets)))]))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"(\"\
    ) (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    )\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets\
    \ brackets] [count 0])\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\()\n           (loop (rest brackets) (+ count 1))]\n   \
    \       [(char=? (first brackets) #\\))\n           (loop (rest brackets) (- count\
    \ 1))]\n          [else (loop (rest brackets) count)])))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(equal? (first brackets) \"(\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(equal? (first brackets) \")\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond ((empty? brackets) (= count 0))\n          ((char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1)))\n          ((char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1))))\n          (else (helper (rest brackets) count))))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (substring brackets 0 1) \")\") #f]\n\
    \    [(string=? (substring brackets 0 1) \"(\")\n     (correct_bracketing (substring\
    \ brackets 1))]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(= (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(= (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) true]\n\
    \    [(equal? (first brackets) \")\") false]\n    [(equal? (first brackets) \"\
    (\")\n     (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty?\
    \ brackets) true]\n    [(string=? (first brackets) \")\") false]\n    [(string=?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(= (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(= (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(string=? (substring brackets 0 1) \")\") #f]\n    [(string=? (substring\
    \ brackets 0 1) \"(\")\n     (correct_bracketing (substring brackets 1))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (substring brackets 0 1) \")\") #f]\n\
    \    [(string=? (substring brackets -1) \"(\") #f]\n    [else (correct_bracketing\
    \ (substring brackets 1 -1))]))\n", "  (cond\n    [(empty? brackets) #t]\n   \
    \ [(empty? (rest brackets)) #f]\n    [(equal? (first brackets) \"(\")\n     (and\
    \ (correct_bracketing (rest brackets))\n          (equal? (first (rest brackets))\
    \ \")\"))]\n    [else #f]))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\))\
    \ (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \")\") #f]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing (rest\
    \ brackets))]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(= (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(= (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n          [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n          [else (error \"invalid character\")]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \")\") #f]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing (rest\
    \ brackets))]))\n", "  (cond\n    [(empty? brackets) True]\n    [(empty? (rest\
    \ brackets)) False]\n    [(char=? (first brackets) #\\()\n     (correct_bracketing\
    \ (rest brackets))]\n    [(char=? (first brackets) #\\))\n     (correct_bracketing\
    \ (rest (rest brackets)))]))\n", "  (cond\n    [(empty? brackets) true]\n    [(equal?\
    \ (first brackets) \")\") false]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing\
    \ (rest brackets))]))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond\
    \ [(empty? brackets) (= count 0)]\n          [(char=? (first brackets) #\\()\n\
    \           (loop (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\))\n           (and (> count 0) (loop (rest brackets) (- count 1)))]\n  \
    \        [else (error \"invalid input\")])))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(string=? (first brackets) \")\") #f]\n    [(string=? (first brackets)\
    \ \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"(\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \")\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (substring\
    \ brackets 0 1) \")\") #f]\n    [(string=? (substring brackets 0 1) \"(\")\n \
    \    (correct_bracketing (substring brackets 1))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \")\") #f]\n    [(string=? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (first brackets) \")\") #f]\n    [(string=?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(equal? (first brackets)\
    \ \"(\") (helper (rest brackets) (+ count 1))]\n      [(equal? (first brackets)\
    \ \")\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"(\")\
    \ (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    )\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond [(empty? brackets) #t]\n        [(equal? (first brackets)\
    \ \")\") #f]\n        [(equal? (first brackets) \"(\")\n         (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(string=? (substring brackets 0 1) \"\
    )\") #f]\n    [(string=? (substring brackets 0 1) \"(\")\n     (correct_bracketing\
    \ (substring brackets 1))]))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\))\
    \ (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) true]\n    [(equal? (first\
    \ brackets) \")\") false]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \")\") #f]\n    [(string=? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (let loop\
    \ ([brackets brackets] [count 0])\n    (cond [(empty? brackets) (= count 0)]\n\
    \          [(char=? (first brackets) #\\()\n           (loop (rest brackets) (+\
    \ count 1))]\n          [(char=? (first brackets) #\\))\n           (loop (rest\
    \ brackets) (- count 1))]\n          [else (loop (rest brackets) count)])))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) true]\n    [(empty? (rest brackets)) false]\n    [else\n     (cond\n\
    \       [(equal? (first brackets) \"(\")\n        (if (equal? (first (rest brackets))\
    \ \")\")\n            (correct_bracketing (rest (rest brackets)))\n          \
    \  (correct_bracketing (rest brackets)))]\n       [(equal? (first brackets) \"\
    )\")\n        (if (equal? (first (rest brackets)) \"(\")\n            (correct_bracketing\
    \ (rest (rest brackets)))\n            (correct_bracketing (rest brackets)))]\n\
    \       [else (correct_bracketing (rest brackets))])])\n  )\n", "  (define (helper\
    \ brackets count)\n    (cond ((string=? brackets \"\") (= count 0))\n        \
    \  ((string=? (substring brackets 0 1) \"(\") (helper (substring brackets 1) (+\
    \ count 1)))\n          ((string=? (substring brackets 0 1) \")\") (helper (substring\
    \ brackets 1) (- count 1)))\n          (else (error \"Invalid character in brackets\"\
    ))))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\))\
    \ (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond ((= count 0)\n\
    \           (string-empty? brackets))\n          ((string=? (string-ref brackets\
    \ 0) \"(\")\n           (helper (substring brackets 1) (+ count 1)))\n       \
    \   ((string=? (string-ref brackets 0) \")\")\n           (helper (substring brackets\
    \ 1) (- count 1)))\n          (else\n           (error \"invalid input\"))))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \")\") #f]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing (rest\
    \ brackets))]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond ((null? brackets) (= count 0))\n          ((equal?\
    \ (car brackets) \"(\") (helper (cdr brackets) (+ count 1)))\n          ((equal?\
    \ (car brackets) \")\") (and (not (= count 0)) (helper (cdr brackets) (- count\
    \ 1))))))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n \
    \   [(string=? (first brackets) \")\") #f]\n    [(string=? (first brackets) \"\
    (\")\n     (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(= (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(= (first brackets) #\\\
    )) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n \
    \   [(equal? (first brackets) \")\") #f]\n    [(equal? (first brackets) \"(\"\
    )\n     (correct_bracketing (rest brackets))]))\n", "  (let loop ([brackets brackets]\
    \ [count 0])\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\()\n       (loop (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\))\n       (and (> count 0) (loop (rest brackets) (- count\
    \ 1)))]\n      [else #f])))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\))\
    \ (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets)\n     #t]\n    [(equal? (first\
    \ brackets) \")\")\n     #f]\n    [else\n     (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (zero? count)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets\
    \ brackets] [count 0])\n    (cond\n      [(empty? brackets) (= count 0)]\n   \
    \   [(char=? (first brackets) #\\()\n       (loop (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\))\n       (and (> count 0) (loop (rest brackets)\
    \ (- count 1)))]\n      [else (loop (rest brackets) count)])))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \")\") #f]\n    [(string=? (first brackets) \"(\")\n     (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"(\")\n     (and (equal? (last brackets)\
    \ \")\")\n          (correct_bracketing (rest (butlast brackets))))]\n    [else\
    \ #f]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(equal? (first brackets) \"(\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(equal? (first brackets) \")\") (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let\
    \ loop ([brackets brackets] [stack '()])\n    (cond\n      [(empty? brackets)\
    \ (empty? stack)]\n      [(char=? (first brackets) #\\()\n       (loop (rest brackets)\
    \ (cons (first brackets) stack))]\n      [(char=? (first brackets) #\\))\n   \
    \    (and (not (empty? stack))\n            (loop (rest brackets) (rest stack)))]\n\
    \      [else (error \"invalid character in brackets\")])))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \")\") #f]\n    [(string=? (first brackets) \"(\")\n     (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets)\n    (cond\n      [(empty?\
    \ brackets) 0]\n      [(equal? (first brackets) \"(\")\n       (add1 (helper (rest\
    \ brackets)))]\n      [(equal? (first brackets) \")\")\n       (sub1 (helper (rest\
    \ brackets)))]))\n  (zero? (helper brackets)))\n", "  (define (helper brackets\
    \ count)\n    (cond ((empty? brackets) (= count 0))\n          ((char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1)))\n          ((char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1))))\n\
    \          (else (helper (rest brackets) count))))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (substring\
    \ brackets 0 1) \")\") #f]\n    [(string=? (substring brackets -1) \"(\") #f]\n\
    \    [else (correct_bracketing (substring brackets 1 -1))]))\n", "  (cond\n  \
    \  [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal?\
    \ (first brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(equal? (first brackets) \"(\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(equal? (first brackets) \")\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\()\n        \
    \   (loop (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\\
    ))\n           (and (> count 0) (loop (rest brackets) (- count 1)))]\n       \
    \   [else (loop (rest brackets) count)])))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"(\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \")\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"(\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \")\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets\
    \ brackets] [open 0])\n    (cond [(empty? brackets) (= open 0)]\n          [(char=?\
    \ (first brackets) #\\()\n           (loop (rest brackets) (+ open 1))]\n    \
    \      [(char=? (first brackets) #\\))\n           (and (> open 0) (loop (rest\
    \ brackets) (- open 1)))]\n          [else (loop (rest brackets) open)])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
