language: racket
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (count (lambda (c) (char-upper-case?\
    \ c)) ext))\n          (sm (count (lambda (c) (char-lower-case? c)) ext)))\n \
    \     (/ cap sm)))\n  (define (strongest_extension lst)\n    (if (null? lst)\n\
    \        \"\"\n        (let ((ext (car lst))\n              (rest (cdr lst)))\n\
    \          (if (null? rest)\n              ext\n              (let ((strongest\
    \ (strongest_extension rest)))\n                (if (> (strength ext) (strength\
    \ strongest))\n                    ext\n                    strongest))))))\n\
    \  (string-append class_name \".\" (strongest_extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5gcivze.rkt:41:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt5gcivze.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt5gcivze.rkt:42:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"YEs.WeCaNe\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpt5gcivze.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5gcivze.rkt:43:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"NuLl__\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt5gcivze.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5gcivze.rkt:44:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"t234An\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt5gcivze.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt5gcivze.rkt:45:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"781345\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpt5gcivze.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5gcivze.rkt:46:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Fails\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt5gcivze.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5gcivze.rkt:47:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"Wow\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt5gcivze.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5gcivze.rkt:48:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other argume"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ((caps (count-if char-upper-case?\
    \ str))\n          (smalls (count-if char-lower-case? str)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max\n           (map\
    \ strength extensions)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (argmax strength extensions))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj04p7dai.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpj04p7dai.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((cap (count-if char-upper-case?\
    \ extension))\n          (sm (count-if char-lower-case? extension)))\n      (-\
    \ cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply max (map\
    \ strength extensions)))\n  (define (strongest-extension-index extensions)\n \
    \   (list-ref extensions (list-index (strongest-extension-name extensions) (map\
    \ strength extensions))))\n  (string-append class_name \".\" (strongest-extension-index\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx6izsn1j.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpx6izsn1j.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((cap (count-if char-upper-case?\
    \ extension))\n          (sm (count-if char-lower-case? extension)))\n      (-\
    \ cap sm)))\n  (define (strongest-extension extensions)\n    (let ((max-strength\
    \ (apply max (map strength extensions))))\n      (first (filter (lambda (extension)\
    \ (= max-strength (strength extension)))\n                     extensions))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz5qx22vi.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpz5qx22vi.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (count-if char-upper-case?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (car (sort (lambda (ext1\
    \ ext2)\n                 (string<? ext1 ext2))\n               (filter (lambda\
    \ (ext)\n                         (= (strength ext) (strength (car extensions))))\n\
    \                       extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw89q3h5p.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpw89q3h5p.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (/ (- caps\
    \ smalls) 1.0)))\n  (define (strongest-extension-name extensions)\n    (let ([strongest-extension\
    \ (first extensions)]\n          [strongest-strength (strength (first extensions))])\n\
    \      (for ([extension (rest extensions)])\n        (let ([strength (strength\
    \ extension)])\n          (when (> strength strongest-strength)\n            (set!\
    \ strongest-extension extension)\n            (set! strongest-strength strength))))\n\
    \      strongest-extension))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg0m49v92.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpg0m49v92.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (define\
    \ (strongest-extension-name-helper extensions strongest-extension-name)\n    \
    \  (cond [(empty? extensions) strongest-extension-name]\n            [(string=?\
    \ (first extensions) strongest-extension-name)\n             (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name)]\n            [(> (strength (first\
    \ extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-helper\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppqjzdbh1.rkt:39:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppqjzdbh1.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppqjzdbh1.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmppqjzdbh1.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppqjzdbh1.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppqjzdbh1.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppqjzdbh1.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppqjzdbh1.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppqjzdbh1.rkt:43:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppqjzdbh1.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppqjzdbh1.rkt:44:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppqjzdbh1.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppqjzdbh1.rkt:45:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmppqjzdbh1.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppqjzdbh1.rkt:46:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper-lower str)\n    (let* ([upper (count (lambda\
    \ (c) (char-upper-case? c)) str)]\n           [lower (count (lambda (c) (char-lower-case?\
    \ c)) str)])\n      (- upper lower)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map count-upper-lower extensions)))\n  (define (strongest-extension-index\
    \ extensions)\n    (let* ([strongest-extension-name (strongest-extension-name\
    \ extensions)]\n           [strongest-extension-index (find-first (lambda (extension)\n\
    \                                                    (= (count-upper-lower extension)\n\
    \                                                       strongest-extension-name))\n\
    \                                                  extensions)])\n      strongest-extension-index))\n\
    \  (string-append class_name \".\" (list-ref extensions (strongest-extension-index\
    \ extensions))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpndpdlxz4.rkt:27:39: find-first: unbound identifier\n  in: find-first\n\
    \  location...:\n   /tmp/tmpndpdlxz4.rkt:27:39\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension lst)\n    (if (null? lst)\n\
    \        \"\"\n        (let ([ext (car lst)]\n              [rest (cdr lst)])\n\
    \          (if (null? rest)\n              ext\n              (let ([next (strongest-extension\
    \ rest)])\n                (if (&gt; (strength ext) (strength next))\n       \
    \             ext\n                    next))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n</code>\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp89t1ab9o.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 35\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmin (map strength extensions)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mvdus29.rkt:36:4\n\
    \nargmin: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mvdus29.rkt:37:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mvdus29.rkt:38:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mvdus29.rkt:39:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mvdus29.rkt:40:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mvdus29.rkt:41:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mvdus29.rkt:42:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mvdus29.rkt:43:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mvdus29.rkt:44:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper-case str)\n    (for/fold ([count 0]) ([c\
    \ (in-string str)])\n      (if (char-upper-case? c)\n          (+ count 1)\n \
    \         count)))\n  (define (count-lower-case str)\n    (for/fold ([count 0])\
    \ ([c (in-string str)])\n      (if (char-lower-case? c)\n          (+ count 1)\n\
    \          count)))\n  (define (strength str)\n    (/ (- (count-upper-case str)\
    \ (count-lower-case str)) (string-length str)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmin (map strength extensions)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp27zzb3sx.rkt:40:4\n\
    \nargmin: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp27zzb3sx.rkt:41:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp27zzb3sx.rkt:42:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp27zzb3sx.rkt:43:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp27zzb3sx.rkt:44:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp27zzb3sx.rkt:45:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp27zzb3sx.rkt:46:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp27zzb3sx.rkt:47:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp27zzb3sx.rkt:48:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (let loop ([i 0] [count 0])\n\
    \      (if (= i (string-length str))\n          count\n          (if (char-upper-case?\
    \ (string-ref str i))\n              (loop (+ i 1) (+ count 1))\n            \
    \  (loop (+ i 1) count)))))\n  (define (count-lower str)\n    (let loop ([i 0]\
    \ [count 0])\n      (if (= i (string-length str))\n          count\n         \
    \ (if (char-lower-case? (string-ref str i))\n              (loop (+ i 1) (+ count\
    \ 1))\n              (loop (+ i 1) count)))))\n  (define (strength str)\n    (-\
    \ (count-upper str) (count-lower str)))\n  (define (strongest-extension lst)\n\
    \    (if (null? lst)\n        '()\n        (if (null? (cdr lst))\n           \
    \ (car lst)\n            (if (< (strength (car lst)) (strength (cadr lst)))\n\
    \                (strongest-extension (cdr lst))\n                (strongest-extension\
    \ (cons (car lst) (cddr lst)))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (let\
    \ ([extensions (sort extensions (lambda (a b) (< (strength a) (strength b))))])\n\
    \      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp0fj5zn8.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpp0fj5zn8.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp0fj5zn8.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpp0fj5zn8.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp0fj5zn8.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpp0fj5zn8.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp0fj5zn8.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpp0fj5zn8.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp0fj5zn8.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpp0fj5zn8.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp0fj5zn8.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpp0fj5zn8.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp0fj5zn8.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpp0fj5zn8.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp0fj5zn8.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((caps (count-if char-upper-case?\
    \ extension))\n          (smalls (count-if char-lower-case? extension)))\n   \
    \   (- caps smalls)))\n  (define (strongest-extension lst)\n    (if (null? lst)\n\
    \        \"\"\n        (let ((extension (car lst))\n              (rest (cdr lst)))\n\
    \          (if (null? rest)\n              extension\n              (let ((next\
    \ (strongest-extension rest)))\n                (if (&gt; (strength extension)\
    \ (strength next))\n                    extension\n                    next))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptgvxuro7.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 35\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((caps (string-count ext #\\\
    A #\\Z))\n          (smalls (string-count ext #\\a #\\z)))\n      (/ (- caps smalls)\
    \ (string-length ext))))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpofba99a8.rkt:20:17: string-count: unbound identifier\n  in: string-count\n\
    \  location...:\n   /tmp/tmpofba99a8.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (regexp-match #rx\"[A-Z]\"\
    \ ext))\n          (sm (regexp-match #rx\"[a-z]\" ext)))\n      (- (length cap)\
    \ (length sm))))\n  (define (strongest-extension lst)\n    (let ((max-strength\
    \ (apply max (map strength lst)))\n          (max-ext (car lst)))\n      (for\
    \ ([ext lst])\n        (if (= (strength ext) max-strength)\n            (set!\
    \ max-ext ext)))\n      max-ext))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpakgbj1up.rkt:27:8: if: missing an \"else\" expression\n  in: (if\
    \ (= (strength ext) max-strength) (set! max-ext ext))\n  location...:\n   /tmp/tmpakgbj1up.rkt:27:8\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (count-upper-case extension)\n\
    \      (if (empty? extension)\n          0\n          (if (char-upper-case? (car\
    \ extension))\n              (+ 1 (count-upper-case (cdr extension)))\n      \
    \        (count-upper-case (cdr extension)))))\n    (define (count-lower-case\
    \ extension)\n      (if (empty? extension)\n          0\n          (if (char-lower-case?\
    \ (car extension))\n              (+ 1 (count-lower-case (cdr extension)))\n \
    \             (count-lower-case (cdr extension)))))\n    (- (count-upper-case\
    \ extension) (count-lower-case extension)))\n  (define (find-strongest-extension\
    \ extensions)\n    (if (empty? extensions)\n        \"\"\n        (if (empty?\
    \ (cdr extensions))\n            (car extensions)\n            (if (> (strength\
    \ (car extensions)) (strength (cadr extensions)))\n                (find-strongest-extension\
    \ (cons (car extensions) (cddr extensions)))\n                (find-strongest-extension\
    \ (cdr extensions))))))\n  (string-append class_name \".\" (find-strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplydzrkin.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplydzrkin.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplydzrkin.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplydzrkin.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplydzrkin.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplydzrkin.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplydzrkin.rkt:54:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplydzrkin.rkt:55:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplydzrkin.rkt:56:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let loop ([cap 0] [sm 0] [i 0])\n\
    \      (cond [(= i (string-length ext))\n             (/ cap (- sm))]\n      \
    \      [(char-upper-case? (string-ref ext i))\n             (loop (+ cap 1) sm\
    \ (+ i 1))]\n            [(char-lower-case? (string-ref ext i))\n            \
    \ (loop cap (+ sm 1) (+ i 1))]\n            [else\n             (loop cap sm (+\
    \ i 1))])))\n  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-helper\
    \ extensions strongest-extension-name)\n      (cond [(empty? extensions)\n   \
    \          strongest-extension-name]\n            [(> (strength (first extensions))\
    \ (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (rest extensions) (first extensions))]\n            [else\n             (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-helper\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppvefskwk.rkt:45:4

    actual:     "Watashi.niNE"

    expected:   "Watashi.eIGHt8OKe"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppvefskwk.rkt:46:4

    actual:     "Boku123.nani"

    expected:   "Boku123.YEs.WeCaNe"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppvefskwk.rkt:47:4

    actual:     "__YESIMHERE.t"

    expected:   "__YESIMHERE.NuLl__"

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppvefskwk.rkt:48:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppvefskwk.rkt:49:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppvefskwk.rkt:50:4


    /: division by zero

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppvefskwk.rkt:51:4

    actual:     "finNNalLLly.Die"

    expected:   "finNNalLLly.WoW"

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppvefskwk.rkt:52:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppvefskwk.rkt:53:4


    /: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (define (count-upper str)\n     \
    \ (if (empty? str)\n          0\n          (if (char-upper-case? (first str))\n\
    \              (+ 1 (count-upper (rest str)))\n              (count-upper (rest\
    \ str)))))\n    (define (count-lower str)\n      (if (empty? str)\n          0\n\
    \          (if (char-lower-case? (first str))\n              (+ 1 (count-lower\
    \ (rest str)))\n              (count-lower (rest str)))))\n    (- (count-upper\
    \ str) (count-lower str)))\n  (define (strongest-extension extensions)\n    (if\
    \ (empty? extensions)\n        \"\"\n        (if (empty? (rest extensions))\n\
    \            (first extensions)\n            (if (> (strength (first extensions))\
    \ (strength (second extensions)))\n                (strongest-extension (cons\
    \ (first extensions) (rest (rest extensions))))\n                (strongest-extension\
    \ (cons (second extensions) (rest (rest extensions))))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7k51ghb.rkt:48:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"tEN\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe7k51ghb.rkt:49:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7k51ghb.rkt:50:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"t\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe7k51ghb.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7k51ghb.rkt:52:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Tab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe7k51ghb.rkt:53:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7k51ghb.rkt:54:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Die\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe7k51ghb.rkt:55:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7k51ghb.rkt:56:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_upper str)\n    (let loop ([i 0] [count 0])\n\
    \      (if (= i (string-length str))\n          count\n          (if (char-upper-case?\
    \ (string-ref str i))\n              (loop (+ i 1) (+ count 1))\n            \
    \  (loop (+ i 1) count)))))\n  (define (count_lower str)\n    (let loop ([i 0]\
    \ [count 0])\n      (if (= i (string-length str))\n          count\n         \
    \ (if (char-lower-case? (string-ref str i))\n              (loop (+ i 1) (+ count\
    \ 1))\n              (loop (+ i 1) count)))))\n  (define (strength str)\n    (/\
    \ (- (count_upper str) (count_lower str)) 1.0))\n  (define (find_strongest extensions)\n\
    \    (if (null? extensions)\n        \"\"\n        (if (= (strength (car extensions))\
    \ (strength (find_strongest (cdr extensions))))\n            (car extensions)\n\
    \            (find_strongest (cdr extensions)))))\n  (string-append class_name\
    \ \".\" (find_strongest extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp953f3z53.rkt:48:4

    actual:     "Watashi.niNE"

    expected:   "Watashi.eIGHt8OKe"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp953f3z53.rkt:49:4

    actual:     "Boku123."

    expected:   "Boku123.YEs.WeCaNe"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp953f3z53.rkt:51:4

    actual:     "K.Ta"

    expected:   "K.TAR"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp953f3z53.rkt:53:4

    actual:     "YameRore.-_-"

    expected:   "YameRore.okIWILL123"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp953f3z53.rkt:54:4

    actual:     "finNNalLLly.NowW"

    expected:   "finNNalLLly.WoW"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((caps (regexp-match #rx\"[A-Z]\"\
    \ ext))\n          (smalls (regexp-match #rx\"[a-z]\" ext)))\n      (/ (- (length\
    \ caps) (length smalls)) 1.0)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ((strongest-extension (car extensions))\n          (strongest-strength\
    \ (strength (car extensions))))\n      (for ([ext (in-list (cdr extensions))])\n\
    \        (let ((strength (strength ext)))\n          (when (> strength strongest-strength)\n\
    \            (set! strongest-extension ext)\n            (set! strongest-strength\
    \ strength))))\n      strongest-extension))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpca8dwqkw.rkt:39:4\n\
    actual:     \"Watashi.tEN\"\nexpected:   \"Watashi.eIGHt8OKe\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpca8dwqkw.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpca8dwqkw.rkt:41:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpca8dwqkw.rkt:42:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpca8dwqkw.rkt:43:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpca8dwqkw.rkt:44:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpca8dwqkw.rkt:45:4\n\
    actual:     \"finNNalLLly.Die\"\nexpected:   \"finNNalLLly.WoW\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpca8dwqkw.rkt:46:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpca8dwqkw.rkt:47:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper-lower str)\n    (let ([upper (count (lambda\
    \ (c) (char-upper-case? c)) str)]\n          [lower (count (lambda (c) (char-lower-case?\
    \ c)) str)])\n      (- upper lower)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([extensions (sort extensions (lambda (a b) (< (count-upper-lower a)\
    \ (count-upper-lower b))))])\n      (car extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpufy31ioj.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpufy31ioj.rkt:20:24>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpufy31ioj.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpufy31ioj.rkt:20:24>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpufy31ioj.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpufy31ioj.rkt:20:24>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpufy31ioj.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpufy31ioj.rkt:20:24>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpufy31ioj.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpufy31ioj.rkt:20:24>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpufy31ioj.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpufy31ioj.rkt:20:24>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpufy31ioj.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpufy31ioj.rkt:20:24>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpufy31ioj.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([extensions (map (lambda (extension) (list extension (strength\
    \ extension))) extensions)])\n    (string-append class_name \".\" (car (argmax\
    \ extensions (lambda (x y) (< (cadr x) (cadr y))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1ptj5lp5.rkt:19:62: strength: unbound identifier\n  in: strength\n\
    \  location...:\n   /tmp/tmp1ptj5lp5.rkt:19:62\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([extension (car extensions)]\n\
    \          [rest (cdr extensions)])\n      (if (null? rest)\n          extension\n\
    \          (let ([next-extension (strongest-extension-name rest)])\n         \
    \   (if (&gt; (strength extension) (strength next-extension))\n              \
    \  extension\n                next-extension)))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjq7bqt_h.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 33\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let loop ([i 0] [cap 0] [sm 0])\n\
    \      (cond [(= i (string-length ext))\n             (/ cap (- cap sm))]\n  \
    \          [(char-upper-case? (string-ref ext i))\n             (loop (+ i 1)\
    \ (+ cap 1) sm)]\n            [(char-lower-case? (string-ref ext i))\n       \
    \      (loop (+ i 1) cap (+ sm 1))]\n            [else\n             (loop (+\
    \ i 1) cap sm)])))\n  (define (strongest-extension lst)\n    (cond [(null? lst)\n\
    \           \"\"]\n          [(null? (cdr lst))\n           (car lst)]\n     \
    \     [else\n           (let ([ext1 (car lst)]\n                 [ext2 (cadr lst)])\n\
    \             (if (> (strength ext1) (strength ext2))\n                 ext1\n\
    \                 ext2))]))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmps_bs3hbe.rkt:47:4


    /: division by zero

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps_bs3hbe.rkt:48:4

    actual:     "Boku123.nani"

    expected:   "Boku123.YEs.WeCaNe"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps_bs3hbe.rkt:49:4

    actual:     "__YESIMHERE.t"

    expected:   "__YESIMHERE.NuLl__"

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmps_bs3hbe.rkt:50:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmps_bs3hbe.rkt:51:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmps_bs3hbe.rkt:53:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmps_bs3hbe.rkt:54:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmps_bs3hbe.rkt:55:4


    /: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((caps (count-if char-upper-case?\
    \ ext))\n          (smalls (count-if char-lower-case? ext)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ((strongest-extension\
    \ (car extensions))\n          (strongest-extension-strength (strength (car extensions))))\n\
    \      (for ([ext (in-list (cdr extensions))])\n        (let ((ext-strength (strength\
    \ ext)))\n          (when (> ext-strength strongest-extension-strength)\n    \
    \        (set! strongest-extension ext)\n            (set! strongest-extension-strength\
    \ ext-strength))))\n      strongest-extension))\n  (string-append class_name \"\
    .\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjbnpz441.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpjbnpz441.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) str)]\n          [smalls (count (lambda (c) (char-lower-case? c)) str)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (if (null? extensions)\n        \"\"\n        (let ([extension (car extensions)]\n\
    \              [rest (cdr extensions)])\n          (if (null? rest)\n        \
    \      extension\n              (let ([next-extension (car rest)]\n          \
    \          [next-rest (cdr rest)])\n                (if (< (strength extension)\
    \ (strength next-extension))\n                    (strongest-extension-name (cons\
    \ next-extension next-rest))\n                    (strongest-extension-name (cons\
    \ extension next-rest))))))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7jwcx1r.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmph7jwcx1r.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7jwcx1r.rkt:43:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmph7jwcx1r.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph7jwcx1r.rkt:44:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmph7jwcx1r.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph7jwcx1r.rkt:45:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmph7jwcx1r.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph7jwcx1r.rkt:46:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmph7jwcx1r.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7jwcx1r.rkt:47:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmph7jwcx1r.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph7jwcx1r.rkt:48:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmph7jwcx1r.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph7jwcx1r.rkt:49:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap (count-if char-upper-case?\
    \ extension)]\n          [sm (count-if char-lower-case? extension)])\n      (-\
    \ cap sm)))\n  (define (strongest-extension extensions)\n    (let ([extensions\
    \ (sort extensions (\u03BB (x y) (< (strength x) (strength y))))])\n      (car\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk_sbvi1j.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpk_sbvi1j.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhmdqgd_.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhmdqgd_.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhmdqgd_.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhmdqgd_.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbhmdqgd_.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhmdqgd_.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbhmdqgd_.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpbhmdqgd_.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhmdqgd_.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhmdqgd_.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhmdqgd_.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhmdqgd_.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbhmdqgd_.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpbhmdqgd_.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhmdqgd_.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (regexp-match #rx\"[A-Z]\"\
    \ str)]\n          [smalls (regexp-match #rx\"[a-z]\" str)])\n      (- (length\
    \ caps) (length smalls))))\n  (define (strongest-extension-name extensions)\n\
    \    (if (null? extensions)\n        \"\"\n        (let ([ext (car extensions)]\n\
    \              [rest (cdr extensions)])\n          (if (null? rest)\n        \
    \      ext\n              (let ([rest-ext (strongest-extension-name rest)])\n\
    \                (if (> (strength ext) (strength rest-ext))\n                \
    \    ext\n                    rest-ext))))))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurfsgj02.rkt:42:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurfsgj02.rkt:43:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurfsgj02.rkt:44:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurfsgj02.rkt:45:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurfsgj02.rkt:46:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurfsgj02.rkt:48:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurfsgj02.rkt:49:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (/ (- (count-upper str) (count-lower str)) (string-length str)))\n\
    \  (define (strongest-extension strs)\n    (apply max (map strength strs)))\n\
    \  (define (strongest-extension-name strs)\n    (list-ref (filter (\u03BB (str)\
    \ (= (strength str) (strongest-extension strs))) strs) 0))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi82tfm2r.rkt:38:4

    actual:     "Watashi.tEN"

    expected:   "Watashi.eIGHt8OKe"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (let ([extensions (sort extensions string<? #:key strength)])\n      (car extensions)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpko5fjett.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpko5fjett.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpko5fjett.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpko5fjett.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpko5fjett.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpko5fjett.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpko5fjett.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpko5fjett.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpko5fjett.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpko5fjett.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpko5fjett.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpko5fjett.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpko5fjett.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpko5fjett.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpko5fjett.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplsoqnfsb.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmplsoqnfsb.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplsoqnfsb.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmplsoqnfsb.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplsoqnfsb.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmplsoqnfsb.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplsoqnfsb.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmplsoqnfsb.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplsoqnfsb.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmplsoqnfsb.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplsoqnfsb.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmplsoqnfsb.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplsoqnfsb.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmplsoqnfsb.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplsoqnfsb.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper-case str)\n    (let loop ([i 0] [count 0])\n\
    \      (if (= i (string-length str))\n          count\n          (if (char-upper-case?\
    \ (string-ref str i))\n              (loop (+ i 1) (+ count 1))\n            \
    \  (loop (+ i 1) count)))))\n  (define (count-lower-case str)\n    (let loop ([i\
    \ 0] [count 0])\n      (if (= i (string-length str))\n          count\n      \
    \    (if (char-lower-case? (string-ref str i))\n              (loop (+ i 1) (+\
    \ count 1))\n              (loop (+ i 1) count)))))\n  (define (strength str)\n\
    \    (/ (- (count-upper-case str) (count-lower-case str)) 1.0))\n  (define (strongest-extension\
    \ extensions)\n    (define (strongest-extension-helper extensions strongest-strength\
    \ strongest-extension)\n      (if (null? extensions)\n          strongest-extension\n\
    \          (let ([ext (car extensions)])\n            (if (> (strength ext) strongest-strength)\n\
    \                (strongest-extension-helper (cdr extensions) (strength ext) ext)\n\
    \                (strongest-extension-helper (cdr extensions) strongest-strength\
    \ strongest-extension)))))\n    (strongest-extension-helper extensions -1.0 \"\
    \"))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond\n        [(empty? extensions) strongest-extension-name]\n       \
    \ [(> (strength (first extensions)) (strength strongest-extension-name))\n   \
    \      (strongest-extension-name-helper (rest extensions) (first extensions))]\n\
    \        [else (strongest-extension-name-helper (rest extensions) strongest-extension-name)]))\n\
    \    (strongest-extension-name-helper extensions (first extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9lessqn.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt9lessqn.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9lessqn.rkt:39:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt9lessqn.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt9lessqn.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt9lessqn.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt9lessqn.rkt:41:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpt9lessqn.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9lessqn.rkt:42:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt9lessqn.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9lessqn.rkt:43:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt9lessqn.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt9lessqn.rkt:44:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpt9lessqn.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9lessqn.rkt:45:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (count_upper extension)\n\
    \      (if (empty? extension)\n          0\n          (if (char-upper-case? (car\
    \ extension))\n              (+ 1 (count_upper (cdr extension)))\n           \
    \   (count_upper (cdr extension)))))\n    (define (count_lower extension)\n  \
    \    (if (empty? extension)\n          0\n          (if (char-lower-case? (car\
    \ extension))\n              (+ 1 (count_lower (cdr extension)))\n           \
    \   (count_lower (cdr extension)))))\n    (- (count_upper extension) (count_lower\
    \ extension)))\n  (define (strongest_extension extensions)\n    (if (empty? extensions)\n\
    \        \"\"\n        (if (= (strength (car extensions)) (strength (cadr extensions)))\n\
    \            (string-append class_name \".\" (car extensions))\n            (string-append\
    \ class_name \".\" (car extensions)))))\n  (strongest_extension extensions))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbebysqfc.rkt:46:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbebysqfc.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbebysqfc.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbebysqfc.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbebysqfc.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbebysqfc.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbebysqfc.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbebysqfc.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbebysqfc.rkt:54:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-caps str)\n    (define (count-caps-iter str count)\n\
    \      (cond\n        [(empty? str) count]\n        [(char-upper-case? (first\
    \ str)) (count-caps-iter (rest str) (+ count 1))]\n        [else (count-caps-iter\
    \ (rest str) count)]))\n    (count-caps-iter str 0))\n  (define (count-smalls\
    \ str)\n    (define (count-smalls-iter str count)\n      (cond\n        [(empty?\
    \ str) count]\n        [(char-lower-case? (first str)) (count-smalls-iter (rest\
    \ str) (+ count 1))]\n        [else (count-smalls-iter (rest str) count)]))\n\
    \    (count-smalls-iter str 0))\n  (define (strength str)\n    (/ (- (count-caps\
    \ str) (count-smalls str)) (string-length str)))\n  (define (strongest-extension-iter\
    \ extensions strongest-extension)\n    (cond\n      [(empty? extensions) strongest-extension]\n\
    \      [(> (strength (first extensions)) (strength strongest-extension))\n   \
    \    (strongest-extension-iter (rest extensions) (first extensions))]\n      [else\
    \ (strongest-extension-iter (rest extensions) strongest-extension)]))\n  (string-append\
    \ class_name \".\" (strongest-extension-iter extensions (first extensions))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgukca91z.rkt:48:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"tEN\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgukca91z.rkt:49:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgukca91z.rkt:50:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"t\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgukca91z.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgukca91z.rkt:52:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Tab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgukca91z.rkt:53:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgukca91z.rkt:54:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Die\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgukca91z.rkt:55:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgukca91z.rkt:56:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([extensions (map string->list extensions)])\n    (let ([strongest-extension\
    \ (apply max extensions (lambda (ext1 ext2)\n                                \
    \                      (let ([cap1 (count (lambda (c) (char-upper-case? c)) ext1)])\n\
    \                                                        (let ([sm1 (count (lambda\
    \ (c) (char-lower-case? c)) ext1)])\n                                        \
    \                  (let ([cap2 (count (lambda (c) (char-upper-case? c)) ext2)])\n\
    \                                                            (let ([sm2 (count\
    \ (lambda (c) (char-lower-case? c)) ext2)])\n                                \
    \                              (if (= (- cap1 sm1) (- cap2 sm2))\n           \
    \                                                       (string<? (list->string\
    \ ext1) (list->string ext2))\n                                               \
    \                   (> (- cap1 sm1) (- cap2 sm2))))))))))])\n      (string-append\
    \ class_name \".\" (list->string strongest-extension)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7pxffqtc.rkt:27:102: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([cap (count-if char-upper-case?\
    \ str)]\n          [sm (count-if char-lower-case? str)])\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6l_9_g6h.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp6l_9_g6h.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((cap (count-if char-upper-case?\
    \ extension))\n          (sm (count-if char-lower-case? extension)))\n      (-\
    \ cap sm)))\n  (define (strongest-extension extensions)\n    (let ((strongest-extension\
    \ (car extensions))\n          (strongest-strength (strength (car extensions))))\n\
    \      (for/fold ([strongest-extension (car extensions)]\n                 [strongest-strength\
    \ (strength (car extensions))])\n          ([extension (in-list (cdr extensions))])\n\
    \        (let ((strength (strength extension)))\n          (if (> strength strongest-strength)\n\
    \              (values extension strength)\n              (values strongest-extension\
    \ strongest-strength))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm_f0fk2l.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpm_f0fk2l.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (define (strongest-extension-name-iter extensions strongest-ext-name)\n   \
    \   (cond [(empty? extensions) strongest-ext-name]\n            [(> (strength\
    \ (first extensions)) (strength strongest-ext-name))\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-iter\
    \ (rest extensions) strongest-ext-name)]))\n    (strongest-extension-name-iter\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcua5m0p.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpxcua5m0p.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcua5m0p.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpxcua5m0p.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxcua5m0p.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpxcua5m0p.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxcua5m0p.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpxcua5m0p.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcua5m0p.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpxcua5m0p.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcua5m0p.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpxcua5m0p.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxcua5m0p.rkt:43:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpxcua5m0p.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcua5m0p.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ((caps (count-if char-upper-case?\
    \ str))\n          (smalls (count-if char-lower-case? str)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-iter\
    \ extensions strongest-extension-name)\n      (cond ((null? extensions) strongest-extension-name)\n\
    \            ((> (strength (car extensions)) (strength strongest-extension-name))\n\
    \             (strongest-extension-name-iter (cdr extensions) (car extensions)))\n\
    \            (else (strongest-extension-name-iter (cdr extensions) strongest-extension-name))))\n\
    \    (strongest-extension-name-iter extensions (car extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmw3zue_l.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpmw3zue_l.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper-lower str)\n    (let ((upper 0) (lower 0))\n\
    \      (for ([c (in-string str)])\n        (cond\n          [(char-upper-case?\
    \ c) (set! upper (+ upper 1))]\n          [(char-lower-case? c) (set! lower (+\
    \ lower 1))]))\n      (cons upper lower)))\n  (define (strength str)\n    (let\
    \ ((upper-lower (count-upper-lower str)))\n      (/ (- (car upper-lower) (cdr\
    \ upper-lower)) 1.0)))\n  (define (strongest-extension lst)\n    (let ((strongest-extension\
    \ (car lst))\n          (strongest-strength (strength (car lst))))\n      (for\
    \ ([ext (in-list (cdr lst))])\n        (let ((ext-strength (strength ext)))\n\
    \          (cond\n            [(> ext-strength strongest-strength)\n         \
    \    (set! strongest-extension ext)\n             (set! strongest-strength ext-strength)])))\n\
    \      strongest-extension))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmin (map strength extensions)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdngmmz2_.rkt:36:4\n\
    \nargmin: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdngmmz2_.rkt:37:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdngmmz2_.rkt:38:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdngmmz2_.rkt:39:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdngmmz2_.rkt:40:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdngmmz2_.rkt:41:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdngmmz2_.rkt:42:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdngmmz2_.rkt:43:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdngmmz2_.rkt:44:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (let ([strongest (apply max (map strength extensions))])\n\
    \    (string-append class_name \".\" (list-ref extensions (position strongest\
    \ extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpze2ux7dj.rkt:24:56: position: unbound identifier\n  in: position\n\
    \  location...:\n   /tmp/tmpze2ux7dj.rkt:24:56\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_caps str)\n    (cond\n      [(empty? str) 0]\n\
    \      [(char-upper-case? (car str)) (+ 1 (count_caps (cdr str)))]\n      [else\
    \ (count_caps (cdr str))]))\n  (define (count_smalls str)\n    (cond\n      [(empty?\
    \ str) 0]\n      [(char-lower-case? (car str)) (+ 1 (count_smalls (cdr str)))]\n\
    \      [else (count_smalls (cdr str))]))\n  (define (strength str)\n    (/ (-\
    \ (count_caps str) (count_smalls str)) (string-length str)))\n  (define (strongest_extensions\
    \ lst)\n    (cond\n      [(empty? lst) (error \"No extensions\")]\n      [(empty?\
    \ (cdr lst)) (car lst)]\n      [(> (strength (car lst)) (strength (cadr lst)))\
    \ (strongest_extensions (cons (car lst) (cddr lst)))]\n      [else (strongest_extensions\
    \ (cdr lst))]))\n  (string-append class_name \".\" (strongest_extensions extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj7psxqn.rkt:44:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj7psxqn.rkt:45:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj7psxqn.rkt:46:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj7psxqn.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj7psxqn.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj7psxqn.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj7psxqn.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj7psxqn.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj7psxqn.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (let ([strongest-extension (apply max extensions)])\n      (list-ref extensions\
    \ (list-index strongest-extension extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2aayxwhc.rkt:25:28: list-index: unbound identifier\n  in: list-index\n\
    \  location...:\n   /tmp/tmp2aayxwhc.rkt:25:28\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ lst)\n    (let ([strongest (car lst)])\n      (for ([ext (in-list (cdr lst))])\n\
    \        (when (> (strength ext) (strength strongest))\n          (set! strongest\
    \ ext)))\n      strongest))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-helper\
    \ extensions strongest-strength strongest-name)\n      (cond [(empty? extensions)\
    \ strongest-name]\n            [else (let ([extension (first extensions)]\n  \
    \                      [strength (strength extension)])\n                    (if\
    \ (> strength strongest-strength)\n                        (strongest-extension-name-helper\
    \ (rest extensions) strength extension)\n                        (strongest-extension-name-helper\
    \ (rest extensions) strongest-strength strongest-name)))]))\n    (strongest-extension-name-helper\
    \ extensions -1 \"\"))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnbf401f5.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpnbf401f5.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count-if char-upper-case?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (define (strongest-extension-index extensions)\n    (list-ref\
    \ extensions (argmax (map strength extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-index extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr0eq4wq6.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpr0eq4wq6.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (count-upper str)\n     \
    \ (if (empty? str)\n          0\n          (if (char-upper-case? (first str))\n\
    \              (+ 1 (count-upper (rest str)))\n              (count-upper (rest\
    \ str)))))\n    (define (count-lower str)\n      (if (empty? str)\n          0\n\
    \          (if (char-lower-case? (first str))\n              (+ 1 (count-lower\
    \ (rest str)))\n              (count-lower (rest str)))))\n    (- (count-upper\
    \ ext) (count-lower ext)))\n  (define (strongest-extension extensions)\n    (if\
    \ (empty? extensions)\n        \"\"\n        (let ([ext (first extensions)])\n\
    \          (if (empty? (rest extensions))\n              ext\n              (let\
    \ ([next-ext (strongest-extension (rest extensions))])\n                (if (>\
    \ (strength ext) (strength next-ext))\n                    ext\n             \
    \       next-ext))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp05qnsoah.rkt:50:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"niNE\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp05qnsoah.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"YEs.WeCaNe\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp05qnsoah.rkt:52:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"NuLl__\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp05qnsoah.rkt:53:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"t234An\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp05qnsoah.rkt:54:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"781345\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp05qnsoah.rkt:55:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Fails\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp05qnsoah.rkt:56:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Wow\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp05qnsoah.rkt:57:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp05qnsoah.rkt:58:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (if (null? extensions)\n\
    \        \"\"\n        (let ([ext (car extensions)]\n              [rest (cdr\
    \ extensions)])\n          (if (null? rest)\n              ext\n             \
    \ (let ([next-strongest (strongest-extension-name rest)])\n                (if\
    \ (> (strength ext) (strength next-strongest))\n                    ext\n    \
    \                next-strongest))))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptef0ts_1.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmptef0ts_1.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((caps (count-if char-upper-case?\
    \ ext))\n          (smalls (count-if char-lower-case? ext)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max-by strength extensions))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaa3l4f_7.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpaa3l4f_7.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (count-if char-upper-case?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0xlav9s8.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp0xlav9s8.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((cap-count (count-if\
    \ char-upper-case? extension))\n          (sm-count (count-if char-lower-case?\
    \ extension)))\n      (- cap-count sm-count)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb19eb96w.rkt:20:22: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpb19eb96w.rkt:20:22\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) str)]\n          [sm (count (lambda (c) (char-lower-case? c)) str)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp30zpfo8c.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp30zpfo8c.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp30zpfo8c.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp30zpfo8c.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp30zpfo8c.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp30zpfo8c.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp30zpfo8c.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmp30zpfo8c.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp30zpfo8c.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp30zpfo8c.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp30zpfo8c.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp30zpfo8c.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp30zpfo8c.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmp30zpfo8c.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp30zpfo8c.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (define\
    \ (strongest-extension-name-iter extensions strongest-extension-name strongest-extension-strength)\n\
    \      (cond [(empty? extensions) strongest-extension-name]\n            [(> (strength\
    \ (first extensions)) strongest-extension-strength)\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions) (strength (first extensions)))]\n     \
    \       [else (strongest-extension-name-iter (rest extensions) strongest-extension-name\
    \ strongest-extension-strength)]))\n    (strongest-extension-name-iter extensions\
    \ (first extensions) (strength (first extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp80h5ovxz.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80h5ovxz.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp80h5ovxz.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80h5ovxz.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp80h5ovxz.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80h5ovxz.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp80h5ovxz.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmp80h5ovxz.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp80h5ovxz.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80h5ovxz.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp80h5ovxz.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80h5ovxz.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp80h5ovxz.rkt:43:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmp80h5ovxz.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp80h5ovxz.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap-count (count-if\
    \ char-upper-case? extension)]\n          [sm-count (count-if char-lower-case?\
    \ extension)])\n      (- cap-count sm-count)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([strongest-extension (first extensions)])\n      (for\
    \ ([extension extensions])\n        (when (> (strength extension) (strength strongest-extension))\n\
    \          (set! strongest-extension extension)))\n      strongest-extension))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyuuvi44c.rkt:20:22: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpyuuvi44c.rkt:20:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ((cap (count-if char-upper-case?\
    \ str))\n          (sm (count-if char-lower-case? str)))\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-iter\
    \ extensions strongest-extension-name)\n      (cond ((null? extensions) strongest-extension-name)\n\
    \            ((> (strength (car extensions)) (strength strongest-extension-name))\n\
    \             (strongest-extension-name-iter (cdr extensions) (car extensions)))\n\
    \            (else (strongest-extension-name-iter (cdr extensions) strongest-extension-name))))\n\
    \    (strongest-extension-name-iter extensions (car extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuob9pkk8.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpuob9pkk8.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((caps (count-if char-upper-case?\
    \ extension))\n          (smalls (count-if char-lower-case? extension)))\n   \
    \   (- caps smalls)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4n5iobqq.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp4n5iobqq.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) extension)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) extension)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([extensions (sort extensions (lambda (a b) (< (strength a) (strength\
    \ b))))])\n      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6ixyur8.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6ixyur8.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj6ixyur8.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpj6ixyur8.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6ixyur8.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6ixyur8.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6ixyur8.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6ixyur8.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6ixyur8.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6ixyur8.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6ixyur8.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6ixyur8.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj6ixyur8.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpj6ixyur8.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6ixyur8.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count-if char-upper-case?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (let ([ext (car lst)]\n          [rest\
    \ (cdr lst)])\n      (if (null? rest)\n          ext\n          (let ([next (strongest-extension\
    \ rest)])\n            (if (> (strength ext) (strength next))\n              \
    \  ext\n                next)))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb1pep0m5.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpb1pep0m5.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) extension)]\n          [smalls (count (lambda (c)\
    \ (char-lower-case? c)) extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_39mbbab.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_39mbbab.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_39mbbab.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_39mbbab.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_39mbbab.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_39mbbab.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_39mbbab.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmp_39mbbab.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_39mbbab.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_39mbbab.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_39mbbab.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_39mbbab.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_39mbbab.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmp_39mbbab.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_39mbbab.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (count-if char-upper-case?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (/ cap sm)))\n\
    \  (define (strongest-extension-name exts)\n    (apply max-by strength exts))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoyi8e861.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpoyi8e861.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest_extension_name extensions)\n  \
    \  (let ([strongest_extension (first extensions)])\n      (for ([ext (in-list\
    \ extensions)])\n        (when (> (strength ext) (strength strongest_extension))\n\
    \          (set! strongest_extension ext)))\n      strongest_extension))\n  (string-append\
    \ class_name \".\" (strongest_extension_name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9wlh6ets.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9wlh6ets.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9wlh6ets.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9wlh6ets.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9wlh6ets.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9wlh6ets.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9wlh6ets.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmp9wlh6ets.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9wlh6ets.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9wlh6ets.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9wlh6ets.rkt:41:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9wlh6ets.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9wlh6ets.rkt:42:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmp9wlh6ets.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9wlh6ets.rkt:43:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-caps str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-smalls str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (/ (- (count-caps str) (count-smalls str)) (string-length str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmin (map strength extensions)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rokn5ae.rkt:36:4\n\
    \nargmin: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rokn5ae.rkt:37:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rokn5ae.rkt:38:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rokn5ae.rkt:39:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rokn5ae.rkt:40:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rokn5ae.rkt:41:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rokn5ae.rkt:42:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rokn5ae.rkt:43:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rokn5ae.rkt:44:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((caps (count-if char-upper-case?\
    \ ext))\n          (smalls (count-if char-lower-case? ext)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (if (null? lst)\n        '()\n     \
    \   (if (null? (cdr lst))\n            (car lst)\n            (if (> (strength\
    \ (car lst)) (strength (cadr lst)))\n                (strongest-extension (cons\
    \ (car lst) (cddr lst)))\n                (strongest-extension (cdr lst))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpefbn49il.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpefbn49il.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((caps (count-if char-upper-case?\
    \ extension))\n          (smalls (count-if char-lower-case? extension)))\n   \
    \   (- caps smalls)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (strongest-extension-name extensions))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx5gw3uu7.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpx5gw3uu7.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (let\
    \ ([strongest-extension (car extensions)]\n          [strongest-strength (strength\
    \ (car extensions))])\n      (for ([ext (cdr extensions)])\n        (let ([strength\
    \ (strength ext)])\n          (when (> strength strongest-strength)\n        \
    \    (set! strongest-extension ext)\n            (set! strongest-strength strength))))\n\
    \      strongest-extension))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehu4184z.rkt:39:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpehu4184z.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehu4184z.rkt:40:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpehu4184z.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpehu4184z.rkt:41:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpehu4184z.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpehu4184z.rkt:42:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpehu4184z.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpehu4184z.rkt:43:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpehu4184z.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehu4184z.rkt:44:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpehu4184z.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpehu4184z.rkt:45:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpehu4184z.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpehu4184z.rkt:46:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (define (strongest-extension-name\
    \ lst)\n    (list-ref lst (argmax strength lst)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppi5zrg7z.rkt:38:4


    list-ref: index "eIGHt8OKe" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppi5zrg7z.rkt:39:4


    list-ref: index "YEs.WeCaNe" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppi5zrg7z.rkt:40:4


    list-ref: index "NuLl__" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppi5zrg7z.rkt:41:4


    list-ref: index "TAR" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppi5zrg7z.rkt:42:4


    list-ref: index "123" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppi5zrg7z.rkt:43:4


    list-ref: index "okIWILL123" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppi5zrg7z.rkt:44:4


    list-ref: index "WoW" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppi5zrg7z.rkt:45:4


    list-ref: index "Bb" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppi5zrg7z.rkt:46:4


    list-ref: index "671235" is not an exact nonnegative integer

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-caps str)\n    (let loop ([i 0] [count 0])\n \
    \     (if (= i (string-length str))\n          count\n          (if (char-upper-case?\
    \ (string-ref str i))\n              (loop (+ i 1) (+ count 1))\n            \
    \  (loop (+ i 1) count)))))\n  (define (count-smalls str)\n    (let loop ([i 0]\
    \ [count 0])\n      (if (= i (string-length str))\n          count\n         \
    \ (if (char-lower-case? (string-ref str i))\n              (loop (+ i 1) (+ count\
    \ 1))\n              (loop (+ i 1) count)))))\n  (define (strength str)\n    (-\
    \ (count-caps str) (count-smalls str)))\n  (define (strongest-extension lst)\n\
    \    (cond [(empty? lst) '()]\n          [(empty? (rest lst)) (first lst)]\n \
    \         [else (let ([a (first lst)]\n                       [b (first (rest\
    \ lst))])\n                  (if (> (strength a) (strength b))\n             \
    \         (strongest-extension (cons a (rest (rest lst))))\n                 \
    \     (strongest-extension (cons b (rest (rest lst))))))]))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3v8jsa0g.rkt:54:4

    actual:     "__HAHA.-_-"

    expected:   "__HAHA.123"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3v8jsa0g.rkt:57:4

    actual:     "_.91245"

    expected:   "_.Bb"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3v8jsa0g.rkt:58:4

    actual:     "Sp.Bb"

    expected:   "Sp.671235"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzp05u9x.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpgzp05u9x.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzp05u9x.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpgzp05u9x.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgzp05u9x.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpgzp05u9x.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgzp05u9x.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpgzp05u9x.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzp05u9x.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpgzp05u9x.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzp05u9x.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpgzp05u9x.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgzp05u9x.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpgzp05u9x.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzp05u9x.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper-case str)\n    (foldl (lambda (c acc) (if\
    \ (char-upper-case? c) (add1 acc) acc)) 0 str))\n  (define (count-lower-case str)\n\
    \    (foldl (lambda (c acc) (if (char-lower-case? c) (add1 acc) acc)) 0 str))\n\
    \  (define (strength str)\n    (define upper (count-upper-case str))\n    (define\
    \ lower (count-lower-case str))\n    (/ (- upper lower) (add1 (string-length str))))\n\
    \  (define (strongest-extension lst)\n    (foldl (lambda (ext acc)\n         \
    \    (if (&gt; (strength ext) (strength acc)) ext acc))\n           (car lst)\
    \ (cdr lst)))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk8jcni8c.rkt:28:4: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 32\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (let ([strongest-extension (apply max extensions)])\n      (list-ref extensions\
    \ (list-index strongest-extension extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvv75fy8t.rkt:25:28: list-index: unbound identifier\n  in: list-index\n\
    \  location...:\n   /tmp/tmpvv75fy8t.rkt:25:28\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (count-upper ext)\n     \
    \ (if (empty? ext)\n          0\n          (if (char-upper-case? (car ext))\n\
    \              (+ 1 (count-upper (cdr ext)))\n              (count-upper (cdr\
    \ ext)))))\n    (define (count-lower ext)\n      (if (empty? ext)\n          0\n\
    \          (if (char-lower-case? (car ext))\n              (+ 1 (count-lower (cdr\
    \ ext)))\n              (count-lower (cdr ext)))))\n    (/ (- (count-upper ext)\
    \ (count-lower ext)) (length ext)))\n  (define (strongest-extension extensions)\n\
    \    (if (empty? extensions)\n        \"\"\n        (if (empty? (cdr extensions))\n\
    \            (car extensions)\n            (if (< (strength (car extensions))\
    \ (strength (cadr extensions)))\n                (strongest-extension (cdr extensions))\n\
    \                (strongest-extension (cons (car extensions) (cddr extensions)))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vjrp_8y.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vjrp_8y.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vjrp_8y.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vjrp_8y.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vjrp_8y.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vjrp_8y.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vjrp_8y.rkt:54:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vjrp_8y.rkt:55:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vjrp_8y.rkt:56:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (count-upper ext)\n     \
    \ (cond\n        [(empty? ext) 0]\n        [(char-upper-case? (car ext)) (+ 1\
    \ (count-upper (cdr ext)))]\n        [else (count-upper (cdr ext))]))\n    (define\
    \ (count-lower ext)\n      (cond\n        [(empty? ext) 0]\n        [(char-lower-case?\
    \ (car ext)) (+ 1 (count-lower (cdr ext)))]\n        [else (count-lower (cdr ext))]))\n\
    \    (/ (- (count-upper ext) (count-lower ext)) (string-length ext)))\n  (define\
    \ (strongest-extension extensions)\n    (cond\n      [(empty? extensions) \"\"\
    ]\n      [(empty? (cdr extensions)) (car extensions)]\n      [(> (strength (car\
    \ extensions)) (strength (cadr extensions)))\n       (strongest-extension (cons\
    \ (car extensions) (cddr extensions)))]\n      [else (strongest-extension (cdr\
    \ extensions))]))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphdspuxgt.rkt:45:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphdspuxgt.rkt:46:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphdspuxgt.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphdspuxgt.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphdspuxgt.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphdspuxgt.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphdspuxgt.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphdspuxgt.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphdspuxgt.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((caps (count-if char-upper-case?\
    \ extension))\n          (smalls (count-if char-lower-case? extension)))\n   \
    \   (- caps smalls)))\n  (define (strongest-extension-name extensions)\n    (if\
    \ (null? extensions)\n        \"\"\n        (let ((strongest-extension (car extensions))\n\
    \              (strongest-extension-strength (strength (car extensions))))\n \
    \         (for ((extension (cdr extensions)))\n            (let ((extension-strength\
    \ (strength extension)))\n              (if (> extension-strength strongest-extension-strength)\n\
    \                  (begin\n                    (set! strongest-extension extension)\n\
    \                    (set! strongest-extension-strength extension-strength)))))\n\
    \          strongest-extension)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4hru76a0.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp4hru76a0.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (define (strongest-extension-name-helper extensions strongest-extension)\n\
    \      (cond\n        [(empty? extensions) (car strongest-extension)]\n      \
    \  [(> (strength (car extensions)) (strength (car strongest-extension)))\n   \
    \      (strongest-extension-name-helper (cdr extensions) (list (car extensions)))]\n\
    \        [else (strongest-extension-name-helper (cdr extensions) strongest-extension)]))\n\
    \    (strongest-extension-name-helper extensions (list (car extensions))))\n \
    \ (string-append class_name \".\" (strongest-extension-name extensions)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ntm0uvc.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9ntm0uvc.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ntm0uvc.rkt:39:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9ntm0uvc.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9ntm0uvc.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9ntm0uvc.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9ntm0uvc.rkt:41:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmp9ntm0uvc.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ntm0uvc.rkt:42:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9ntm0uvc.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ntm0uvc.rkt:43:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp9ntm0uvc.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9ntm0uvc.rkt:44:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmp9ntm0uvc.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ntm0uvc.rkt:45:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_upper str)\n    (if (empty? str)\n        0\n\
    \        (if (char-upper-case? (first str))\n            (+ 1 (count_upper (rest\
    \ str)))\n            (count_upper (rest str)))))\n  (define (count_lower str)\n\
    \    (if (empty? str)\n        0\n        (if (char-lower-case? (first str))\n\
    \            (+ 1 (count_lower (rest str)))\n            (count_lower (rest str)))))\n\
    \  (define (strength str)\n    (/ (- (count_upper str) (count_lower str)) 1.0))\n\
    \  (define (strongest_extension_helper extensions strongest_strength strongest_extension)\n\
    \    (if (empty? extensions)\n        (string-append class_name \".\" strongest_extension)\n\
    \        (let* ([extension (first extensions)]\n               [strength (strength\
    \ extension)])\n          (if (> strength strongest_strength)\n              (strongest_extension_helper\
    \ (rest extensions) strength extension)\n              (strongest_extension_helper\
    \ (rest extensions) strongest_strength strongest_extension)))))\n  (strongest_extension_helper\
    \ extensions 0 \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppc1vxvyw.rkt:48:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"tEN\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppc1vxvyw.rkt:49:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppc1vxvyw.rkt:50:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"t\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppc1vxvyw.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppc1vxvyw.rkt:52:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Tab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppc1vxvyw.rkt:53:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppc1vxvyw.rkt:54:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Die\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppc1vxvyw.rkt:55:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppc1vxvyw.rkt:56:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([extensions (map (lambda (extension)\n                \
    \           (list extension\n                                 (let ([cap (count\
    \ (lambda (c) (char-upper-case? c)) extension)]\n                            \
    \           [sm (count (lambda (c) (char-lower-case? c)) extension)])\n      \
    \                             (/ cap sm))))\n                         extensions)])\n\
    \    (string-append class_name \".\" (car (argmax (lambda (extension) (cadr extension))\
    \ extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp59w2zixa.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp59w2zixa.rkt:21:51>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp59w2zixa.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp59w2zixa.rkt:21:51>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp59w2zixa.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp59w2zixa.rkt:21:51>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp59w2zixa.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmp59w2zixa.rkt:21:51>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp59w2zixa.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp59w2zixa.rkt:21:51>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp59w2zixa.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp59w2zixa.rkt:21:51>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp59w2zixa.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmp59w2zixa.rkt:21:51>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp59w2zixa.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_upper str)\n    (let loop ([i 0] [count 0])\n\
    \      (if (&lt; i (string-length str))\n          (loop (+ i 1)\n           \
    \     (if (char-upper-case? (string-ref str i))\n                    (+ count\
    \ 1)\n                    count))\n          count)))\n  (define (count_lower\
    \ str)\n    (let loop ([i 0] [count 0])\n      (if (&lt; i (string-length str))\n\
    \          (loop (+ i 1)\n                (if (char-lower-case? (string-ref str\
    \ i))\n                    (+ count 1)\n                    count))\n        \
    \  count)))\n  (define (strength str)\n    (let ([upper (count_upper str)]\n \
    \         [lower (count_lower str)])\n      (- upper lower)))\n  (define (find_strongest\
    \ extensions)\n    (let loop ([extensions extensions]\n               [strongest\
    \ (car extensions)]\n               [strength (strength (car extensions))])\n\
    \      (if (null? extensions)\n          strongest\n          (let ([ext (car\
    \ extensions)]\n                [str (strength ext)])\n            (if (&gt; str\
    \ strength)\n                (loop (cdr extensions) ext str)\n               \
    \ (loop (cdr extensions) strongest strength))))))\n  (string-append class_name\
    \ \".\" (find_strongest extensions)))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpel5ddi_l.rkt:27:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 35\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmin (map strength extensions)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrj6vjmo.rkt:36:4\n\
    \nargmin: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrj6vjmo.rkt:37:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrj6vjmo.rkt:38:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrj6vjmo.rkt:39:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrj6vjmo.rkt:40:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrj6vjmo.rkt:41:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrj6vjmo.rkt:42:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrj6vjmo.rkt:43:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrj6vjmo.rkt:44:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (count-upper ext)\n     \
    \ (cond\n        [(empty? ext) 0]\n        [(char-upper-case? (car ext)) (+ 1\
    \ (count-upper (cdr ext)))]\n        [else (count-upper (cdr ext))]))\n    (define\
    \ (count-lower ext)\n      (cond\n        [(empty? ext) 0]\n        [(char-lower-case?\
    \ (car ext)) (+ 1 (count-lower (cdr ext)))]\n        [else (count-lower (cdr ext))]))\n\
    \    (/ (- (count-upper ext) (count-lower ext)) (length ext)))\n  (define (find-strongest\
    \ extensions)\n    (cond\n      [(empty? extensions) '()]\n      [(empty? (cdr\
    \ extensions)) (car extensions)]\n      [(> (strength (car extensions)) (strength\
    \ (cadr extensions)))\n       (find-strongest (cons (car extensions) (cddr extensions)))]\n\
    \      [else (find-strongest (cdr extensions))]))\n  (string-append class_name\
    \ \".\" (find-strongest extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6qknhlb6.rkt:45:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6qknhlb6.rkt:46:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6qknhlb6.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6qknhlb6.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6qknhlb6.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6qknhlb6.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6qknhlb6.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6qknhlb6.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6qknhlb6.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (define (strongest-extension-name-helper extensions strongest-ext)\n      (cond\
    \ [(empty? extensions) (first strongest-ext)]\n            [(> (strength (first\
    \ extensions)) (strength (first strongest-ext)))\n             (strongest-extension-name-helper\
    \ (rest extensions) (list (first extensions)))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) strongest-ext)]))\n    (strongest-extension-name-helper extensions\
    \ (list (first extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6cx0jjtz.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp6cx0jjtz.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6cx0jjtz.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp6cx0jjtz.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6cx0jjtz.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp6cx0jjtz.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6cx0jjtz.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmp6cx0jjtz.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6cx0jjtz.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp6cx0jjtz.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6cx0jjtz.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp6cx0jjtz.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6cx0jjtz.rkt:43:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmp6cx0jjtz.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6cx0jjtz.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count-if char-upcase?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (let ([ext (car lst)]\n          [str\
    \ (strength ext)])\n      (for/fold ([str str]\n                 [ext ext])\n\
    \                ([curr-ext (cdr lst)])\n        (let ([curr-str (strength curr-ext)])\n\
    \          (cond\n            [(> curr-str str) (values curr-str curr-ext)]\n\
    \            [(= curr-str str) (values str ext)]\n            [else (values str\
    \ ext)])))))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1dtbopxa.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp1dtbopxa.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (count_upper extension)\n\
    \      (if (empty? extension)\n          0\n          (if (char-upper-case? (car\
    \ extension))\n              (+ 1 (count_upper (cdr extension)))\n           \
    \   (count_upper (cdr extension)))))\n    (define (count_lower extension)\n  \
    \    (if (empty? extension)\n          0\n          (if (char-lower-case? (car\
    \ extension))\n              (+ 1 (count_lower (cdr extension)))\n           \
    \   (count_lower (cdr extension)))))\n    (- (count_upper extension) (count_lower\
    \ extension)))\n  (define (strongest_extension extensions)\n    (if (empty? extensions)\n\
    \        \"\"\n        (if (empty? (cdr extensions))\n            (car extensions)\n\
    \            (if (&gt; (strength (car extensions)) (strength (cadr extensions)))\n\
    \                (strongest_extension (cons (car extensions) (cddr extensions)))\n\
    \                (strongest_extension (cdr extensions))))))\n  (string-append\
    \ class_name \".\" (strongest_extension extensions)))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl83txesu.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 42\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (is-upper? c)\n      (and\
    \ (char&lt;= #\\A c) (char&lt;= c #\\Z)))\n    (define (is-lower? c)\n      (and\
    \ (char&lt;= #\\a c) (char&lt;= c #\\z)))\n    (define (count-upper str)\n   \
    \   (if (string-null? str)\n          0\n          (+ (if (is-upper? (string-ref\
    \ str 0)) 1 0)\n             (count-upper (string-tail str)))))\n    (define (count-lower\
    \ str)\n      (if (string-null? str)\n          0\n          (+ (if (is-lower?\
    \ (string-ref str 0)) 1 0)\n             (count-lower (string-tail str)))))\n\
    \    (/ (- (count-upper ext) (count-lower ext))\n       (string-length ext)))\n\
    \  (define (strongest-extension lst)\n    (if (null? lst)\n        \"\"\n    \
    \    (let* ([ext (car lst)]\n               [str (strength ext)])\n          (if\
    \ (null? (cdr lst))\n              ext\n              (let ([next (strongest-extension\
    \ (cdr lst))])\n                (if (&gt; (strength next) str)\n             \
    \       next\n                    ext))))))\n  (string-append class_name \".\"\
    \ (strongest-extension extensions)))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppi93ekk7.rkt:23:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 36\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (filter char-upper-case?\
    \ (string->list ext))]\n          [smalls (filter char-lower-case? (string->list\
    \ ext))])\n      (/ (length caps) (- (length caps) (length smalls)))))\n  (define\
    \ (strongest-extension lst)\n    (if (null? lst)\n        \"\"\n        (let ([strongest\
    \ (car lst)]\n              [rest (cdr lst)])\n          (if (null? rest)\n  \
    \            strongest\n              (let ([next (car rest)]\n              \
    \      [rest-rest (cdr rest)])\n                (if (< (strength next) (strength\
    \ strongest))\n                    (strongest-extension rest)\n              \
    \      (strongest-extension (cons next rest-rest))))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwjfbmof5.rkt:42:4


    /: division by zero

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjfbmof5.rkt:43:4

    actual:     "Boku123.32145tggg"

    expected:   "Boku123.YEs.WeCaNe"

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwjfbmof5.rkt:44:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwjfbmof5.rkt:45:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwjfbmof5.rkt:46:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwjfbmof5.rkt:47:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwjfbmof5.rkt:48:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwjfbmof5.rkt:49:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwjfbmof5.rkt:50:4


    /: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (define (strongest-extension-name-iter extensions strongest-extension-name\
    \ strongest-extension-strength)\n      (cond [(empty? extensions) strongest-extension-name]\n\
    \            [(> (strength (first extensions)) strongest-extension-strength)\n\
    \             (strongest-extension-name-iter (rest extensions) (first extensions)\
    \ (strength (first extensions)))]\n            [else (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name strongest-extension-strength)]))\n\
    \    (strongest-extension-name-iter extensions (first extensions) (strength (first\
    \ extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzfk2k5v2.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpzfk2k5v2.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzfk2k5v2.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpzfk2k5v2.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzfk2k5v2.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpzfk2k5v2.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzfk2k5v2.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpzfk2k5v2.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzfk2k5v2.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpzfk2k5v2.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzfk2k5v2.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpzfk2k5v2.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzfk2k5v2.rkt:43:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpzfk2k5v2.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzfk2k5v2.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (define\
    \ (strongest-extension-name-helper extensions strongest-extension-name)\n    \
    \  (if (null? extensions)\n          strongest-extension-name\n          (let\
    \ ([ext (car extensions)]\n                [strength (strength ext)])\n      \
    \      (if (&gt; strength (strength strongest-extension-name))\n             \
    \   (strongest-extension-name-helper (cdr extensions) ext)\n                (strongest-extension-name-helper\
    \ (cdr extensions) strongest-extension-name)))))\n    (strongest-extension-name-helper\
    \ extensions (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuy8etgyd.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 35\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (x) (char-upper-case?\
    \ x)) ext)]\n          [smalls (count (lambda (x) (char-lower-case? x)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (let ([ext (car extensions)])\n      (if (null? (cdr extensions))\n       \
    \   ext\n          (let ([next-ext (strongest-extension-name (cdr extensions))])\n\
    \            (if (< (strength ext) (strength next-ext))\n                next-ext\n\
    \                ext)))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pnnzfqr.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp5pnnzfqr.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5pnnzfqr.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"YEs.WeCaNe\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmp5pnnzfqr.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pnnzfqr.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"NuLl__\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp5pnnzfqr.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pnnzfqr.rkt:41:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"t234An\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp5pnnzfqr.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5pnnzfqr.rkt:42:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"781345\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmp5pnnzfqr.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pnnzfqr.rkt:43:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Fails\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp5pnnzfqr.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pnnzfqr.rkt:44:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"Wow\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp5pnnzfqr.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pnnzfqr.rkt:45:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other argume"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-helper\
    \ extensions strongest-extension-name strongest-extension-strength)\n      (cond\
    \ [(empty? extensions) strongest-extension-name]\n            [else (let ([extension-name\
    \ (first extensions)]\n                        [extension-strength (strength extension-name)])\n\
    \                    (if (> extension-strength strongest-extension-strength)\n\
    \                        (strongest-extension-name-helper (rest extensions) extension-name\
    \ extension-strength)\n                        (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name strongest-extension-strength)))]))\n\
    \    (strongest-extension-name-helper extensions (first extensions) (strength\
    \ (first extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwupvdxu9.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpwupvdxu9.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (count-upper ext)\n     \
    \ (if (empty? ext)\n          0\n          (if (char-upper-case? (car ext))\n\
    \              (+ 1 (count-upper (cdr ext)))\n              (count-upper (cdr\
    \ ext)))))\n    (define (count-lower ext)\n      (if (empty? ext)\n          0\n\
    \          (if (char-lower-case? (car ext))\n              (+ 1 (count-lower (cdr\
    \ ext)))\n              (count-lower (cdr ext)))))\n    (- (count-upper ext) (count-lower\
    \ ext)))\n  (define (strongest-extension extensions)\n    (if (empty? extensions)\n\
    \        \"\"\n        (if (empty? (cdr extensions))\n            (car extensions)\n\
    \            (if (< (strength (car extensions)) (strength (cadr extensions)))\n\
    \                (strongest-extension (cdr extensions))\n                (strongest-extension\
    \ (cons (car extensions) (cddr extensions)))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4bajjpy.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4bajjpy.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4bajjpy.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4bajjpy.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4bajjpy.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4bajjpy.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4bajjpy.rkt:54:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4bajjpy.rkt:55:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4bajjpy.rkt:56:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_upper_lower str)\n    (let ([upper (count (lambda\
    \ (c) (char-upper-case? c)) str)]\n          [lower (count (lambda (c) (char-lower-case?\
    \ c)) str)])\n      (cons upper lower)))\n  (define (strength str)\n    (let-values\
    \ ([(upper lower) (count_upper_lower str)])\n      (- upper lower)))\n  (define\
    \ (strongest_extension_name extensions)\n    (apply max (map strength extensions)))\n\
    \  (define (strongest_extension_name_with_strength extensions)\n    (define (strongest_extension_name_with_strength_helper\
    \ extensions)\n      (if (null? extensions)\n          '()\n          (let ([extension\
    \ (car extensions)]\n                [strength (strength extension)])\n      \
    \      (cons (cons extension strength)\n                  (strongest_extension_name_with_strength_helper\
    \ (cdr extensions))))))\n    (define (strongest_extension_name_with_strength_helper2\
    \ extensions)\n      (if (null? extensions)\n          '()\n          (let ([extension\
    \ (car extensions)]\n                [strength (cdr extension)])\n           \
    \ (cons (cons (car extension) strength)\n                  (strongest_extension_name_with_strength_helper2\
    \ (cdr extensions))))))\n    (define (strongest_extension_name_with_strength_helper3\
    \ extensions)\n      (if (null? extensions)\n          '()\n          (let ([extension\
    \ (car extensions)]\n                [strength (cdr extension)])\n           \
    \ (cons (cons (car extension) strength)\n                  (strongest_extension_name_with_strength_helper3\
    \ (cdr extensions))))))\n    (define (strongest_extension_name_with_strength_helper4\
    \ extensions)\n      (if (null? extensions)\n          '()\n          (let ([extension\
    \ (car extensions)]\n                [strength (cdr extension)])\n           \
    \ (cons (cons (car extension) strength)\n                  (strongest_extension_name_with_strength_helper4\
    \ (cdr extensions))))))\n    (define (strongest_\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvmo4jd57.rkt:57:12: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 58\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((upper (count-upper extension))\n\
    \          (lower (count-lower extension)))\n      (/ (- upper lower) (length\
    \ extension))))\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (find-strongest\
    \ extensions)\n    (let ((strongest (car extensions))\n          (strength (strength\
    \ (car extensions))))\n      (for ([ext (in-list (cdr extensions))])\n       \
    \ (let ((ext-strength (strength ext)))\n          (when (> ext-strength strength)\n\
    \            (set! strength ext-strength)\n            (set! strongest ext))))\n\
    \      strongest))\n  (string-append class_name \".\" (find-strongest extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c1mao2.rkt:45:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c1mao2.rkt:46:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c1mao2.rkt:47:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c1mao2.rkt:48:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c1mao2.rkt:49:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c1mao2.rkt:50:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c1mao2.rkt:51:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c1mao2.rkt:52:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c1mao2.rkt:53:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkgoxtiof.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpkgoxtiof.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkgoxtiof.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpkgoxtiof.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkgoxtiof.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpkgoxtiof.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkgoxtiof.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpkgoxtiof.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkgoxtiof.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpkgoxtiof.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkgoxtiof.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpkgoxtiof.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkgoxtiof.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpkgoxtiof.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkgoxtiof.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (define (count-upper-iter str\
    \ count)\n      (cond ((null? str) count)\n            ((char-upper-case? (car\
    \ str)) (count-upper-iter (cdr str) (+ count 1)))\n            (else (count-upper-iter\
    \ (cdr str) count))))\n    (count-upper-iter str 0))\n  (define (count-lower str)\n\
    \    (define (count-lower-iter str count)\n      (cond ((null? str) count)\n \
    \           ((char-lower-case? (car str)) (count-lower-iter (cdr str) (+ count\
    \ 1)))\n            (else (count-lower-iter (cdr str) count))))\n    (count-lower-iter\
    \ str 0))\n  (define (strength str)\n    (/ (- (count-upper str) (count-lower\
    \ str)) (string-length str)))\n  (define (strongest-extension-iter extensions\
    \ strongest-extension)\n    (cond ((null? extensions) (string-append class_name\
    \ \".\" strongest-extension))\n          ((> (strength (car extensions)) (strength\
    \ strongest-extension))\n           (strongest-extension-iter (cdr extensions)\
    \ (car extensions)))\n          (else (strongest-extension-iter (cdr extensions)\
    \ strongest-extension))))\n  (strongest-extension-iter extensions (car extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqsjx4tl0.rkt:45:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqsjx4tl0.rkt:46:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqsjx4tl0.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqsjx4tl0.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqsjx4tl0.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqsjx4tl0.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqsjx4tl0.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqsjx4tl0.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqsjx4tl0.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppno1o2ae.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppno1o2ae.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppno1o2ae.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppno1o2ae.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppno1o2ae.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppno1o2ae.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppno1o2ae.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmppno1o2ae.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppno1o2ae.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppno1o2ae.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppno1o2ae.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmppno1o2ae.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppno1o2ae.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmppno1o2ae.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppno1o2ae.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (count-upper ext)\n     \
    \ (if (empty? ext)\n          0\n          (if (char-upper-case? (car ext))\n\
    \              (+ 1 (count-upper (cdr ext)))\n              (count-upper (cdr\
    \ ext)))))\n    (define (count-lower ext)\n      (if (empty? ext)\n          0\n\
    \          (if (char-lower-case? (car ext))\n              (+ 1 (count-lower (cdr\
    \ ext)))\n              (count-lower (cdr ext)))))\n    (- (count-upper ext) (count-lower\
    \ ext)))\n  (define (strongest-extension extensions)\n    (if (empty? extensions)\n\
    \        \"\"\n        (if (= (strength (car extensions))\n               (strength\
    \ (strongest-extension (cdr extensions))))\n            (car extensions)\n   \
    \         (strongest-extension (cdr extensions)))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg3tltxe.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg3tltxe.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg3tltxe.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg3tltxe.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg3tltxe.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg3tltxe.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg3tltxe.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg3tltxe.rkt:54:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg3tltxe.rkt:55:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) extension)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) extension)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_dd2cx_.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt_dd2cx_.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_dd2cx_.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt_dd2cx_.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt_dd2cx_.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt_dd2cx_.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt_dd2cx_.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpt_dd2cx_.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_dd2cx_.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt_dd2cx_.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_dd2cx_.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpt_dd2cx_.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt_dd2cx_.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpt_dd2cx_.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt_dd2cx_.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count-if char-upper-case?\
    \ ext)]\n          [sm (count-if char-lower-case? ext)])\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-iter\
    \ extensions strongest-extension-name strongest-extension-strength)\n      (cond\
    \ [(empty? extensions) strongest-extension-name]\n            [(> (strength (first\
    \ extensions)) strongest-extension-strength)\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions) (strength (first extensions)))]\n     \
    \       [else (strongest-extension-name-iter (rest extensions) strongest-extension-name\
    \ strongest-extension-strength)]))\n    (strongest-extension-name-iter extensions\
    \ (first extensions) (strength (first extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3cguy4dv.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp3cguy4dv.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) extension)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) extension)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond [(empty? extensions) strongest-extension-name]\n            [(> (strength\
    \ (first extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-helper\
    \ extensions (first extensions)))\n  (format \"~a.~a\" class_name (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnf9l9sub.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnf9l9sub.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnf9l9sub.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnf9l9sub.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnf9l9sub.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnf9l9sub.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnf9l9sub.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpnf9l9sub.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnf9l9sub.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnf9l9sub.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnf9l9sub.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnf9l9sub.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnf9l9sub.rkt:43:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpnf9l9sub.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnf9l9sub.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (count-upper-case str)\n\
    \      (define (count-upper-case-iter str count)\n        (cond\n          [(empty?\
    \ str) count]\n          [(char-upper-case? (first str)) (count-upper-case-iter\
    \ (rest str) (+ count 1))]\n          [else (count-upper-case-iter (rest str)\
    \ count)]))\n      (count-upper-case-iter str 0))\n    (define (count-lower-case\
    \ str)\n      (define (count-lower-case-iter str count)\n        (cond\n     \
    \     [(empty? str) count]\n          [(char-lower-case? (first str)) (count-lower-case-iter\
    \ (rest str) (+ count 1))]\n          [else (count-lower-case-iter (rest str)\
    \ count)]))\n      (count-lower-case-iter str 0))\n    (/ (- (count-upper-case\
    \ ext) (count-lower-case ext)) 1.0))\n  (define (find-strongest-extension extensions)\n\
    \    (define (find-strongest-extension-iter extensions strongest-ext)\n      (cond\n\
    \        [(empty? extensions) strongest-ext]\n        [(> (strength (first extensions))\
    \ (strength strongest-ext)) (find-strongest-extension-iter (rest extensions) (first\
    \ extensions))]\n        [else (find-strongest-extension-iter (rest extensions)\
    \ strongest-ext)]))\n    (find-strongest-extension-iter extensions (first extensions)))\n\
    \  (string-append class_name \".\" (find-strongest-extension extensions)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpajsp5bk3.rkt:49:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"tEN\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpajsp5bk3.rkt:50:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpajsp5bk3.rkt:51:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"t\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpajsp5bk3.rkt:52:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpajsp5bk3.rkt:53:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Tab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpajsp5bk3.rkt:54:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpajsp5bk3.rkt:55:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Die\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpajsp5bk3.rkt:56:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpajsp5bk3.rkt:57:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let loop ([i 0] [cap 0] [sm 0])\n\
    \      (cond [(= i (string-length ext))\n             (/ cap (- sm))]\n      \
    \      [(char-upper-case? (string-ref ext i))\n             (loop (+ i 1) (+ cap\
    \ 1) sm)]\n            [(char-lower-case? (string-ref ext i))\n             (loop\
    \ (+ i 1) cap (+ sm 1))]\n            [else\n             (loop (+ i 1) cap sm)])))\n\
    \  (define (strongest_extension lst)\n    (if (null? lst)\n        \"\"\n    \
    \    (let ([ext (car lst)]\n              [rest (cdr lst)])\n          (if (null?\
    \ rest)\n              ext\n              (let ([strongest (strongest_extension\
    \ rest)])\n                (if (> (strength ext) (strength strongest))\n     \
    \               ext\n                    strongest))))))\n  (string-append class_name\
    \ \".\" (strongest_extension extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxah9fabv.rkt:47:4

    actual:     "Watashi.niNE"

    expected:   "Watashi.eIGHt8OKe"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxah9fabv.rkt:48:4

    actual:     "Boku123.32145tggg"

    expected:   "Boku123.YEs.WeCaNe"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxah9fabv.rkt:49:4

    actual:     "__YESIMHERE.nothing"

    expected:   "__YESIMHERE.NuLl__"

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpxah9fabv.rkt:50:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpxah9fabv.rkt:51:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpxah9fabv.rkt:52:4


    /: division by zero

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxah9fabv.rkt:53:4

    actual:     "finNNalLLly.Wow"

    expected:   "finNNalLLly.WoW"

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpxah9fabv.rkt:54:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpxah9fabv.rkt:55:4


    /: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ((caps (for/sum ([c (in-string\
    \ str)])\n                   (if (char-upper-case? c) 1 0)))\n          (smalls\
    \ (for/sum ([c (in-string str)])\n                     (if (char-lower-case? c)\
    \ 1 0))))\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ht_ugm.rkt:34:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ht_ugm.rkt:35:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ht_ugm.rkt:36:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ht_ugm.rkt:37:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ht_ugm.rkt:38:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ht_ugm.rkt:39:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ht_ugm.rkt:40:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ht_ugm.rkt:41:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ht_ugm.rkt:42:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count_lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (/ (- (count_upper str) (count_lower str)) (string-length str)))\n\
    \  (define (strongest_extension lst)\n    (apply max (map strength lst)))\n  (define\
    \ (strongest_extension_name lst)\n    (list-ref lst (argmax (\u03BB (x) (strength\
    \ x)) lst)))\n  (string-append class_name \".\" (strongest_extension_name extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp1c_j9rgn.rkt:38:4


    list-ref: index "tEN" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp1c_j9rgn.rkt:39:4


    list-ref: index "YEs.WeCaNe" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp1c_j9rgn.rkt:40:4


    list-ref: index "NuLl__" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp1c_j9rgn.rkt:41:4


    list-ref: index "TAR" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp1c_j9rgn.rkt:42:4


    list-ref: index "123" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp1c_j9rgn.rkt:43:4


    list-ref: index "okIWILL123" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp1c_j9rgn.rkt:44:4


    list-ref: index "WoW" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp1c_j9rgn.rkt:45:4


    list-ref: index "Bb" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp1c_j9rgn.rkt:46:4


    list-ref: index "671235" is not an exact nonnegative integer

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (define (strongest-extension-name\
    \ lst)\n    (list-ref lst (argmax strength lst)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpokb7frq0.rkt:38:4


    list-ref: index "eIGHt8OKe" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpokb7frq0.rkt:39:4


    list-ref: index "YEs.WeCaNe" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpokb7frq0.rkt:40:4


    list-ref: index "NuLl__" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpokb7frq0.rkt:41:4


    list-ref: index "TAR" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpokb7frq0.rkt:42:4


    list-ref: index "123" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpokb7frq0.rkt:43:4


    list-ref: index "okIWILL123" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpokb7frq0.rkt:44:4


    list-ref: index "WoW" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpokb7frq0.rkt:45:4


    list-ref: index "Bb" is not an exact nonnegative integer

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpokb7frq0.rkt:46:4


    list-ref: index "671235" is not an exact nonnegative integer

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjyly2tk.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnjyly2tk.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjyly2tk.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnjyly2tk.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnjyly2tk.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnjyly2tk.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnjyly2tk.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpnjyly2tk.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjyly2tk.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnjyly2tk.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjyly2tk.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnjyly2tk.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnjyly2tk.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpnjyly2tk.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjyly2tk.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpttva1jlt.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpttva1jlt.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpttva1jlt.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpttva1jlt.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpttva1jlt.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpttva1jlt.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpttva1jlt.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpttva1jlt.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpttva1jlt.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpttva1jlt.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpttva1jlt.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpttva1jlt.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpttva1jlt.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpttva1jlt.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpttva1jlt.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (count-upper-case str)\n\
    \      (define (count-upper-case-iter str count)\n        (cond\n          [(empty?\
    \ str) count]\n          [(char-upper-case? (first str)) (count-upper-case-iter\
    \ (rest str) (+ count 1))]\n          [else (count-upper-case-iter (rest str)\
    \ count)]))\n    (define (count-lower-case str)\n      (define (count-lower-case-iter\
    \ str count)\n        (cond\n          [(empty? str) count]\n          [(char-lower-case?\
    \ (first str)) (count-lower-case-iter (rest str) (+ count 1))]\n          [else\
    \ (count-lower-case-iter (rest str) count)]))\n    (/ (- (count-upper-case extension)\
    \ (count-lower-case extension)) (length extension)))\n  (define (strongest-extension-iter\
    \ extensions strongest-extension)\n    (cond\n      [(empty? extensions) (string-append\
    \ class_name \".\" strongest-extension)]\n      [(> (strength (first extensions))\
    \ (strength strongest-extension)) (strongest-extension-iter (rest extensions)\
    \ (first extensions))]\n      [else (strongest-extension-iter (rest extensions)\
    \ strongest-extension)]))\n  (strongest-extension-iter extensions (first extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpecd0emz5.rkt:19:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 40\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (/ (- (count-upper str) (count-lower str)) (string-length str)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdinx_s6l.rkt:36:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 1/3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdinx_s6l.rkt:37:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 1/10\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdinx_s6l.rkt:38:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdinx_s6l.rkt:39:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdinx_s6l.rkt:40:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdinx_s6l.rkt:41:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 3/10\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdinx_s6l.rkt:42:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 1/3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdinx_s6l.rkt:43:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdinx_s6l.rkt:44:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (count (lambda (c) (char-upper-case?\
    \ c)) ext))\n          (sm (count (lambda (c) (char-lower-case? c)) ext)))\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvapptvwq.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpvapptvwq.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvapptvwq.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpvapptvwq.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvapptvwq.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpvapptvwq.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvapptvwq.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpvapptvwq.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvapptvwq.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpvapptvwq.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvapptvwq.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpvapptvwq.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvapptvwq.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpvapptvwq.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvapptvwq.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((caps (for/sum ([c (in-string\
    \ extension)])\n                   (if (char-upper-case? c) 1 0)))\n         \
    \ (smalls (for/sum ([c (in-string extension)])\n                     (if (char-lower-case?\
    \ c) 1 0))))\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond [(empty? extensions) strongest-extension-name]\n            [(> (strength\
    \ (first extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-helper\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (is_upper? c)\n      (and\
    \ (char-alphabetic? c) (char-upper-case? c)))\n    (define (is_lower? c)\n   \
    \   (and (char-alphabetic? c) (char-lower-case? c)))\n    (define (count-upper\
    \ str)\n      (define (count-upper-iter str count)\n        (cond [(empty? str)\
    \ count]\n              [(is_upper? (first str)) (count-upper-iter (rest str)\
    \ (+ count 1))]\n              [else (count-upper-iter (rest str) count)]))\n\
    \      (count-upper-iter str 0))\n    (define (count-lower str)\n      (define\
    \ (count-lower-iter str count)\n        (cond [(empty? str) count]\n         \
    \     [(is_lower? (first str)) (count-lower-iter (rest str) (+ count 1))]\n  \
    \            [else (count-lower-iter (rest str) count)]))\n      (count-lower-iter\
    \ str 0))\n    (/ (- (count-upper ext) (count-lower ext)) (string-length ext)))\n\
    \  (define (strongest-extension-iter extensions strongest-extension)\n    (cond\
    \ [(empty? extensions) strongest-extension]\n          [(> (strength (first extensions))\
    \ (strength strongest-extension))\n           (strongest-extension-iter (rest\
    \ extensions) (first extensions))]\n          [else (strongest-extension-iter\
    \ (rest extensions) strongest-extension)]))\n  (string-append class_name \".\"\
    \ (strongest-extension-iter extensions (first extensions))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xmuan_f.rkt:49:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"tEN\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9xmuan_f.rkt:50:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xmuan_f.rkt:51:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"t\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9xmuan_f.rkt:52:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xmuan_f.rkt:53:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Tab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9xmuan_f.rkt:54:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xmuan_f.rkt:55:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Die\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9xmuan_f.rkt:56:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xmuan_f.rkt:57:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (count-upper str)\n\
    \      (if (empty? str)\n          0\n          (if (char-upper-case? (first str))\n\
    \              (+ 1 (count-upper (rest str)))\n              (count-upper (rest\
    \ str)))))\n    (define (count-lower str)\n      (if (empty? str)\n          0\n\
    \          (if (char-lower-case? (first str))\n              (+ 1 (count-lower\
    \ (rest str)))\n              (count-lower (rest str)))))\n    (- (count-upper\
    \ extension) (count-lower extension)))\n  (define (strongest-extension extensions)\n\
    \    (if (empty? extensions)\n        \"\"\n        (if (empty? (rest extensions))\n\
    \            (first extensions)\n            (if (< (strength (first extensions))\
    \ (strength (second extensions)))\n                (strongest-extension (rest\
    \ extensions))\n                (strongest-extension (cons (first extensions)\
    \ (rest (rest extensions))))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpewhg2yzv.rkt:48:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"tEN\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpewhg2yzv.rkt:49:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpewhg2yzv.rkt:50:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"t\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpewhg2yzv.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpewhg2yzv.rkt:52:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Tab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpewhg2yzv.rkt:53:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpewhg2yzv.rkt:54:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Die\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpewhg2yzv.rkt:55:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpewhg2yzv.rkt:56:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjjufu6cc.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpjjufu6cc.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (count-uppercase str)\n\
    \      (define (is-uppercase? ch)\n        (and (char-alphabetic? ch) (char-upper-case?\
    \ ch)))\n      (foldl (lambda (ch count)\n               (if (is-uppercase? ch)\n\
    \                   (+ count 1)\n                   count))\n             0\n\
    \             str))\n    (define (count-lowercase str)\n      (define (is-lowercase?\
    \ ch)\n        (and (char-alphabetic? ch) (char-lower-case? ch)))\n      (foldl\
    \ (lambda (ch count)\n               (if (is-lowercase? ch)\n                \
    \   (+ count 1)\n                   count))\n             0\n             str))\n\
    \    (- (count-uppercase extension) (count-lowercase extension)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions strongest-extension-name\
    \ strongest-extension-strength)\n      (cond ((null? extensions) strongest-extension-name)\n\
    \            ((> (strength (car extensions)) strongest-extension-strength)\n \
    \            (strongest-extension-name-helper (cdr extensions) (car extensions)\
    \ (strength (car extensions))))\n            (else (strongest-extension-name-helper\
    \ (cdr extensions) strongest-extension-name strongest-extension-strength))))\n\
    \    (strongest-extension-name-helper extensions (car extensions) (strength (car\
    \ extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw6jxu2f7.rkt:53:4\n\
    \nfoldl: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpw6jxu2f7.rkt:23:13>\n \
    \  0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw6jxu2f7.rkt:54:4\n\nfoldl: contract violation\n  expected:\
    \ list?\n  given: \"nani\"\n  argument position: 3rd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpw6jxu2f7.rkt:23:13>\n   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw6jxu2f7.rkt:55:4\n\nfoldl:\
    \ contract violation\n  expected: list?\n  given: \"t\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpw6jxu2f7.rkt:23:13>\n \
    \  0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw6jxu2f7.rkt:56:4\n\nfoldl: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 3rd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpw6jxu2f7.rkt:23:13>\n   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw6jxu2f7.rkt:57:4\n\nfoldl:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpw6jxu2f7.rkt:23:13>\n \
    \  0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw6jxu2f7.rkt:58:4\n\nfoldl: contract violation\n  expected:\
    \ list?\n  given: \"HhAas\"\n  argument position: 3rd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpw6jxu2f7.rkt:23:13>\n   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw6jxu2f7.rkt:59:4\n\nfoldl:\
    \ contract violation\n  expected: list?\n  given: \"Die\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpw6jxu2f7.rkt:23:13>\n \
    \  0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw6jxu2f7.rkt:60:4\n\nfoldl: contract violation\n  expected:\
    \ list?\n  given: \"Bb\"\n  argument position: 3r"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (count-if char-upper-case?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n\
    \  (define (strongest-extension? ext1 ext2)\n    (or (> (strength ext1) (strength\
    \ ext2))\n        (and (= (strength ext1) (strength ext2))\n             (< (position\
    \ ext1 extensions) (position ext2 extensions)))))\n  (string-append class_name\
    \ \".\" (apply max extensions strongest-extension?)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzaf_v9ai.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpzaf_v9ai.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (count-if char-upper-case?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ strength extensions))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcoap96cr.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpcoap96cr.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (let\
    \ ([ext (car extensions)])\n      (if (null? (cdr extensions))\n          ext\n\
    \          (let ([next-ext (car (cdr extensions))])\n            (if (> (strength\
    \ ext) (strength next-ext))\n                ext\n                (strongest-extension-name\
    \ (cdr extensions)))))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4csa7ud.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpo4csa7ud.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4csa7ud.rkt:39:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpo4csa7ud.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo4csa7ud.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpo4csa7ud.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo4csa7ud.rkt:41:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpo4csa7ud.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4csa7ud.rkt:42:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpo4csa7ud.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4csa7ud.rkt:43:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpo4csa7ud.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo4csa7ud.rkt:44:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpo4csa7ud.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4csa7ud.rkt:45:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-uppercase str)\n    (cond ((null? str) 0)\n  \
    \        ((char-upper-case? (car str)) (+ 1 (count-uppercase (cdr str))))\n  \
    \        (else (count-uppercase (cdr str)))))\n  (define (count-lowercase str)\n\
    \    (cond ((null? str) 0)\n          ((char-lower-case? (car str)) (+ 1 (count-lowercase\
    \ (cdr str))))\n          (else (count-lowercase (cdr str)))))\n  (define (strength\
    \ str)\n    (/ (- (count-uppercase str) (count-lowercase str)) (string-length\
    \ str)))\n  (define (strongest-extension extensions)\n    (cond ((null? extensions)\
    \ \"\")\n          ((null? (cdr extensions)) (car extensions))\n          ((>\
    \ (strength (car extensions)) (strength (cadr extensions)))\n           (strongest-extension\
    \ (cons (car extensions) (cddr extensions))))\n          (else (strongest-extension\
    \ (cdr extensions)))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1uh8f8b.rkt:42:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1uh8f8b.rkt:43:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1uh8f8b.rkt:44:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1uh8f8b.rkt:45:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1uh8f8b.rkt:46:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1uh8f8b.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1uh8f8b.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1uh8f8b.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1uh8f8b.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper-lower str)\n    (let ((upper (count-if char-upper-case?\
    \ str))\n          (lower (count-if char-lower-case? str)))\n      (cons upper\
    \ lower)))\n  (define (strength upper-lower)\n    (let ((upper (car upper-lower))\n\
    \          (lower (cdr upper-lower)))\n      (- upper lower)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ((extensions-with-strength (map (lambda (ext)\n      \
    \                                     (cons ext (strength (count-upper-lower ext))))\n\
    \                                         extensions)))\n      (apply max-key\
    \ (lambda (ext-strength1 ext-strength2)\n                       (if (= (strength\
    \ (cdr ext-strength1))\n                              (strength (cdr ext-strength2)))\n\
    \                           (string<? (car ext-strength1) (car ext-strength2))\n\
    \                           (> (strength (cdr ext-strength1))\n              \
    \                (strength (cdr ext-strength2)))))\n                     extensions-with-strength)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpenuwrm8o.rkt:20:18: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpenuwrm8o.rkt:20:18\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_upper_lower str)\n    (let ((upper 0) (lower 0))\n\
    \      (for ([c (in-string str)])\n        (cond\n          [(char-upper-case?\
    \ c) (set! upper (+ upper 1))]\n          [(char-lower-case? c) (set! lower (+\
    \ lower 1))]))\n      (cons upper lower)))\n  (define (strength str)\n    (let\
    \ ((upper-lower (count_upper_lower str)))\n      (/ (- (car upper-lower) (cdr\
    \ upper-lower)) (string-length str))))\n  (define (strongest_extension_name extensions)\n\
    \    (let ((strongest_extension (car extensions))\n          (strongest_extension_strength\
    \ (strength (car extensions))))\n      (for ([ext (in-list (cdr extensions))])\n\
    \        (let ((ext_strength (strength ext)))\n          (cond\n            [(>\
    \ ext_strength strongest_extension_strength)\n             (set! strongest_extension\
    \ ext)\n             (set! strongest_extension_strength ext_strength)])))\n  \
    \    strongest_extension))\n  (string-append class_name \".\" (strongest_extension_name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkal7radp.rkt:46:4

    actual:     "Watashi.tEN"

    expected:   "Watashi.eIGHt8OKe"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name)\n    (let ([extensions-with-strength\
    \ (map (lambda (ext) (list ext (strength ext))) extensions)])\n      (apply max\
    \ extensions-with-strength (lambda (a b) (string<? (car a) (car b))))))\n  (string-append\
    \ class_name \".\" (car (strongest-extension-name))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnt6kwquz.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnt6kwquz.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnt6kwquz.rkt:34:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnt6kwquz.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnt6kwquz.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnt6kwquz.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnt6kwquz.rkt:36:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpnt6kwquz.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnt6kwquz.rkt:37:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnt6kwquz.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnt6kwquz.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnt6kwquz.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnt6kwquz.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpnt6kwquz.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnt6kwquz.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (regexp-match #rx\"[A-Z]\"\
    \ ext)]\n          [sm (regexp-match #rx\"[a-z]\" ext)])\n      (/ (- (length\
    \ cap) (length sm)))))\n  (define (strongest_extension extensions)\n    (let ([ext\
    \ (car extensions)])\n      (if (null? (cdr extensions))\n          ext\n    \
    \      (let ([next (car (cdr extensions))])\n            (if (&gt; (strength ext)\
    \ (strength next))\n                ext\n                (strongest_extension\
    \ (cdr extensions)))))))\n  (string-append class_name \".\" (strongest_extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzoz6gxbl.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 33\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (let ([strengths (map strength extensions)])\n      (list-ref extensions (argmax\
    \ strengths))))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5b1k94k.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl5b1k94k.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5b1k94k.rkt:34:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl5b1k94k.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl5b1k94k.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl5b1k94k.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl5b1k94k.rkt:36:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpl5b1k94k.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5b1k94k.rkt:37:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl5b1k94k.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5b1k94k.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl5b1k94k.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl5b1k94k.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpl5b1k94k.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5b1k94k.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_s76vdr7.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_s76vdr7.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_s76vdr7.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_s76vdr7.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_s76vdr7.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_s76vdr7.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_s76vdr7.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmp_s76vdr7.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_s76vdr7.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_s76vdr7.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_s76vdr7.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp_s76vdr7.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_s76vdr7.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmp_s76vdr7.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_s76vdr7.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((cap (count-if char-upper-case?\
    \ extension))\n          (sm (count-if char-lower-case? extension)))\n      (-\
    \ cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply max (map\
    \ strength extensions)))\n  (define (strongest-extension-index extensions)\n \
    \   (argmax (map strength extensions)))\n  (define (argmax lst)\n    (let ((max\
    \ (apply max lst)))\n      (for/first ([(i x) (in-indexed lst)])\n        (when\
    \ (= x max) i))))\n  (string-append class_name \".\" (list-ref extensions (strongest-extension-index\
    \ extensions))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp01ervue1.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp01ervue1.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((cap (count-if char-upper-case?\
    \ extension))\n          (sm (count-if char-lower-case? extension)))\n      (-\
    \ cap sm)))\n  (define (strongest-extension extensions)\n    (define (strongest-extension-iter\
    \ extensions strongest-extension)\n      (cond ((null? extensions) strongest-extension)\n\
    \            ((> (strength (car extensions)) (strength strongest-extension))\n\
    \             (strongest-extension-iter (cdr extensions) (car extensions)))\n\
    \            (else (strongest-extension-iter (cdr extensions) strongest-extension))))\n\
    \    (strongest-extension-iter extensions (car extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpci8w2ooh.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpci8w2ooh.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count-if char-upper-case?\
    \ extension)]\n          [smalls (count-if char-lower-case? extension)])\n   \
    \   (- caps smalls)))\n  (define (strongest-extension? extension1 extension2)\n\
    \    (let ([strength1 (strength extension1)]\n          [strength2 (strength extension2)])\n\
    \      (cond\n        [(> strength1 strength2) #t]\n        [(< strength1 strength2)\
    \ #f]\n        [else (string<? extension1 extension2)])))\n  (define (strongest-extension\
    \ extensions)\n    (if (null? (cdr extensions))\n        (car extensions)\n  \
    \      (if (strongest-extension? (car extensions) (strongest-extension (cdr extensions)))\n\
    \            (car extensions)\n            (strongest-extension (cdr extensions)))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpslihtdsr.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpslihtdsr.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (count-if char-upper-case?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (define (strongest-extension-name-with-strength extensions)\n\
    \    (let ((strongest-extension-name (strongest-extension-name extensions)))\n\
    \      (list strongest-extension-name (strength strongest-extension-name))))\n\
    \  (define (strongest-extension-name-with-strength-and-index extensions)\n   \
    \ (let ((strongest-extension-name-with-strength (strongest-extension-name-with-strength\
    \ extensions)))\n      (cons (list-ref extensions (list-ref strongest-extension-name-with-strength\
    \ 1))\n            (list-ref strongest-extension-name-with-strength 0))))\n  (define\
    \ (strongest-extension-name-with-strength-and-index-and-class extensions)\n  \
    \  (cons class_name (strongest-extension-name-with-strength-and-index extensions)))\n\
    \  (define (strongest-extension-name-with-strength-and-index-and-class-and-dot\
    \ extensions)\n    (string-append (list-ref (strongest-extension-name-with-strength-and-index-and-class\
    \ extensions) 0) \".\"))\n  (define (strongest-extension-name-with-strength-and-index-and-class-and-dot-and-extension\
    \ extensions)\n    (string-append (strongest-extension-name-with-strength-and-index-and-class-and-dot\
    \ extensions)\n                   (list-ref (strongest-extension-name-with-strength-and-index-and-class\
    \ extensions) 1)))\n  (strongest-extension-name-with-strength-and-index-and-class-and-dot-and-extension\
    \ extensions))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1huavdk4.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp1huavdk4.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (count-caps str)\n      (define\
    \ (count-caps-iter str count)\n        (cond\n          [(empty? str) count]\n\
    \          [(char-upper-case? (first str)) (count-caps-iter (rest str) (+ count\
    \ 1))]\n          [else (count-caps-iter (rest str) count)]))\n      (count-caps-iter\
    \ str 0))\n    (define (count-smalls str)\n      (define (count-smalls-iter str\
    \ count)\n        (cond\n          [(empty? str) count]\n          [(char-lower-case?\
    \ (first str)) (count-smalls-iter (rest str) (+ count 1))]\n          [else (count-smalls-iter\
    \ (rest str) count)]))\n      (count-smalls-iter str 0))\n    (- (count-caps ext)\
    \ (count-smalls ext)))\n  (define (strongest-extension-iter extensions strongest-ext)\n\
    \    (cond\n      [(empty? extensions) (string-append class_name \".\" strongest-ext)]\n\
    \      [(> (strength (first extensions)) (strength strongest-ext))\n        (strongest-extension-iter\
    \ (rest extensions) (first extensions))]\n      [else (strongest-extension-iter\
    \ (rest extensions) strongest-ext)]))\n  (strongest-extension-iter extensions\
    \ (first extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb25s7a33.rkt:48:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"tEN\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpb25s7a33.rkt:49:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb25s7a33.rkt:50:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"t\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpb25s7a33.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb25s7a33.rkt:52:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Tab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpb25s7a33.rkt:53:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb25s7a33.rkt:54:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Die\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpb25s7a33.rkt:55:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb25s7a33.rkt:56:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count-if char-upper-case?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp15waren4.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp15waren4.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) extension)]\n          [smalls (count (lambda (c)\
    \ (char-lower-case? c)) extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([extension (car extensions)]\n          [rest (cdr extensions)])\n\
    \      (if (null? rest)\n          extension\n          (let ([stronger-extension\
    \ (strongest-extension-name rest)])\n            (if (&gt; (strength extension)\
    \ (strength stronger-extension))\n                extension\n                stronger-extension)))))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsbueimdz.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 33\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count-if char-upper-case?\
    \ extension)]\n          [smalls (count-if char-lower-case? extension)])\n   \
    \   (- caps smalls)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj9obm_pk.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpj9obm_pk.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count-if char-upper-case?\
    \ extension)]\n          [smalls (count-if char-lower-case? extension)])\n   \
    \   (- caps smalls)))\n  (define (strongest-extension-name extensions)\n    (let\
    \ ([extension (car extensions)]\n          [rest (cdr extensions)])\n      (if\
    \ (null? rest)\n          extension\n          (let ([next-extension (strongest-extension-name\
    \ rest)])\n            (if (&gt; (strength extension) (strength next-extension))\n\
    \                extension\n                next-extension)))))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv2u81yvy.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 34\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (ext-strength ext)\n    (cons (strength ext)\
    \ ext))\n  (define (ext-name ext)\n    (string-append class_name \".\" ext))\n\
    \  (define (strongest-extension-name ext)\n    (ext-name (cdr ext)))\n  (strongest-extension-name\n\
    \   (apply max (map ext-strength extensions))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcbl851z5.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpcbl851z5.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcbl851z5.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpcbl851z5.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcbl851z5.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpcbl851z5.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcbl851z5.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpcbl851z5.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcbl851z5.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpcbl851z5.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcbl851z5.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpcbl851z5.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcbl851z5.rkt:43:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpcbl851z5.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcbl851z5.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([upper (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [lower (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (/ (- upper lower) (max upper lower))))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (define (strongest-extension-index\
    \ extensions)\n    (argmax (lambda (i) (strength (list-ref extensions i)))\n \
    \           (range (length extensions))))\n  (string-append class_name \".\" (list-ref\
    \ extensions (strongest-extension-index extensions))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyynuwk99.rkt:35:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpyynuwk99.rkt:20:24>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyynuwk99.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpyynuwk99.rkt:20:24>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyynuwk99.rkt:37:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpyynuwk99.rkt:20:24>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyynuwk99.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpyynuwk99.rkt:20:24>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyynuwk99.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpyynuwk99.rkt:20:24>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyynuwk99.rkt:40:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpyynuwk99.rkt:20:24>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyynuwk99.rkt:41:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpyynuwk99.rkt:20:24>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyynuwk99.rkt:42:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (define (strongest-extension-name\
    \ lst)\n    (car (filter (lambda (x) (= (strength x) (strongest-extension lst)))\
    \ lst)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count (lambda\
    \ (x) (char-upper-case? x)) extension)]\n          [smalls (count (lambda (x)\
    \ (char-lower-case? x)) extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps724bkls.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmps724bkls.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps724bkls.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmps724bkls.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps724bkls.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmps724bkls.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps724bkls.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmps724bkls.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps724bkls.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmps724bkls.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps724bkls.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmps724bkls.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps724bkls.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmps724bkls.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps724bkls.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((cap (count-if char-upper-case?\
    \ extension))\n          (sm (count-if char-lower-case? extension)))\n      (-\
    \ cap sm)))\n  (define (strongest-extension extensions)\n    (apply max (map strength\
    \ extensions)))\n  (define (strongest-extension-name extensions)\n    (list-ref\
    \ extensions (position (strongest-extension extensions) extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplhanbs1m.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmplhanbs1m.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (/ (- (count-upper str) (count-lower str)) 1.0))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (define (strongest-extension-index\
    \ extensions)\n    (argmax (\u03BB (x) (strength (list-ref extensions x)))\n \
    \           (range (length extensions))))\n  (string-append class_name \".\" (list-ref\
    \ extensions (strongest-extension-index extensions))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([extensions (sort\
    \ extensions string<? #:key strength)])\n      (car extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo0ixxcz7.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpo0ixxcz7.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) extension)]\n          [smalls (count (lambda (c)\
    \ (char-lower-case? c)) extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([strongest-extension (apply max extensions)])\n     \
    \ (list-ref extensions (position strongest-extension extensions))))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpubokpbo3.rkt:25:28: position: unbound identifier\n  in: position\n\
    \  location...:\n   /tmp/tmpubokpbo3.rkt:25:28\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_upper str)\n    (let loop ([str str] [count 0])\n\
    \      (if (null? str)\n          count\n          (if (char-upper-case? (car\
    \ str))\n              (loop (cdr str) (+ count 1))\n              (loop (cdr\
    \ str) count)))))\n  (define (count_lower str)\n    (let loop ([str str] [count\
    \ 0])\n      (if (null? str)\n          count\n          (if (char-lower-case?\
    \ (car str))\n              (loop (cdr str) (+ count 1))\n              (loop\
    \ (cdr str) count)))))\n  (define (strength str)\n    (/ (- (count_upper str)\
    \ (count_lower str)) 1.0))\n  (define (strongest_extension extensions)\n    (if\
    \ (null? extensions)\n        \"\"\n        (let ([first (car extensions)]\n \
    \             [rest (cdr extensions)])\n          (if (null? rest)\n         \
    \     first\n              (let ([next (strongest_extension rest)])\n        \
    \        (if (> (strength first) (strength next))\n                    first\n\
    \                    next))))))\n  (string-append class_name \".\" (strongest_extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpen4tdtj7.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"niNE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpen4tdtj7.rkt:54:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"YEs.WeCaNe\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpen4tdtj7.rkt:55:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"NuLl__\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpen4tdtj7.rkt:56:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t234An\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpen4tdtj7.rkt:57:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"781345\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpen4tdtj7.rkt:58:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Fails\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpen4tdtj7.rkt:59:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Wow\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpen4tdtj7.rkt:60:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpen4tdtj7.rkt:61:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (if (null? extensions)\n\
    \        \"\"\n        (let ([ext (car extensions)]\n              [rest (cdr\
    \ extensions)])\n          (if (null? rest)\n              ext\n             \
    \ (let ([strongest-rest (strongest-extension-name rest)])\n                (if\
    \ (> (strength ext) (strength strongest-rest))\n                    ext\n    \
    \                strongest-rest))))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_yn_chrd.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp_yn_chrd.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([extensions (map (lambda (extension)\n                \
    \           (list extension\n                                 (let ([cap (count\
    \ (lambda (c) (char-upper-case? c)) extension)]\n                            \
    \           [sm (count (lambda (c) (char-lower-case? c)) extension)])\n      \
    \                             (/ cap sm))))\n                         extensions)])\n\
    \    (string-append class_name \".\" (car (argmax (lambda (x) (cadr x)) extensions)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3ypb8_.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnj3ypb8_.rkt:21:51>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3ypb8_.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnj3ypb8_.rkt:21:51>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnj3ypb8_.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnj3ypb8_.rkt:21:51>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnj3ypb8_.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpnj3ypb8_.rkt:21:51>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3ypb8_.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnj3ypb8_.rkt:21:51>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3ypb8_.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnj3ypb8_.rkt:21:51>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnj3ypb8_.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpnj3ypb8_.rkt:21:51>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3ypb8_.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper-lower str)\n    (let loop ([str str] [upper\
    \ 0] [lower 0])\n      (cond [(empty? str) (values upper lower)]\n           \
    \ [(char-upper-case? (car str)) (loop (cdr str) (+ upper 1) lower)]\n        \
    \    [(char-lower-case? (car str)) (loop (cdr str) upper (+ lower 1))]\n     \
    \       [else (loop (cdr str) upper lower)])))\n  (define (strength str)\n   \
    \ (let-values ([(upper lower) (count-upper-lower str)])\n      (/ (- upper lower)\
    \ 1.0)))\n  (define (strongest-extension extensions)\n    (let loop ([extensions\
    \ extensions] [strongest-extension '()] [strongest-strength 0])\n      (cond [(empty?\
    \ extensions) (if (empty? strongest-extension) \"\" (car strongest-extension))]\n\
    \            [(> (strength (car extensions)) strongest-strength)\n           \
    \  (loop (cdr extensions) (list (car extensions)) (strength (car extensions)))]\n\
    \            [(= (strength (car extensions)) strongest-strength)\n           \
    \  (loop (cdr extensions) (cons (car extensions) strongest-extension) strongest-strength)]\n\
    \            [else (loop (cdr extensions) strongest-extension strongest-strength)])))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimiupx0d.rkt:43:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimiupx0d.rkt:44:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimiupx0d.rkt:45:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimiupx0d.rkt:46:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimiupx0d.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimiupx0d.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimiupx0d.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimiupx0d.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimiupx0d.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-caps str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-smalls str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (/ (- (count-caps str) (count-smalls str)) (string-length str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmin (map strength extensions)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpif02mxoy.rkt:36:4\n\
    \nargmin: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif02mxoy.rkt:37:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif02mxoy.rkt:38:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif02mxoy.rkt:39:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif02mxoy.rkt:40:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif02mxoy.rkt:41:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif02mxoy.rkt:42:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif02mxoy.rkt:43:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif02mxoy.rkt:44:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((caps (count (lambda\
    \ (c) (char-upper-case? c)) extension))\n          (smalls (count (lambda (c)\
    \ (char-lower-case? c)) extension)))\n      (/ (- caps smalls) (length extension))))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpefr0l0v_.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpefr0l0v_.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpefr0l0v_.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpefr0l0v_.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpefr0l0v_.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpefr0l0v_.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpefr0l0v_.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpefr0l0v_.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpefr0l0v_.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpefr0l0v_.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpefr0l0v_.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpefr0l0v_.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpefr0l0v_.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpefr0l0v_.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpefr0l0v_.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (count-upper str)\n\
    \      (cond [(empty? str) 0]\n            [(char-upper-case? (car str)) (+ 1\
    \ (count-upper (cdr str)))]\n            [else (count-upper (cdr str))]))\n  \
    \  (define (count-lower str)\n      (cond [(empty? str) 0]\n            [(char-lower-case?\
    \ (car str)) (+ 1 (count-lower (cdr str)))]\n            [else (count-lower (cdr\
    \ str))]))\n    (/ (- (count-upper extension) (count-lower extension)) (string-length\
    \ extension)))\n  (define (max-strength extensions)\n    (cond [(empty? extensions)\
    \ 0]\n          [(> (strength (car extensions)) (max-strength (cdr extensions)))\
    \ (strength (car extensions))]\n          [else (max-strength (cdr extensions))]))\n\
    \  (define (find-max-strength extensions)\n    (cond [(empty? extensions) \"\"\
    ]\n          [(= (strength (car extensions)) (max-strength extensions)) (car extensions)]\n\
    \          [else (find-max-strength (cdr extensions))]))\n  (string-append class_name\
    \ \".\" (find-max-strength extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mip9k.rkt:44:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mip9k.rkt:45:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mip9k.rkt:46:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mip9k.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mip9k.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mip9k.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mip9k.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mip9k.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mip9k.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let* ([caps (regexp-match* #rx\"\
    [A-Z]\" ext)]\n           [smalls (regexp-match* #rx\"[a-z]\" ext)])\n      (/\
    \ (- (length caps) (length smalls)))))\n  (define (strongest-extension lst)\n\
    \    (let* ([exts (sort lst (\u03BB (x y) (< (strength x) (strength y))))])\n\
    \      (car exts)))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmprwrdbrzg.rkt:33:4


    /: division by zero

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprwrdbrzg.rkt:34:4

    actual:     "Boku123.NazeDa"

    expected:   "Boku123.YEs.WeCaNe"

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmprwrdbrzg.rkt:35:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmprwrdbrzg.rkt:36:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmprwrdbrzg.rkt:37:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmprwrdbrzg.rkt:38:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmprwrdbrzg.rkt:39:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmprwrdbrzg.rkt:40:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmprwrdbrzg.rkt:41:4


    /: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let* ([extensions (map string->list extensions)]\n         [extensions\
    \ (map (lambda (extension)\n                            (cons extension (count-upper-lower-case\
    \ extension)))\n                          extensions)]\n         [extensions (map\
    \ (lambda (extension)\n                            (cons (car extension)\n   \
    \                               (- (car (cdr extension))\n                   \
    \                  (cadr (cdr extension)))))\n                          extensions)]\n\
    \         [extensions (sort extensions (lambda (ext1 ext2)\n                 \
    \                       (> (cadr ext1) (cadr ext2))))])\n    (string-append class_name\
    \ \".\" (list->string (car (car extensions))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4192mwh9.rkt:21:45: count-upper-lower-case: unbound identifier\n\
    \  in: count-upper-lower-case\n  location...:\n   /tmp/tmp4192mwh9.rkt:21:45\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (\u03BB (x) (char-upper-case?\
    \ x)) ext)]\n          [smalls (count (\u03BB (x) (char-lower-case? x)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (define (strongest-extension-name-helper extensions best-so-far)\n      (cond\
    \ [(empty? extensions) (first best-so-far)]\n            [(> (strength (first\
    \ extensions)) (strength (first best-so-far)))\n             (strongest-extension-name-helper\
    \ (rest extensions) (list (first extensions)))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) best-so-far)]))\n    (strongest-extension-name-helper extensions\
    \ (list (first extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmu1_zt87.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpmu1_zt87.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmu1_zt87.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpmu1_zt87.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmu1_zt87.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpmu1_zt87.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmu1_zt87.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpmu1_zt87.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmu1_zt87.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpmu1_zt87.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmu1_zt87.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpmu1_zt87.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmu1_zt87.rkt:43:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpmu1_zt87.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmu1_zt87.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (cond [(empty? lst) '()]\n         \
    \ [(empty? (rest lst)) (first lst)]\n          [else (let ([first-strength (strength\
    \ (first lst))]\n                       [rest-strength (strength (strongest-extension\
    \ (rest lst)))])\n                  (if (> first-strength rest-strength)\n   \
    \                   (first lst)\n                      (strongest-extension (rest\
    \ lst))))]))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_fr_nxo6.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp_fr_nxo6.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) extension)]\n          [smalls (count (lambda (c)\
    \ (char-lower-case? c)) extension)])\n      (/ (- caps smalls) (length extension))))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([strongest-extension\
    \ (apply max extensions)])\n      (list-ref extensions (list-index strongest-extension\
    \ extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp71n1di6b.rkt:25:28: list-index: unbound identifier\n  in: list-index\n\
    \  location...:\n   /tmp/tmp71n1di6b.rkt:25:28\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (let ([strongest-extension (apply max (map strength extensions))])\n    (string-append\
    \ class_name \".\" (list-ref extensions strongest-extension))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbsr6oxes.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpbsr6oxes.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap (count-if char-upper-case?\
    \ extension)]\n          [sm (count-if char-lower-case? extension)])\n      (-\
    \ cap sm)))\n  (define (strongest-extension lst)\n    (apply max (map strength\
    \ lst)))\n  (string-append class_name \".\" (list-ref extensions (argmax strength\
    \ extensions))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqkmpnjpa.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpqkmpnjpa.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (- (count-if char-upper-case?\
    \ extension)\n       (count-if char-lower-case? extension)))\n  (define (strongest-extension\
    \ extensions)\n    (if (null? extensions)\n        \"\"\n        (let ((extension\
    \ (car extensions)))\n          (if (null? (cdr extensions))\n              extension\n\
    \              (let ((stronger-extension (strongest-extension (cdr extensions))))\n\
    \                (if (&gt; (strength extension) (strength stronger-extension))\n\
    \                    extension\n                    stronger-extension))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplorn9zd3.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 33\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_upper str)\n    (define (helper str count)\n \
    \     (cond\n        [(empty? str) count]\n        [(char-upper-case? (first str))\
    \ (helper (rest str) (+ count 1))]\n        [else (helper (rest str) count)]))\n\
    \    (helper str 0))\n  (define (count_lower str)\n    (define (helper str count)\n\
    \      (cond\n        [(empty? str) count]\n        [(char-lower-case? (first\
    \ str)) (helper (rest str) (+ count 1))]\n        [else (helper (rest str) count)]))\n\
    \    (helper str 0))\n  (define (calc_strength str)\n    (- (count_upper str)\
    \ (count_lower str)))\n  (define (find_strongest extensions)\n    (define (helper\
    \ extensions strongest_ext)\n      (cond\n        [(empty? extensions) strongest_ext]\n\
    \        [(> (calc_strength (first extensions)) (calc_strength strongest_ext))\n\
    \         (helper (rest extensions) (first extensions))]\n        [else (helper\
    \ (rest extensions) strongest_ext)]))\n    (helper extensions (first extensions)))\n\
    \  (string-append class_name \".\" (find_strongest extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwm8ouob7.rkt:50:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"tEN\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwm8ouob7.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwm8ouob7.rkt:52:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"t\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwm8ouob7.rkt:53:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwm8ouob7.rkt:54:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Tab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwm8ouob7.rkt:55:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwm8ouob7.rkt:56:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Die\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwm8ouob7.rkt:57:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwm8ouob7.rkt:58:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ lst)\n    (define (strongest-extension-helper lst strongest-extension)\n   \
    \   (cond\n        [(empty? lst) strongest-extension]\n        [(> (strength (first\
    \ lst)) (strength strongest-extension))\n         (strongest-extension-helper\
    \ (rest lst) (first lst))]\n        [else (strongest-extension-helper (rest lst)\
    \ strongest-extension)]))\n    (strongest-extension-helper (rest lst) (first lst)))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (count-if char-upper-case?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqpece2hh.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpqpece2hh.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (let loop ([i 0] [count 0])\n\
    \      (if (= i (string-length str))\n          count\n          (if (char-upper-case?\
    \ (string-ref str i))\n              (loop (+ i 1) (+ count 1))\n            \
    \  (loop (+ i 1) count)))))\n  (define (count-lower str)\n    (let loop ([i 0]\
    \ [count 0])\n      (if (= i (string-length str))\n          count\n         \
    \ (if (char-lower-case? (string-ref str i))\n              (loop (+ i 1) (+ count\
    \ 1))\n              (loop (+ i 1) count)))))\n  (define (strength str)\n    (/\
    \ (- (count-upper str) (count-lower str)) (string-length str)))\n  (define (strongest-extension\
    \ lst)\n    (if (null? lst)\n        \"\"\n        (let loop ([lst lst] [max-strength\
    \ -1] [max-extension \"\"])\n          (if (null? lst)\n              max-extension\n\
    \              (let ([str (car lst)]\n                    [str-strength (strength\
    \ str)])\n                (if (> str-strength max-strength)\n                \
    \    (loop (cdr lst) str-strength str)\n                    (loop (cdr lst) max-strength\
    \ max-extension)))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph80dtfyd.rkt:42:44: str: unbound identifier\n  in: str\n  location...:\n\
    \   /tmp/tmph80dtfyd.rkt:42:44\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) str)]\n          [smalls (count (lambda (c) (char-lower-case? c)) str)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (define (strongest-extension-name-iter extensions strongest-extension-name)\n\
    \      (cond [(empty? extensions) strongest-extension-name]\n            [(> (strength\
    \ (first extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-iter\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqtbv7wnh.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpqtbv7wnh.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqtbv7wnh.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpqtbv7wnh.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqtbv7wnh.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpqtbv7wnh.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqtbv7wnh.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpqtbv7wnh.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqtbv7wnh.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpqtbv7wnh.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqtbv7wnh.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpqtbv7wnh.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqtbv7wnh.rkt:43:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpqtbv7wnh.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqtbv7wnh.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (let\
    \ ([extensions (sort extensions (lambda (a b) (< (strength a) (strength b))))])\n\
    \      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp80v20fme.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80v20fme.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp80v20fme.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmp80v20fme.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp80v20fme.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80v20fme.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp80v20fme.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80v20fme.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp80v20fme.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80v20fme.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp80v20fme.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmp80v20fme.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp80v20fme.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmp80v20fme.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp80v20fme.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) extension)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) extension)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8wlpfm1.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl8wlpfm1.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8wlpfm1.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl8wlpfm1.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl8wlpfm1.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl8wlpfm1.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl8wlpfm1.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpl8wlpfm1.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8wlpfm1.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl8wlpfm1.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8wlpfm1.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpl8wlpfm1.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl8wlpfm1.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpl8wlpfm1.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8wlpfm1.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (let ([extensions (sort extensions (lambda (a b) (string<? a b)))]\n      \
    \    [strengths (map strength extensions)])\n      (let ([max-strength (apply\
    \ max strengths)]\n            [max-strength-index (list-index max-strength strengths)])\n\
    \        (list-ref extensions max-strength-index))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpffoqjgls.rkt:27:33: list-index: unbound identifier\n  in: list-index\n\
    \  location...:\n   /tmp/tmpffoqjgls.rkt:27:33\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap (count-if char-upper-case?\
    \ extension)]\n          [sm (count-if char-lower-case? extension)])\n      (-\
    \ cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply max (map\
    \ strength extensions)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw_jc51r_.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpw_jc51r_.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (define\
    \ (strongest-extension-name-iter extensions strongest-extension-name)\n      (cond\
    \ [(empty? extensions) strongest-extension-name]\n            [(string=? (first\
    \ extensions) strongest-extension-name)\n             (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name)]\n            [(> (strength (first\
    \ extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-iter\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhm0eoeg.rkt:39:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhm0eoeg.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbhm0eoeg.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpbhm0eoeg.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhm0eoeg.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhm0eoeg.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhm0eoeg.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhm0eoeg.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhm0eoeg.rkt:43:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhm0eoeg.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhm0eoeg.rkt:44:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpbhm0eoeg.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbhm0eoeg.rkt:45:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpbhm0eoeg.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbhm0eoeg.rkt:46:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap (count-if char-upper-case?\
    \ extension)]\n          [sm (count-if char-lower-case? extension)])\n      (-\
    \ cap sm)))\n  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-iter\
    \ extensions strongest-extension-name)\n      (cond [(empty? extensions) strongest-extension-name]\n\
    \            [(> (strength (first extensions)) (strength strongest-extension-name))\n\
    \             (strongest-extension-name-iter (rest extensions) (first extensions))]\n\
    \            [else (strongest-extension-name-iter (rest extensions) strongest-extension-name)]))\n\
    \    (strongest-extension-name-iter extensions (first extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_cyewh7.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpl_cyewh7.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper-lower str)\n    (let loop ([str str] [upper\
    \ 0] [lower 0])\n      (cond [(empty? str) (values upper lower)]\n           \
    \ [(char-upper-case? (car str)) (loop (cdr str) (+ upper 1) lower)]\n        \
    \    [(char-lower-case? (car str)) (loop (cdr str) upper (+ lower 1))]\n     \
    \       [else (loop (cdr str) upper lower)])))\n  (define (strength str)\n   \
    \ (let-values ([(upper lower) (count-upper-lower str)])\n      (/ (- upper lower)\
    \ 1.0)))\n  (define (strongest-extension lst)\n    (let loop ([lst lst] [max-strength\
    \ 0] [max-extension \"\"])\n      (cond [(empty? lst) max-extension]\n       \
    \     [(> (strength (car lst)) max-strength)\n             (loop (cdr lst) (strength\
    \ (car lst)) (car lst))]\n            [else (loop (cdr lst) max-strength max-extension)])))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9sg5l7yt.rkt:41:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9sg5l7yt.rkt:42:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9sg5l7yt.rkt:43:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9sg5l7yt.rkt:44:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9sg5l7yt.rkt:45:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9sg5l7yt.rkt:46:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9sg5l7yt.rkt:47:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9sg5l7yt.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9sg5l7yt.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength_of_extension extension)\n    (let ((cap (count-if\
    \ char-upper-case? extension))\n          (sm (count-if char-lower-case? extension)))\n\
    \      (- cap sm)))\n  (define (strongest_extension_name extensions)\n    (apply\
    \ max (map strength_of_extension extensions)))\n  (define (strongest_extension_name_with_strength\
    \ extensions)\n    (let ((strongest_strength (strongest_extension_name extensions)))\n\
    \      (filter (lambda (extension)\n                (= (strength_of_extension\
    \ extension) strongest_strength))\n              extensions)))\n  (string-append\
    \ class_name \".\" (first (strongest_extension_name_with_strength extensions))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp37z6uvfq.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp37z6uvfq.rkt:20:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (define (strongest-extension-name-with-strength\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))))\n  (define (strongest-extension-name-with-strength-and-index\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))\n          (index (strongest-extension-name\
    \ extensions) extensions)))\n  (define (index ext extensions)\n    (if (null?\
    \ extensions)\n        -1\n        (if (equal? ext (car extensions))\n       \
    \     0\n            (+ 1 (index ext (cdr extensions))))))\n  (define (strongest-extension-name-with-strength-and-index-and-class\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))\n          (index (strongest-extension-name\
    \ extensions) extensions)\n          class_name))\n  (define (strongest-extension-name-with-strength-and-index-and-class-and-extensions\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))\n          (index (strongest-extension-name\
    \ extensions) extensions)\n          class_name\n          extensions))\n  (define\
    \ (strongest-extension-name-with-strength-and-index-and-class-and-extensions-and-class-name\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))\n          (index (strongest-extension-name\
    \ extensions) extensions)\n          class_name\n          extensions\n      \
    \    class_name))\n  (define (strongest-\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5sfu237z.rkt:56:10: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 57\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (cond\n      [(empty? str) 0]\n\
    \      [(char-upper-case? (first str)) (+ 1 (count-upper (rest str)))]\n     \
    \ [else (count-upper (rest str))]))\n  (define (count-lower str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char-lower-case? (first str)) (+ 1 (count-lower\
    \ (rest str)))]\n      [else (count-lower (rest str))]))\n  (define (strength\
    \ str)\n    (/ (- (count-upper str) (count-lower str)) (string-length str)))\n\
    \  (define (strongest-extension lst)\n    (cond\n      [(empty? lst) \"\"]\n \
    \     [(empty? (rest lst)) (first lst)]\n      [(> (strength (first lst)) (strength\
    \ (second lst)))\n       (strongest-extension (cons (first lst) (rest (rest lst))))]\n\
    \      [else (strongest-extension (rest lst))]))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpattdiou8.rkt:45:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"tEN\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpattdiou8.rkt:46:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpattdiou8.rkt:47:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"t\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpattdiou8.rkt:48:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpattdiou8.rkt:49:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Tab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpattdiou8.rkt:50:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpattdiou8.rkt:51:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Die\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpattdiou8.rkt:52:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpattdiou8.rkt:53:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"671235\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-caps str)\n    (let loop ([i 0] [count 0])\n \
    \     (if (= i (string-length str))\n          count\n          (if (char-upper-case?\
    \ (string-ref str i))\n              (loop (+ i 1) (+ count 1))\n            \
    \  (loop (+ i 1) count)))))\n  (define (count-smalls str)\n    (let loop ([i 0]\
    \ [count 0])\n      (if (= i (string-length str))\n          count\n         \
    \ (if (char-lower-case? (string-ref str i))\n              (loop (+ i 1) (+ count\
    \ 1))\n              (loop (+ i 1) count)))))\n  (define (strength str)\n    (-\
    \ (count-caps str) (count-smalls str)))\n  (define (strongest-extension lst)\n\
    \    (if (null? lst)\n        \"\"\n        (let loop ([lst (cdr lst)] [max (car\
    \ lst)] [max-strength (strength (car lst))])\n          (if (null? lst)\n    \
    \          max\n              (let ([str (car lst)] [str-strength (strength str)])\n\
    \                (if (> str-strength max-strength)\n                    (loop\
    \ (cdr lst) str str-strength)\n                    (loop (cdr lst) max max-strength)))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3bk0fc29.rkt:41:60: str: unbound identifier\n  in: str\n  location...:\n\
    \   /tmp/tmp3bk0fc29.rkt:41:60\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (let\
    \ ([extensions (sort extensions (lambda (a b) (< (strength a) (strength b))))])\n\
    \      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmn_pv_1.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfmn_pv_1.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfmn_pv_1.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpfmn_pv_1.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmn_pv_1.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfmn_pv_1.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmn_pv_1.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfmn_pv_1.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmn_pv_1.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfmn_pv_1.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmn_pv_1.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfmn_pv_1.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfmn_pv_1.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpfmn_pv_1.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmn_pv_1.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfya5xn1y.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfya5xn1y.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfya5xn1y.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfya5xn1y.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfya5xn1y.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfya5xn1y.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfya5xn1y.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpfya5xn1y.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfya5xn1y.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfya5xn1y.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfya5xn1y.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpfya5xn1y.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfya5xn1y.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpfya5xn1y.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfya5xn1y.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((cap (count-if char-upper-case?\
    \ extension))\n          (sm (count-if char-lower-case? extension)))\n      (-\
    \ cap sm)))\n  (define (strongest-extension extension1 extension2)\n    (if (&gt;\
    \ (strength extension1) (strength extension2))\n        extension1\n        extension2))\n\
    \  (string-append class_name \".\" (reduce strongest-extension extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp33xeee2k.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 29\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) str)]\n          [smalls (count (lambda (c) (char-lower-case? c)) str)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (let ([ext-strengths (map (lambda (ext) (cons ext (strength ext))) extensions)])\n\
    \      (let ([max-strength (apply max (map cdr ext-strengths))])\n        (let\
    \ ([strongest-ext (car (filter (lambda (ext-strength) (= (cdr ext-strength) max-strength))\
    \ ext-strengths))])\n          (car strongest-ext)))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1tiobjt.rkt:35:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw1tiobjt.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1tiobjt.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw1tiobjt.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw1tiobjt.rkt:37:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw1tiobjt.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw1tiobjt.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpw1tiobjt.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1tiobjt.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw1tiobjt.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1tiobjt.rkt:40:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw1tiobjt.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw1tiobjt.rkt:41:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpw1tiobjt.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1tiobjt.rkt:42:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (count-upper-case str)\n\
    \      (define (count-upper-case-iter str count)\n        (cond [(empty? str)\
    \ count]\n              [(char-upper-case? (car str)) (count-upper-case-iter (cdr\
    \ str) (+ count 1))]\n              [else (count-upper-case-iter (cdr str) count)]))\n\
    \    (define (count-lower-case str)\n      (define (count-lower-case-iter str\
    \ count)\n        (cond [(empty? str) count]\n              [(char-lower-case?\
    \ (car str)) (count-lower-case-iter (cdr str) (+ count 1))]\n              [else\
    \ (count-lower-case-iter (cdr str) count)]))\n    (/ (- (count-upper-case extension)\
    \ (count-lower-case extension)) 1.0))\n  (define (strongest-extension-iter extensions\
    \ strongest-extension)\n    (cond [(empty? extensions) strongest-extension]\n\
    \          [(> (strength (car extensions)) (strength strongest-extension)) (strongest-extension-iter\
    \ (cdr extensions) (car extensions))]\n          [else (strongest-extension-iter\
    \ (cdr extensions) strongest-extension)]))\n  (string-append class_name \".\"\
    \ (strongest-extension-iter extensions (car extensions))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptpzanf2p.rkt:19:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 37\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count-if char-upper-case?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension exts)\n    (let ([strongest (first exts)]\n  \
    \        [strength (strength strongest)])\n      (for ([ext (rest exts)])\n  \
    \      (let ([str (strength ext)])\n          (when (> str strength)\n       \
    \     (set! strength str)\n            (set! strongest ext))))\n      strongest))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp94ev02ey.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp94ev02ey.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count-if char-upper-case?\
    \ extension)]\n          [smalls (count-if char-lower-case? extension)])\n   \
    \   (- caps smalls)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max-by strength extensions))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbq3xpoe8.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpbq3xpoe8.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((caps (count-if char-upper-case?\
    \ extension))\n          (smalls (count-if char-lower-case? extension)))\n   \
    \   (- caps smalls)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max-by strength extensions))\n  (format \"~a.~a\" class_name (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi4svdfy3.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpi4svdfy3.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength s)\n    (let ([caps (count-if char-upper-case?\
    \ s)]\n          [smalls (count-if char-lower-case? s)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([extensions (sort\
    \ extensions (\u03BB (x y)\n                                        (string<?\
    \ x y)))]\n          [strengths (map strength extensions)])\n      (let ([max-strength\
    \ (apply max strengths)])\n        (list-ref extensions (list-index max-strength\
    \ strengths)))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx2kc3fb3.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpx2kc3fb3.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7p_67yu.rkt:36:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7p_67yu.rkt:37:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7p_67yu.rkt:38:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7p_67yu.rkt:39:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7p_67yu.rkt:40:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7p_67yu.rkt:41:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7p_67yu.rkt:42:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7p_67yu.rkt:43:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7p_67yu.rkt:44:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: 0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_caps str)\n    (let loop ([i 0] [count 0])\n \
    \     (if (= i (string-length str))\n          count\n          (if (char-upper-case?\
    \ (string-ref str i))\n              (loop (+ i 1) (+ count 1))\n            \
    \  (loop (+ i 1) count)))))\n  (define (count_smalls str)\n    (let loop ([i 0]\
    \ [count 0])\n      (if (= i (string-length str))\n          count\n         \
    \ (if (char-lower-case? (string-ref str i))\n              (loop (+ i 1) (+ count\
    \ 1))\n              (loop (+ i 1) count)))))\n  (define (strength str)\n    (/\
    \ (- (count_caps str) (count_smalls str)) 1.0))\n  (define (strongest_extension\
    \ lst)\n    (if (null? lst)\n        \"\"\n        (let loop ([lst lst] [strongest\
    \ (car lst)] [strength (strength (car lst))])\n          (if (null? lst)\n   \
    \           strongest\n              (let ([str (car lst)])\n                (if\
    \ (> (strength str) strength)\n                    (loop (cdr lst) str (strength\
    \ str))\n                    (loop (cdr lst) strongest strength)))))))\n  (string-append\
    \ class_name \".\" (strongest_extension extensions)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrp4p2yp.rkt:52:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 1.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpqrp4p2yp.rkt:53:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: -4.0\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpqrp4p2yp.rkt:54:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: -1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrp4p2yp.rkt:55:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrp4p2yp.rkt:56:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ -1.0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqrp4p2yp.rkt:57:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: -1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrp4p2yp.rkt:58:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: -1.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpqrp4p2yp.rkt:59:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqrp4p2yp.rkt:60:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (regexp-match #rx\"[A-Z]\"\
    \ ext))\n          (sm (regexp-match #rx\"[a-z]\" ext)))\n      (/ (- (length\
    \ cap) (length sm)) (length ext))))\n  (define (strongest-extension extensions)\n\
    \    (define (strongest-extension-helper extensions strongest-extension)\n   \
    \   (cond ((null? extensions) strongest-extension)\n            ((> (strength\
    \ (car extensions)) (strength strongest-extension))\n             (strongest-extension-helper\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-helper\
    \ (cdr extensions) strongest-extension))))\n    (strongest-extension-helper extensions\
    \ (car extensions)))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a3rkuub.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a3rkuub.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a3rkuub.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a3rkuub.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a3rkuub.rkt:41:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a3rkuub.rkt:42:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a3rkuub.rkt:43:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a3rkuub.rkt:44:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5a3rkuub.rkt:45:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (let ([strongest (car extensions)]\n\
    \          [strength (strength (car extensions))])\n      (for ([ext (cdr extensions)])\n\
    \        (let ([ext-strength (strength ext)])\n          (when (> ext-strength\
    \ strength)\n            (set! strongest ext)\n            (set! strength ext-strength))))\n\
    \      strongest))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf_544jut.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpf_544jut.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ((cap (regexp-match #rx\"[A-Z]\"\
    \ ext))\n          (sm (regexp-match #rx\"[a-z]\" ext)))\n      (- (length cap)\
    \ (length sm))))\n  (define (strongest-extension-name extensions)\n    (cond ((null?\
    \ extensions) \"\")\n          ((null? (cdr extensions)) (car extensions))\n \
    \         (else\n           (let ((first (car extensions))\n                 (second\
    \ (cadr extensions)))\n             (if (> (strength first) (strength second))\n\
    \                 first\n                 second)))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy55wsc3t.rkt:39:4\n\
    actual:     \"Watashi.niNE\"\nexpected:   \"Watashi.eIGHt8OKe\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy55wsc3t.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy55wsc3t.rkt:41:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy55wsc3t.rkt:42:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy55wsc3t.rkt:43:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy55wsc3t.rkt:45:4\n\
    actual:     \"finNNalLLly.NowW\"\nexpected:   \"finNNalLLly.WoW\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy55wsc3t.rkt:46:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy55wsc3t.rkt:47:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (let ([extensions (sort extensions (lambda (x y) (< (strength x) (strength\
    \ y))))])\n      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnny85h8y.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnny85h8y.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnny85h8y.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpnny85h8y.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnny85h8y.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnny85h8y.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnny85h8y.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnny85h8y.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnny85h8y.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnny85h8y.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnny85h8y.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpnny85h8y.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnny85h8y.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpnny85h8y.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnny85h8y.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm3y27w9.rkt:36:4\n\
    \nargmax: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm3y27w9.rkt:37:4\n\nargmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm3y27w9.rkt:38:4\n\nargmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm3y27w9.rkt:39:4\n\nargmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm3y27w9.rkt:40:4\n\nargmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm3y27w9.rkt:41:4\n\nargmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm3y27w9.rkt:42:4\n\nargmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm3y27w9.rkt:43:4\n\nargmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm3y27w9.rkt:44:4\n\nargmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ((cap (count-if char-upper-case?\
    \ extension))\n          (sm (count-if char-lower-case? extension)))\n      (-\
    \ cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply max (map\
    \ strength extensions)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (argmax (map strength extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk9q0a_dw.rkt:20:16: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpk9q0a_dw.rkt:20:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (/ caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6bfk01z.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6bfk01z.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6bfk01z.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6bfk01z.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj6bfk01z.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6bfk01z.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj6bfk01z.rkt:35:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpj6bfk01z.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6bfk01z.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6bfk01z.rkt:20:23>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6bfk01z.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpj6bfk01z.rkt:20:23>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj6bfk01z.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpj6bfk01z.rkt:20:23>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj6bfk01z.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (let ([max-strength (apply max (map strength extensions))])\n\
    \    (string-append class_name \".\" (car (filter (lambda (ext) (= (strength ext)\
    \ max-strength)) extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5o10wp3.rkt:31:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw5o10wp3.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5o10wp3.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw5o10wp3.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw5o10wp3.rkt:33:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw5o10wp3.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw5o10wp3.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmpw5o10wp3.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5o10wp3.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw5o10wp3.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5o10wp3.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpw5o10wp3.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw5o10wp3.rkt:37:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpw5o10wp3.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5o10wp3.rkt:38:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count-if char-upper-case?\
    \ extension)]\n          [smalls (count-if char-lower-case? extension)])\n   \
    \   (/ caps smalls)))\n  (define (strongest-extension extensions)\n    (if (null?\
    \ extensions)\n        \"\"\n        (let ([extension (car extensions)]\n    \
    \          [rest (cdr extensions)])\n          (if (null? rest)\n            \
    \  extension\n              (let ([strongest (strongest-extension rest)])\n  \
    \              (if (> (strength extension) (strength strongest))\n           \
    \         extension\n                    strongest))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpww3byi6h.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpww3byi6h.rkt:20:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-iter\
    \ extensions strongest-extension-name strongest-extension-strength)\n      (cond\
    \ [(empty? extensions) strongest-extension-name]\n            [(> (strength (first\
    \ extensions)) strongest-extension-strength)\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions) (strength (first extensions)))]\n     \
    \       [else (strongest-extension-name-iter (rest extensions) strongest-extension-name\
    \ strongest-extension-strength)]))\n    (strongest-extension-name-iter extensions\
    \ (first extensions) (strength (first extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplu2d4w2y.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmplu2d4w2y.rkt:20:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n \
    \     (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (let\
    \ ([extensions (sort extensions (lambda (a b) (< (strength a) (strength b))))])\n\
    \      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9xdaunq.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpq9xdaunq.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq9xdaunq.rkt:34:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpq9xdaunq.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9xdaunq.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpq9xdaunq.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9xdaunq.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpq9xdaunq.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9xdaunq.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpq9xdaunq.rkt:20:22>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9xdaunq.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpq9xdaunq.rkt:20:22>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq9xdaunq.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpq9xdaunq.rkt:20:22>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9xdaunq.rkt:40:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (count-upper ext)\n     \
    \ (if (empty? ext)\n          0\n          (if (char-upper-case? (car ext))\n\
    \              (+ 1 (count-upper (cdr ext)))\n              (count-upper (cdr\
    \ ext)))))\n    (define (count-lower ext)\n      (if (empty? ext)\n          0\n\
    \          (if (char-lower-case? (car ext))\n              (+ 1 (count-lower (cdr\
    \ ext)))\n              (count-lower (cdr ext)))))\n    (/ (- (count-upper ext)\
    \ (count-lower ext)) (length ext)))\n  (define (strongest-extension extensions)\n\
    \    (if (empty? extensions)\n        \"\"\n        (if (empty? (cdr extensions))\n\
    \            (car extensions)\n            (if (> (strength (car extensions))\
    \ (strength (cadr extensions)))\n                (strongest-extension (cons (car\
    \ extensions) (cddr extensions)))\n                (strongest-extension (cdr extensions))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8kx7tpv.rkt:48:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8kx7tpv.rkt:49:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8kx7tpv.rkt:50:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8kx7tpv.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8kx7tpv.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8kx7tpv.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8kx7tpv.rkt:54:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8kx7tpv.rkt:55:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8kx7tpv.rkt:56:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (/ (- (count-upper str) (count-lower str)) (string-length str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmin (map strength extensions)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt78g2g_b.rkt:36:4\n\
    \nargmin: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt78g2g_b.rkt:37:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt78g2g_b.rkt:38:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt78g2g_b.rkt:39:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt78g2g_b.rkt:40:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt78g2g_b.rkt:41:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt78g2g_b.rkt:42:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt78g2g_b.rkt:43:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt78g2g_b.rkt:44:4\n\nargmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([caps (count-if char-upper-case?\
    \ extension)]\n          [smalls (count-if char-lower-case? extension)])\n   \
    \   (- caps smalls)))\n  (define (strongest-extension-name extensions)\n    (define\
    \ (strongest-extension-name-helper extensions strongest-extension-name strongest-extension-strength)\n\
    \      (cond [(empty? extensions) strongest-extension-name]\n            [(< (strength\
    \ (first extensions)) strongest-extension-strength)\n             (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name strongest-extension-strength)]\n\
    \            [else (strongest-extension-name-helper (rest extensions) (first extensions)\
    \ (strength (first extensions)))]))\n    (strongest-extension-name-helper extensions\
    \ (first extensions) (strength (first extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi9gtywji.rkt:20:17: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpi9gtywji.rkt:20:17\n"
  stdout: ''
