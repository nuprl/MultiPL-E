name: HumanEval_115_max_fill
language: racket
prompt: "#lang racket\n\n;; You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n;; and each 1 in a row represents a single unit of water.\n;;\
  \ Each well has a corresponding bucket that can be used to extract water from it,\
  \ \n;; and all buckets have the same capacity.\n;; Your task is to use the buckets\
  \ to empty the wells.\n;; Output the number of times you need to lower the buckets.\n\
  ;; Example 1:\n;; Input: \n;; grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n;; bucket_capacity\
  \ : 1\n;; Output: 6\n;; Example 2:\n;; Input: \n;; grid : [[0,0,1,1], [0,0,0,0],\
  \ [1,1,1,1], [0,1,1,1]]\n;; bucket_capacity : 2\n;; Output: 5\n;; Example 3:\n;;\
  \ Input: \n;; grid : [[0,0,0], [0,0,0]]\n;; bucket_capacity : 5\n;; Output: 0\n\
  ;; Constraints:\n;; * all wells have the same length\n;; * 1 <= grid.length <= 10^2\n\
  ;; * 1 <= grid[:,1].length <= 10^2\n;; * grid[i][j] -> 0 | 1\n;; * 1 <= capacity\
  \ <= 10\n(define (max_fill grid capacity)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n\
  \    (check-equal? (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1))\
  \ 1) 6)\n    (check-equal? (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list\
  \ 1 1 1 1) (list 0 1 1 1)) 2) 5)\n    (check-equal? (candidate (list (list 0 0 0)\
  \ (list 0 0 0)) 5) 0)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1\
  \ 1 1 1)) 2) 4)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1))\
  \ 9) 2)\n))\n\n(test-humaneval)"
completions: ["  (let ([max-fill (apply max (map (lambda (row) (apply + row)) grid))])\n\
    \    (if (<= max-fill capacity)\n        0\n        (let ([num-rows (length grid)])\n\
    \          (+ num-rows (- max-fill capacity))))))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(>= capacity (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [else (max-fill-helper (rest\
    \ grid) (- capacity (first grid)))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 0) (max-fill-helper (rest grid) capacity)]\n          [(= (first (first grid))\
    \ 0) (max-fill-helper (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n       (define\
    \ row (first grid))\n       (define rest-grid (rest grid))\n       (define (fill-row\
    \ row capacity)\n         (cond\n           [(empty? row) capacity]\n        \
    \   [(= capacity 0) capacity]\n           [else\n            (define rest-row\
    \ (rest row))\n            (define (fill-row-helper row capacity)\n          \
    \    (cond\n                [(empty? row) capacity]\n                [(= capacity\
    \ 0) capacity]\n                [else\n                 (define rest-row (rest\
    \ row))\n                 (cond\n                   [(= (first row) 1)\n     \
    \               (fill-row-helper rest-row (- capacity 1))]\n                 \
    \  [else\n                    (fill-row-helper rest-row capacity)])]))\n     \
    \       (fill-row-helper rest-row capacity)]))\n       (+ (fill-row row capacity)\n\
    \          (max-fill-helper rest-grid capacity))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 0) (max-fill-helper (rest grid) capacity)]\n          [(= (first (first grid))\
    \ 0) (max-fill-helper (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n       (let*\
    \ ([row (first grid)]\n              [row-len (length row)]\n              [row-sum\
    \ (apply + row)]\n              [row-max (apply max row)]\n              [row-min\
    \ (apply min row)]\n              [row-max-index (index-of row-max row)]\n   \
    \           [row-min-index (index-of row-min row)]\n              [row-max-fill\
    \ (min capacity row-max)]\n              [row-min-fill (min capacity row-min)]\n\
    \              [row-max-fill-index (index-of row-max-fill row)]\n            \
    \  [row-min-fill-index (index-of row-min-fill row)]\n              [row-max-fill-left\
    \ (sublist row 0 row-max-fill-index)]\n              [row-max-fill-right (sublist\
    \ row (add1 row-max-fill-index) row-len)]\n              [row-min-fill-left (sublist\
    \ row 0 row-min-fill-index)]\n              [row-min-fill-right (sublist row (add1\
    \ row-min-fill-index) row-len)]\n              [row-max-fill-left-sum (apply +\
    \ row-max-fill-left)]\n              [row-max-fill-right-sum (apply + row-max-fill-right)]\n\
    \              [row-min-fill-left-sum (apply + row-min-fill-left)]\n         \
    \     [row-min-fill-right-sum (apply + row-min-fill-right)])\n         (cond\n\
    \           [(= row-max-fill-left-sum row-max-fill-right-sum)\n            (max-fill-helper\
    \ (rest grid) capacity)]\n           [(> row-max-fill-left-sum row-max-fill-right-sum)\n\
    \            (max-fill-helper (cons row-max-fill-left (rest grid)) capacity)]\n\
    \           [else\n            (max-fill-helper", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (max (max-fill-helper (rest grid) capacity)\n\
    \                     (+ 1 (max-fill-helper (rest grid) (- capacity 1))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (let* ([row (first grid)]\n    \
    \          [max-fill (min capacity (apply max row))]\n              [new-grid\
    \ (map (lambda (x) (- x max-fill)) row)])\n         (+ max-fill (max-fill-helper\
    \ (rest grid) capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n\
    \      (cond ((null? grid) 0)\n            ((null? (car grid)) 0)\n          \
    \  ((= capacity 0) 0)\n            ((= capacity 1) (count-ones (car grid)))\n\
    \            (else (max-fill-helper-helper (cdr grid) (- capacity 1)))))\n   \
    \ (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(zero? capacity) (max-fill-helper (rest grid) capacity)]\n          [(zero?\
    \ (first (first grid))) (max-fill-helper (rest grid) capacity)]\n          [else\
    \ (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max_fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max_fill-helper (rest grid) capacity)]\n         \
    \ [(= capacity 1) (+ 1 (max_fill-helper (rest grid) capacity))]\n          [else\
    \ (+ 1 (max_fill-helper (rest grid) (- capacity 1)))]))\n  (max_fill-helper grid\
    \ capacity))\n", "  (define (max_fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max_fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max_fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max_fill-helper (rest grid) (- capacity 1)))]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (if (null? grid)\n          0\n\
    \          (let* ([row (car grid)]\n                 [max-fill-row (max-fill-row\
    \ row capacity)])\n            (+ max-fill-row (max-fill-helper-helper (cdr grid)\
    \ capacity)))))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (cond\
    \ [(empty? grid) 0]\n            [(= capacity (apply max (car grid)))\n      \
    \       (add1 (max-fill-helper (cdr grid) capacity))]\n            [else (max-fill-helper-helper\
    \ (cdr grid) capacity)]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-len (length\
    \ row)]\n               [max-fill-row (max-fill-helper (cdr grid) capacity)]\n\
    \               [max-fill-row-capacity (min capacity row-len)])\n          (+\
    \ max-fill-row max-fill-row-capacity))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(>= capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n     \
    \     [else (+ 1 (max-fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (cond [(empty? grid)\
    \ 0]\n            [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \            [(>= capacity (first (first grid)))\n             (max-fill-helper\
    \ (rest grid) capacity)]\n            [else (max-fill-helper-helper (rest grid)\
    \ capacity)]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-inner grid capacity)\n      (if (empty? grid)\n          0\n\
    \          (let* ([row (first grid)]\n                 [max-fill (apply max row)])\n\
    \            (+ max-fill (max-fill-helper-inner (rest grid) capacity)))))\n  \
    \  (max-fill-helper-inner grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [(= (first\
    \ (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n          [else (+\
    \ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= capacity 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n          [else\
    \ (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max_fill-helper grid capacity)\n    (define (max-row-fill\
    \ row)\n      (define (max-row-fill-helper row capacity)\n        (if (empty?\
    \ row)\n            capacity\n            (let* ([next-capacity (max-row-fill-helper\
    \ (rest row) capacity)]\n                   [next-capacity (if (zero? (first row))\n\
    \                                      next-capacity\n                       \
    \               (if (<= next-capacity 0)\n                                   \
    \       capacity\n                                          (- next-capacity 1)))])\n\
    \              next-capacity)))\n      (max-row-fill-helper row capacity))\n \
    \   (if (empty? grid)\n        0\n        (+ (max-row-fill (first grid))\n   \
    \        (max-fill-helper (rest grid) capacity))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (fill-row row)\n      (let\
    \ loop ([row row] [i 0] [count 0])\n        (cond [(= i (vector-length row)) count]\n\
    \              [(= (vector-ref row i) 1)\n               (loop (vector-set! row\
    \ i 0) (+ i 1) (+ count 1))]\n              [else (loop row (+ i 1) count)])))\n\
    \    (define (fill-grid grid)\n      (let loop ([grid grid] [i 0] [count 0])\n\
    \        (cond [(= i (vector-length grid)) count]\n              [(>= (fill-row\
    \ (vector-ref grid i)) capacity)\n               (loop grid (+ i 1) (+ count capacity))]\n\
    \              [else (loop grid (+ i 1) (+ count (fill-row (vector-ref grid i))))])))\n\
    \    (fill-grid grid))\n  (max-fill-helper (vector->list grid) capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n          [else (+ capacity\
    \ (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n",
  "  (let loop ([grid grid] [capacity capacity] [count 0])\n    (if (null? grid)\n\
    \        count\n        (let ([filled (fill-row (car grid) capacity)])\n     \
    \     (loop (cdr grid) capacity (+ count filled))))))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity\
    \ 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-row\
    \ row)\n    (apply max row))\n  (define (max-fill-row row)\n    (define (fill-row\
    \ row)\n      (if (null? row)\n          '()\n          (cons (if (zero? (car\
    \ row))\n                    0\n                    capacity)\n              \
    \  (fill-row (cdr row)))))\n    (define (fill-row-with-remainder row remainder)\n\
    \      (if (null? row)\n          '()\n          (cons (if (zero? (car row))\n\
    \                    0\n                    (min capacity remainder))\n      \
    \          (fill-row-with-remainder (cdr row) (- remainder (car row))))))\n  \
    \  (define (fill-row-with-remainder-and-max row remainder max)\n      (if (null?\
    \ row)\n          '()\n          (cons (if (zero? (car row))\n               \
    \     0\n                    (min capacity (- max (car row))))\n             \
    \   (fill-row-with-remainder-and-max (cdr row) (- remainder (car row)) max))))\n\
    \    (define (fill-row-with-max row max)\n      (if (null? row)\n          '()\n\
    \          (cons (if (zero? (car row))\n                    0\n              \
    \      (min capacity (- max (car row))))\n                (fill-row-with-max (cdr\
    \ row) max))))\n    (define (fill-row-with-max-and-remainder row max remainder)\n\
    \      (if (null? row)\n          '()\n          (cons (if (zero? (car row))\n\
    \                    0\n                    (min capacity (- max (car row))))\n\
    \                (fill-row-with-max-and-remainder (cdr row) max (- remainder (car\
    \ row))))))\n    (define (fill-row-with-max-and-remainder-and-max row max remainder\
    \ max)\n      (if (null? row)\n          '()\n          (cons (if (zero? (car\
    \ row))\n                    0\n                    (min capacity (- max (car\
    \ row))))\n                (fill-row-with-max-and-remainder-and-max (cdr row)\
    \ max (- remainder (car", "  (define (max-fill-row row capacity)\n    (let loop\
    \ ([row row] [capacity capacity] [count 0])\n      (if (null? row)\n         \
    \ count\n          (if (and (not (null? row)) (not (null? (cdr row))))\n     \
    \         (if (and (= (car row) 1) (= (car (cdr row)) 1))\n                  (loop\
    \ (cdr row) capacity (+ count 1))\n                  (loop (cdr row) capacity\
    \ count))\n              (if (= (car row) 1)\n                  (loop (cdr row)\
    \ capacity (+ count 1))\n                  (loop (cdr row) capacity count))))))\n\
    \  (let loop ([grid grid] [capacity capacity] [count 0])\n    (if (null? grid)\n\
    \        count\n        (loop (cdr grid) capacity (+ count (max-fill-row (car\
    \ grid) capacity))))))", "  (define (max_fill-helper grid capacity)\n    (cond\
    \ [(empty? grid) 0]\n          [(empty? (first grid)) (max_fill-helper (rest grid)\
    \ capacity)]\n          [(= capacity 0) (max_fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 1) (+ 1 (max_fill-helper (rest grid) capacity))]\n   \
    \       [else (+ (max_fill-helper (rest grid) capacity)\n                   (max_fill-helper\
    \ (rest grid) (- capacity 1)))]))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n\
    \      (cond\n        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n        [(= capacity (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n        [(> capacity (first grid)) (max-fill-helper-helper (rest\
    \ grid) (- capacity (first grid)))]\n        [else (max-fill-helper (rest grid)\
    \ capacity)]))\n    (max-fill-helper-helper grid capacity))\n  (define (max-fill-helper-2\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper-2 (rest grid) capacity)]\n      [(= capacity 0) (max-fill-helper-2\
    \ (rest grid) capacity)]\n      [(= capacity (first grid)) (max-fill-helper-2\
    \ (rest grid) capacity)]\n      [(> capacity (first grid)) (max-fill-helper-2\
    \ (rest grid) (- capacity (first grid)))]\n      [else (max-fill-helper-2 (rest\
    \ grid) capacity)]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [row-len (length row)]\n               [row-sum (apply + row)]\n\
    \               [row-max (apply max row)]\n               [row-min (apply min\
    \ row)]\n               [row-max-count (count row-max row)]\n               [row-min-count\
    \ (count row-min row)]\n               [row-max-sum (if (= row-max 0) 0 (* row-max\
    \ row-max-count))]\n               [row-min-sum (if (= row-min 0) 0 (* row-min\
    \ row-min-count))]\n               [row-fill (if (= row-max-sum row-min-sum)\n\
    \                             0\n                             (if (> row-max-sum\
    \ row-min-sum)\n                                 (- row-max-sum row-min-sum)\n\
    \                                 (- row-min-sum row-max-sum))))]\n          (+\
    \ row-fill (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-rec grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-rec (rest grid) capacity)]\n          [(= capacity 0)\
    \ (max-fill-rec (rest grid) capacity)]\n          [else (max (max-fill-rec (rest\
    \ grid) capacity)\n                     (max-fill-rec (rest grid) (- capacity\
    \ (first (first grid)))))\n           ]))\n  (max-fill-rec grid capacity))\n",
  "  (define (max-fill-row row capacity)\n    (cond [(empty? row) 0]\n          [(=\
    \ capacity 0) 0]\n          [(= (first row) 0) (max-fill-row (rest row) capacity)]\n\
    \          [(= (first row) 1) (add1 (max-fill-row (rest row) (sub1 capacity)))]))\n\
    \  (cond [(empty? grid) 0]\n        [else (add1 (max-fill-row (first grid) capacity)\n\
    \                    (max-fill (rest grid) capacity))]))", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (define (fill-bucket\
    \ row capacity)\n         (cond\n           [(empty? row) capacity]\n        \
    \   [(= (first row) 1) (fill-bucket (rest row) (- capacity 1))]\n           [else\
    \ (fill-bucket (rest row) capacity)]))\n       (define (fill-row row capacity)\n\
    \         (cond\n           [(empty? row) capacity]\n           [(= (first row)\
    \ 1) (fill-row (rest row) (- capacity 1))]\n           [else (fill-row (rest row)\
    \ capacity)]))\n       (define (fill-grid grid capacity)\n         (cond\n   \
    \        [(empty? grid) capacity]\n           [(empty? (first grid)) (fill-grid\
    \ (rest grid) capacity)]\n           [else (fill-grid (rest grid) (fill-row (first\
    \ grid) capacity))]))\n       (+ (fill-bucket (first grid) capacity)\n       \
    \   (max-fill-helper (rest grid) capacity)\n          (fill-grid grid capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let ([row (car grid)])\n          (if\
    \ (null? row)\n              0\n              (let ([water (car row)])\n     \
    \           (if (= water 0)\n                    (max-fill-helper (cdr grid) capacity)\n\
    \                    (+ (if (> water capacity)\n                           capacity\n\
    \                           water)\n                       (max-fill-helper (cdr\
    \ grid) capacity))))))))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (define (fill-row\
    \ row capacity)\n         (cond\n           [(empty? row) capacity]\n        \
    \   [(= capacity 0) capacity]\n           [(= (first row) 1) (fill-row (rest row)\
    \ (- capacity 1))]\n           [else (fill-row (rest row) capacity)]))\n     \
    \  (+ (fill-row (first grid) capacity)\n          (max-fill-helper (rest grid)\
    \ capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(>= capacity (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (let ([max-fill (apply max (map (lambda (row) (apply + row)) grid))])\n    (if\
    \ (> max-fill capacity)\n        capacity\n        max-fill)))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (let loop ([grid grid] [capacity capacity]\
    \ [count 0])\n      (cond [(empty? grid) count]\n            [(empty? (first grid))\
    \ (loop (rest grid) capacity count)]\n            [(= capacity 0) (loop (rest\
    \ grid) capacity (add1 count))]\n            [else\n             (let* ([first-row\
    \ (first grid)]\n                    [first-row-count (count-ones first-row)]\n\
    \                    [new-capacity (sub1 capacity)]\n                    [new-count\
    \ (add1 count)])\n               (loop (rest grid) new-capacity new-count))])))\n\
    \  (max-fill-helper grid capacity))\n", "  (let loop ([grid grid] [capacity capacity]\
    \ [count 0])\n    (cond [(empty? grid) count]\n          [(empty? (first grid))\
    \ (loop (rest grid) capacity count)]\n          [(= capacity 0) (loop (rest grid)\
    \ capacity (+ count 1))]\n          [else (loop (rest grid) (- capacity 1) (+\
    \ count 1))])))\n", "  (define (max_fill-helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [max-water\
    \ (apply max row)]\n               [water-to-fill (- capacity max-water)])\n \
    \         (+ water-to-fill (max_fill-helper (cdr grid) capacity)))))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let ([row (car grid)])\n          (if (null? row)\n\
    \              0\n              (let ([max-fill (apply max row)])\n          \
    \      (+ max-fill (max-fill-helper (cdr grid) capacity)))))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-len (length\
    \ row)]\n               [row-sum (apply + row)]\n               [row-max (apply\
    \ max row)]\n               [row-max-index (vector-index row-max row)]\n     \
    \          [row-max-count (count row-max row)]\n               [row-max-count-left\
    \ (count row-max (vector-take row row-max-index))]\n               [row-max-count-right\
    \ (count row-max (vector-drop row (+ row-max-index 1)))])\n          (if (zero?\
    \ row-sum)\n              (max-fill-helper (cdr grid) capacity)\n            \
    \  (let* ([row-max-count-left-fill (min capacity row-max-count-left)]\n      \
    \               [row-max-count-right-fill (min capacity row-max-count-right)]\n\
    \                     [row-max-count-fill (min capacity row-max-count)]\n    \
    \                 [row-max-count-fill-left (min capacity (- row-max-count-fill\
    \ row-max-count-left-fill))]\n                     [row-max-count-fill-right (min\
    \ capacity (- row-max-count-fill row-max-count-right-fill))]\n               \
    \      [row-max-count-fill-left-right (min capacity (- row-max-count-fill row-max-count-left-fill\
    \ row-max-count-right-fill))])\n                (+ row-max-count-fill-left\n \
    \                  row-max-count-fill-right\n                   row-max-count-fill-left-right\n\
    \                   (max-fill-helper (cdr grid) capacity)))))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond ((null?\
    \ grid) 0)\n          ((= (apply max (car grid)) 0) (max-fill-helper (cdr grid)\
    \ capacity))\n          (else (max-fill-helper (cdr grid) capacity))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-row row)\n    (define (max-fill-row-helper\
    \ row acc)\n      (cond [(null? row) acc]\n            [(= (car row) 1) (max-fill-row-helper\
    \ (cdr row) (+ acc capacity))]\n            [else (max-fill-row-helper (cdr row)\
    \ acc)]))\n    (max-fill-row-helper row 0))\n  (define (max-fill-grid grid acc)\n\
    \    (cond [(null? grid) acc]\n          [else (max-fill-grid (cdr grid) (+ acc\
    \ (max-fill-row (car grid))))]))\n  (max-fill-grid grid 0))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(>= capacity (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [else (max-fill-helper (rest\
    \ grid) (- capacity (first grid)))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (fill grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (fill (rest grid) capacity)]\n      [(>= capacity (count-ones\
    \ (first grid))) (add1 (fill (rest grid) capacity))]\n      [else (add1 (fill\
    \ (rest grid) (sub1 capacity)))]))\n  (fill grid capacity))\n", "  (define (fill-row\
    \ row)\n    (define (fill-well well)\n      (if (zero? well)\n          0\n  \
    \        capacity))\n    (apply + (map fill-well row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n\
    \        0\n        (let* ([row (car grid)]\n               [row-len (length row)]\n\
    \               [row-sum (apply + row)]\n               [row-max (apply max row)]\n\
    \               [row-min (apply min row)]\n               [row-max-count (count\
    \ row-max row)]\n               [row-min-count (count row-min row)]\n        \
    \       [row-max-count-per-bucket (quotient row-max-count capacity)]\n       \
    \        [row-min-count-per-bucket (quotient row-min-count capacity)]\n      \
    \         [row-max-count-per-bucket-remainder (remainder row-max-count capacity)]\n\
    \               [row-min-count-per-bucket-remainder (remainder row-min-count capacity)])\n\
    \          (if (and (= row-max-count-per-bucket 0) (= row-min-count-per-bucket\
    \ 0))\n              (max-fill-helper (cdr grid) capacity)\n              (let*\
    \ ([row-max-count-per-bucket-remainder (if (= row-max-count-per-bucket-remainder\
    \ 0) capacity row-max-count-per-bucket-remainder)]\n                     [row-min-count-per-bucket-remainder\
    \ (if (= row-min-count-per-bucket-remainder 0) capacity row-min-count-per-bucket-remainder)]\n\
    \                     [row-max-count-per-bucket-remainder-count (count row-max-count-per-bucket-remainder\
    \ row)]\n                     [row-min-count-per-bucket-remainder-count (count\
    \ row-min-count-per-bucket-remainder row)]\n                     [row-max-count-per-bucket-remainder-count-per-bucket\
    \ (quotient row-max-count-per-bucket-remainder-count capacity)]\n            \
    \         [row-min-count-per-bucket-remainder-count-per-", "  (define (max-fill-row\
    \ row capacity)\n    (define (max-fill-row-helper row capacity)\n      (if (null?\
    \ row)\n          0\n          (if (and (not (null? (cdr row)))\n            \
    \       (= (car row) 1)\n                   (= (cadr row) 1))\n              (max-fill-row-helper\
    \ (cdr row) capacity)\n              (+ 1 (max-fill-row-helper (cdr row) capacity)))))\n\
    \    (max-fill-row-helper row capacity))\n  (define (max-fill-grid grid capacity)\n\
    \    (if (null? grid)\n        0\n        (+ (max-fill-row (car grid) capacity)\n\
    \           (max-fill-grid (cdr grid) capacity))))\n  (max-fill-grid grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(>= capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n     \
    \     [else (max (max-fill-helper (rest grid) capacity)\n                    \
    \ (max-fill-helper (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-row row)\n    (define (max-fill-row-helper\
    \ row acc)\n      (cond\n        [(null? row) acc]\n        [(= (car row) 1) (max-fill-row-helper\
    \ (cdr row) (+ acc capacity))]\n        [else (max-fill-row-helper (cdr row) acc)]))\n\
    \    (max-fill-row-helper row 0))\n  (define (max-fill-grid grid)\n    (cond\n\
    \      [(null? grid) 0]\n      [else (+ (max-fill-row (car grid)) (max-fill-grid\
    \ (cdr grid)))]))\n  (max-fill-grid grid))\n", "  (define (max-fill-helper grid\
    \ capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n\
    \          [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (let ([max-fill (make-vector (length grid) 0)])\n   \
    \ (for ([i (in-range (length grid))])\n      (let ([row (vector-ref grid i)])\n\
    \        (for ([j (in-range (length row))])\n          (if (zero? (vector-ref\
    \ row j))\n              (vector-set! max-fill i (max (vector-ref max-fill i)\
    \ j))\n              (vector-set! max-fill i (max (vector-ref max-fill i) (sub1\
    \ (length row))))))))\n    (let loop ([i 0] [count 0])\n      (if (= i (length\
    \ grid))\n          count\n          (let ([row (vector-ref grid i)])\n      \
    \      (let loop ([j (vector-ref max-fill i)])\n              (if (= j (length\
    \ row))\n                  (loop (add1 i) count)\n                  (if (zero?\
    \ (vector-ref row j))\n                      (loop (add1 j) count)\n         \
    \             (loop (add1 j) (add1 count))))))))))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n\
    \                     (+ (max-fill-helper (rest grid) (- capacity 1)) 1))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [row-len (length row)]\n               [row-sum (apply + row)]\n       \
    \        [row-max (apply max row)]\n               [row-max-count (count row-max\
    \ row)]\n               [row-max-count-per-bucket (quotient row-max-count capacity)]\n\
    \               [row-max-count-per-bucket-remainder (remainder row-max-count capacity)])\n\
    \          (+ row-max-count-per-bucket-remainder row-max-count-per-bucket (max_fill-helper\
    \ (cdr grid) capacity)))))\n  (max_fill-helper grid capacity))\n", "  (let ([max-fill\
    \ (apply max (map (lambda (row) (apply max row)) grid))])\n    (if (= max-fill\
    \ 0)\n        0\n        (let ([num-buckets (ceiling (/ max-fill capacity))])\n\
    \          (+ num-buckets (max_fill (map (lambda (row) (map (lambda (x) (- x capacity))\
    \ row)) grid) capacity))))))\n", "  (define (max-fill-rec grid capacity)\n   \
    \ (if (null? grid)\n        0\n        (let* ([row (car grid)]\n             \
    \  [row-len (length row)]\n               [row-sum (apply + row)]\n          \
    \     [row-max (apply max row)]\n               [row-min (apply min row)]\n  \
    \             [row-max-count (count row-max row)]\n               [row-min-count\
    \ (count row-min row)]\n               [row-max-count-min (min row-max-count capacity)]\n\
    \               [row-min-count-min (min row-min-count capacity)]\n           \
    \    [row-max-count-min-max (max row-max-count-min row-min-count-min)]\n     \
    \          [row-max-count-min-max-min (min row-max-count-min-max capacity)]\n\
    \               [row-max-count-min-max-min-max (max row-max-count-min-max-min\
    \ capacity)]\n               [row-max-count-min-max-min-max-min (min row-max-count-min-max-min-max\
    \ capacity)])\n          (+ row-max-count-min-max-min-max-min (max-fill-rec (cdr\
    \ grid) capacity)))))\n  (max-fill-rec grid capacity))\n", "  (let loop ((grid\
    \ grid) (capacity capacity) (count 0))\n    (if (null? grid)\n        count\n\
    \        (let* ((row (car grid))\n               (filled (fill-row row capacity))\n\
    \               (new-capacity (sub1 capacity)))\n          (loop (cdr grid) new-capacity\
    \ (+ count filled))))))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-inner grid capacity)\n      (define (max-fill-helper-inner-inner\
    \ grid capacity)\n        (cond\n          [(empty? grid) 0]\n          [(<= capacity\
    \ (first grid)) (+ capacity (max-fill-helper-inner-inner (rest grid) capacity))]\n\
    \          [else (+ (first grid) (max-fill-helper-inner-inner (rest grid) capacity))]))\n\
    \      (max-fill-helper-inner-inner grid capacity))\n    (max-fill-helper-inner\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [max-fill (apply max row)])\n          (+ (max-fill-helper (cdr\
    \ grid) capacity)\n             (if (> max-fill capacity)\n                 (-\
    \ max-fill capacity)\n                 0)))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(>= capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n     \
    \     [else (+ capacity (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (let loop ([row row] [count\
    \ 0])\n      (cond [(null? row) count]\n            [(= (car row) 1) (loop (cdr\
    \ row) (+ count capacity))]\n            [else (loop (cdr row) count)])))\n  (define\
    \ (fill-grid grid)\n    (let loop ([grid grid] [count 0])\n      (cond [(null?\
    \ grid) count]\n            [else (loop (cdr grid) (+ count (fill-row (car grid))))])))\n\
    \  (fill-grid grid))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (let* ([row (first\
    \ grid)]\n              [max-fill (max capacity (max-fill-helper (rest grid) capacity))]\n\
    \              [fill (min capacity (apply max row))])\n         (+ fill (max-fill-helper\
    \ (rest grid) (- capacity fill))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-row row capacity)\n\
    \      (define (max-fill-row-helper row capacity)\n        (cond\n          [(empty?\
    \ row) capacity]\n          [(= capacity 0) capacity]\n          [(= (first row)\
    \ 0) (max-fill-row-helper (rest row) capacity)]\n          [(= (first row) 1)\
    \ (max-fill-row-helper (rest row) (- capacity 1))]))\n      (max-fill-row-helper\
    \ row capacity))\n    (cond\n      [(empty? grid) capacity]\n      [else (max-fill-helper\
    \ (rest grid) (max-fill-row (first grid) capacity))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (fill-row row)\n    (define (fill-cell cell)\n   \
    \   (cond\n        [(= cell 0) 0]\n        [(= cell 1) capacity]\n        [else\
    \ (error \"invalid cell value\")]))\n    (map fill-cell row))\n  (map fill-row\
    \ grid))\n", "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n\
    \        0\n        (let* ([row (car grid)]\n               [max-fill (apply max\
    \ row)])\n          (+ max-fill (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond ((empty? grid) 0)\n    \
    \        ((empty? (first grid)) (max-fill-helper (rest grid) capacity))\n    \
    \        ((= capacity 0) (max-fill-helper (rest grid) capacity))\n           \
    \ ((= (first (first grid)) 0) (max-fill-helper (rest grid) capacity))\n      \
    \      (else (+ 1 (max-fill-helper-helper (rest grid) (- capacity 1))))))\n  \
    \  (max-fill-helper-helper grid capacity)))\n  (apply + (map (lambda (row) (max-fill-helper\
    \ row capacity)) grid)))\n", "  (define (max-fill-row row)\n    (define (max-fill-row-helper\
    \ row acc)\n      (cond\n        [(empty? row) acc]\n        [(>= (first row)\
    \ capacity) (max-fill-row-helper (rest row) (+ acc capacity))]\n        [(< (first\
    \ row) capacity) (max-fill-row-helper (rest row) (+ acc (first row)))]))\n   \
    \ (max-fill-row-helper row 0))\n  (define (max-fill-helper grid acc)\n    (cond\n\
    \      [(empty? grid) acc]\n      [else (max-fill-helper (rest grid) (+ acc (max-fill-row\
    \ (first grid))))]))\n  (max-fill-helper grid 0))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(>= capacity (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [else (+ capacity (max-fill-helper\
    \ (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(zero? capacity)\
    \ (max-fill-helper (rest grid) capacity)]\n          [(zero? (first (first grid)))\
    \ (max-fill-helper (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(=\
    \ (sum (first grid)) capacity) (max-fill-helper (rest grid) capacity)]\n     \
    \     [(> (sum (first grid)) capacity) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (+ (max-fill-helper (rest grid) capacity) 1)]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= capacity 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n          [else\
    \ (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= capacity 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n          [else\
    \ (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define (fill-row\
    \ row capacity)\n      (cond [(empty? row) capacity]\n            [(= capacity\
    \ 0) capacity]\n            [(= (first row) 1) (fill-row (rest row) (- capacity\
    \ 1))]\n            [else (fill-row (rest row) capacity)]))\n    (cond [(empty?\
    \ grid) 0]\n          [else (+ 1 (max-fill-helper (rest grid) (fill-row (first\
    \ grid) capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(>= capacity (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [else (max (max-fill-helper\
    \ (rest grid) capacity)\n                     (max-fill-helper (rest grid) (-\
    \ capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n       (define\
    \ (fill-bucket row capacity)\n         (cond\n           [(empty? row) capacity]\n\
    \           [(zero? capacity) 0]\n           [(zero? (first row)) (fill-bucket\
    \ (rest row) capacity)]\n           [else (fill-bucket (rest row) (- capacity\
    \ 1))]))\n       (+ (fill-bucket (first grid) capacity)\n          (max-fill-helper\
    \ (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [else (+ 1\
    \ (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(zero? capacity) (max-fill-helper (rest grid) capacity)]\n          [(zero?\
    \ (first (first grid))) (max-fill-helper (rest grid) capacity)]\n          [else\
    \ (max (max-fill-helper (rest grid) capacity)\n                     (+ 1 (max-fill-helper\
    \ (rest grid) (- capacity 1))))]))\n  (max-fill-helper grid capacity))\n", " \
    \ (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n\
    \       (let* ([row (first grid)]\n              [filled (count (lambda (x) (=\
    \ x 1)) row)]\n              [buckets (ceiling (/ filled capacity))])\n      \
    \   (+ buckets (max-fill-helper (rest grid) capacity)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (define (fill-well well)\n\
    \      (cond\n        [(= well 0) 0]\n        [(= well capacity) capacity]\n \
    \       [else (+ well (fill-well (- well 1)))]))\n    (foldl + 0 (map fill-well\
    \ row)))\n  (foldl + 0 (map fill-row grid)))\n", "  (cond [(empty? grid) 0]\n\
    \        [else (max (max_fill (rest grid) capacity)\n                   (min capacity\
    \ (apply max (first grid))))]))", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n\
    \          [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-len (length\
    \ row)]\n               [row-sum (apply + row)]\n               [row-max (apply\
    \ max row)]\n               [row-min (apply min row)]\n               [row-max-count\
    \ (count row-max row)]\n               [row-min-count (count row-min row)]\n \
    \              [row-max-count-per-bucket (quotient row-max-count capacity)]\n\
    \               [row-min-count-per-bucket (quotient row-min-count capacity)]\n\
    \               [row-max-count-per-bucket-remainder (remainder row-max-count capacity)]\n\
    \               [row-min-count-per-bucket-remainder (remainder row-min-count capacity)])\n\
    \          (if (zero? row-max)\n              (max-fill-helper (cdr grid) capacity)\n\
    \              (if (zero? row-min)\n                  (+ row-max-count-per-bucket\
    \ (max-fill-helper (cdr grid) capacity))\n                  (if (> row-max-count-per-bucket\
    \ row-min-count-per-bucket)\n                      (+ row-max-count-per-bucket\
    \ (max-fill-helper (cdr grid) capacity))\n                      (+ row-min-count-per-bucket\
    \ (max-fill-helper (cdr grid) capacity))))))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let ([row (car grid)])\n          (if (null? row)\n              0\n \
    \             (let ([fill (max-fill-helper (cdr grid) capacity)])\n          \
    \      (if (zero? fill)\n                    (if (zero? (car row))\n         \
    \               0\n                        1)\n                    (+ fill (if\
    \ (zero? (car row))\n                                0\n                     \
    \           1))))))))\n  (let ([max-fill (max-fill-helper grid capacity)])\n \
    \   (if (zero? max-fill)\n        0\n        (* max-fill capacity))))\n", "  (let\
    \ loop ([grid grid] [capacity capacity] [count 0])\n    (if (null? grid)\n   \
    \     count\n        (let* ([row (car grid)]\n               [filled (min capacity\
    \ (apply max row))])\n          (loop (cdr grid) capacity (+ count filled))))))\n",
  "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [max-fill-row (apply max row)])\n\
    \          (+ max-fill-row (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-row row capacity)\n    (let loop ([row\
    \ row] [capacity capacity] [max-fill 0])\n      (cond [(empty? row) max-fill]\n\
    \            [(> capacity 0)\n             (loop (rest row) (- capacity (first\
    \ row)) (+ max-fill (first row)))]\n            [else max-fill])))\n  (define\
    \ (max-fill-grid grid capacity)\n    (let loop ([grid grid] [capacity capacity]\
    \ [max-fill 0])\n      (cond [(empty? grid) max-fill]\n            [else (loop\
    \ (rest grid) capacity (+ max-fill (max-fill-row (first grid) capacity)))])))\n\
    \  (max-fill-grid grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [max-fill (apply max row)])\n          (+ max-fill (max_fill-helper (cdr\
    \ grid) capacity)))))\n  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else (max (max-fill-helper (rest\
    \ grid) capacity)\n                 (max-fill-helper (rest grid) (- capacity (first\
    \ (first grid)))))])\n    )\n  (max-fill-helper grid capacity)\n  )\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 0) (max-fill-helper (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper\
    \ (rest grid) capacity))]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (cond\n\
    \        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n        [(>= capacity (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n        [else (+ capacity (max-fill-helper (rest grid) capacity))]))\n\
    \    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n      \
    \    [else (max-fill-helper (rest grid) (- capacity (first grid)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else\n       (define (fill-row row capacity)\n    \
    \     (cond\n           [(empty? row) capacity]\n           [(= capacity 0) capacity]\n\
    \           [(= (first row) 1) (fill-row (rest row) (- capacity 1))]\n       \
    \    [else (fill-row (rest row) capacity)]))\n       (+ (fill-row (first grid)\
    \ capacity)\n          (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (fill-row row)\n      (define (fill-row-helper row capacity)\n        (cond\
    \ [(empty? row) capacity]\n              [(= capacity 0) capacity]\n         \
    \     [(= (first row) 0) (fill-row-helper (rest row) capacity)]\n            \
    \  [(> capacity (first row)) (fill-row-helper (rest row) (- capacity (first row)))]\n\
    \              [else (fill-row-helper (rest row) 0)]))\n      (fill-row-helper\
    \ row capacity))\n    (cond [(empty? grid) 0]\n          [(= capacity 0) 0]\n\
    \          [else (+ 1 (max-fill-helper (rest grid) (fill-row (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity\
    \ row)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n   \
    \            [max-fill (apply max row)])\n          (+ (if (< max-fill capacity)\n\
    \                 max-fill\n                 capacity)\n             (max-fill-helper\
    \ (cdr grid) capacity (- row capacity))))))\n  (max-fill-helper grid capacity\
    \ 0))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= capacity (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(> capacity (first grid)) (max-fill-helper-helper\
    \ (rest grid) (- capacity (first grid)))]\n        [else (max-fill-helper-helper\
    \ (rest grid) capacity)]))\n    (max-fill-helper-helper grid capacity))\n  (define\
    \ (max-fill-helper-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [(=\
    \ capacity 0) (max-fill-helper (rest grid) capacity)]\n      [(= capacity (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n      [(> capacity (first grid))\
    \ (max-fill-helper-helper (rest grid) (- capacity (first grid)))]\n      [else\
    \ (max-fill-helper-helper (rest grid) capacity)]))\n  (max-fill-helper-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else (max (count-ones (first grid))\n             \
    \    (max-fill-helper (rest grid) capacity))]))\n  (define (count-ones row)\n\
    \    (cond\n      [(empty? row) 0]\n      [(= (first row) 1) (+ 1 (count-ones\
    \ (rest row)))]\n      [else (count-ones (rest row))]))\n  (define (max-fill-helper-2\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper-2 (rest grid) capacity)]\n      [else (+ (count-ones (first\
    \ grid))\n               (max-fill-helper-2 (rest grid) capacity))]))\n  (define\
    \ (max-fill-helper-3 grid capacity)\n    (cond\n      [(empty? grid) 0]\n    \
    \  [(empty? (first grid)) (max-fill-helper-3 (rest grid) capacity)]\n      [else\
    \ (max (count-ones (first grid))\n                 (max-fill-helper-3 (rest grid)\
    \ capacity))]))\n  (define (max-fill-helper-4 grid capacity)\n    (cond\n    \
    \  [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper-4 (rest grid)\
    \ capacity)]\n      [else (+ (count-ones (first grid))\n               (max-fill-helper-4\
    \ (rest grid) capacity))]))\n  (define (max-fill-helper-5 grid capacity)\n   \
    \ (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper-5\
    \ (rest grid) capacity)]\n      [else (max (count-ones (first grid))\n       \
    \          (max-fill-helper-5 (rest grid) capacity))]))\n  (define (max-fill-helper-6\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity\
    \ 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (cond\n\
    \        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n        [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= capacity 1) (+ (first (first grid)) (max-fill-helper (rest grid)\
    \ capacity))]\n        [else (+ (first (first grid)) (max-fill-helper-helper (rest\
    \ grid) (- capacity 1)))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty? grid)\
    \ 0]\n        [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n      \
    \  [(= capacity (count-ones (first grid))) (add1 (max-fill-helper (rest grid)\
    \ capacity))]\n        [(> capacity (count-ones (first grid))) (max-fill-helper\
    \ (rest grid) (sub1 capacity))]\n        [else (max-fill-helper (rest grid) (sub1\
    \ capacity))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row row)\n\
    \    (define (fill-well well)\n      (if (zero? well)\n          0\n         \
    \ capacity))\n    (apply + (map fill-well row)))\n  (apply + (map fill-row grid)))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max_fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 1) (+ 1 (max_fill-helper (rest grid) capacity))]\n          [else (+ 1 (max_fill-helper\
    \ (rest grid) (- capacity 1)))]))\n  (max_fill-helper grid capacity))\n", "  (let\
    \ loop ([grid grid] [capacity capacity] [count 0])\n    (if (null? grid)\n   \
    \     count\n        (let ([row (car grid)])\n          (if (null? row)\n    \
    \          (loop (cdr grid) capacity count)\n              (if (zero? (car row))\n\
    \                  (loop (cdr grid) capacity count)\n                  (if (>\
    \ capacity 0)\n                      (loop (cdr grid) (- capacity 1) (+ count\
    \ 1))\n                      (loop (cdr grid) capacity (+ count 1)))))))))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (let ([max-fill (apply max (map (lambda (row) (apply + row)) grid))])\n    (if\
    \ (<= max-fill capacity)\n        0\n        (let ([buckets (apply max (map (lambda\
    \ (row) (apply + row)) grid))])\n          (apply + (map (lambda (row) (ceiling\
    \ (/ (apply + row) capacity))) grid))))))\n", "  (define (max-fill-helper grid\
    \ capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (let loop ([grid grid] [capacity capacity]\
    \ [count 0])\n    (cond [(empty? grid) count]\n          [(empty? (first grid))\
    \ (loop (rest grid) capacity count)]\n          [(= capacity 0) (loop (rest grid)\
    \ capacity (+ count 1))]\n          [else (loop (rest grid) (- capacity 1) (+\
    \ count 1))])))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (if (null? grid)\n          0\n          (let* ([row (car\
    \ grid)]\n                 [row-len (length row)]\n                 [row-sum (apply\
    \ + row)]\n                 [row-max (apply max row)]\n                 [row-min\
    \ (apply min row)]\n                 [row-max-count (count row-max row)]\n   \
    \              [row-min-count (count row-min row)]\n                 [row-max-count-min\
    \ (min row-max-count capacity)]\n                 [row-min-count-min (min row-min-count\
    \ capacity)]\n                 [row-max-count-min-max (max row-max-count-min row-min-count-min)]\n\
    \                 [row-max-count-min-max-min (min row-max-count-min-max capacity)]\n\
    \                 [row-max-count-min-max-min-max (max row-max-count-min-max-min\
    \ capacity)]\n                 [row-max-count-min-max-min-max-min (min row-max-count-min-max-min-max\
    \ capacity)]\n                 [row-max-count-min-max-min-max-min-max (max row-max-count-min-max-min-max-min\
    \ capacity)]\n                 [row-max-count-min-max-min-max-min-max-min (min\
    \ row-max-count-min-max-min-max-min-max capacity)]\n                 [row-max-count-min-max-min-max-min-max-min-max\
    \ (max row-max-count-min-max-min-max-min-max-min capacity)]\n                \
    \ [row-max-count-min-max-min-max-min-max-min-max-min (min row-max-count-min-max-min-max-min-max-min-max\
    \ capacity)]\n                 [row-max-count-min-max-min-max-min-max-min-max-min-max\
    \ (max row-max-count-min-max-min-max-min", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-2 grid capacity)\n      (define (max-fill-helper-3\
    \ grid capacity)\n        (define (max-fill-helper-4 grid capacity)\n        \
    \  (define (max-fill-helper-5 grid capacity)\n            (define (max-fill-helper-6\
    \ grid capacity)\n              (define (max-fill-helper-7 grid capacity)\n  \
    \              (define (max-fill-helper-8 grid capacity)\n                  (define\
    \ (max-fill-helper-9 grid capacity)\n                    (define (max-fill-helper-10\
    \ grid capacity)\n                      (define (max-fill-helper-11 grid capacity)\n\
    \                        (define (max-fill-helper-12 grid capacity)\n        \
    \                  (define (max-fill-helper-13 grid capacity)\n              \
    \              (define (max-fill-helper-14 grid capacity)\n                  \
    \            (define (max-fill-helper-15 grid capacity)\n                    \
    \            (define (max-fill-helper-16 grid capacity)\n                    \
    \              (define (max-fill-helper-17 grid capacity)\n                  \
    \                  (define (max-fill-helper-18 grid capacity)\n              \
    \                        (define (max-fill-helper-19 grid capacity)\n        \
    \                                (define (max-fill-helper-20 grid capacity)\n\
    \                                          (define (max-fill-helper-21 grid capacity)\n\
    \                                            (define (max-fill-helper-22 grid\
    \ capacity)\n                                              (define (max-fill-helper-23\
    \ grid capacity)\n                                                (define (max-fill-helper-24\
    \ grid capacity)\n                                                  (define (max-fill-helper-25\
    \ grid capacity)\n                                                    (define\
    \ (max-fill-helper-26 grid capacity)\n                                       \
    \               (define (max-fill-helper-27 grid capacity)\n                 \
    \                                       (define (max-fill-helper-28 grid capacity)\n\
    \                                                          (define (max-fill-helper-29\
    \ grid capacity)\n                                                           \
    \ (define (max-fill-helper-30 grid capacity)\n                               \
    \                 ", "  (define (max-fill-row row capacity)\n    (define (max-fill-row-helper\
    \ row capacity)\n      (if (null? row)\n          capacity\n          (if (zero?\
    \ (car row))\n              (max-fill-row-helper (cdr row) capacity)\n       \
    \       (max-fill-row-helper (cdr row) (- capacity 1)))))\n    (max-fill-row-helper\
    \ row capacity))\n  (define (max-fill-grid grid capacity)\n    (if (null? grid)\n\
    \        capacity\n        (max-fill-grid (cdr grid) (max-fill-row (car grid)\
    \ capacity))))\n  (max-fill-grid grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-rec\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-rec (rest grid) capacity)]\n      [(> capacity (first grid)) (max-fill-rec\
    \ (rest grid) capacity)]\n      [else (+ 1 (max-fill-rec (rest grid) capacity))]))\n\
    \  (max-fill-rec grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n\
    \          [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (let ([max-fill (make-vector (length grid) 0)])\n   \
    \ (for ([i (in-range (length grid))])\n      (for ([j (in-range (length (vector-ref\
    \ grid i)))])\n        (if (not (= (vector-ref (vector-ref grid i) j) 0))\n  \
    \          (vector-set! max-fill i (+ (vector-ref max-fill i) 1)))))\n    (for\
    \ ([i (in-range (length max-fill))])\n      (if (> (vector-ref max-fill i) capacity)\n\
    \          (vector-set! max-fill i capacity)))\n    max-fill))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(>= capacity\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [else (+ 1\
    \ (max-fill-helper (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (let loop ([grid grid] [capacity capacity] [count 0])\n\
    \    (if (null? grid)\n        count\n        (let ([row (car grid)])\n      \
    \    (if (null? row)\n              (loop (cdr grid) capacity count)\n       \
    \       (let ([water (car row)])\n                (if (= water 0)\n          \
    \          (loop (cdr grid) capacity count)\n                    (loop (cdr grid)\
    \ (- capacity water) (+ count 1)))))))))\n", "  (define (max-fill-helper grid\
    \ capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= capacity (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (max-fill-helper (rest grid) capacity)]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (define (fill-col col)\n\
    \      (if (equal? col (length row))\n          0\n          (if (equal? (list-ref\
    \ row col) 1)\n              (add1 (fill-col (add1 col)))\n              (fill-col\
    \ (add1 col)))))\n    (fill-col 0))\n  (define (fill-grid grid)\n    (if (equal?\
    \ grid '())\n        0\n        (add1 (fill-grid (cdr grid)))))\n  (define (fill-wells\
    \ grid capacity)\n    (if (equal? capacity 0)\n        (fill-grid grid)\n    \
    \    (if (equal? grid '())\n            0\n            (add1 (fill-wells (cdr\
    \ grid) (sub1 capacity))))))\n  (fill-wells grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let ([row (car grid)])\n\
    \          (if (null? row)\n              0\n              (let ([col (car row)])\n\
    \                (if (= col 1)\n                    (+ capacity (max-fill-helper\
    \ (cdr grid) capacity))\n                    (max-fill-helper (cdr grid) capacity)))))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= capacity (count (first grid))) (max-fill-helper (rest\
    \ grid) capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n\
    \                     (max-fill-helper (rest grid) (- capacity (count (first grid)))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(>= capacity (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n\
    \      (define (max-fill-helper-helper-helper grid capacity)\n        (define\
    \ (max-fill-helper-helper-helper-helper grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [row-len (length row)]\n      \
    \         [row-max (apply max row)]\n               [row-max-count (count row-max\
    \ row)]\n               [row-max-count-buckets (ceiling (/ row-max-count capacity))])\n\
    \          (+ row-max-count-buckets (max-fill-helper (cdr grid) capacity)))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n\
    \          [else (+ capacity (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond ((empty?\
    \ grid) 0)\n          ((= capacity (apply max (first grid)))\n           (+ capacity\
    \ (max-fill-helper (rest grid) capacity)))\n          (else (max-fill-helper (rest\
    \ grid) capacity))))\n  (max-fill-helper grid capacity))\n", "  (let loop ([grid\
    \ grid] [capacity capacity] [max-fill 0])\n    (cond [(empty? grid) max-fill]\n\
    \          [else\n           (let ([row (first grid)])\n             (loop (rest\
    \ grid)\n                   capacity\n                   (max max-fill\n     \
    \                   (let loop ([row row] [capacity capacity] [fill 0])\n     \
    \                     (cond [(empty? row) fill]\n                            \
    \    [(= (first row) 1)\n                                 (loop (rest row)\n \
    \                                      (if (= capacity 1) capacity (sub1 capacity))\n\
    \                                       (add1 fill))]\n                      \
    \          [else (loop (rest row) capacity fill)])))))])))\n", "  (let loop ([grid\
    \ grid] [capacity capacity] [count 0])\n    (cond\n      [(empty? grid) count]\n\
    \      [(empty? (first grid)) (loop (rest grid) capacity count)]\n      [(= capacity\
    \ 0) (loop (rest grid) capacity (+ count 1))]\n      [else (loop (rest grid) (-\
    \ capacity 1) (+ count 1))])))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty?\
    \ grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(empty? (rest grid)) (max-fill-helper-helper (rest (first grid)) capacity)]\n\
    \        [else (max (max-fill-helper-helper (rest (first grid)) capacity)\n  \
    \                 (max-fill-helper-helper (rest grid) capacity))]))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(zero? capacity) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(zero? (first (first grid))) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (cond\n\
    \        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n        [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= capacity 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n     \
    \   [else (+ 1 (max-fill-helper-helper (rest grid) (- capacity 1)))]))\n    (max-fill-helper-helper\
    \ grid capacity)))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity\
    \ 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity\
    \ 1)))]))\n  (max-fill-helper grid capacity))\n", "  (let* ([wells (length grid)]\n\
    \         [buckets (length (car grid))]\n         [total-water (apply + grid)]\n\
    \         [bucket-count (ceiling (/ total-water capacity))])\n    (if (= bucket-count\
    \ 0)\n        0\n        (let loop ([i 0] [j 0] [water 0] [count 0])\n       \
    \   (cond\n            [(= i wells) count]\n            [(= j buckets) (loop (+\
    \ i 1) 0 water count)]\n            [(= water capacity) (loop i (+ j 1) 0 (+ count\
    \ 1))]\n            [(>= (+ water (vector-ref (vector-ref grid i) j)) capacity)\n\
    \             (loop i (+ j 1) (- capacity (vector-ref (vector-ref grid i) j))\
    \ (+ count 1))]\n            [else (loop i (+ j 1) (+ water (vector-ref (vector-ref\
    \ grid i) j)) count)])))))\n", "  (define (max-fill-row row capacity)\n    (define\
    \ (max-fill-row-helper row capacity)\n      (cond\n        [(empty? row) capacity]\n\
    \        [(= capacity 0) capacity]\n        [(= (first row) 0) (max-fill-row-helper\
    \ (rest row) capacity)]\n        [(> capacity (first row)) (max-fill-row-helper\
    \ (rest row) (- capacity (first row)))]\n        [else (max-fill-row-helper (rest\
    \ row) 0)]))\n    (max-fill-row-helper row capacity))\n  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) capacity]\n      [(= capacity\
    \ 0) capacity]\n      [else (max-fill-helper (rest grid) (max-fill-row (first\
    \ grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (cond\n\
    \        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n        [(zero? capacity) (max-fill-helper (rest grid) capacity)]\n\
    \        [(zero? (first (first grid))) (max-fill-helper-helper (rest grid) capacity)]\n\
    \        [else (+ 1 (max-fill-helper-helper (rest grid) (- capacity 1)))]))\n\
    \    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-row row capacity)\n    (define (max-fill-row-helper row capacity)\n\
    \      (if (null? row)\n          0\n          (if (and (not (null? (cdr row)))\n\
    \                   (= (car row) 1)\n                   (= (cadr row) 1))\n  \
    \            (max-fill-row-helper (cdr row) capacity)\n              (+ (max-fill-row-helper\
    \ (cdr row) capacity)\n                 (if (= (car row) 1) 1 0)))))\n    (if\
    \ (= capacity 0)\n        0\n        (max-fill-row-helper row capacity)))\n  (if\
    \ (null? grid)\n      0\n      (+ (max-fill-row (car grid) capacity)\n       \
    \  (max_fill (cdr grid) capacity))))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [row-len (length row)]\n               [row-sum (apply + row)]\n       \
    \        [row-max (apply max row)]\n               [row-min (apply min row)]\n\
    \               [row-max-count (count row-max row)]\n               [row-min-count\
    \ (count row-min row)]\n               [row-max-count-per-bucket (quotient row-max-count\
    \ capacity)]\n               [row-min-count-per-bucket (quotient row-min-count\
    \ capacity)]\n               [row-max-count-per-bucket-remainder (remainder row-max-count\
    \ capacity)]\n               [row-min-count-per-bucket-remainder (remainder row-min-count\
    \ capacity)])\n          (if (and (zero? row-max-count-per-bucket) (zero? row-min-count-per-bucket))\n\
    \              (max-fill-helper (cdr grid) capacity)\n              (+ (max row-max-count-per-bucket\
    \ row-min-count-per-bucket)\n                 (max-fill-helper (cdr grid) capacity))))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (define row (first grid))\n    \
    \   (define (fill-row row capacity)\n         (cond\n           [(empty? row)\
    \ capacity]\n           [(= capacity 0) capacity]\n           [else (fill-row\
    \ (rest row) (- capacity (first row)))]))\n       (+ (fill-row row capacity) (max-fill-helper\
    \ (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 0) (max-fill-helper (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper\
    \ (rest grid) capacity))]\n          [else (max (max-fill-helper (rest grid) capacity)\n\
    \                     (+ 1 (max-fill-helper (rest grid) (- capacity 1))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (let loop ((grid grid) (capacity capacity)\
    \ (count 0))\n    (if (null? grid)\n        count\n        (let ((filled (fill-row\
    \ (car grid) capacity)))\n          (loop (cdr grid) capacity (+ count filled))))))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [(= (first\
    \ (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n          [else (+\
    \ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n     \
    \ [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n      \
    \           (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [row-len (length row)]\n               [row-sum (apply + row)]\n\
    \               [row-max (apply max row)]\n               [row-max-count (count\
    \ row-max row)]\n               [row-max-count-sum (apply + row-max-count)])\n\
    \          (+ (if (zero? row-sum)\n                 0\n                 (quotient\
    \ row-max-count-sum capacity))\n             (max-fill-helper (cdr grid) capacity)))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(>= capacity (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (max-fill-helper (rest grid) (- capacity\
    \ (first grid)))]))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row\
    \ row)\n    (let loop ([row row] [filled 0])\n      (cond [(empty? row) filled]\n\
    \            [(= capacity (car row)) (loop (cdr row) (+ filled capacity))]\n \
    \           [(> capacity (car row)) (loop (cdr row) (+ filled (car row)))]\n \
    \           [else (loop (cdr row) (+ filled capacity))])))\n  (apply max (map\
    \ fill-row grid)))\n", "  (define (max-fill-row row capacity)\n    (let loop ([row\
    \ row] [capacity capacity] [count 0])\n      (cond [(empty? row) count]\n    \
    \        [(= capacity 0) count]\n            [(= (first row) 1) (loop (rest row)\
    \ capacity (+ count 1))]\n            [else (loop (rest row) (- capacity 1) count)])))\n\
    \  (let loop ([grid grid] [capacity capacity] [count 0])\n    (cond [(empty? grid)\
    \ count]\n          [else (loop (rest grid) capacity (+ count (max-fill-row (first\
    \ grid) capacity)))])))\n", "  (define (max-fill-row row capacity)\n    (define\
    \ (max-fill-row-helper row capacity)\n      (if (null? row)\n          capacity\n\
    \          (if (zero? (car row))\n              (max-fill-row-helper (cdr row)\
    \ capacity)\n              (max-fill-row-helper (cdr row) (- capacity 1)))))\n\
    \    (max-fill-row-helper row capacity))\n  (define (max-fill-grid grid capacity)\n\
    \    (if (null? grid)\n        capacity\n        (max-fill-grid (cdr grid) (max-fill-row\
    \ (car grid) capacity))))\n  (max-fill-grid grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity\
    \ 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [max-fill (apply max row)])\n          (+ max-fill (max-fill-helper\
    \ (cdr grid) capacity)))))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n       (define\
    \ (fill-row row capacity)\n         (cond\n           [(empty? row) capacity]\n\
    \           [(= capacity 0) capacity]\n           [(= (first row) 1) (fill-row\
    \ (rest row) (- capacity 1))]\n           [else (fill-row (rest row) capacity)]))\n\
    \       (+ (fill-row (first grid) capacity)\n          (max-fill-helper (rest\
    \ grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (let* ([row (first\
    \ grid)]\n              [row-len (length row)]\n              [next-row (rest\
    \ grid)]\n              [next-row-len (length next-row)]\n              [next-row-first\
    \ (first next-row)])\n         (cond\n           [(empty? next-row)\n        \
    \    (let* ([row-full (min capacity row-len)]\n                   [row-remaining\
    \ (sub1 row-full)])\n              (if (zero? row-remaining)\n               \
    \   row-full\n                  (add1 (max-fill-helper (rest grid) capacity))))]\n\
    \           [else\n            (let* ([row-full (min capacity row-len)]\n    \
    \               [row-remaining (sub1 row-full)]\n                   [next-row-full\
    \ (min capacity next-row-len)]\n                   [next-row-remaining (sub1 next-row-full)]\n\
    \                   [next-row-next-row-remaining (sub1 (min capacity (add1 next-row-len)))]\n\
    \                   [next-row-next-row-full (sub1 next-row-next-row-remaining)])\n\
    \              (cond\n                [(zero? row-remaining)\n               \
    \  (add1 (max-fill-helper (rest grid) capacity))]\n                [(zero? next-row-remaining)\n\
    \                 (add1 (max-fill-helper (rest grid) capacity))]\n           \
    \     [(zero? next-row-next-row-remaining)\n                 (add1 (max-fill-helper\
    \ (rest grid) capacity))]\n                [else\n                 (max-fill-helper\
    \ (rest grid) capacity)]))]))]))\n  (max-fill-helper grid capacity))\n", "  (let\
    \ ([max-fill (apply max (map (lambda (row) (apply + row)) grid))])\n    (if (<=\
    \ max-fill capacity)\n        0\n        (let ([buckets (map (lambda (row) (apply\
    \ + row)) grid)])\n          (let loop ([buckets buckets] [count 0])\n       \
    \     (if (every? (lambda (x) (= x capacity)) buckets)\n                count\n\
    \                (let ([max-bucket (apply max buckets)])\n                  (loop\
    \ (map (lambda (x) (if (= x max-bucket) capacity (- x 1))) buckets) (+ count 1)))))))))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 1) (+ 1 (max-fill-helper (rest grid) capacity))]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) (- capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-row row)\n    (let loop ([row row] [i 0] [max-fill 0])\n      (if\
    \ (null? row)\n          max-fill\n          (let ([water (if (zero? (car row))\
    \ 0 capacity)])\n            (loop (cdr row) (+ i 1) (max max-fill water))))))\n\
    \  (let loop ([grid grid] [max-fill 0])\n    (if (null? grid)\n        max-fill\n\
    \        (loop (cdr grid) (+ max-fill (max-fill-row (car grid)))))))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(null? grid) 0]\n      [(null?\
    \ (car grid)) (max-fill-helper (cdr grid) capacity)]\n      [(= capacity 0) (max-fill-helper\
    \ (cdr grid) capacity)]\n      [(= (car (car grid)) 0) (max-fill-helper (cdr grid)\
    \ capacity)]\n      [else (+ 1 (max-fill-helper (cdr grid) (- capacity 1)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(<= capacity (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (max (first grid) (max-fill-helper (rest\
    \ grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 1) (add1 (max-fill-helper (rest grid) capacity))]\n          [else (add1 (max-fill-helper\
    \ (rest grid) (sub1 capacity)))]))\n  (max-fill-helper grid capacity))\n", " \
    \ (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max-fill-helper (rest grid) capacity)\n                 (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))])\n    )\n  (max-fill-helper\
    \ grid capacity)\n  )\n", "  (let ([max-fill (apply max (map (lambda (row) (apply\
    \ max row)) grid))])\n    (if (> max-fill capacity)\n        (max-fill capacity)\n\
    \        capacity)))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond ((null? grid) 0)\n     \
    \       ((= capacity 0) 0)\n            ((= capacity (length (car grid))) (add1\
    \ (max-fill-helper (cdr grid) capacity)))\n            ((> capacity (length (car\
    \ grid))) (max-fill-helper (cdr grid) capacity))\n            (else (add1 (max-fill-helper\
    \ (cdr grid) (sub1 capacity))))))\n    (max-fill-helper-helper (reverse grid)\
    \ capacity))\n  (max-fill-helper grid capacity))\n", "  (define (fill grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (fill (rest grid)\
    \ capacity)]\n          [(= capacity 0) (fill (rest grid) capacity)]\n       \
    \   [else (+ 1 (fill (rest grid) (- capacity 1)))]))\n  (apply max (map (lambda\
    \ (row) (fill row capacity)) grid)))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (add1 (max-fill-helper (rest grid) (sub1 capacity))))]))\n \
    \ (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-inner grid capacity)\n      (define (max-fill-helper-inner-inner\
    \ grid capacity)\n        (cond ((null? grid) 0)\n              ((null? (car grid))\
    \ 0)\n              ((= capacity 0) 0)\n              ((= capacity (car (car grid)))\
    \ 1)\n              ((= capacity 1) (+ 1 (max-fill-helper-inner-inner (cdr grid)\
    \ capacity)))\n              ((= capacity (car (car grid))) 1)\n             \
    \ ((= 1 (car (car grid))) (+ 1 (max-fill-helper-inner-inner (cdr grid) capacity)))\n\
    \              ((= 0 (car (car grid))) (max-fill-helper-inner-inner (cdr grid)\
    \ capacity))\n              (else (+ 1 (max-fill-helper-inner-inner (cdr grid)\
    \ (- capacity (car (car grid))))))))\n      (max-fill-helper-inner-inner grid\
    \ capacity))\n    (define (max-fill-helper-inner-inner grid capacity)\n      (cond\
    \ ((null? grid) 0)\n            ((null? (car grid)) 0)\n            ((= capacity\
    \ 0) 0)\n            ((= capacity (car (car grid))) 1)\n            ((= capacity\
    \ 1) (+ 1 (max-fill-helper-inner-inner (cdr grid) capacity)))\n            ((=\
    \ capacity (car (car grid))) 1)\n            ((= 1 (car (car grid))) (+ 1 (max-fill-helper-inner-inner\
    \ (cdr grid) capacity)))\n            ((= 0 (car (car grid))) (max-fill-helper-inner-inner\
    \ (cdr grid) capacity))\n            (else (+ 1 (max-fill-helper-inner-inner (cdr\
    \ grid) (- capacity (car (car grid))))))))\n    (max-fill-helper-inner-inner grid\
    \ capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (define (fill-row\
    \ row capacity)\n         (cond\n           [(empty? row) 0]\n           [(zero?\
    \ capacity) 0]\n           [(zero? (first row)) (fill-row (rest row) capacity)]\n\
    \           [else (+ 1 (fill-row (rest row) (- capacity 1)))]))\n       (+ (fill-row\
    \ (first grid) capacity)\n          (max-fill-helper (rest grid) capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty?\
    \ grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(<= capacity (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [else (+ capacity (max-fill-helper (rest grid) capacity))]))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-inner grid capacity)\n      (if\
    \ (null? grid)\n          0\n          (let* ([row (car grid)]\n             \
    \    [row-length (length row)]\n                 [row-sum (apply + row)]\n   \
    \              [row-max (apply max row)]\n                 [row-min (apply min\
    \ row)]\n                 [row-max-index (apply max-index row)]\n            \
    \     [row-min-index (apply min-index row)]\n                 [row-max-index-value\
    \ (list-ref row row-max-index)]\n                 [row-min-index-value (list-ref\
    \ row row-min-index)]\n                 [row-max-index-value-new (- row-max-index-value\
    \ capacity)]\n                 [row-min-index-value-new (+ row-min-index-value\
    \ capacity)]\n                 [row-new (list-set row row-max-index row-max-index-value-new)]\n\
    \                 [row-new (list-set row-new row-min-index row-min-index-value-new)])\n\
    \            (if (and (= row-max-index-value-new 0) (= row-min-index-value-new\
    \ 0))\n                (+ row-sum capacity)\n                (+ row-sum capacity\
    \ (max-fill-helper-inner (cdr grid) capacity))))))\n    (max-fill-helper-inner\
    \ grid capacity)))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty? grid)\
    \ 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(empty? (rest grid)) (max-fill-helper-helper (rest (first grid)) capacity)]\n\
    \        [else (max (max-fill-helper-helper (rest (first grid)) capacity)\n  \
    \                 (max-fill-helper-helper (rest grid) capacity))]))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity\
    \ 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity 1)))]))\n  (max-fill-helper grid capacity))\n", "  (let loop ((grid\
    \ grid) (capacity capacity) (count 0))\n    (if (null? grid)\n        count\n\
    \        (let ((filled (fill-row (car grid) capacity)))\n          (loop (cdr\
    \ grid) capacity (+ count filled))))))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (cond\n          [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper-helper (rest grid) capacity)]\n          [(zero?\
    \ capacity) (max-fill-helper-helper (rest grid) capacity)]\n          [(zero?\
    \ (first grid)) (max-fill-helper-helper-helper (rest grid) capacity)]\n      \
    \    [else\n            (max-fill-helper-helper-helper (rest grid) (- capacity\
    \ 1))]))\n      (max-fill-helper-helper-helper grid capacity))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (+ 1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity\
    \ 1)))]))\n  (max-fill-helper grid capacity))\n", "  (define (fill grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (fill (rest grid)\
    \ capacity)]\n          [(= (first (first grid)) 1) (add1 (fill (rest grid) capacity))]\n\
    \          [else (add1 (fill (rest grid) (sub1 capacity)))]))\n  (define (empty?\
    \ grid) (null? grid))\n  (define (empty? row) (null? row))\n  (define (add1 x)\
    \ (+ x 1))\n  (define (sub1 x) (- x 1))\n  (fill grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(null? grid) 0]\n      [(null?\
    \ (car grid)) 0]\n      [else\n       (let* ([row (car grid)]\n              [row-len\
    \ (length row)]\n              [row-sum (apply + row)]\n              [row-fill\
    \ (quotient row-sum capacity)]\n              [row-remainder (modulo row-sum capacity)])\n\
    \         (if (= row-remainder 0)\n             (+ row-fill (max-fill-helper (cdr\
    \ grid) capacity))\n             (+ row-fill 1 (max-fill-helper (cdr grid) capacity))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [(= (first (first grid)) 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (- capacity 1)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty?\
    \ grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= capacity (first grid)) (add1 (max-fill-helper (rest grid) capacity))]\n\
    \        [(> capacity (first grid)) (add1 (max-fill-helper-helper (rest grid)\
    \ (- capacity (first grid))))]\n        [else (add1 (max-fill-helper-helper (rest\
    \ grid) capacity))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
