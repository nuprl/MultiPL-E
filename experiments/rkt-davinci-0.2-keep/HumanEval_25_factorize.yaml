name: HumanEval_25_factorize
language: racket
prompt: "#lang racket\n\n;; Return list of prime factors of given integer in the order\
  \ from smallest to largest.\n;; Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n;; Input number\
  \ should be equal to the product of all factors\n;; >>> factorize(8)\n;; [2, 2,\
  \ 2]\n;; >>> factorize(25)\n;; [5, 5]\n;; >>> factorize(70)\n;; [2, 5, 7]\n(define\
  \ (factorize n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n\
  \    (check-equal? (candidate 2) (list 2))\n    (check-equal? (candidate 4) (list\
  \ 2 2))\n    (check-equal? (candidate 8) (list 2 2 2))\n    (check-equal? (candidate\
  \ 57) (list 3 19))\n    (check-equal? (candidate 3249) (list 3 3 19 19))\n    (check-equal?\
  \ (candidate 185193) (list 3 3 3 19 19 19))\n    (check-equal? (candidate 20577)\
  \ (list 3 19 19 19))\n    (check-equal? (candidate 18) (list 2 3 3))\n))\n\n(test-humaneval)"
completions: ["  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n   \
    \   [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n      [(=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(= (remainder\
    \ n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter\
    \ (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-helper\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-helper (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-helper\
    \ (/ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-helper (/\
    \ n 5) (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-helper (/ n\
    \ 7) (cons 7 factors))]\n      [else (factorize-helper (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-helper n '()))\n", "  (define (factorize-iter n i)\n    (cond\n\
    \      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i)\
    \ i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (let* ([factor (find-factor n)]\n               [factors (cons factor factors)])\n\
    \          (factorize-iter (/ n factor) factors))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond ((= n 1) factors)\n          ((=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors)))\n          ((=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors)))\n          ((=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors)))\n          ((=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors)))\n          (else\
    \ (factorize-iter (/ n 2) (cons 2 factors)))))\n  (factorize-iter n '()))\n",
  "  (if (= n 1)\n      '()\n      (let ([factor (find-factor n)])\n        (cons\
    \ factor (factorize (/ n factor))))))\n", "  (define (factorize-iter n div)\n\
    \    (if (= n 1)\n        '()\n        (if (= (remainder n div) 0)\n         \
    \   (cons div (factorize-iter (/ n div) div))\n            (factorize-iter n (+\
    \ div 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 factors))]\n      [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n i factors)\n    (cond\n      [(= n\
    \ 1) factors]\n      [(= (modulo n i) 0) (factorize-iter (/ n i) i (cons i factors))]\n\
    \      [else (factorize-iter n (+ i 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n      [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(= (remainder n 7)\
    \ 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter (/\
    \ n 7) (cons 7 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond [(= n 1) factors]\n          [(integer? (sqrt n)) (factorize-iter\
    \ (/ n (sqrt n)) (cons (sqrt n) factors))]\n          [(integer? (sqrt (sqrt n)))\
    \ (factorize-iter (/ n (sqrt (sqrt n))) (cons (sqrt (sqrt n)) factors))]\n   \
    \       [(integer? (sqrt (sqrt (sqrt n)))) (factorize-iter (/ n (sqrt (sqrt (sqrt\
    \ n)))) (cons (sqrt (sqrt (sqrt n))) factors))]\n          [(integer? (sqrt (sqrt\
    \ (sqrt (sqrt n))))) (factorize-iter (/ n (sqrt (sqrt (sqrt (sqrt n))))) (cons\
    \ (sqrt (sqrt (sqrt (sqrt n)))) factors))]\n          [(integer? (sqrt (sqrt (sqrt\
    \ (sqrt (sqrt n)))))) (factorize-iter (/ n (sqrt (sqrt (sqrt (sqrt (sqrt n))))))\
    \ (cons (sqrt (sqrt (sqrt (sqrt (sqrt n))))) factors))]\n          [(integer?\
    \ (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n))))))) (factorize-iter (/ n (sqrt (sqrt\
    \ (sqrt (sqrt (sqrt (sqrt n))))))) (cons (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n))))))\
    \ factors))]\n          [(integer? (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n))))))))\
    \ (factorize-iter (/ n (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n)))))))) (cons\
    \ (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n))))))) factors))]\n          [(integer?\
    \ (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n))))))))) (factorize-iter (/\
    \ n (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(prime? n) (cons n factors)]\n      [else (factorize-iter (/ n (smallest-prime-factor\
    \ n)) (cons (smallest-prime-factor n) factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (factorize-iter (quotient n (first factors)) (cons (first factors) factors))))\n\
    \  (factorize-iter n (list 2)))\n", "  (define (factorize-iter n factors)\n  \
    \  (cond\n      [(= n 1) (reverse factors)]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 factors))]\n      [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n divisor factors)\n    (cond ((= n 1)\
    \ factors)\n          ((= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors)))\n          (else (factorize-iter n (+ divisor\
    \ 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (if (= n 1)\n        factors\n        (let ([factor (find-factor\
    \ n)])\n          (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n divisor factors)\n    (if (= n 1)\n\
    \        factors\n        (if (zero? (modulo n divisor))\n            (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))\n            (factorize-iter n\
    \ (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 factors))]\n      [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (cond\n      [(= n 1) factors]\n      [(= (modulo n divisor) 0)\
    \ (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n      [else\
    \ (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n \
    \   (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n\
    \        (let ((f (find-factor n)))\n          (factorize-iter (/ n f) (cons f\
    \ factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n\
    \    (cond\n      [(= n 1) (reverse acc)]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 acc))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 acc))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5\
    \ acc))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n\
    \      [else (factorize-iter (/ n 2) (cons 2 acc))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (let ([f (first (prime-factors n))])\n          (factorize-iter (/ n f) (cons\
    \ f factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 factors))]\n      [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-helper n i)\n    (if (= n 1)\n        '()\n\
    \        (if (= (remainder n i) 0)\n            (cons i (factorize-helper (/ n\
    \ i) i))\n            (factorize-helper n (+ i 1)))))\n  (factorize-helper n 2))\n",
  "  (define (factorize-iter n acc)\n    (if (= n 1)\n        acc\n        (let ([factor\
    \ (find-factor n)])\n          (factorize-iter (/ n factor) (cons factor acc)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n          [else (factorize-iter (/ n 2) (cons 2 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n divisor)\n    (if\
    \ (= n 1)\n        '()\n        (if (= (remainder n divisor) 0)\n            (cons\
    \ divisor (factorize-iter (/ n divisor) divisor))\n            (factorize-iter\
    \ n (+ divisor 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n acc)\n    (if (= n 1)\n        acc\n        (let ([f (find-factor n)])\n \
    \         (factorize-iter (/ n f) (cons f acc)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-helper n i)\n    (if (= n 1)\n        '()\n        (if (=\
    \ (remainder n i) 0)\n            (cons i (factorize-helper (/ n i) i))\n    \
    \        (factorize-helper n (+ i 1)))))\n  (factorize-helper n 2))\n", "  (define\
    \ (factorize-iter n i)\n    (cond [(= n 1) '()]\n          [(= (modulo n i) 0)\
    \ (cons i (factorize-iter (/ n i) i))]\n          [else (factorize-iter n (+ i\
    \ 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (modulo n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n acc)\n    (if (= n 1)\n        acc\n        (let ([f (first (filter (lambda\
    \ (x) (= (modulo n x) 0)) (range 2 n)))]\n              [rest (factorize-iter\
    \ (/ n f) acc)])\n          (cons f rest))))\n  (factorize-iter n '()))\n", " \
    \ (define (factorize-iter n acc)\n    (cond [(= n 1) acc]\n          [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n          [(= (remainder n 3)\
    \ 0) (factorize-iter (/ n 3) (cons 3 acc))]\n          [(= (remainder n 5) 0)\
    \ (factorize-iter (/ n 5) (cons 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 acc))]\n          [else (factorize-iter (/ n 7) (cons n acc))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-helper n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-helper (/ n 2)\
    \ (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-helper (/ n\
    \ 3) (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-helper (/\
    \ n 5) (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-helper\
    \ (/ n 7) (cons 7 factors))]\n          [else (factorize-helper (/ n 7) (cons\
    \ 7 factors))]))\n  (factorize-helper n '()))\n", "  (define (factorize-iter n\
    \ div)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n div) 0) (cons div\
    \ (factorize-iter (/ n div) div))]\n      [else (factorize-iter n (+ div 1))]))\n\
    \  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor factors)\n \
    \   (cond ((= n 1) factors)\n          ((= (remainder n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors)))\n          (else (factorize-iter\
    \ n (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n acc)\n    (if (= n 1)\n        acc\n        (let* ([d (find-divisor n)]\n\
    \               [n (/ n d)])\n          (factorize-iter n (cons d acc)))))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n \
    \     [(= n 1) acc]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons\
    \ 2 acc))]\n      [else (factorize-iter (/ n 3) (cons 3 acc))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n (car factors)) (cons (car factors) factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (modulo n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-helper\
    \ n factors)\n    (cond ((= n 1) factors)\n          ((= (remainder n 2) 0) (factorize-helper\
    \ (/ n 2) (cons 2 factors)))\n          ((= (remainder n 3) 0) (factorize-helper\
    \ (/ n 3) (cons 3 factors)))\n          ((= (remainder n 5) 0) (factorize-helper\
    \ (/ n 5) (cons 5 factors)))\n          ((= (remainder n 7) 0) (factorize-helper\
    \ (/ n 7) (cons 7 factors)))\n          (else (factorize-helper (/ n 2) (cons\
    \ 2 factors)))))\n  (factorize-helper n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 factors))]\n      [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n   \
    \   [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter\
    \ (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (if (= n 1)\n        factors\n        (if (zero? (modulo\
    \ n divisor))\n            (factorize-iter (/ n divisor) divisor (cons divisor\
    \ factors))\n            (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n\
    \ 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n   \
    \   [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter\
    \ (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n acc)\n    (if (= n 1)\n        acc\n        (let ([d (smallest-divisor n)])\n\
    \          (factorize-iter (/ n d) (cons d acc)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n      [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(= (remainder n 7)\
    \ 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter (/\
    \ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n      [else (factorize-iter (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond [(=\
    \ n 1) acc]\n          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2\
    \ acc))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n   \
    \       [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n      \
    \    [else (factorize-iter (/ n 2) (cons 2 acc))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [else (factorize-iter\
    \ (/ (- n 1) 2) (cons 1 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n curr-factor factors)\n    (cond\n     \
    \ [(= n 1) factors]\n      [(= (remainder n curr-factor) 0) (factorize-iter (/\
    \ n curr-factor) curr-factor (cons curr-factor factors))]\n      [else (factorize-iter\
    \ n (+ curr-factor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define\
    \ (factorize-iter n acc)\n    (if (= n 1)\n        acc\n        (factorize-iter\
    \ (quotient n (smallest-prime-factor n)) (cons (smallest-prime-factor n) acc))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (= n 1)\n        factors\n        (let ([f (find-factor n)])\n          (factorize-iter\
    \ (/ n f) (cons f factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (if (prime? n)\n        (append factors (list n))\n        (factorize-iter\
    \ (quotient n (first (prime-factors n))) (append factors (list (first (prime-factors\
    \ n)))))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond [(= n 1) factors]\n          [(even? n) (factorize-iter (/ n 2) (cons\
    \ 2 factors))]\n          [(odd? n) (factorize-iter (factorize-iter-odd n) factors)]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond ((=\
    \ n 1) acc)\n          ((= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2\
    \ acc)))\n          ((= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc)))\n\
    \          ((= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc)))\n   \
    \       ((= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc)))\n      \
    \    (else (factorize-iter (/ n 2) (cons 2 acc)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond ((= n 1) factors)\n   \
    \       ((= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors)))\n          (else (factorize-iter n (+ divisor 1) factors))))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (if (= n 1)\n        factors\n        (if (zero? (modulo n divisor))\n  \
    \          (factorize-iter (/ n divisor) divisor (cons divisor factors))\n   \
    \         (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [else (factorize-iter\
    \ (/ n 3) (cons 3 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n      [else (factorize-iter (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (prime? n)\n        (append factors (list n))\n        (factorize-iter (quotient\
    \ n (first (prime-factors n))) (append factors (list (first (prime-factors n)))))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons\
    \ 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n   \
    \   [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n      [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(= (remainder n 7)\
    \ 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter (/\
    \ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 factors))]\n          [else (factorize-iter (/ n 2) (cons 2\
    \ factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (if (= n 1)\n        factors\n        (let ([factor (find-factor n)])\n \
    \         (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (factorize-iter (/ n (first (prime-factors n))) (cons (first\
    \ (prime-factors n)) factors))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (if (= n 1)\n        factors\n        (if (zero? (modulo\
    \ n divisor))\n            (factorize-iter (/ n divisor) divisor (cons divisor\
    \ factors))\n            (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n\
    \ 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n   \
    \   [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter\
    \ (/ n 7) (cons 7 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n i)\n    (if (= n 1)\n        '()\n        (if (= (remainder n i) 0)\n    \
    \        (cons i (factorize-iter (/ n i) i))\n            (factorize-iter n (+\
    \ i 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (modulo n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(prime? n) (append factors\
    \ (list n))]\n      [else (factorize-iter (/ n (smallest-prime-factor n)) (append\
    \ factors (list (smallest-prime-factor n))))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [else (factorize-iter\
    \ (- n 1) acc)]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (if (= n 1)\n        factors\n        (let* ([factor (find-factor\
    \ n)]\n               [new-factors (append factors (list factor))])\n        \
    \  (factorize-iter (/ n factor) new-factors))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n          [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n          [(=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n          [else\
    \ (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond [(= n 1) factors]\n   \
    \       [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n          [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons\
    \ 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n   \
    \   [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n",
  "  (if (= n 1)\n      '()\n      (let loop ([n n] [d 2])\n        (if (= (remainder\
    \ n d) 0)\n            (cons d (loop (/ n d) d))\n            (loop n (+ d 1))))))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n \
    \   (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n divisor factors)\n    (cond\n      [(=\
    \ n 1) factors]\n      [(= (modulo n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n      [else (factorize-iter n (+ divisor 1)\
    \ factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (cond\n      [(= n 1) factors]\n      [(= (modulo n divisor) 0)\
    \ (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n      [else\
    \ (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n          [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n          [(=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n          [else\
    \ (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 factors))]\n          [else (factorize-iter (/ n 2) (cons 2\
    \ factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n\
    \    (cond [(= n 1) acc]\n          [(= (remainder n 2) 0) (factorize-iter (/\
    \ n 2) (cons 2 acc))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 acc))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons\
    \ 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n\
    \          [else (factorize-iter (/ n 7) (cons 7 acc))]))\n  (factorize-iter n\
    \ '()))\n", "  (define (factorize-iter n acc)\n    (if (= n 1)\n        acc\n\
    \        (let* ([factor (find-factor n)]\n               [new-acc (append acc\
    \ (list factor))])\n          (factorize-iter (/ n factor) new-acc))))\n  (factorize-iter\
    \ n '()))\n", "  (if (equal? n 1)\n      '()\n      (let ((factor (find-factor\
    \ n)))\n        (cons factor (factorize (quotient n factor))))))\n", "  (define\
    \ (factorize-iter n factors)\n    (if (prime? n)\n        (append factors (list\
    \ n))\n        (factorize-iter (quotient n (first (prime-factors n))) (append\
    \ factors (list (first (prime-factors n)))))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n div)\n    (if (= n 1)\n        '()\n        (if (=\
    \ (remainder n div) 0)\n            (cons div (factorize-iter (/ n div) div))\n\
    \            (factorize-iter n (+ div 1)))))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n factors)\n    (if (= n 1)\n        factors\n        (let ([factor\
    \ (find-factor n)])\n          (factorize-iter (/ n factor) (cons factor factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (modulo n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n\
    \ divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \          [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n\
    \ 1) factors]\n      [(prime? n) (cons n factors)]\n      [else (factorize-iter\
    \ (/ n (first (prime-factors n))) (cons (first (prime-factors n)) factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n i factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (modulo n i) 0) (factorize-iter (/ n i) i\
    \ (cons i factors))]\n      [else (factorize-iter n (+ i 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n factors)\n    (if (or (= n 1) (=\
    \ n 0))\n        factors\n        (factorize-iter (quotient n (first factors))\
    \ (cons (first factors) factors))))\n  (factorize-iter n (prime-factors n)))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n      [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(= (remainder n 7)\
    \ 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter (/\
    \ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n", "  (define (divisors\
    \ n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero?\
    \ (modulo n i)) i)))\n  (define (prime? n)\n    (empty? (divisors n)))\n  (define\
    \ (factors n)\n    (cond\n      [(prime? n) (list n)]\n      [else (append (factors\
    \ (car (divisors n))) (factors (quotient n (car (divisors n)))))]))\n  (factors\
    \ n))\n", "  (cond\n    [(= n 1) '()]\n    [(prime? n) (list n)]\n    [else\n\
    \     (let ([factor (find-factor n)])\n       (cons factor (factorize (/ n factor))))]))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (modulo n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor\
    \ factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n curr-factor)\n    (cond\n      [(=\
    \ n 1) '()]\n      [(= (modulo n curr-factor) 0) (cons curr-factor (factorize-iter\
    \ (/ n curr-factor) curr-factor))]\n      [else (factorize-iter n (+ curr-factor\
    \ 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n    (cond\n\
    \      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i)\
    \ i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (modulo n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor\
    \ factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-helper n factors)\n    (if (zero? n)\n \
    \       factors\n        (if (prime? n)\n            (cons n factors)\n      \
    \      (factorize-helper (quotient n (first (filter (lambda (x) (zero? (remainder\
    \ n x))) (range 2 n)))) (cons (first (filter (lambda (x) (zero? (remainder n x)))\
    \ (range 2 n))) factors)))))\n  (factorize-helper n '()))\n", "  (cond\n    [(=\
    \ n 1) '()]\n    [(= n 2) '(2)]\n    [(= n 3) '(3)]\n    [(= n 4) '(2 2)]\n  \
    \  [(= n 5) '(5)]\n    [(= n 6) '(2 3)]\n    [(= n 7) '(7)]\n    [(= n 8) '(2\
    \ 2 2)]\n    [(= n 9) '(3 3)]\n    [(= n 10) '(2 5)]\n    [(= n 11) '(11)]\n \
    \   [(= n 12) '(2 2 3)]\n    [(= n 13) '(13)]\n    [(= n 14) '(2 7)]\n    [(=\
    \ n 15) '(3 5)]\n    [(= n 16) '(2 2 2 2)]\n    [(= n 17) '(17)]\n    [(= n 18)\
    \ '(2 3 3)]\n    [(= n 19) '(19)]\n    [(= n 20) '(2 2 5)]\n    [(= n 21) '(3\
    \ 7)]\n    [(= n 22) '(2 11)]\n    [(= n 23) '(23)]\n    [(= n 24) '(2 2 2 3)]\n\
    \    [(= n 25) '(5 5)]\n    [(= n 26) '(2 13)]\n    [(= n 27) '(3 3 3)]\n    [(=\
    \ n 28) '(2 2 7)]\n    [(= n 29) '(29)]\n    [(= n 30) '(2 3 5)]\n    [(= n 31)\
    \ '(31)]\n    [(= n 32) '(2 2 2 2 2)]\n    [(= n 33) '(3 11)]\n    [(= n 34) '(2\
    \ 17)]\n    [(= n 35) '(5 7)]\n    [(= n 36) '(2 2 3 3)]\n    [(= n 37) '(37)]\n\
    \    [(= n 38) '(2 19)]\n    [(= n 39) '(3 13)]\n    [(= n 40) '(2 2 2 5)]\n \
    \   [(= n 41) '(41)]\n    [(= n 42) '(2 3 7)]\n    [(= n 43) '(43)]\n    [(= n\
    \ 44) '(2 2 11)]\n    [(= n 45) '(3 3 5)]\n    [(= n 46)", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (modulo n\
    \ divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n\
    \ 2 '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n   \
    \   [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter\
    \ (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n curr-factor factors)\n    (cond ((= n 1) factors)\n          ((= (remainder\
    \ n curr-factor) 0) (factorize-iter (/ n curr-factor) curr-factor (cons curr-factor\
    \ factors)))\n          (else (factorize-iter n (+ curr-factor 1) factors))))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(prime? n) (append factors (list n))]\n     \
    \ [else (factorize-iter (/ n (first (prime-factors n))) (append factors (prime-factors\
    \ n)))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(prime? n) (append factors (list n))]\n\
    \      [else (factorize-iter (/ n (first (prime-factors n))) (append factors (prime-factors\
    \ n)))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n d acc)\n\
    \    (cond ((= n 1) acc)\n          ((= (modulo n d) 0) (factorize-iter (/ n d)\
    \ d (cons d acc)))\n          (else (factorize-iter n (+ d 1) acc))))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n     \
    \   factors\n        (factorize-iter (/ n (first (prime-factors n))) (cons (first\
    \ (prime-factors n)) factors))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond [(= n 1) factors]\n          [(prime? n) (cons n factors)]\n\
    \          [else (factorize-iter (/ n (smallest-prime-factor n)) (cons (smallest-prime-factor\
    \ n) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ div)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n div) 0) (cons div\
    \ (factorize-iter (/ n div) div))]\n      [else (factorize-iter n (+ div 1))]))\n\
    \  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n    (if (=\
    \ n 1)\n        factors\n        (let ([factor (find-factor n)])\n          (factorize-iter\
    \ (/ n factor) (cons factor factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-helper n factors)\n    (if (= n 1)\n        factors\n        (let\
    \ ([factor (find-factor n)])\n          (factorize-helper (/ n factor) (cons factor\
    \ factors)))))\n  (factorize-helper n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(prime? n) (cons n factors)]\n   \
    \   [else (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 factors))]\n      [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n divisor factors)\n    (cond\n     \
    \ [(= n 1) factors]\n      [(= (modulo n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n      [else (factorize-iter n (+ divisor 1)\
    \ factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(prime? n) (append factors (list n))]\n\
    \      [else (factorize-iter (/ n (first (prime-factors n))) (append factors (prime-factors\
    \ n)))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (if (= n 1)\n        factors\n        (factorize-iter (quotient n (first\
    \ factors)) (cons (first factors) factors))))\n  (factorize-iter n (list 2)))\n",
  "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n          [(prime?\
    \ n) (cons n factors)]\n          [else (factorize-iter (/ n (first (prime-factors\
    \ n))) (cons (first (prime-factors n)) factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (if (= n 1)\n        factors\n        (if (zero? (modulo n divisor))\n\
    \            (factorize-iter (/ n divisor) divisor (cons divisor factors))\n \
    \           (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2\
    \ '()))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= 0 (modulo n i)) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (if (= n 1)\n        factors\n        (factorize-iter (/ n (first (prime-factors\
    \ n))) (cons (first (prime-factors n)) factors))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (modulo n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor\
    \ factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n divisor factors)\n    (cond\n   \
    \   [(= n 1) factors]\n      [(= (modulo n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n      [else (factorize-iter n (+ divisor 1)\
    \ factors)]))\n  (factorize-iter n 2 '()))\n", "  (if (equal? n 1)\n      '()\n\
    \      (let ([factor (find-factor n)])\n        (cons factor (factorize (quotient\
    \ n factor))))))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n\
    \        factors\n        (let ([factor (find-factor n)])\n          (factorize-iter\
    \ (/ n factor) (cons factor factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [else (factorize-iter\
    \ (/ (- n 1) 2) (cons 1 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 factors))]\n          [else (factorize-iter (/ n 2) (cons 2\
    \ factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n i)\n\
    \    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n divisor factors)\n    (cond\n      [(=\
    \ n 1) factors]\n      [(= (modulo n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n      [else (factorize-iter n (+ divisor 1)\
    \ factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (cond\n      [(= n 1) factors]\n      [(= (modulo n divisor) 0)\
    \ (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n      [else\
    \ (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n curr-factor factors)\n    (if (= n 1)\n        factors\n\
    \        (if (zero? (modulo n curr-factor))\n            (factorize-iter (/ n\
    \ curr-factor) curr-factor (cons curr-factor factors))\n            (factorize-iter\
    \ n (+ curr-factor 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (cond [(= n 1) factors]\n          [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n          [(= (remainder\
    \ n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n          [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n          [(= (remainder\
    \ n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n          [else (factorize-iter\
    \ (/ n 7) (cons 7 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n      [else (factorize-iter (/ n (car factors)) (cons (car\
    \ factors) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-helper n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(prime? n) (cons n factors)]\n   \
    \   [else (factorize-helper (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors))]))\n  (factorize-helper n '()))\n", "  (define (factorize-iter\
    \ n acc)\n    (cond [(= n 1) (reverse acc)]\n          [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 acc))]\n          [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 acc))]\n          [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 acc))]\n          [else (factorize-iter (/ n 2) (cons 2 acc))]))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (if (= n\
    \ 1)\n        acc\n        (let ([f (first (factor n))])\n          (factorize-iter\
    \ (/ n f) (cons f acc)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n      [else (factorize-iter (/ n 2) (cons 2 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n          [else (factorize-iter (/ n 2) (cons 2 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (equal? n 1)\n        factors\n        (let ([f (first (filter (lambda (x) (zero?\
    \ (modulo n x))) (range 2 n)))]\n              [n (quotient n f)])\n         \
    \ (factorize-iter n (cons f factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n divisor factors)\n    (if (= n 1)\n        factors\n     \
    \   (if (zero? (modulo n divisor))\n            (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))\n            (factorize-iter n (+ divisor 1)\
    \ factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(prime? n) (cons n factors)]\n   \
    \   [else (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors))]))\n  (factorize-iter n '()))\n", "  (cond\n    [(= n 1) '()]\n\
    \    [(= n 2) '(2)]\n    [(= n 3) '(3)]\n    [(= n 4) '(2 2)]\n    [(= n 5) '(5)]\n\
    \    [(= n 6) '(2 3)]\n    [(= n 7) '(7)]\n    [(= n 8) '(2 2 2)]\n    [(= n 9)\
    \ '(3 3)]\n    [(= n 10) '(2 5)]\n    [(= n 11) '(11)]\n    [(= n 12) '(2 2 3)]\n\
    \    [(= n 13) '(13)]\n    [(= n 14) '(2 7)]\n    [(= n 15) '(3 5)]\n    [(= n\
    \ 16) '(2 2 2 2)]\n    [(= n 17) '(17)]\n    [(= n 18) '(2 3 3)]\n    [(= n 19)\
    \ '(19)]\n    [(= n 20) '(2 2 5)]\n    [(= n 21) '(3 7)]\n    [(= n 22) '(2 11)]\n\
    \    [(= n 23) '(23)]\n    [(= n 24) '(2 2 2 3)]\n    [(= n 25) '(5 5)]\n    [(=\
    \ n 26) '(2 13)]\n    [(= n 27) '(3 3 3)]\n    [(= n 28) '(2 2 7)]\n    [(= n\
    \ 29) '(29)]\n    [(= n 30) '(2 3 5)]\n    [(= n 31) '(31)]\n    [(= n 32) '(2\
    \ 2 2 2 2)]\n    [(= n 33) '(3 11)]\n    [(= n 34) '(2 17)]\n    [(= n 35) '(5\
    \ 7)]\n    [(= n 36) '(2 2 3 3)]\n    [(= n 37) '(37)]\n    [(= n 38) '(2 19)]\n\
    \    [(= n 39) '(3 13)]\n    [(= n 40) '(2 2 2 5)]\n    [(= n 41) '(41)]\n   \
    \ [(= n 42) '(2 3 7)]\n    [(= n 43) '(43)]\n    [(= n 44) '(2 2 11)]\n    [(=\
    \ n 45) '(3 3 5)]\n    [(= n 46)", "  (define (factorize-iter n factors)\n   \
    \ (if (= n 1)\n        factors\n        (let ((factor (find-factor n)))\n    \
    \      (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (zero? n)\n     \
    \   factors\n        (if (prime? n)\n            (cons n factors)\n          \
    \  (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors)))))\n  (reverse (factorize-iter n '())))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n      [else (factorize-iter (/ n 2) (cons 2 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n i)\n    (cond\n  \
    \    [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i)\
    \ i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (let ([factor (find-factor n)])\n          (factorize-iter (/ n factor) (cons\
    \ factor factors)))))\n  (factorize-iter n '()))\n", "  (if (= n 1)\n      '()\n\
    \      (let ([f (find-factor n)])\n        (cons f (factorize (/ n f))))))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n      [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n      [(= (remainder n 7)\
    \ 0) (factorize-iter (/ n 7) (cons 7 factors))]\n      [else (factorize-iter (/\
    \ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n      [else (factorize-iter (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (if (= n 1)\n        factors\n        (if (zero? (modulo n divisor))\n  \
    \          (factorize-iter (/ n divisor) divisor (cons divisor factors))\n   \
    \         (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n          [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n          [(=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n          [else\
    \ (factorize-iter (/ n (car factors)) (cons (car factors) factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (divisible? a b)\n    (= (modulo a b) 0))\n  (define\
    \ (find-divisor n test-divisor)\n    (cond ((> (square test-divisor) n) n)\n \
    \         ((divisible? n test-divisor) test-divisor)\n          (else (find-divisor\
    \ n (+ test-divisor 1)))))\n  (define (prime? n)\n    (= n (find-divisor n 2)))\n\
    \  (define (fact-iter n test-divisor)\n    (cond ((> n 1) (cons test-divisor (fact-iter\
    \ (/ n test-divisor) test-divisor)))\n          (else '())))\n  (define (next-divisor\
    \ n test-divisor)\n    (if (prime? (+ test-divisor 1))\n        (+ test-divisor\
    \ 1)\n        (next-divisor n (+ test-divisor 1))))\n  (define (fact-iter-2 n\
    \ test-divisor)\n    (cond ((> n 1) (append (fact-iter n test-divisor) (fact-iter-2\
    \ (/ n test-divisor) (next-divisor n test-divisor))))\n          (else '())))\n\
    \  (fact-iter-2 n 2))\n", "  (define (factorize-iter n divisor factors)\n    (if\
    \ (= n 1)\n        factors\n        (if (zero? (modulo n divisor))\n         \
    \   (factorize-iter (/ n divisor) divisor (cons divisor factors))\n          \
    \  (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n factors)\n    (if (prime? n)\n        (append factors\
    \ (list n))\n        (factorize-iter (quotient n (first (prime-factors n))) (append\
    \ factors (list (first (prime-factors n)))))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (if (zero? n)\n        factors\n    \
    \    (factorize-iter (quotient n (first factors)) (cons (first factors) factors))))\n\
    \  (factorize-iter n (list 2)))\n", "  (define (factorize-iter n factors)\n  \
    \  (cond [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter (/\
    \ n 2) (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter (/\
    \ n 7) (cons 7 factors))]\n          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(prime? n) (cons n factors)]\n          [else\
    \ (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ i)\n    (if (= n 1)\n        '()\n        (if (= (remainder n i) 0)\n      \
    \      (cons i (factorize-iter (/ n i) i))\n            (factorize-iter n (+ i\
    \ 1)))))\n  (factorize-iter n 2))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper? n (- i 1))]))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (factorize-helper n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo\
    \ n i) 0) (cons i (factorize-helper (/ n i) i))]\n      [else (factorize-helper\
    \ n (+ i 1))]))\n  (factorize-helper n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 factors))]\n      [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (cond [(= n 1) factors]\n          [(prime? n) (cons n factors)]\n      \
    \    [else (factorize-iter (/ n (smallest-prime-factor n)) (cons (smallest-prime-factor\
    \ n) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (if (equal? n 1)\n        factors\n        (let ([factor (find-factor\
    \ n)])\n          (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n divisor factors)\n    (cond ((= n 1)\
    \ factors)\n          ((= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors)))\n          (else (factorize-iter n (+ divisor\
    \ 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 factors))]\n      [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (prime? n)\n    \
    \    (append factors (list n))\n        (factorize-iter (quotient n (first (prime-factors\
    \ n))) (append factors (list (first (prime-factors n)))))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n\
    \      [(prime? n) (append acc (list n))]\n      [else (factorize-iter (/ n (first\
    \ (prime-factors n))) (append acc (list (first (prime-factors n)))))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(prime? n) (append factors (list n))]\n      [else (factorize-iter\
    \ (/ n (first (prime-factors n))) (append factors (prime-factors n)))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(prime? n) (append factors (list n))]\n          [else (factorize-iter\
    \ (/ n (first (prime-factors n))) (append factors (list (first (prime-factors\
    \ n)))))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(prime? n) (cons n factors)]\n   \
    \   [else (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (if (= n 1)\n        factors\n        (factorize-iter (quotient\
    \ n (first factors)) (cons (first factors) factors))))\n  (factorize-iter n (list\
    \ 2)))\n", "  (define (factorize-iter n factors)\n    (if (zero? n)\n        factors\n\
    \        (factorize-iter (quotient n (car factors)) (cons (car factors) factors))))\n\
    \  (factorize-iter n (list 2)))\n", "  (define (factorize-iter n factors)\n  \
    \  (if (= n 1)\n        factors\n        (factorize-iter (/ n (first factors))\
    \ (cons (first factors) factors))))\n  (factorize-iter n (list 2)))\n", "  (define\
    \ (factorize-iter n divisor factors)\n    (if (= n 1)\n        factors\n     \
    \   (if (zero? (modulo n divisor))\n            (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))\n            (factorize-iter n (+ divisor 1)\
    \ factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 factors))]\n      [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (divisors n)\n    (for/list\
    \ ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n\
    \  (define (is-prime? n)\n    (empty? (divisors n)))\n  (define (prime-divisors\
    \ n)\n    (filter is-prime? (divisors n)))\n  (define (factorize-iter n factors)\n\
    \    (if (is-prime? n)\n        (append factors (list n))\n        (factorize-iter\
    \ (quotient n (car (prime-divisors n))) (append factors (list (car (prime-divisors\
    \ n)))))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(prime? n) (cons n factors)]\n   \
    \   [else (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors))]))\n  (factorize-iter n '()))\n", "  (if (= n 1)\n      '()\n\
    \      (let ([factor (find-factor n)])\n        (cons factor (factorize (/ n factor))))))\n",
  "  (define (factorize-iter n d factors)\n    (cond\n      [(= n 1) factors]\n  \
    \    [(= (remainder n d) 0) (factorize-iter (/ n d) d (cons d factors))]\n   \
    \   [else (factorize-iter n (+ d 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n acc)\n    (if (= n 1)\n        acc\n        (factorize-iter\
    \ (quotient n (smallest-prime-factor n)) (cons (smallest-prime-factor n) acc))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons\
    \ 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n   \
    \   [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(prime? n) (cons n factors)]\n      [else (factorize-iter (/ n (smallest-prime-factor\
    \ n)) (cons (smallest-prime-factor n) factors))]))\n  (factorize-iter n '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
