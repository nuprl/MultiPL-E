language: racket
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dj0cas8.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp1dj0cas8.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp1dj0cas8.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dj0cas8.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp99dsz_d8.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp99dsz_d8.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp99dsz_d8.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp99dsz_d8.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnzvdf2h8.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpnzvdf2h8.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (substring string 1) substring (+ count 1)))\n \
    \         (else count)))\n  (how_many_times-iter string substring 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt42mscah.rkt:12:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpt42mscah.rkt:12:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string 1) substring))\n  \
    \    0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0x018qm8.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp0x018qm8.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprfdgc_c5.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmprfdgc_c5.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps60mlw4h.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmps60mlw4h.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8qqea6he.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp8qqea6he.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times_iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times_iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times_iter (substring string 1) substring count)]))\n\
    \  (how_many_times_iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppx1w2ljt.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmppx1w2ljt.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmppx1w2ljt.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppx1w2ljt.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2nzuo736.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2nzuo736.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2nzuo736.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2nzuo736.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring count)\n    (cond\n      [(empty? string) count]\n      [(substring=?\
    \ (substring string 0 (string-length substring)) substring)\n       (count-substring\
    \ (substring string 1) substring (+ count 1))]\n      [else (count-substring (substring\
    \ string 1) substring count)]))\n  (count-substring string substring 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7t4_fn0e.rkt:14:8: substring=?: unbound identifier\n  in: substring=?\n\
    \  location...:\n   /tmp/tmp7t4_fn0e.rkt:14:8\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond\n      [(empty? string) 0]\n      [(empty? substring)\
    \ 0]\n      [(equal? (first string) (first substring))\n       (+ 1 (count-substring\
    \ (rest string) (rest substring)))]\n      [else (count-substring (rest string)\
    \ substring)]))\n  (count-substring string substring))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd3ywu0f5.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd3ywu0f5.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd3ywu0f5.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd3ywu0f5.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphmegi5hm.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmphmegi5hm.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmphmegi5hm.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphmegi5hm.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf9pl97oi.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpf9pl97oi.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(string=? string substring) 1]\n    [else\n\
    \     (+ (if (string-contains string substring) 1 0)\n        (how_many_times\
    \ (substring string 1) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4q8lzl85.rkt:16:13: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp4q8lzl85.rkt:16:13\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-empty? string) count)\n        \
    \  ((string-prefix? substring string) (how_many_times-iter (substring string (string-length\
    \ substring)) substring (+ count 1)))\n          (else (how_many_times-iter (substring\
    \ string 1) substring count))))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1h82s94v.rkt:12:12: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp1h82s94v.rkt:12:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn86gbpqp.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpn86gbpqp.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9vpq4w_3.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp9vpq4w_3.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1hs9e656.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp1hs9e656.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbq8pzxtf.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpbq8pzxtf.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (define (count-substring-iter string substring count)\n    \
    \  (cond ((string-length string) count)\n            ((string-contains string\
    \ substring) (count-substring-iter (substring string 1) substring (+ count 1)))\n\
    \            (else count)))\n    (count-substring-iter string substring 0))\n\
    \  (count-substring string substring))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9ce5vqjy.rkt:14:14: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp9ce5vqjy.rkt:14:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp68yaqt_c.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp68yaqt_c.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbgf6hn6n.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpbgf6hn6n.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl0vpk8s6.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpl0vpk8s6.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (string-index string\
    \ substring) (string-length string)) substring))\n      0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk9fsfdal.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpk9fsfdal.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn_bms92q.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpn_bms92q.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? (substring\
    \ string 0 (string-length substring)) substring)\n           (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else (count-substring (substring\
    \ string 1) substring))))\n  (count-substring string substring))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp96g8yhuu.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp96g8yhuu.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"cac\"\n--------------------\n--------------------\nERROR\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp96g8yhuu.rkt:26:4\n\napplication: not a\
    \ procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzq4uqtdj.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpzq4uqtdj.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpge5lbpox.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpge5lbpox.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcc2142yh.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpcc2142yh.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string 1) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvde18lnl.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpvde18lnl.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3lu6g8_p.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp3lu6g8_p.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (define (count-substring-helper string substring count)\n  \
    \    (cond ((string-length string) count)\n            ((string-contains string\
    \ substring)\n             (count-substring-helper (substring string 1) substring\
    \ (+ count 1)))\n            (else count)))\n    (count-substring-helper string\
    \ substring 0))\n  (count-substring string substring))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp612sjne0.rkt:14:14: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp612sjne0.rkt:14:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond ((string=? substring \"\") 0)\n          ((string=? string\
    \ \"\") 0)\n          ((string-contains string substring) (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else 0)))\n  (count-substring\
    \ string substring))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n\
    \    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpteea0jqi.rkt:14:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpteea0jqi.rkt:14:12\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (let loop ([string string]\
    \ [substring substring] [count 0])\n    (cond [(empty? string) count]\n      \
    \    [(empty? substring) count]\n          [(equal? (first string) (first substring))\n\
    \           (loop (rest string) (rest substring) (+ count 1))]\n          [else\
    \ (loop (rest string) substring count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplrmj5cec.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplrmj5cec.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplrmj5cec.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplrmj5cec.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (empty? string)\n        0\n        (if (string-contains\
    \ string substring)\n            (+ 1 (count-substring (substring string 1) substring))\n\
    \            (count-substring (substring string 1) substring))))\n  (count-substring\
    \ string substring))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n\
    \    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdqa8tq_2.rkt:14:13: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpdqa8tq_2.rkt:14:13\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdsc_emnb.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpdsc_emnb.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpdsc_emnb.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdsc_emnb.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (string-drop string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (string-drop string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiw4q9_o2.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpiw4q9_o2.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp00ttbzbn.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp00ttbzbn.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-replace string substring \"\") substring (+ count\
    \ 1))\n        count))\n  (how_many_times-iter string substring 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5c6snl85.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp5c6snl85.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring)\n       (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkebigkgg.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpkebigkgg.rkt:14:8\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? (substring\
    \ string 0 (string-length substring)) substring)\n           (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else (count-substring (substring\
    \ string 1) substring))))\n  (count-substring string substring))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2j4guwkr.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2j4guwkr.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"cac\"\n--------------------\n--------------------\nERROR\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2j4guwkr.rkt:26:4\n\napplication: not a\
    \ procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (string-index string\
    \ substring) (string-length string)) substring))\n      0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmc2355_m.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpmc2355_m.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4al2m39r.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp4al2m39r.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-length\
    \ substring))) substring))\n      0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk6w_0u4j.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpk6w_0u4j.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string 1) substring))\n        0))\n  (count-substring string substring))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4vx6uvwn.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp4vx6uvwn.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (string-index string\
    \ substring) (string-length string)) substring))\n      0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpitj59r3c.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpitj59r3c.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_x6hatkg.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp_x6hatkg.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp90su0z_e.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp90su0z_e.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptp1b2d8q.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmptp1b2d8q.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppfxu7sxa.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmppfxu7sxa.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) count)\n        \
    \  ((string-contains string substring) (how_many_times-iter (substring string\
    \ 1) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyk0p9cit.rkt:13:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpyk0p9cit.rkt:13:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv0qr4gy1.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpv0qr4gy1.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxjjbllc7.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpxjjbllc7.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (helper string substring\
    \ count)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (helper string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps_oa96ki.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmps_oa96ki.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (helper string substring\
    \ count)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (helper string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpigc_up99.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpigc_up99.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcexalbhe.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpcexalbhe.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpli_2_g67.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpli_2_g67.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpli_2_g67.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpli_2_g67.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp301kygo7.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp301kygo7.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (string-index string\
    \ substring) (string-length string)) substring))\n      0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfzqe7m8i.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpfzqe7m8i.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond\n      [(empty? string) 0]\n      [(empty? substring)\
    \ 0]\n      [(equal? (first string) (first substring))\n       (+ 1 (count-substring\
    \ (rest string) (rest substring)))]\n      [else (count-substring (rest string)\
    \ substring)]))\n  (cond\n    [(empty? string) 0]\n    [(empty? substring) 0]\n\
    \    [else (+ (count-substring string substring)\n             (how_many_times\
    \ (rest string) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd7ngsx6p.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd7ngsx6p.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd7ngsx6p.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd7ngsx6p.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (string-drop string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (string-drop string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvoqabwvq.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpvoqabwvq.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuchkf_ux.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpuchkf_ux.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string 1) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgdu91poz.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpgdu91poz.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfg6rfu9x.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpfg6rfu9x.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (string-drop-right string 1) substring (+ count\
    \ 1)))\n          (else count)))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpar30lpec.rkt:12:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpar30lpec.rkt:12:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (empty? string)\n     \
    \ 0\n      (if (string-contains string substring)\n          (+ 1 (how_many_times\
    \ (substring string 1) substring))\n          0)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5f70bal_.rkt:13:11: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp5f70bal_.rkt:13:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkrhk0p0f.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpkrhk0p0f.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? (substring\
    \ string 0 (string-length substring)) substring) (+ 1 (count-substring (substring\
    \ string 1) substring)))\n          (else (count-substring (substring string 1)\
    \ substring))))\n  (count-substring string substring))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8rz7uln.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpj8rz7uln.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"cac\"\n--------------------\n--------------------\nERROR\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj8rz7uln.rkt:25:4\n\napplication: not a\
    \ procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjzxgndnu.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpjzxgndnu.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3jcn2p2t.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp3jcn2p2t.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) 0)\n          ((string-contains\
    \ substring string) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1)))\n          (else count)))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp88wcb720.rkt:13:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp88wcb720.rkt:13:12\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(and (string=? (first string) (first substring))\n\
    \            (string=? (rest string) (rest substring)))\n       (how_many_times-iter\
    \ (rest string) substring (+ count 1))]\n      [else (how_many_times-iter (rest\
    \ string) substring count)]))\n  (how_many_times-iter string substring 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ogeyrg6.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2ogeyrg6.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ogeyrg6.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2ogeyrg6.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6d8rbw1y.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp6d8rbw1y.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpva7skz2c.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpva7skz2c.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (string-index string\
    \ substring) (string-length string)) substring))\n      0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2d8ejis0.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp2d8ejis0.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (first string) (first substring))\n    \
    \   (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6_nncdd.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpz6_nncdd.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6_nncdd.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpz6_nncdd.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcmuudpmm.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcmuudpmm.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcmuudpmm.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcmuudpmm.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) count)\n        \
    \  ((string-contains string substring) (how_many_times-iter (substring string\
    \ 1) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe6wfiuo2.rkt:13:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpe6wfiuo2.rkt:13:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqmicks_r.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpqmicks_r.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (helper string substring\
    \ count)\n    (cond ((string-length string) count)\n          ((string-contains\
    \ string substring) (helper (substring string 1) substring (+ count 1)))\n   \
    \       (else count)))\n  (helper string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp51tjw9bk.rkt:13:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp51tjw9bk.rkt:13:12\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (take substring string) substring)\n   \
    \    (how_many_times-iter (drop substring string) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (drop substring string) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pkwa305.rkt:25:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: \"\
    \"\n  argument position: 2nd\n  other arguments...:\n   \"x\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pkwa305.rkt:26:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: \"\
    xyxyxyx\"\n  argument position: 2nd\n  other arguments...:\n   \"x\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pkwa305.rkt:27:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: \"\
    cacacacac\"\n  argument position: 2nd\n  other arguments...:\n   \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pkwa305.rkt:28:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: \"\
    john doe\"\n  argument position: 2nd\n  other arguments...:\n   \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2puknznt.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2puknznt.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp2puknznt.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2puknznt.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(string=? (substring string 0 (string-length substring))\
    \ substring)\n           (how_many_times-iter (substring string 1) substring (+\
    \ count 1))]\n          [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl0w7tr3p.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpl0w7tr3p.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpl0w7tr3p.rkt:26:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl0w7tr3p.rkt:27:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_206aedm.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp_206aedm.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp_206aedm.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_206aedm.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains?\
    \ string substring)\n       (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (string-drop string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbu18o9zi.rkt:15:29: string-drop: unbound identifier\n  in: string-drop\n\
    \  location...:\n   /tmp/tmpbu18o9zi.rkt:15:29\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-helper\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-helper (substring string 1) substring (+\
    \ count 1))]\n      [else (how_many_times-helper (substring string 1) substring\
    \ count)]))\n  (how_many_times-helper string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq16okvqf.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq16okvqf.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpq16okvqf.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq16okvqf.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqd85t_pe.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpqd85t_pe.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpqd85t_pe.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqd85t_pe.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (string-drop string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (string-drop string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5540mhce.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp5540mhce.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (add 1 (string-length\
    \ substring))) substring))\n      0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpraqmlm7y.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpraqmlm7y.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zchav2b.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp0zchav2b.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8goeiu_q.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8goeiu_q.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp8goeiu_q.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8goeiu_q.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt2o6ri2j.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpt2o6ri2j.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn1eoo2pk.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpn1eoo2pk.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpn1eoo2pk.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn1eoo2pk.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring) (how_many_times-iter (substring string 1) substring (+ count 1))]\n\
    \      [else (how_many_times-iter (substring string 1) substring count)]))\n \
    \ (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpds_mu851.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpds_mu851.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpds_mu851.rkt:26:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpds_mu851.rkt:27:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw_oorwnv.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpw_oorwnv.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-length substring)\n\
    \      (let ([substring-length (string-length substring)])\n        (let loop\
    \ ([i 0] [count 0])\n          (if (= i (- (string-length string) substring-length))\n\
    \              count\n              (if (string=? (substring string i (+ i substring-length))\
    \ substring)\n                  (loop (+ i 1) (+ count 1))\n                 \
    \ (loop (+ i 1) count)))))\n      0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhc0wngn.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpuhc0wngn.rkt:27:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpuhc0wngn.rkt:28:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhc0wngn.rkt:29:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5lvtef3n.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp5lvtef3n.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond\n      [(empty? string) 0]\n      [(empty? substring)\
    \ 0]\n      [(and (not (empty? string)) (not (empty? substring)) (equal? (first\
    \ string) (first substring)))\n       (+ 1 (count-substring (rest string) (rest\
    \ substring)))]\n      [else (count-substring (rest string) substring)]))\n  (define\
    \ (count-substring-overlapping string substring)\n    (cond\n      [(empty? string)\
    \ 0]\n      [(empty? substring) 0]\n      [(and (not (empty? string)) (not (empty?\
    \ substring)) (equal? (first string) (first substring)))\n       (+ 1 (count-substring-overlapping\
    \ (rest string) (rest substring)))]\n      [else (count-substring-overlapping\
    \ (rest string) substring)]))\n  (count-substring-overlapping string substring))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1zv336i9.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1zv336i9.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1zv336i9.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1zv336i9.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (string-drop string 1) substring (+ count 1)))\n\
    \          (else count)))\n  (how_many_times-iter string substring 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeyf1tu7d.rkt:12:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpeyf1tu7d.rkt:12:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy8axrdyc.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpy8axrdyc.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring count)\n    (cond ((string-length string) count)\n          ((string-contains\
    \ string substring)\n           (count-substring (substring string (add1 (string-length\
    \ substring))) substring (add1 count)))\n          (else (count-substring (substring\
    \ string 1) substring count))))\n  (count-substring string substring 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqpg34yth.rkt:13:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpqpg34yth.rkt:13:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? substring\
    \ \"\") 0)\n          ((string-contains string substring) (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else 0)))\n  (count-substring\
    \ string substring))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n\
    \    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpncoz4xmd.rkt:14:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpncoz4xmd.rkt:14:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpujtpzuvn.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpujtpzuvn.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkgocu093.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpkgocu093.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpkgocu093.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkgocu093.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9z_9ub_a.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9z_9ub_a.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp9z_9ub_a.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9z_9ub_a.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring)) (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphszjlk3d.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphszjlk3d.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphszjlk3d.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphszjlk3d.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (helper string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(string=? (substring string 0 (string-length substring)) substring)\
    \ (helper (substring string 1) substring (+ count 1))]\n      [else (helper (substring\
    \ string 1) substring count)]))\n  (helper string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpywp13ueq.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpywp13ueq.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpywp13ueq.rkt:26:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpywp13ueq.rkt:27:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxf7zmfjq.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpxf7zmfjq.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring)\n       (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (string-drop string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphtvr7fyd.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmphtvr7fyd.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (empty? string)\n        count\n        (if\
    \ (string-contains string substring)\n            (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))\n            count)))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4htstc3i.rkt:14:13: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp4htstc3i.rkt:14:13\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string 1) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpisl0ns64.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpisl0ns64.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bgsryz1.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bgsryz1.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bgsryz1.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bgsryz1.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvy_uyr94.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpvy_uyr94.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (substring string 1) substring (+ count 1)))\n \
    \         (else count)))\n  (how_many_times-iter string substring 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1udjx1xt.rkt:12:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp1udjx1xt.rkt:12:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-empty? string)\n\
    \      0\n      (if (string-contains string substring)\n          (+ 1 (how_many_times\
    \ (string-drop string 1) substring))\n          (how_many_times (string-drop string\
    \ 1) substring))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n\
    \    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0g2un6_1.rkt:11:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp0g2un6_1.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (string-index string\
    \ substring) (string-length string)) substring))\n      0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbe4d8nmv.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpbe4d8nmv.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (helper string substring\
    \ count)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (helper string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptc0sq11u.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmptc0sq11u.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (add1 (string-index string substring))) substring))\n    \
    \    0))\n  (count-substring string substring))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeb0vamof.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpeb0vamof.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (helper string substring\
    \ count)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (add1 (string-index string substring))) substring (add1 count))\n   \
    \     count))\n  (helper string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiqa7kug9.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpiqa7kug9.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8qcgzpbs.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp8qcgzpbs.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond\n      [(empty? string) 0]\n      [(empty? substring)\
    \ 0]\n      [(equal? (first string) (first substring))\n       (+ 1 (count-substring\
    \ (rest string) (rest substring)))]\n      [else (count-substring (rest string)\
    \ substring)]))\n  (count-substring string substring))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18dy_zwh.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp18dy_zwh.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp18dy_zwh.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp18dy_zwh.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? string substring) (+ count 1)]\n      [else\
    \ (how_many_times-iter (substring string 1) substring (if (string=? (substring\
    \ string 0 1) (substring substring 0 1)) (how_many_times-iter (substring string\
    \ 1) (substring substring 1) count) count))]))\n  (how_many_times-iter string\
    \ substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n  \
    \  (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmvjuelj.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpzmvjuelj.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpzmvjuelj.rkt:26:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmvjuelj.rkt:27:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (let loop ([string string]\
    \ [substring substring] [count 0])\n    (cond [(empty? string) count]\n      \
    \    [(empty? substring) count]\n          [(equal? (first string) (first substring))\n\
    \           (loop (rest string) (rest substring) (+ count 1))]\n          [else\
    \ (loop (rest string) substring count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmiw0cq8.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbmiw0cq8.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmiw0cq8.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbmiw0cq8.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (string-drop-right string 1) substring (+ count\
    \ 1)))\n          (else count)))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc6dby9ze.rkt:12:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpc6dby9ze.rkt:12:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (string-drop-right string 1) substring (+ count\
    \ 1)))\n          (else count)))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxrr967tj.rkt:12:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpxrr967tj.rkt:12:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (define (count-substring-iter string substring count)\n    \
    \  (cond ((string-length string) count)\n            ((string-contains string\
    \ substring) (count-substring-iter (substring string 1) substring (+ count 1)))\n\
    \            (else count)))\n    (count-substring-iter string substring 0))\n\
    \  (count-substring string substring))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2r51_0wa.rkt:14:14: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp2r51_0wa.rkt:14:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string 1) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdb5cdrl7.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpdb5cdrl7.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? substring\
    \ \"\") 0)\n          ((string-contains string substring) (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else 0)))\n  (count-substring\
    \ string substring))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n\
    \    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps7417eg_.rkt:14:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmps7417eg_.rkt:14:12\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring)) (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptezktyk2.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptezktyk2.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptezktyk2.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptezktyk2.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuj2jbkbf.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuj2jbkbf.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuj2jbkbf.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuj2jbkbf.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) 0)\n          ((string-contains\
    \ string substring)\n           (how_many_times-iter (substring string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxu25d4r6.rkt:13:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpxu25d4r6.rkt:13:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr9qwxowe.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpr9qwxowe.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplyr5hnpx.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmplyr5hnpx.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2oxqqvu7.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2oxqqvu7.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp2oxqqvu7.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2oxqqvu7.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbsp06k_j.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpbsp06k_j.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond\n      [(empty? string) 0]\n      [(string-contains string\
    \ substring) (+ 1 (count-substring (substring string 1) substring))]\n      [else\
    \ (count-substring (substring string 1) substring)]))\n  (count-substring string\
    \ substring))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n  \
    \  (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr9jejhlm.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpr9jejhlm.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw57xcd1a.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpw57xcd1a.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk09xy1ll.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpk09xy1ll.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpk09xy1ll.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk09xy1ll.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) 0)\n          ((string-prefix?\
    \ substring string)\n           (how_many_times-iter (substring string 1) substring\
    \ (+ count 1)))\n          (else (how_many_times-iter (substring string 1) substring\
    \ count))))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5geu1t50.rkt:24:4

    actual:     0

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5geu1t50.rkt:25:4

    actual:     0

    expected:   4

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5geu1t50.rkt:26:4

    actual:     0

    expected:   1

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring index count)\n    (cond\n      [(empty? string) count]\n  \
    \    [(empty? substring) count]\n      [(equal? (substring string index (+ index\
    \ (string-length substring))) substring)\n       (how_many_times-iter string substring\
    \ (+ index 1) (+ count 1))]\n      [else (how_many_times-iter string substring\
    \ (+ index 1) count)]))\n  (how_many_times-iter string substring 0 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8enq2yj.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpo8enq2yj.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpo8enq2yj.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8enq2yj.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string=? string \"\") count)\n        \
    \  ((string=? substring \"\") count)\n          ((string-contains string substring)\n\
    \           (how_many_times-iter (substring string (+ (string-length substring)\
    \ 1)) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvraauyt6.rkt:14:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpvraauyt6.rkt:14:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (empty? string)\n     \
    \ 0\n      (if (string-contains string substring)\n          (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-length substring))) substring))\n          0)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkhxj14nw.rkt:13:11: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpkhxj14nw.rkt:13:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(string=? string substring) 1]\n    [else\n\
    \     (+ (if (string-contains string substring) 1 0)\n        (how_many_times\
    \ (substring string 1) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpktygp_xq.rkt:16:13: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpktygp_xq.rkt:16:13\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (let loop ((string string)\
    \ (substring substring) (count 0))\n    (if (string-contains string substring)\n\
    \        (loop (substring string (+ (string-length substring) 1)) substring (+\
    \ count 1))\n        count)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplnczvdr1.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmplnczvdr1.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0lie3qry.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp0lie3qry.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (let loop ((string string)\
    \ (substring substring) (count 0))\n    (if (string-contains string substring)\n\
    \        (loop (substring string (+ (string-length substring) 1)) substring (+\
    \ count 1))\n        count)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfp0j6632.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpfp0j6632.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf74fetn0.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpf74fetn0.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond\n      [(empty? string) 0]\n      [(empty? substring)\
    \ 0]\n      [(and (equal? (first string) (first substring))\n            (equal?\
    \ (rest string) (rest substring))) 1]\n      [else (+ (count-substring (rest string)\
    \ substring)\n               (count-substring (rest string) (rest substring)))]))\n\
    \  (count-substring string substring))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphj9b652k.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphj9b652k.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphj9b652k.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphj9b652k.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph_k4z153.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmph_k4z153.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpblyjea8z.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpblyjea8z.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0ivp15wi.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp0ivp15wi.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-length\
    \ substring))) substring))\n      0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn354wvqr.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpn354wvqr.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-length\
    \ substring))) substring))\n      0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1zl716lj.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp1zl716lj.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcm5phyor.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpcm5phyor.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (helper string substring\
    \ count)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (helper string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfmslio8v.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpfmslio8v.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnrzdmk3b.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpnrzdmk3b.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (string-index string\
    \ substring) (string-length string)) substring))\n      0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk19syxh8.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpk19syxh8.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (first string) (first substring)) (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40y6as2l.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp40y6as2l.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp40y6as2l.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp40y6as2l.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(and (string=? (substring string 0 (string-length\
    \ substring)) substring)\n            (string=? (substring string (string-length\
    \ substring)) (substring string 0 (string-length substring))))\n       (how_many_times-iter\
    \ (substring string (string-length substring)) substring (+ count 1))]\n     \
    \ [(string=? (substring string 0 (string-length substring)) substring)\n     \
    \  (how_many_times-iter (substring string 1) substring (+ count 1))]\n      [else\
    \ (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmz8o7n6h.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmz8o7n6h.rkt:29:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpmz8o7n6h.rkt:30:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmz8o7n6h.rkt:31:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond\n      [(empty? string) 0]\n      [(string-contains string\
    \ substring) (+ 1 (count-substring (substring string 1) substring))]\n      [else\
    \ (count-substring (substring string 1) substring)]))\n  (count-substring string\
    \ substring))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n  \
    \  (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj9w490j1.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpj9w490j1.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-replace string substring \"\") substring (+ count\
    \ 1))\n        count))\n  (how_many_times-iter string substring 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpibbp69ow.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpibbp69ow.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (empty? string)\n     \
    \ 0\n      (if (string-contains string substring)\n          (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-length substring))) substring))\n          0)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy6zahl_w.rkt:13:11: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpy6zahl_w.rkt:13:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (helper string substring\
    \ count)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (helper string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzpw3czs0.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpzpw3czs0.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwaja18be.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpwaja18be.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(and (not (empty? substring)) (not (empty? string))\
    \ (equal? (first string) (first substring)))\n           (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n          [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp59hwzxgb.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp59hwzxgb.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp59hwzxgb.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp59hwzxgb.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains? string substring)\n  \
    \         (how_many_times-iter (string-drop string 1) substring (+ count 1)))\n\
    \          (else count)))\n  (how_many_times-iter string substring 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxxv5zqnb.rkt:13:33: string-drop: unbound identifier\n  in: string-drop\n\
    \  location...:\n   /tmp/tmpxxv5zqnb.rkt:13:33\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-length\
    \ substring))) substring))\n      0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1zhc8pdw.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp1zhc8pdw.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4uu5pgo.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmph4uu5pgo.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmph4uu5pgo.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4uu5pgo.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpds8r68u5.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpds8r68u5.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0iu43uzo.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp0iu43uzo.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt4f5vxh8.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpt4f5vxh8.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphooftw_v.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmphooftw_v.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmphooftw_v.rkt:26:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphooftw_v.rkt:27:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj91yjk_r.rkt:14:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpj91yjk_r.rkt:14:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (let loop ((string string)\
    \ (substring substring) (count 0))\n    (cond ((string=? string \"\") count)\n\
    \          ((string=? substring \"\") count)\n          ((string-index string\
    \ substring)\n           (loop (substring string (+ (string-length substring)\
    \ (string-index string substring)))\n                 substring\n            \
    \     (+ count 1)))\n          (else count))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4u0q_6u3.rkt:14:12: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmp4u0q_6u3.rkt:14:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppwom9l25.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmppwom9l25.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring count)\n    (if (string-contains string substring)\n        (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring (+ 1 count))\n\
    \        count))\n  (count-substring string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi9a18oqu.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpi9a18oqu.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond [(empty? string) 0]\n\
    \        [(empty? substring) 0]\n        [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n         (+ 1 (how_many_times (substring string 1) substring))]\n\
    \        [else (how_many_times (substring string 1) substring)]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp69tlyhj6.rkt:22:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp69tlyhj6.rkt:23:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp69tlyhj6.rkt:24:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp69tlyhj6.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_v3qj9u0.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp_v3qj9u0.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz8tzbe7c.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpz8tzbe7c.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string 1) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpexmopx5f.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpexmopx5f.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(and (equal? (first string) (first substring))\n\
    \                (equal? (rest string) (rest substring)))\n           (how_many_times-iter\
    \ (rest string) substring (+ count 1))]\n          [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpajf8didi.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpajf8didi.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpajf8didi.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpajf8didi.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpckq4v3qr.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpckq4v3qr.rkt:11:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpew57_ozi.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpew57_ozi.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpew57_ozi.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpew57_ozi.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? substring\
    \ \"\") 0)\n          ((string-prefix? substring string) (+ 1 (count-substring\
    \ (substring string (string-length substring)) substring)))\n          (else (count-substring\
    \ (substring string 1) substring))))\n  (count-substring string substring))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5lznf0_l.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp5lznf0_l.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"cac\"\n--------------------\n--------------------\nERROR\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp5lznf0_l.rkt:26:4\n\napplication: not a\
    \ procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substrings string\
    \ substring)\n    (cond ((string=? substring \"\") 0)\n          ((string=? string\
    \ \"\") 0)\n          ((string-contains string substring) (+ 1 (count-substrings\
    \ (substring string 1) substring)))\n          (else (count-substrings (substring\
    \ string 1) substring))))\n  (count-substrings string substring))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1il94shc.rkt:14:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp1il94shc.rkt:14:12\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? (substring\
    \ string 0 (string-length substring)) substring)\n           (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else (count-substring (substring\
    \ string 1) substring))))\n  (count-substring string substring))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotj_485z.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpotj_485z.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"cac\"\n--------------------\n--------------------\nERROR\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpotj_485z.rkt:26:4\n\napplication: not a\
    \ procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0emzhsuw.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp0emzhsuw.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp0emzhsuw.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0emzhsuw.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnnqm6s00.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpnnqm6s00.rkt:12:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn31nvai1.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpn31nvai1.rkt:12:9\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond\n      [(empty? string) 0]\n      [(empty? substring)\
    \ 0]\n      [(string=? (first string) (first substring))\n       (+ 1 (count-substring\
    \ (rest string) (rest substring)))]\n      [else (count-substring (rest string)\
    \ substring)]))\n  (define (count-substring-in-string string substring)\n    (cond\n\
    \      [(empty? string) 0]\n      [else (+ (count-substring string substring)\n\
    \               (count-substring-in-string (rest string) substring))]))\n  (count-substring-in-string\
    \ string substring))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n\
    \    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr744dnmu.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpr744dnmu.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr744dnmu.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpr744dnmu.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (substring string 1) substring (+ count 1)))\n \
    \         (else count)))\n  (how_many_times-iter string substring 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu8toe9l1.rkt:12:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpu8toe9l1.rkt:12:12\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphh2qwo27.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphh2qwo27.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphh2qwo27.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphh2qwo27.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(equal? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnwql1jw.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmplnwql1jw.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmplnwql1jw.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnwql1jw.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq3ocrnlk.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq3ocrnlk.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpq3ocrnlk.rkt:27:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq3ocrnlk.rkt:28:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring)) (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq6fc3xzf.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq6fc3xzf.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq6fc3xzf.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq6fc3xzf.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi9ow18id.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpi9ow18id.rkt:11:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (define (count-substring-iter string substring count)\n    \
    \  (cond ((string-contains string substring)\n             (count-substring-iter\
    \ (substring string 1) substring (+ count 1)))\n            (else count)))\n \
    \   (count-substring-iter string substring 0))\n  (count-substring string substring))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm5kb3tdq.rkt:13:14: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpm5kb3tdq.rkt:13:14\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(equal? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdxduo6h.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpsdxduo6h.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpsdxduo6h.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdxduo6h.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
    ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
    ;; 3\n(define (how_many_times string substring)\n  (define (count-substring string\
    \ substring)\n    (cond ((string=? substring \"\") 0)\n          ((string=? string\
    \ \"\") 0)\n          ((string-prefix? substring string) (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else (count-substring (substring\
    \ string 1) substring))))\n  (count-substring string substring))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp09sjxqut.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp09sjxqut.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"cac\"\n--------------------\n--------------------\nERROR\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp09sjxqut.rkt:26:4\n\napplication: not a\
    \ procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"john\"\n--------------------\n"
  stdout: ''
