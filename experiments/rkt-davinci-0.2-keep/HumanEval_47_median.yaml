name: HumanEval_47_median
language: racket
prompt: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
  \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
  \ (median l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
  \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n \
  \   (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
  \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (median-helper l)\n    (cond [(empty? l) empty]\n       \
    \   [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(= (length l) 2) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sorted-l l)\n    (sort l <))\n  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sorted-l l)))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (median-helper l n)\n    (cond\n      [(= n 0) (car l)]\n      [(= n\
    \ 1) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 2) (car (cdr l))]\n      [else\n\
    \       (median-helper (cdr l) (- n 1))]))\n  (median-helper l (length l)))\n",
  "  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n        (/ (+ (list-ref\
    \ sorted (/ (length sorted) 2))\n              (list-ref sorted (- (/ (length\
    \ sorted) 2) 1)))\n           2)\n        (list-ref sorted (/ (length sorted)\
    \ 2)))))\n", "  (define (median-helper l n)\n    (cond\n      [(= n 1) (car l)]\n\
    \      [(= n 2) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 3) (car l)]\n      [else\
    \ (median-helper (cdr l) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define\
    \ (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first\
    \ l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (let ([sorted (sort l <)])\n    (if (even?\
    \ (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted) 2))\n  \
    \            (list-ref sorted (- (/ (length sorted) 2) 1)))\n           2)\n \
    \       (list-ref sorted (/ (length sorted) 2)))))\n", "  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (sorted-list l)\n    (sort\
    \ l <))\n  (define (middle l)\n    (if (even? (length l))\n        (/ (+ (list-ref\
    \ l (/ (length l) 2))\n              (list-ref l (- (/ (length l) 2) 1)))\n  \
    \         2)\n        (list-ref l (/ (length l) 2))))\n  (middle (sorted-list\
    \ l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) (error \"\
    Empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort-list l)\n \
    \   (if (null? l)\n        '()\n        (insert (car l) (sort-list (cdr l)))))\n\
    \  (define (insert x l)\n    (if (null? l)\n        (list x)\n        (if (<=\
    \ x (car l))\n            (cons x l)\n            (cons (car l) (insert x (cdr\
    \ l))))))\n  (define (median-helper l)\n    (if (null? l)\n        0\n       \
    \ (if (null? (cdr l))\n            (car l)\n            (/ (+ (car l) (car (cdr\
    \ l))) 2))))\n  (median-helper (sort-list l)))\n", "  (define (merge-sort l)\n\
    \    (if (null? l)\n        '()\n        (let* ([half-len (quotient (length l)\
    \ 2)]\n               [left (merge-sort (take l half-len))]\n               [right\
    \ (merge-sort (drop l half-len))])\n          (merge left right))))\n  (let* ([sorted\
    \ (merge-sort l)]\n         [len (length sorted)])\n    (if (odd? len)\n     \
    \   (list-ref sorted (quotient len 2))\n        (/ (+ (list-ref sorted (quotient\
    \ len 2))\n              (list-ref sorted (- (quotient len 2) 1)))\n         \
    \  2.0))))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n      \
    \    [(empty? (rest l)) (first l)]\n          [(= (length l) 2) (/ (+ (first l)\
    \ (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n\
    \        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length\
    \ l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else\n       (define pivot (first l))\n       (define left (filter (lambda\
    \ (x) (< x pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x\
    \ pivot)) (rest l)))\n       (append (sort left) (list pivot) (sort right))]])\n\
    \  (define (middle l)\n    (if (empty? l)\n        empty\n        (if (empty?\
    \ (rest l))\n            (first l)\n            (middle (rest l)))))\n  (define\
    \ (average l)\n    (/ (apply + l) (length l)))\n  (define (odd? n)\n    (= (remainder\
    \ n 2) 1))\n  (define (even? n)\n    (not (odd? n)))\n  (define (odd-length? l)\n\
    \    (odd? (length l)))\n  (define (even-length? l)\n    (even? (length l)))\n\
    \  (cond\n    [(empty? l) empty]\n    [(odd-length? l) (middle (sort l))]\n  \
    \  [(even-length? l) (average (list (middle l) (middle (rest l))))]))\n", "  (define\
    \ (sort l)\n    (cond [(empty? l) empty]\n          [else (insert (first l) (sort\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond [(empty? l) (list x)]\n   \
    \       [(< x (first l)) (cons x l)]\n          [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (middle l)\n    (cond [(empty? l) empty]\n      \
    \    [(empty? (rest l)) (first l)]\n          [else (middle (rest l))]))\n  (define\
    \ (average x y)\n    (/ (+ x y) 2))\n  (cond [(empty? l) empty]\n        [(empty?\
    \ (rest l)) (first l)]\n        [(empty? (rest (rest l))) (average (first l) (first\
    \ (rest l)))]\n        [else (middle (sort l))]))\n", "  (define (sort l)\n  \
    \  (cond [(empty? l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert n l)\n    (cond [(empty? l) (list n)]\n          [(< n (first\
    \ l)) (cons n l)]\n          [else (cons (first l) (insert n (rest l)))]))\n \
    \ (define (middle l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l))\
    \ (first l)]\n          [else (middle (rest l))]))\n  (define (first-and-last\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) (list (first\
    \ l) (first l))]\n          [else (cons (first l) (first-and-last (rest (rest\
    \ l))))]))\n  (define (average l)\n    (cond [(empty? l) empty]\n          [(empty?\
    \ (rest l)) (first l)]\n          [else (/ (+ (first l) (first (rest l))) 2)]))\n\
    \  (cond [(empty? l) empty]\n        [(empty? (rest l)) (first l)]\n        [(empty?\
    \ (rest (rest l))) (first l)]\n        [else (average (first-and-last (sort l)))]))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) (error \"empty list\"\
    )]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else\n       (define (insert-in-order x l)\n         (cond\n         \
    \  [(empty? l) (list x)]\n           [(< x (first l)) (cons x l)]\n          \
    \ [else (cons (first l) (insert-in-order x (rest l)))])\n         )\n       (insert-in-order\
    \ (first l) (sort-list (rest l)))]))\n  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort-list l)))\n", "  (define (median-iter l)\n\
    \    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n         \
    \ [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-iter\
    \ (rest l))]))\n  (median-iter (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n  \
    \    [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) (error \"empty list\")]\n      [(empty? (rest l))\
    \ (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define\
    \ pivot (first l))\n       (define left (filter (lambda (x) (< x pivot)) (rest\
    \ l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest l)))\n  \
    \     (append (sort left) (list pivot) (sort right))]])\n  (define (middle l)\n\
    \    (if (empty? l)\n        empty\n        (if (empty? (rest l))\n          \
    \  (first l)\n            (middle (rest l)))))\n  (define (middle-two l)\n   \
    \ (if (empty? l)\n        empty\n        (if (empty? (rest l))\n            empty\n\
    \            (if (empty? (rest (rest l)))\n                (first l)\n       \
    \         (if (empty? (rest (rest (rest l))))\n                    (list (first\
    \ l) (first (rest l)))\n                    (middle-two (rest (rest l))))))))\n\
    \  (define (average l)\n    (if (empty? l)\n        empty\n        (/ (apply +\
    \ l) (length l))))\n  (define sorted (sort l))\n  (if (empty? sorted)\n      empty\n\
    \      (if (empty? (rest sorted))\n          (first sorted)\n          (if (empty?\
    \ (rest (rest sorted)))\n              (average (middle-two sorted))\n       \
    \       (middle sorted)))))\n", "  (define (sort-list l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [else\n       (define (insert x l)\n         (cond\n      \
    \     [(empty? l) (list x)]\n           [(< x (first l)) (cons x l)]\n       \
    \    [else (cons (first l) (insert x (rest l)))]))\n       (insert (first l) (sort-list\
    \ (rest l)))]))\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort-list l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else\n       (let ([mid (quotient (length l) 2)])\n\
    \         (median-helper (sort l <)))]))\n  (median-helper l))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define\
    \ (insert x l)\n         (cond\n           [(empty? l) (list x)]\n           [(<\
    \ x (first l)) (cons x l)]\n           [else (cons (first l) (insert x (rest l)))]))\n\
    \       (insert (first l) (sort (rest l)))]))\n  (define (median-helper l)\n \
    \   (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n   \
    \   [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n     \
    \ [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first\
    \ l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n\
    \          [else\n           (let* ([mid (quotient (length l) 2)]\n          \
    \        [left (take l mid)]\n                  [right (drop l mid)])\n      \
    \       (if (= (first left) (first right))\n                 (first left)\n  \
    \               (median-helper (append left (rest right)))))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (sort-list l)\n    (sort l <))\n\
    \  (define (median-helper l)\n    (if (null? l)\n        0\n        (if (= (length\
    \ l) 1)\n            (car l)\n            (if (= (length l) 2)\n             \
    \   (/ (+ (car l) (cadr l)) 2)\n                (if (= (modulo (length l) 2) 0)\n\
    \                    (/ (+ (list-ref l (/ (length l) 2)) (list-ref l (- (/ (length\
    \ l) 2) 1))) 2)\n                    (list-ref l (/ (length l) 2)))))))\n  (median-helper\
    \ (sort-list l)))\n", "  (define (median-helper l)\n    (if (null? l)\n      \
    \  0\n        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length\
    \ l)))\n", "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (filter (lambda (x) (< x\
    \ pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest\
    \ l)))\n       (append (sort left) (list pivot) (sort right))]])\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n     \
    \ [else (median-helper (rest l))]))\n  (median-helper (sort l)))\n", "  (define\
    \ (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l))\
    \ (first l)]\n          [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n  \
    \        [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n        (/ (+ (list-ref\
    \ sorted (/ (length sorted) 2))\n              (list-ref sorted (- (/ (length\
    \ sorted) 2) 1)))\n           2)\n        (list-ref sorted (/ (length sorted)\
    \ 2)))))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (if (null?\
    \ l)\n        (error \"median: empty list\")\n        (if (null? (cdr l))\n  \
    \          (car l)\n            (if (null? (cddr l))\n                (/ (+ (car\
    \ l) (cadr l)) 2)\n                (median-helper (cdr l))))))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (if (null?\
    \ l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper\
    \ l) (length l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n \
    \ (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond\n  \
    \    [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/\
    \ (median-helper l) (length l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (sorted-l l)\n    (sort\
    \ l <))\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(=\
    \ (length l) 1) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second l))\
    \ 2)]\n      [else\n       (define (median-helper-helper l)\n         (cond\n\
    \           [(empty? l) 0]\n           [(= (length l) 1) (first l)]\n        \
    \   [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n           [else\n    \
    \        (define (median-helper-helper-helper l)\n              (cond\n      \
    \          [(empty? l) 0]\n                [(= (length l) 1) (first l)]\n    \
    \            [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n             \
    \   [else\n                 (median-helper-helper-helper (rest (rest l)))]))\n\
    \            (median-helper-helper-helper (rest (rest l)))]))\n       (median-helper-helper\
    \ (rest (rest l)))]))\n  (median-helper (sorted-l l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sorted-list l)\n\
    \    (sort l <))\n  (define (middle l)\n    (if (even? (length l))\n        (/\
    \ (+ (list-ref l (/ (length l) 2))\n              (list-ref l (- (/ (length l)\
    \ 2) 1)))\n           2)\n        (list-ref l (/ (length l) 2))))\n  (middle (sorted-list\
    \ l)))\n", "  (define (sort-list l)\n    (cond [(empty? l) empty]\n          [else\
    \ (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n    (cond\
    \ [(empty? l) (list x)]\n          [(< x (first l)) (cons x l)]\n          [else\
    \ (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n    (if (empty?\
    \ (rest l))\n        (first l)\n        (middle (rest l))))\n  (define (middle-two\
    \ l)\n    (if (empty? (rest (rest l)))\n        (first l)\n        (middle-two\
    \ (rest (rest l)))))\n  (define (even? l)\n    (empty? (rest (rest l))))\n  (define\
    \ (odd? l)\n    (not (even? l)))\n  (if (even? l)\n      (/ (+ (middle-two (sort-list\
    \ l)) (middle (sort-list l))) 2)\n      (middle (sort-list l))))\n", "  (let ([sorted\
    \ (sort l <)])\n    (if (even? (length sorted))\n        (/ (+ (list-ref sorted\
    \ (/ (length sorted) 2))\n              (list-ref sorted (- (/ (length sorted)\
    \ 2) 1)))\n           2)\n        (list-ref sorted (/ (length sorted) 2)))))\n",
  "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define\
    \ pivot (first l))\n       (define left (filter (lambda (x) (< x pivot)) (rest\
    \ l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest l)))\n  \
    \     (append (sort left) (list pivot) (sort right))]])\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sorted-list l)\n\
    \    (sort l <))\n  (define (middle l)\n    (if (even? (length l))\n        (/\
    \ (+ (list-ref l (/ (length l) 2))\n              (list-ref l (- (/ (length l)\
    \ 2) 1)))\n           2)\n        (list-ref l (/ (length l) 2))))\n  (middle (sorted-list\
    \ l)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n      \
    \  (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond\n \
    \     [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(= (length l)\
    \ 2) (/ (+ (first l) (second l)) 2)]\n      [else\n       (let ([mid (quotient\
    \ (length l) 2)])\n         (median-helper (list (list-ref l mid) (list-ref l\
    \ (- mid 1)))))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) (error \"Empty list\")]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (if (null?\
    \ l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper\
    \ l) (length l)))\n", "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else\n       (define pivot (first l))\n       (define left (sort (filter\
    \ (lambda (x) (< x pivot)) (rest l))))\n       (define right (sort (filter (lambda\
    \ (x) (>= x pivot)) (rest l))))\n       (append left (cons pivot right))]])\n\
    \  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (first\
    \ (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n\
    \        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length\
    \ l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n   \
    \   [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ (error \"median: empty list\")]\n      [(empty? (rest l)) (first l)]\n     \
    \ [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-iter l acc)\n\
    \    (if (null? l)\n        acc\n        (median-iter (cdr l) (cons (car l) acc))))\n\
    \  (define (median-helper l)\n    (if (null? l)\n        0\n        (if (= (length\
    \ l) 1)\n            (car l)\n            (/ (+ (car l) (car (cdr l))) 2))))\n\
    \  (median-helper (sort (median-iter l '()) <)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (sort l)\n    (cond [(empty? l) empty]\n          [else (insert (first\
    \ l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond [(empty? l) (list\
    \ x)]\n          [(< x (first l)) (cons x l)]\n          [else (cons (first l)\
    \ (insert x (rest l)))]))\n  (define (middle l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [else (middle (rest l))]))\n\
    \  (define (average x y)\n    (/ (+ x y) 2))\n  (cond [(empty? l) empty]\n   \
    \     [(empty? (rest l)) (first l)]\n        [(empty? (rest (rest l))) (average\
    \ (first l) (first (rest l)))]\n        [else (middle (sort l))]))\n", "  (define\
    \ (median-helper l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l))\
    \ (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n        (/ (+ (list-ref\
    \ sorted (/ (length sorted) 2))\n              (list-ref sorted (- (/ (length\
    \ sorted) 2) 1)))\n           2)\n        (list-ref sorted (/ (length sorted)\
    \ 2)))))\n", "  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n     \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"empty list\")]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest\
    \ l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l\
    \ <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n   \
    \   [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (if (empty? l)\n        0\n\
    \        (+ (first l) (median-helper (rest l)))))\n  (/ (median-helper l) (length\
    \ l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else\n       (define (insert x l)\n         (cond\n           [(empty?\
    \ l) (list x)]\n           [(< x (first l)) (cons x l)]\n           [else (cons\
    \ (first l) (insert x (rest l)))]))\n       (insert (first l) (sort (rest l)))]))\n\
    \  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (first\
    \ (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l)))\n", "  (let ([sorted (sort l &lt;)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n</code>\n", "  (define (sort-list l)\n    (cond\n\
    \      [(empty? l) empty]\n      [else\n       (define (insert-in-order x l)\n\
    \         (cond\n           [(empty? l) (list x)]\n           [(< x (first l))\
    \ (cons x l)]\n           [else (cons (first l) (insert-in-order x (rest l)))])\n\
    \         )\n       (insert-in-order (first l) (sort-list (rest l)))]))\n  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest\
    \ l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort-list\
    \ l)))\n", "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define smaller (filter (lambda (x) (<\
    \ x pivot)) (rest l)))\n       (define larger (filter (lambda (x) (>= x pivot))\
    \ (rest l)))\n       (append (sort smaller) (list pivot) (sort larger))]))\n \
    \ (define (middle l)\n    (if (empty? l)\n        empty\n        (if (empty? (rest\
    \ l))\n            (first l)\n            (middle (rest l)))))\n  (define (middle-two\
    \ l)\n    (if (empty? l)\n        empty\n        (if (empty? (rest l))\n     \
    \       empty\n            (if (empty? (rest (rest l)))\n                (list\
    \ (first l) (first (rest l)))\n                (middle-two (rest (rest l)))))))\n\
    \  (define (average l)\n    (/ (apply + l) (length l)))\n  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l)))\
    \ (average (list (first l) (first (rest l))))]\n    [else\n     (define sorted\
    \ (sort l))\n     (define middle-two (middle-two sorted))\n     (if (empty? middle-two)\n\
    \         (middle sorted)\n         (average middle-two))]))\n", "  (define (sort-list\
    \ l)\n    (sort l <))\n  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n \
    \ (median-helper (sort-list l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(= (length\
    \ l) 2) (/ (+ (first l) (second l)) 2)]\n      [else\n       (let ([mid (quotient\
    \ (length l) 2)])\n         (median-helper (append (take l mid) (drop l (+ mid\
    \ 1)))))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n  \
    \    [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define pivot (first\
    \ l))\n       (define left (filter (lambda (x) (< x pivot)) (rest l)))\n     \
    \  (define right (filter (lambda (x) (>= x pivot)) (rest l)))\n       (append\
    \ (sort left) (list pivot) (sort right))]])\n  (define (middle l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (middle\
    \ (rest l))]))\n  (define (average l)\n    (/ (apply + l) (length l)))\n  (cond\n\
    \    [(empty? l) empty]\n    [(empty? (rest l)) (first l)]\n    [(even? (length\
    \ l)) (average (list (middle l) (middle (rest l))))]\n    [else (middle l)]))\n",
  "  (define (sort-list l)\n    (cond [(empty? l) empty]\n          [else (insert\
    \ (first l) (sort-list (rest l)))]))\n  (define (insert n l)\n    (cond [(empty?\
    \ l) (list n)]\n          [(< n (first l)) (cons n l)]\n          [else (cons\
    \ (first l) (insert n (rest l)))]))\n  (define (middle l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [else (middle\
    \ (rest l))]))\n  (define (middle-2 l)\n    (cond [(empty? l) empty]\n       \
    \   [(empty? (rest l)) empty]\n          [(empty? (rest (rest l))) (first l)]\n\
    \          [else (middle-2 (rest (rest l)))]))\n  (define (sum-2 l)\n    (cond\
    \ [(empty? l) 0]\n          [(empty? (rest l)) 0]\n          [else (+ (first l)\
    \ (first (rest l)))]))\n  (define (sum-3 l)\n    (cond [(empty? l) 0]\n      \
    \    [(empty? (rest l)) 0]\n          [(empty? (rest (rest l))) 0]\n         \
    \ [else (+ (first l) (first (rest l)) (first (rest (rest l))))]))\n  (cond [(empty?\
    \ l) empty]\n        [(empty? (rest l)) (first l)]\n        [(empty? (rest (rest\
    \ l))) (/ (sum-2 l) 2)]\n        [(empty? (rest (rest (rest l)))) (middle l)]\n\
    \        [else (/ (sum-3 l) 3)]))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n          [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort-list l)\n \
    \   (cond\n      [(empty? l) empty]\n      [else (insert (first l) (sort-list\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond\n      [(empty? l) (list x)]\n\
    \      [(< x (first l)) (cons x l)]\n      [else (cons (first l) (insert x (rest\
    \ l)))]))\n  (define (middle l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) (first l)]\n      [else (middle (rest l))]))\n  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (first (rest l))) 2)]\n    [else (middle (sort-list l))]))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (first (rest l))) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l\
    \ n)\n    (cond\n      [(= n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr l))\
    \ 2)]\n      [(= n 3) (car l)]\n      [else\n       (let ([mid (/ n 2)])\n   \
    \      (cond\n           [(= (modulo n 2) 0)\n            (median-helper (cdr\
    \ l) (- n 1))]\n           [else\n            (median-helper (cdr l) (- n 1))]))]))\n\
    \  (median-helper l (length l)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [else\n       (define pivot (first l))\n       (define left\
    \ (filter (lambda (x) (< x pivot)) (rest l)))\n       (define right (filter (lambda\
    \ (x) (>= x pivot)) (rest l)))\n       (append (sort left) (list pivot) (sort\
    \ right))]])\n  (define (middle l)\n    (if (empty? l)\n        empty\n      \
    \  (if (empty? (rest l))\n            (first l)\n            (middle (rest l)))))\n\
    \  (define (average l)\n    (/ (apply + l) (length l)))\n  (define (odd? n)\n\
    \    (= (remainder n 2) 1))\n  (define (even? n)\n    (not (odd? n)))\n  (if (empty?\
    \ l)\n      empty\n      (if (odd? (length l))\n          (middle (sort l))\n\
    \          (average (list (middle (sort l)) (middle (rest (sort l))))))))\n",
  "  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n        (/ (+ (list-ref\
    \ sorted (/ (length sorted) 2))\n              (list-ref sorted (- (/ (length\
    \ sorted) 2) 1)))\n           2)\n        (list-ref sorted (/ (length sorted)\
    \ 2)))))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n\
    \        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length\
    \ l)))\n", "  (define (median-iter l acc)\n    (if (null? l)\n        (if (null?\
    \ (cdr acc))\n            (car acc)\n            (/ (+ (car acc) (cadr acc)) 2))\n\
    \        (median-iter (cdr l) (insert-into-sorted-list (car l) acc))))\n  (median-iter\
    \ l '()))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n       \
    \   [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond\n \
    \     [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort-list l)\n \
    \   (cond\n      [(empty? l) empty]\n      [else (insert (first l) (sort-list\
    \ (rest l)))]))\n  (define (insert x l)\n    (cond\n      [(empty? l) (list x)]\n\
    \      [(< x (first l)) (cons x l)]\n      [else (cons (first l) (insert x (rest\
    \ l)))]))\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n    \
    \  [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort-list l)))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n\
    \      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n \
    \   (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) empty]\n      [(empty?\
    \ (rest (rest l))) (first l)]\n      [else (middle (rest l))]))\n  (define (average\
    \ x y)\n    (/ (+ x y) 2))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest\
    \ l)) (first l)]\n    [(empty? (rest (rest l))) (average (first l) (first (rest\
    \ l)))]\n    [else (cond\n            [(even? (length l)) (average (middle l)\
    \ (middle (rest l)))]\n            [else (middle (sort-list l))])]))\n", "  (define\
    \ (median-helper l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper\
    \ (cdr l)))))\n  (/ (median-helper l) (length l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) (error \"empty list\")]\n      [(empty? (rest l))\
    \ (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n  \
    \    [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", " \
    \ (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [else\n       (define pivot (first l))\n       (define left\
    \ (filter (lambda (x) (< x pivot)) (rest l)))\n       (define right (filter (lambda\
    \ (x) (>= x pivot)) (rest l)))\n       (append (sort left) (list pivot) (sort\
    \ right))]])\n  (define (middle l)\n    (if (empty? l)\n        empty\n      \
    \  (if (empty? (rest l))\n            (first l)\n            (middle (rest l)))))\n\
    \  (define sorted (sort l))\n  (if (empty? sorted)\n      empty\n      (if (empty?\
    \ (rest sorted))\n          (first sorted)\n          (/ (+ (middle sorted) (middle\
    \ (rest sorted))) 2.0))))\n", "  (define (sort l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [else\n       (define pivot (first l))\n       (define left (filter\
    \ (lambda (x) (< x pivot)) (rest l)))\n       (define right (filter (lambda (x)\
    \ (>= x pivot)) (rest l)))\n       (append (sort left) (list pivot) (sort right))]])\n\
    \  (define (middle l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (middle (rest l))]))\n  (define (average x y)\n\
    \    (/ (+ x y) 2))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (first\
    \ l)]\n    [(empty? (rest (rest l))) (average (first l) (first (rest l)))]\n \
    \   [else\n     (define sorted (sort l))\n     (if (even? (length l))\n      \
    \   (average (middle sorted) (middle (rest sorted)))\n         (middle sorted))]))\n",
  "  (define (sort-list l)\n    (cond\n      [(null? l) '()]\n      [else (append\
    \ (sort-list (filter (lambda (x) (< x (car l))) (cdr l)))\n                  \
    \  (cons (car l)\n                          (sort-list (filter (lambda (x) (>=\
    \ x (car l))) (cdr l)))))]))\n  (define (median-helper l)\n    (cond\n      [(null?\
    \ l) 0]\n      [(null? (cdr l)) (car l)]\n      [else (/ (+ (car l) (car (cdr\
    \ l))) 2)]))\n  (median-helper (sort-list l)))\n", "  (let ([sorted (sort l <)])\n\
    \    (if (even? (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted)\
    \ 2))\n              (list-ref sorted (- (/ (length sorted) 2) 1)))\n        \
    \   2)\n        (list-ref sorted (/ (length sorted) 2)))))\n", "  (define (sort\
    \ l)\n    (if (null? l)\n        '()\n        (append (sort (filter (lambda (x)\
    \ (< x (car l))) (cdr l)))\n                (cons (car l)\n                  \
    \    (sort (filter (lambda (x) (>= x (car l))) (cdr l)))))))\n  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (if (= (length l) 1)\n           \
    \ (car l)\n            (/ (+ (car l) (cadr l)) 2))))\n  (median-helper (sort l)))\n",
  "  (define (median-helper l n)\n    (cond\n      [(empty? l) 0]\n      [(= n 1)\
    \ (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (sort-list\
    \ l)\n    (sort l <))\n  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [(even? (length l)) (/ (+\
    \ (list-ref l (/ (length l) 2)) (list-ref l (- (/ (length l) 2) 1))) 2)]\n   \
    \   [else (list-ref l (/ (length l) 2))]))\n  (median-helper (sort-list l)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond\n \
    \     [(empty? l) (error \"Empty list!\")]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (let ([sorted (sort l <)])\n\
    \    (if (even? (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted)\
    \ 2))\n              (list-ref sorted (- (/ (length sorted) 2) 1)))\n        \
    \   2)\n        (list-ref sorted (/ (length sorted) 2)))))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(even?\
    \ (length l)) (/ (+ (first l) (first (rest l))) 2)]\n      [else (first (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (if (empty? l)\n        0\n        (+ (first l) (median-helper (rest l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) (error \"Empty list\")]\n          [(empty? (rest l)) (first\
    \ l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n        (/ (+ (list-ref\
    \ sorted (/ (length sorted) 2))\n              (list-ref sorted (- (/ (length\
    \ sorted) 2) 1)))\n           2)\n        (list-ref sorted (/ (length sorted)\
    \ 2)))))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/\
    \ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n    (if (=\
    \ n 1)\n        (car l)\n        (if (= n 2)\n            (/ (+ (car l) (cadr\
    \ l)) 2)\n            (median-helper (cdr l) (- n 1)))))\n  (median-helper l (length\
    \ l)))\n", "  (define (median-helper l)\n    (if (empty? l)\n        (error \"\
    median: empty list\")\n        (let ([n (length l)])\n          (if (odd? n)\n\
    \              (list-ref l (quotient n 2))\n              (/ (+ (list-ref l (quotient\
    \ n 2))\n                    (list-ref l (- (quotient n 2) 1)))\n            \
    \     2.0)))))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n         \
    \ [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sorted-list l)\n\
    \    (sort l <))\n  (define (middle-element l)\n    (if (even? (length l))\n \
    \       (/ (+ (list-ref l (/ (length l) 2))\n              (list-ref l (- (/ (length\
    \ l) 2) 1)))\n           2)\n        (list-ref l (/ (length l) 2))))\n  (middle-element\
    \ (sorted-list l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n \
    \ (median-helper (sort l <)))\n", "  (let ([sorted (sort l <)])\n    (if (even?\
    \ (length sorted))\n        (/ (+ (list-ref sorted (/ (length sorted) 2))\n  \
    \            (list-ref sorted (- (/ (length sorted) 2) 1)))\n           2)\n \
    \       (list-ref sorted (/ (length sorted) 2)))))\n", "  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond [(empty? l) (error \"Empty list\")]\n          [(empty? (rest l)) (first\
    \ l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (sort-list l)\n    (sort l <))\n  (define (get-middle l)\n    (if (even?\
    \ (length l))\n        (/ (+ (list-ref l (/ (length l) 2))\n              (list-ref\
    \ l (- (/ (length l) 2) 1)))\n           2)\n        (list-ref l (/ (length l)\
    \ 2))))\n  (get-middle (sort-list l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(= (length\
    \ l) 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond\n \
    \     [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sorted-l l)\n  \
    \  (sort l <))\n  (define (middle l)\n    (if (even? (length l))\n        (/ (+\
    \ (list-ref l (/ (length l) 2))\n              (list-ref l (- (/ (length l) 2)\
    \ 1)))\n           2)\n        (list-ref l (/ (length l) 2))))\n  (middle (sorted-l\
    \ l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n   \
    \   [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ (error \"Empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (sort-list l)\n \
    \   (cond\n      [(empty? l) empty]\n      [else\n       (define (insert-element\
    \ x l)\n         (cond\n           [(empty? l) (list x)]\n           [(< x (first\
    \ l)) (cons x l)]\n           [else (cons (first l) (insert-element x (rest l)))]))\n\
    \       (insert-element (first l) (sort-list (rest l)))]))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort-list l)))\n", "  (define\
    \ (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first\
    \ l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (sort-list l)\n    (cond\n      [(null? l) '()]\n      [else (insert\
    \ (car l) (sort-list (cdr l)))]))\n  (define (insert n l)\n    (cond\n      [(null?\
    \ l) (list n)]\n      [(< n (car l)) (cons n l)]\n      [else (cons (car l) (insert\
    \ n (cdr l)))]))\n  (define (median-helper l)\n    (cond\n      [(null? l) 0]\n\
    \      [(null? (cdr l)) (car l)]\n      [(null? (cdr (cdr l))) (/ (+ (car l) (cadr\
    \ l)) 2)]\n      [else (median-helper (cdr l))]))\n  (median-helper (sort-list\
    \ l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n   \
    \   [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else\n       (insert (first l) (sort-list (rest l)))]))\n  (define (insert\
    \ n l)\n    (cond\n      [(empty? l) (list n)]\n      [(< n (first l)) (cons n\
    \ l)]\n      [else (cons (first l) (insert n (rest l)))]))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort-list l)))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest\
    \ l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l\
    \ <)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n      \
    \  (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper (sort\
    \ l <)))\n", "  (let ([sorted (sort l <)])\n    (if (odd? (length sorted))\n \
    \       (list-ref sorted (/ (length sorted) 2))\n        (/ (+ (list-ref sorted\
    \ (/ (length sorted) 2))\n              (list-ref sorted (- (/ (length sorted)\
    \ 2) 1)))\n           2.0))))\n", "  (define (sort l)\n    (cond\n      [(null?\
    \ l) '()]\n      [else (insert (car l) (sort (cdr l)))]))\n  (define (insert x\
    \ l)\n    (cond\n      [(null? l) (list x)]\n      [(<= x (car l)) (cons x l)]\n\
    \      [else (cons (car l) (insert x (cdr l)))]))\n  (define (middle l)\n    (cond\n\
    \      [(null? l) '()]\n      [(null? (cdr l)) (car l)]\n      [else (middle (cdr\
    \ l))]))\n  (define (length l)\n    (cond\n      [(null? l) 0]\n      [else (+\
    \ 1 (length (cdr l)))]))\n  (define (nth-element l n)\n    (cond\n      [(= n\
    \ 0) (car l)]\n      [else (nth-element (cdr l) (- n 1))]))\n  (define (nth-element-from-end\
    \ l n)\n    (nth-element (reverse l) n))\n  (define (average x y)\n    (/ (+ x\
    \ y) 2))\n  (cond\n    [(= (length l) 0) 0]\n    [(= (modulo (length l) 2) 0)\n\
    \     (average (nth-element (sort l) (/ (length l) 2))\n              (nth-element-from-end\
    \ (sort l) (/ (length l) 2)))]\n    [else (middle (sort l))]))\n", "  (define\
    \ (median-helper l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper\
    \ (cdr l)))))\n  (/ (median-helper l) (length l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n     \
    \ [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
