name: HumanEval_141_file_name_check
language: racket
results:
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptkll04rg.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name name)\n\
    \    (define (has_more_than_three_digits name)\n      (if (equal? (string-length\
    \ (regexp-match #rx\"[0-9]\" name)) 4)\n          #t\n          #f))\n    (define\
    \ (has_exactly_one_dot name)\n      (if (equal? (string-length (regexp-match #rx\"\
    \\.\" name)) 1)\n          #t\n          #f))\n    (define (starts_with_letter\
    \ name)\n      (if (equal? (string-length (regexp-match #rx\"[a-zA-Z]\" name))\
    \ 1)\n          #t\n          #f))\n    (and (not (has_more_than_three_digits\
    \ name))\n         (has_exactly_one_dot name)\n         (starts_with_letter name)))\n\
    \  (define (get_extension file_name)\n    (regexp-match #rx\"\\.[a-zA-Z]+\" file_name))\n\
    \  (define (get_name file_name)\n    (regexp-match #rx\"[a-zA-Z]+\" file_name))\n\
    \  (cond\n    [(is_valid_name (get_name file_name))\n     (if (is_valid_extension\
    \ (get_extension file_name))\n         \"Yes\"\n         \"No\")]\n    [else \"\
    No\"]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx80dfqf1.rkt:28:47: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n   \
    \   [else #f]))\n  (define (is_valid_file_name? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (define (is_valid_number_of_digits? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"[0-9]{4}\" file_name) #f]\n      [else #t]))\n  (define (is_valid_file_name_with_extension?\
    \ file_name)\n    (cond\n      [(and (is_valid_file_name? file_name) (is_valid_number_of_digits?\
    \ file_name)) #t]\n      [else #f]))\n  (define (is_valid_file_name_with_extension_and_extension?\
    \ file_name)\n    (cond\n      [(and (is_valid_file_name_with_extension? file_name)\
    \ (is_valid_extension? (substring file_name (string-index file_name #\\.)))) #t]\n\
    \      [else #f]))\n  (cond\n    [(is_valid_file_name_with_extension_and_extension?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmz77t3yu.rkt:40:102: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmpmz77t3yu.rkt:40:102\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(and\n      (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name)\n      (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name)\n      (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n\
    \     \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvl2w2i6.rkt:29:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvl2w2i6.rkt:32:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvl2w2i6.rkt:33:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvl2w2i6.rkt:39:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvl2w2i6.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvl2w2i6.rkt:46:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvl2w2i6.rkt:47:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwg3101q.rkt:27:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwg3101q.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwg3101q.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwg3101q.rkt:37:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwg3101q.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwg3101q.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwg3101q.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcp84rjgg.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-extension file_name)\n    (cond\n      [(string=?\
    \ (substring file_name (add1 (string-length file_name)) (string-length file_name))\
    \ \"txt\") 'Yes]\n      [(string=? (substring file_name (add1 (string-length file_name))\
    \ (string-length file_name)) \"exe\") 'Yes]\n      [(string=? (substring file_name\
    \ (add1 (string-length file_name)) (string-length file_name)) \"dll\") 'Yes]\n\
    \      [else 'No]))\n  (define (check-name file_name)\n    (cond\n      [(string=?\
    \ (substring file_name 0 1) \"0\") 'No]\n      [(string=? (substring file_name\
    \ 0 1) \"1\") 'No]\n      [(string=? (substring file_name 0 1) \"2\") 'No]\n \
    \     [(string=? (substring file_name 0 1) \"3\") 'No]\n      [(string=? (substring\
    \ file_name 0 1) \"4\") 'No]\n      [(string=? (substring file_name 0 1) \"5\"\
    ) 'No]\n      [(string=? (substring file_name 0 1) \"6\") 'No]\n      [(string=?\
    \ (substring file_name 0 1) \"7\") 'No]\n      [(string=? (substring file_name\
    \ 0 1) \"8\") 'No]\n      [(string=? (substring file_name 0 1) \"9\") 'No]\n \
    \     [(string=? (substring file_name 0 1) \"a\") 'Yes]\n      [(string=? (substring\
    \ file_name 0 1) \"b\") 'Yes]\n      [(string=? (substring file_name 0 1) \"c\"\
    ) 'Yes]\n      [(string=? (substring file_name 0 1) \"d\") 'Yes]\n      [(string=?\
    \ (substring file_name 0 1) \"e\") 'Yes]\n      [(string=? (substring file_name\
    \ 0 1) \"f\") 'Yes]\n      [(string=? (substring file_name 0 1) \"g\") 'Yes]\n\
    \      [(\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn_2i409b.rkt:41:7: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 42\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuj4alzna.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz9ooj397.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpznl47ifg.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-extension extension)\n    (cond\n      [(string=?\
    \ extension \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (check-name name)\n   \
    \ (cond\n      [(string-empty? name) #f]\n      [(char-alphabetic? (string-ref\
    \ name 0)) #t]\n      [else #f]))\n  (define (check-digits digits)\n    (cond\n\
    \      [(> digits 3) #f]\n      [else #t]))\n  (define (check-dot dot)\n    (cond\n\
    \      [(string=? dot \".\") #t]\n      [else #f]))\n  (define (check-file-name\
    \ file_name)\n    (cond\n      [(string-empty? file_name) #f]\n      [(check-extension\
    \ (substring file_name (+ (string-index file_name \".\") 1))) #t]\n      [else\
    \ #f]))\n  (cond\n    [(check-file-name file_name) #t]\n    [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp50tqmxi9.rkt:24:8: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp50tqmxi9.rkt:24:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy77d95v7.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (if (and (regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\\.txt$\" file_name)\n\
    \          (not (regexp-match #rx\"\\\\d{4}\" file_name)))\n      \"Yes\"\n  \
    \    \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate file_name_check))\n    (check-equal? (candidate \"example.txt\") \"\
    Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1czopb5.rkt:29:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1czopb5.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1czopb5.rkt:36:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1czopb5.rkt:42:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1czopb5.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (if (and (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\"\
    \ file_name)\n          (not (regexp-match? #rx\"[0-9]{4}\" file_name))\n    \
    \      (regexp-match? #rx\"\\.[a-zA-Z]{3}$\" file_name))\n      \"Yes\"\n    \
    \  \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk32qfmj7.rkt:16:26: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa4q5wqtc.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-extension ext)\n    (cond\n      [(equal? ext \"\
    txt\") #t]\n      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n\
    \      [else #f]))\n  (define (check-name name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n      [else #f]))\n  (define (check-digits\
    \ digits)\n    (cond\n      [(> (string-length digits) 3) #f]\n      [else #t]))\n\
    \  (define (check-file-name file-name)\n    (let ([parts (string-split file-name\
    \ \"\\\\.\")])\n      (cond\n        [(equal? (length parts) 2)\n         (and\
    \ (check-name (first parts))\n              (check-extension (second parts)))]\n\
    \        [else #f])))\n  (cond\n    [(check-file-name file_name) \"Yes\"]\n  \
    \  [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f0u72bl.rkt:46:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f0u72bl.rkt:49:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f0u72bl.rkt:50:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f0u72bl.rkt:56:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f0u72bl.rkt:62:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f0u72bl.rkt:63:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f0u72bl.rkt:64:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp331u5kzy.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi6irpi59.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .txt$\" file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n\
    \     \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2qgyahe.rkt:28:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2qgyahe.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2qgyahe.rkt:32:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2qgyahe.rkt:38:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2qgyahe.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2qgyahe.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2qgyahe.rkt:46:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (or (equal? extension\
    \ \"txt\")\n        (equal? extension \"exe\")\n        (equal? extension \"dll\"\
    )))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match\
    \ #rx\"[a-zA-Z]\" name)))\n  (define (is_valid_file_name? file_name)\n    (let*\
    \ ([parts (regexp-split #rx\"\\.\" file_name)]\n           [extension (last parts)]\n\
    \           [name (string-join (butlast parts) \".\")])\n      (and (is_valid_extension?\
    \ extension)\n           (is_valid_name? name)\n           (not (regexp-match\
    \ #rx\"[0-9]{4,}\" name)))))\n  (if (is_valid_file_name? file_name)\n      \"\
    Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpri1rn1zp.rkt:24:32: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? ext)\n    (cond ((equal? ext \"txt\"\
    ) #t)\n          ((equal? ext \"exe\") #t)\n          ((equal? ext \"dll\") #t)\n\
    \          (else #f)))\n  (define (is_valid_name? name)\n    (cond ((regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}$\" name) #t)\n          (else #f)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (cond ((equal? (length (regexp-match #rx\"\\.\" file_name))\
    \ 1) #t)\n          (else #f)))\n  (define (is_valid_file_name_with_extension?\
    \ file_name)\n    (cond ((and (is_valid_file_name? file_name)\n              \
    \  (is_valid_name? (car (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\" file_name)))\n\
    \                (is_valid_extension? (car (regexp-match #rx\"\\.[a-zA-Z]+$\"\
    \ file_name)))) #t)\n          (else #f)))\n  (cond ((is_valid_file_name_with_extension?\
    \ file_name) \"Yes\")\n        (else \"No\")))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4db9hvw9.rkt:25:41: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfwwmcj6.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj_76z_yd.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft0oyrc4.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name)\n          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n\
    \          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n  \
    \   \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo61h7per.rkt:28:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo61h7per.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo61h7per.rkt:32:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo61h7per.rkt:38:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo61h7per.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo61h7per.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo61h7per.rkt:46:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphh84_osz.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiw737xjf.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6ktwb70g.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7xvk58uf.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzoc16jsf.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpetm0x1wl.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_fs0adjl.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(string=?\
    \ extension \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (let ([name-length (string-length name)])\n      (and (not (string-empty?\
    \ name))\n           (char-alphabetic? (string-ref name 0))\n           (string-contains\
    \ name \".\")\n           (string-contains name \".\")\n           (let ([dot-index\
    \ (string-index name \".\")])\n             (and (is_valid_extension? (substring\
    \ name (+ dot-index 1) name-length))\n                  (string-contains name\
    \ \".\")\n                  (let ([digit-count (count (lambda (c) (char-numeric?\
    \ c)) name)])\n                    (<= digit-count 3)))))))\n  (cond\n    [(is_valid_name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprf9x149j.rkt:24:17: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmprf9x149j.rkt:24:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check_extension extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") 'Yes]\n      [(equal? extension \"exe\") 'Yes]\n      [(equal?\
    \ extension \"dll\") 'Yes]\n      [else 'No]))\n  (define (check_name name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+$\" name) 'Yes]\n      [else 'No]))\n\
    \  (define (check_digits digits)\n    (cond\n      [(> (string-length digits)\
    \ 3) 'No]\n      [else 'Yes]))\n  (define (check_dot dot)\n    (cond\n      [(equal?\
    \ dot \".\") 'Yes]\n      [else 'No]))\n  (define (check_file_name file_name)\n\
    \    (define (split_file_name file_name)\n      (define (split_file_name_helper\
    \ file_name)\n        (cond\n          [(empty? file_name) empty]\n          [(equal?\
    \ (first file_name) #\\.) (cons (first file_name) empty)]\n          [else (cons\
    \ (first file_name) (split_file_name_helper (rest file_name)))]))\n      (split_file_name_helper\
    \ file_name))\n    (define (check_file_name_helper file_name)\n      (cond\n \
    \       [(empty? file_name) empty]\n        [(equal? (first file_name) #\\.) (cons\
    \ (first file_name) empty)]\n        [else (cons (first file_name) (check_file_name_helper\
    \ (rest file_name)))]))\n    (check_file_name_helper file_name))\n  (define (check_file_name_helper\
    \ file_name)\n    (cond\n      [(empty? file_name) empty]\n      [(equal? (first\
    \ file_name) #\\.) (cons (first file_name) empty)]\n      [else (cons (first file_name)\
    \ (check_file_name_helper (rest file_name)))]))\n  (define (split_file_name file_name)\n\
    \    (define (split\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpof986cd0.rkt:54:12: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 55\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-extension file_name)\n    (cond\n      [(string=?\
    \ (substring file_name (sub1 (string-length file_name)) (string-length file_name))\
    \ \"txt\") 'Yes]\n      [(string=? (substring file_name (sub1 (string-length file_name))\
    \ (string-length file_name)) \"exe\") 'Yes]\n      [(string=? (substring file_name\
    \ (sub1 (string-length file_name)) (string-length file_name)) \"dll\") 'Yes]\n\
    \      [else 'No]))\n  (define (check-name file_name)\n    (cond\n      [(string=?\
    \ (substring file_name 0 1) \"0\") 'No]\n      [(string=? (substring file_name\
    \ 0 1) \"1\") 'No]\n      [(string=? (substring file_name 0 1) \"2\") 'No]\n \
    \     [(string=? (substring file_name 0 1) \"3\") 'No]\n      [(string=? (substring\
    \ file_name 0 1) \"4\") 'No]\n      [(string=? (substring file_name 0 1) \"5\"\
    ) 'No]\n      [(string=? (substring file_name 0 1) \"6\") 'No]\n      [(string=?\
    \ (substring file_name 0 1) \"7\") 'No]\n      [(string=? (substring file_name\
    \ 0 1) \"8\") 'No]\n      [(string=? (substring file_name 0 1) \"9\") 'No]\n \
    \     [(string=? (substring file_name 0 1) \"a\") 'Yes]\n      [(string=? (substring\
    \ file_name 0 1) \"b\") 'Yes]\n      [(string=? (substring file_name 0 1) \"c\"\
    ) 'Yes]\n      [(string=? (substring file_name 0 1) \"d\") 'Yes]\n      [(string=?\
    \ (substring file_name 0 1) \"e\") 'Yes]\n      [(string=? (substring file_name\
    \ 0 1) \"f\") 'Yes]\n      [(string=? (substring file_name 0 1) \"g\") 'Yes]\n\
    \      [(\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjs6a6905.rkt:41:7: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 42\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (or (equal? extension\
    \ \"txt\")\n        (equal? extension \"exe\")\n        (equal? extension \"dll\"\
    )))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match\
    \ #rx\"^[a-zA-Z]\" name)))\n  (define (is_valid_file_name? file_name)\n    (define\
    \ (count-digits file_name)\n      (length (regexp-match #rx\"[0-9]\" file_name)))\n\
    \    (define (count-dots file_name)\n      (length (regexp-match #rx\"\\.\" file_name)))\n\
    \    (and (equal? (count-dots file_name) 1)\n         (equal? (count-digits file_name)\
    \ 3)\n         (is_valid_name? (substring file_name 0 (string-index file_name\
    \ \".\")))\n         (is_valid_extension? (substring file_name (+ 1 (string-index\
    \ file_name \".\"))))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n\
    \      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate file_name_check))\n    (check-equal? (candidate \"example.txt\") \"\
    Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdi8uiyzz.rkt:27:28: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_name? name)\n    (and (regexp-match? #rx\"^[a-zA-Z]+$\"\
    \ name)\n         (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_extension?\
    \ extension)\n    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ([parts (regexp-split #rx\"\\.\" file_name)])\n      (and\
    \ (= (length parts) 2)\n           (is_valid_name? (first parts))\n          \
    \ (is_valid_extension? (second parts)))))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfsp1b5pp.rkt:22:31: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqed0pzxp.rkt:27:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqed0pzxp.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqed0pzxp.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqed0pzxp.rkt:37:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqed0pzxp.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqed0pzxp.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqed0pzxp.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond ((equal? extension\
    \ \"txt\") #t)\n          ((equal? extension \"exe\") #t)\n          ((equal?\
    \ extension \"dll\") #t)\n          (else #f)))\n  (define (is_valid_name? name)\n\
    \    (cond ((regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}$\" name) #t)\n          (else\
    \ #f)))\n  (define (is_valid_file_name? file_name)\n    (cond ((regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) #t)\n          (else #f)))\n\
    \  (define (get_extension file_name)\n    (regexp-match #rx\"\\.[a-zA-Z]+$\" file_name))\n\
    \  (define (get_name file_name)\n    (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\"\
    \ file_name))\n  (cond ((is_valid_file_name? file_name)\n         (cond ((is_valid_name?\
    \ (get_name file_name))\n                (cond ((is_valid_extension? (get_extension\
    \ file_name))\n                       \"Yes\")\n                      (else \"\
    No\")))\n               (else \"No\")))\n        (else \"No\")))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe5wujr1s.rkt:28:18: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb1khpved.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpux5ue6gm.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsf8e8p4h.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9h9ciid.rkt:27:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9h9ciid.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9h9ciid.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9h9ciid.rkt:37:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9h9ciid.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9h9ciid.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9h9ciid.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9l1kd1v.rkt:27:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9l1kd1v.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9l1kd1v.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9l1kd1v.rkt:37:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9l1kd1v.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9l1kd1v.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9l1kd1v.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxn7wdozk.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (let ([digits (regexp-match #rx\"[0-9]\" file_name)]\n       \
    \ [dot (regexp-match #rx\"\\.\" file_name)]\n        [before-dot (substring file_name\
    \ 0 (car dot))]\n        [after-dot (substring file_name (+ (car dot) 1) (string-length\
    \ file_name))])\n    (cond [(> (length digits) 3) \"No\"]\n          [(not (equal?\
    \ (length dot) 1)) \"No\"]\n          [(not (regexp-match #rx\"[a-zA-Z]\" before-dot))\
    \ \"No\"]\n          [(not (regexp-match #rx\"txt|exe|dll\" after-dot)) \"No\"\
    ]\n          [else \"Yes\"])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyubx0j4v.rkt:17:27: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2rgdufut.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0kf3g9sm.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (if (and (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\"\
    \ file_name)\n          (not (regexp-match? #rx\"[0-9]{4}\" file_name))\n    \
    \      (regexp-match? #rx\"\\.[a-zA-Z]{3}$\" file_name))\n      \"Yes\"\n    \
    \  \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoegknxzi.rkt:16:26: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4l1ltjog.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyocw3gu5.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgrlu0ux4.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv54pv95f.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(string=?\
    \ extension \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+$\" name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (is_valid_file_name_helper?\
    \ file_name)\n      (cond\n        [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .[a-zA-Z]+$\" file_name) #t]\n        [else #f]))\n  (define (is_valid_file_name_helper2?\
    \ file_name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\"\
    \ file_name) #t]\n      [else #f]))\n  (define (is_valid_file_name_helper3? file_name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name)\
    \ #t]\n      [else #f]))\n  (define (is_valid_file_name_helper4? file_name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name)\
    \ #t]\n      [else #f]))\n  (define (is_valid_file_name_helper5? file_name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5_1fihfk.rkt:45:21: read-syntax: expected a closing `)`\n  pattern:\
    \ \"^[a-zA-Z]+[0-9]{0,3}\\n(require rackunit)\\n\\n(define (test-humaneval) \\\
    n\\n  (let (( candidate file_name_check))\\n    (check-equal? (candidate \"\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2sw3rcfu.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpnvgrie_g.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .txt$\" file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n\
    \     \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi_ljc_lv.rkt:28:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi_ljc_lv.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi_ljc_lv.rkt:32:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi_ljc_lv.rkt:38:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi_ljc_lv.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi_ljc_lv.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi_ljc_lv.rkt:46:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprkrsqmqy.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkqizoygj.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_file_name file_name)\n    (define (is_valid_extension\
    \ extension)\n      (cond ((equal? extension \"txt\") #t)\n            ((equal?\
    \ extension \"exe\") #t)\n            ((equal? extension \"dll\") #t)\n      \
    \      (else #f)))\n    (define (is_valid_name name)\n      (define (is_valid_first_char\
    \ c)\n        (cond ((char-alphabetic? c) #t)\n              (else #f)))\n   \
    \   (define (is_valid_digit_count n)\n        (cond ((> n 3) #f)\n           \
    \   (else #t)))\n      (define (is_valid_char c)\n        (cond ((char-alphabetic?\
    \ c) #t)\n              ((char-numeric? c) #t)\n              (else #f)))\n  \
    \    (define (is_valid_name_helper name)\n        (cond ((null? name) #t)\n  \
    \            ((not (is_valid_char (car name))) #f)\n              (else (is_valid_name_helper\
    \ (cdr name)))))\n      (and (not (null? name))\n           (is_valid_first_char\
    \ (car name))\n           (is_valid_digit_count (string-count name #\\0 #\\9))\n\
    \           (is_valid_name_helper (cdr name))))\n    (define (get_name file_name)\n\
    \      (define (get_name_helper file_name)\n        (cond ((null? file_name) '())\n\
    \              ((equal? (car file_name) #\\.) '())\n              (else (cons\
    \ (car file_name) (get_name_helper (cdr file_name))))))\n      (get_name_helper\
    \ file_name))\n    (define (get_extension file_name)\n      (define (get_extension_helper\
    \ file_name)\n        (cond ((null? file_name) '())\n              ((equal? (car\
    \ file_name) #\\.) (cdr file_name))\n              (else (get_extension_helper\
    \ (cdr file_name)))))\n      (get_\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5teew6qe.rkt:52:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 53\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_b5dth3t.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (count-digits str)\n    (if (empty? str)\n        0\n\
    \        (+ (if (char-numeric? (first str)) 1 0)\n           (count-digits (rest\
    \ str)))))\n  (define (count-dots str)\n    (if (empty? str)\n        0\n    \
    \    (+ (if (char=? (first str) #\\.) 1 0)\n           (count-dots (rest str)))))\n\
    \  (define (is-valid-extension str)\n    (or (string=? str \"txt\")\n        (string=?\
    \ str \"exe\")\n        (string=? str \"dll\")))\n  (define (is-valid-name str)\n\
    \    (and (not (empty? str))\n         (char-alphabetic? (first str))\n      \
    \   (not (char-numeric? (first str)))))\n  (define (is-valid-file-name str)\n\
    \    (let ((parts (string-split str #\\.)))\n      (and (= (count-digits str)\
    \ 3)\n           (= (count-dots str) 1)\n           (is-valid-name (first parts))\n\
    \           (is-valid-extension (second parts)))))\n  (if (is-valid-file-name\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpue2v6oz0.rkt:49:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpue2v6oz0.rkt:50:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpue2v6oz0.rkt:51:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpue2v6oz0.rkt:52:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpue2v6oz0.rkt:53:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpue2v6oz0.rkt:54:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpue2v6oz0.rkt:55:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpue2v6oz0.rkt:56:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpue2v6oz0.rkt:57:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpue2v6oz0.rkt:58:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpue2v6oz0.rkt:59:4\n\nstring-split: contract viol"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (or (= extension\
    \ \"txt\")\n        (= extension \"exe\")\n        (= extension \"dll\")))\n \
    \ (define (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match?\
    \ #rx\"^[a-zA-Z]\" name)))\n  (define (is_valid_file_name? file_name)\n    (define\
    \ (count-digits file_name)\n      (length (regexp-match #rx\"[0-9]\" file_name)))\n\
    \    (define (count-dots file_name)\n      (length (regexp-match #rx\"\\.\" file_name)))\n\
    \    (and (= (count-dots file_name) 1)\n         (<= (count-digits file_name)\
    \ 3)\n         (is_valid_name? (regexp-replace #rx\"\\..*\" file_name \"\"))\n\
    \         (is_valid_extension? (regexp-replace #rx\".*\\.\" file_name \"\"))))\n\
    \  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp311dic0.rkt:27:28: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpljqa64yo.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpja52p5fa.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpynmul4wd.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf5ss1dcx.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_file_name? file_name)\n    (define (is_valid_file_name_before_dot?\
    \ file_name)\n      (and (not (empty? file_name))\n           (or (char-alphabetic?\
    \ (string-ref file_name 0))\n               (char-numeric? (string-ref file_name\
    \ 0)))))\n    (define (is_valid_file_name_after_dot? file_name)\n      (and (not\
    \ (empty? file_name))\n           (or (string=? file_name \"txt\")\n         \
    \      (string=? file_name \"exe\")\n               (string=? file_name \"dll\"\
    ))))\n    (define (is_valid_file_name_extension? file_name)\n      (and (not (empty?\
    \ file_name))\n           (is_valid_file_name_after_dot? (string-take-right file_name\
    \ 3))))\n    (define (is_valid_file_name_before_extension? file_name)\n      (and\
    \ (not (empty? file_name))\n           (is_valid_file_name_before_dot? (string-take\
    \ file_name (- (string-length file_name) 4)))))\n    (define (is_valid_file_name_dot?\
    \ file_name)\n      (and (not (empty? file_name))\n           (string=? (string-take-right\
    \ file_name 1) \".\")))\n    (define (is_valid_file_name_digits? file_name)\n\
    \      (and (not (empty? file_name))\n           (<= (count (lambda (c) (char-numeric?\
    \ c)) file_name) 3)))\n    (and (is_valid_file_name_before_extension? file_name)\n\
    \         (is_valid_file_name_extension? file_name)\n         (is_valid_file_name_dot?\
    \ file_name)\n         (is_valid_file_name_digits? file_name)))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq2ntyy2f.rkt:28:43: string-take-right: unbound identifier\n  in:\
    \ string-take-right\n  location...:\n   /tmp/tmpq2ntyy2f.rkt:28:43\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? ext)\n    (or (equal? ext \"txt\"\
    ) (equal? ext \"exe\") (equal? ext \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]\" name)\n\
    \         (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (split-file-name file_name)\n      (regexp-split #rx\"\
    \\.\" file_name))\n    (define (split-file-name-helper file_name)\n      (cond\
    \ [(empty? file_name) '()]\n            [else (cons (first file_name) (split-file-name-helper\
    \ (rest file_name)))]))\n    (define (split-file-name file_name)\n      (split-file-name-helper\
    \ (regexp-split #rx\"\\.\" file_name)))\n    (define (is_valid_file_name? file_name)\n\
    \      (and (equal? (length (split-file-name file_name)) 2)\n           (is_valid_name?\
    \ (first (split-file-name file_name)))\n           (is_valid_extension? (second\
    \ (split-file-name file_name)))))\n    (if (is_valid_file_name? file_name)\n \
    \       \"Yes\"\n        \"No\"))\n  (is_valid_file_name? file_name))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt9ojdxh9.rkt:24:20: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpknntgiei.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp5aal7zw.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (let ([file_name (string-split file_name \".\")])\n    (cond\n\
    \      [(and (string-match #rx\"[a-zA-Z]\" (car file_name))\n            (string-match\
    \ #rx\"[a-zA-Z]\" (cadr file_name))\n            (string-match #rx\"[a-zA-Z]\"\
    \ (caddr file_name))\n            (string-match #rx\"[a-zA-Z]\" (cadddr file_name)))\n\
    \       \"No\"]\n      [(and (string-match #rx\"[0-9]\" (car file_name))\n   \
    \         (string-match #rx\"[0-9]\" (cadr file_name))\n            (string-match\
    \ #rx\"[0-9]\" (caddr file_name))\n            (string-match #rx\"[0-9]\" (cadddr\
    \ file_name)))\n       \"No\"]\n      [(and (string-match #rx\"[a-zA-Z]\" (car\
    \ file_name))\n            (string-match #rx\"[0-9]\" (cadr file_name))\n    \
    \        (string-match #rx\"[0-9]\" (caddr file_name))\n            (string-match\
    \ #rx\"[0-9]\" (cadddr file_name)))\n       \"No\"]\n      [(and (string-match\
    \ #rx\"[0-9]\" (car file_name))\n            (string-match #rx\"[a-zA-Z]\" (cadr\
    \ file_name))\n            (string-match #rx\"[0-9]\" (caddr file_name))\n   \
    \         (string-match #rx\"[0-9]\" (cadddr file_name)))\n       \"No\"]\n  \
    \    [(and (string-match #rx\"[0-9]\" (car file_name))\n            (string-match\
    \ #rx\"[0-9]\" (cadr file_name))\n            (string-match #rx\"[a-zA-Z]\" (caddr\
    \ file_name))\n            (string-match #rx\"[0-9]\" (cadddr file_name)))\n \
    \      \"No\"]\n      [(and (string-match #rx\"[0-9]\" (car file_name))\n    \
    \        (string-match #rx\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb9gh3gro.rkt:44:26: read-syntax: expected `\"` or `#` after `#rx`\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-extension file_name)\n    (cond\n      [(equal?\
    \ (substring file_name (sub1 (string-length file_name)) (string-length file_name))\
    \ \".txt\") 'Yes]\n      [(equal? (substring file_name (sub1 (string-length file_name))\
    \ (string-length file_name)) \".exe\") 'Yes]\n      [(equal? (substring file_name\
    \ (sub1 (string-length file_name)) (string-length file_name)) \".dll\") 'Yes]\n\
    \      [else 'No]))\n  (define (check-name file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}$\" file_name) 'Yes]\n      [else 'No]))\n  (define\
    \ (check-dot file_name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}[.]$\"\
    \ file_name) 'No]\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}[.][a-zA-Z]+$\"\
    \ file_name) 'Yes]\n      [else 'No]))\n  (cond\n    [(check-dot file_name) (check-extension\
    \ file_name)]\n    [(check-name file_name) 'No]\n    [else 'No]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:41:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:42:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:43:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:44:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:45:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:46:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:47:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:48:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:49:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:50:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:51:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:52:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:53:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc_t336ay.rkt:54:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_file_name file_name)\n    (define (is_valid_extension\
    \ file_name)\n      (define (is_valid_extension-helper file_name)\n        (cond\n\
    \          [(string=? file_name \"txt\") #t]\n          [(string=? file_name \"\
    exe\") #t]\n          [(string=? file_name \"dll\") #t]\n          [else #f]))\n\
    \      (is_valid_extension-helper (substring file_name (+ (string-index file_name\
    \ #\\.) 1))))\n    (define (is_valid_name file_name)\n      (define (is_valid_name-helper\
    \ file_name)\n        (cond\n          [(string=? file_name \"\") #f]\n      \
    \    [(char-alphabetic? (string-ref file_name 0)) #t]\n          [else #f]))\n\
    \      (is_valid_name-helper (substring file_name 0 (string-index file_name #\\\
    .))))\n    (define (is_valid_digits file_name)\n      (define (is_valid_digits-helper\
    \ file_name)\n        (cond\n          [(string=? file_name \"\") #t]\n      \
    \    [(char-numeric? (string-ref file_name 0)) (is_valid_digits-helper (substring\
    \ file_name 1))]\n          [else #f]))\n      (is_valid_digits-helper (substring\
    \ file_name 0 (string-index file_name #\\.))))\n    (and (is_valid_extension file_name)\
    \ (is_valid_name file_name) (is_valid_digits file_name)))\n  (if (is_valid_file_name\
    \ file_name) \"Yes\" \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5gqmutwb.rkt:24:58: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmp5gqmutwb.rkt:24:58\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-file-name-valid? file-name)\n    (and (regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file-name)\n         (regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\" file-name)))\n  (if (check-file-name-valid?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1zcdpcr.rkt:28:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1zcdpcr.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1zcdpcr.rkt:32:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1zcdpcr.rkt:38:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1zcdpcr.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1zcdpcr.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1zcdpcr.rkt:46:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5yhimk2j.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpea9f9dhu.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpn9to2i1d.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqrf15wby.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (let ([digits (regexp-match #rx\"[0-9]\" file_name)]\n       \
    \ [dot (regexp-match #rx\"\\.\" file_name)]\n        [before-dot (regexp-match\
    \ #rx\"[a-zA-Z]\" (substring file_name 0 (car dot)))]\n        [after-dot (regexp-match\
    \ #rx\"(txt|exe|dll)\" (substring file_name (+ (car dot) 1) (string-length file_name)))])\n\
    \    (cond [(and (not (null? dot))\n                (not (null? before-dot))\n\
    \                (not (null? after-dot))\n                (not (> (length digits)\
    \ 3)))\n           \"Yes\"]\n          [else\n           \"No\"])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpevdu4yac.rkt:17:27: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwifwnpq1.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmph48ncxhe.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfbmuzq3.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? ext)\n    (cond\n      [(equal? ext\
    \ \"txt\") #t]\n      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n\
    \      [else #f]))\n  (define (is_valid_name? name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n      [else #f]))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let* ([parts (regexp-split #rx\"\\.\" file_name)]\n       \
    \    [name (first parts)]\n           [ext (second parts)])\n      (and (is_valid_name?\
    \ name)\n           (is_valid_extension? ext))))\n  (cond\n    [(is_valid_file_name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprzgtaz98.rkt:27:32: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (regexp-match\
    \ #rx\"^[a-zA-Z]+$\" name)\n         (not (regexp-match #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (split-file-name file_name)\n\
    \      (regexp-match #rx\"^([a-zA-Z]+)(\\\\.[a-zA-Z]+)$\" file_name))\n    (let*\
    \ ([split (split-file-name file_name)]\n           [name (cadr split)]\n     \
    \      [extension (caddr split)])\n      (and (is_valid_name? name)\n        \
    \   (is_valid_extension? extension))))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:38:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:39:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:40:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:41:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:42:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:43:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:44:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:45:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:46:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:47:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:48:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv121pjx9.rkt:49:4\n\
    \ncadr: contract violatio"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_file_name file_name)\n    (define (is_valid_extension\
    \ file_name)\n      (cond ((string=? (substring file_name (string-index file_name\
    \ \".\") +1) \"txt\") #t)\n            ((string=? (substring file_name (string-index\
    \ file_name \".\") +1) \"exe\") #t)\n            ((string=? (substring file_name\
    \ (string-index file_name \".\") +1) \"dll\") #t)\n            (else #f)))\n \
    \   (define (is_valid_name file_name)\n      (cond ((string-index file_name \"\
    .\") #t)\n            (else #f)))\n    (define (is_valid_number file_name)\n \
    \     (cond ((> (string-length (regexp-replace* #rx\"[^0-9]\" file_name \"\"))\
    \ 3) #f)\n            (else #t)))\n    (cond ((and (is_valid_number file_name)\
    \ (is_valid_name file_name) (is_valid_extension file_name)) #t)\n          (else\
    \ #f)))\n  (cond ((is_valid_file_name file_name) \"Yes\")\n        (else \"No\"\
    )))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3xkd4j66.rkt:18:45: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmp3xkd4j66.rkt:18:45\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxrejdi2s.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmper7djy39.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (or (equal? extension\
    \ \"txt\")\n        (equal? extension \"exe\")\n        (equal? extension \"dll\"\
    )))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match\
    \ #rx\"[a-zA-Z]\" name)))\n  (define (is_valid_file_name? file_name)\n    (define\
    \ (count-digits file_name)\n      (regexp-match #rx\"[0-9]\" file_name))\n   \
    \ (define (count-dots file_name)\n      (regexp-match #rx\"\\.\" file_name))\n\
    \    (and (<= (count-digits file_name) 3)\n         (= (count-dots file_name)\
    \ 1)\n         (is_valid_name? (substring file_name 0 (string-index file_name\
    \ \".\")))\n         (is_valid_extension? (substring file_name (+ 1 (string-index\
    \ file_name \".\"))))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n\
    \      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate file_name_check))\n    (check-equal? (candidate \"example.txt\") \"\
    Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_06ud0nn.rkt:27:20: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-extension extension)\n    (cond\n      [(string=?\
    \ extension \"txt\") 'Yes]\n      [(string=? extension \"exe\") 'Yes]\n      [(string=?\
    \ extension \"dll\") 'Yes]\n      [else 'No]))\n  (define (check-name name)\n\
    \    (cond\n      [(string-empty? name) 'No]\n      [(string-contains name #\\\
    .) 'No]\n      [(string-contains name #\\0) 'No]\n      [(string-contains name\
    \ #\\1) 'No]\n      [(string-contains name #\\2) 'No]\n      [(string-contains\
    \ name #\\3) 'No]\n      [(string-contains name #\\4) 'No]\n      [(string-contains\
    \ name #\\5) 'No]\n      [(string-contains name #\\6) 'No]\n      [(string-contains\
    \ name #\\7) 'No]\n      [(string-contains name #\\8) 'No]\n      [(string-contains\
    \ name #\\9) 'No]\n      [else 'Yes]))\n  (define (check-dot file_name)\n    (cond\n\
    \      [(string-contains file_name #\\.) 'Yes]\n      [else 'No]))\n  (define\
    \ (get-extension file_name)\n    (string-split file_name #\\.)\n    (cadr (string-split\
    \ file_name #\\.)))\n  (define (get-name file_name)\n    (string-split file_name\
    \ #\\.)\n    (car (string-split file_name #\\.)))\n  (cond\n    [(string=? (check-dot\
    \ file_name) 'No) 'No]\n    [(string=? (check-name (get-name file_name)) 'No)\
    \ 'No]\n    [(string=? (check-extension (get-extension file_name)) 'No) 'No]\n\
    \    [else 'Yes]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk2wgzyll.rkt:24:8: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpk2wgzyll.rkt:24:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphfp4zzty.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8klys0mv.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprw4glhw2.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (or (equal? extension\
    \ \"txt\") (equal? extension \"exe\") (equal? extension \"dll\")))\n  (define\
    \ (count-digits str)\n    (define (count-digits-iter count str)\n      (cond ((null?\
    \ str) count)\n            ((char-numeric? (car str)) (count-digits-iter (+ count\
    \ 1) (cdr str)))\n            (else (count-digits-iter count (cdr str)))))\n \
    \   (count-digits-iter 0 str))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name)) (char-alphabetic? (car name))))\n  (define (split-name str)\n\
    \    (define (split-name-iter str)\n      (cond ((null? str) '())\n          \
    \  ((equal? (car str) #\\.) (cons (list->string (reverse (cdr str))) (list->string\
    \ (reverse (cdr (cdr str))))))\n            (else (split-name-iter (cdr str)))))\n\
    \    (split-name-iter (string->list str)))\n  (define (is_valid_file_name? file_name)\n\
    \    (let* ((split-name (split-name file_name))\n           (name (car split-name))\n\
    \           (extension (cadr split-name)))\n      (and (is_valid_name? name) (is_valid_extension?\
    \ extension) (<= (count-digits name) 3))))\n  (if (is_valid_file_name? file_name)\
    \ \"Yes\" \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bwmzdsr.rkt:44:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"txt\"\
    \ . \"tx\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_bwmzdsr.rkt:45:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"lld\" . \"ll\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bwmzdsr.rkt:46:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"dsa\" . \"\
    ds\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_bwmzdsr.rkt:47:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"lld\" . \"ll\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bwmzdsr.rkt:48:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"exe\" . \"\
    ex\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_bwmzdsr.rkt:49:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"exe\" . \"ex\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bwmzdsr.rkt:50:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"txt\" . \"\
    tx\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_bwmzdsr.rkt:51:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"exe\" . \"ex\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bwmzdsr.rkt:52:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"lld\" . \"\
    ll\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_bwmzdsr.rkt:53:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"wow\" . \"wo\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bwmzdsr.rkt:54:4\n\ncadr:\
    \ c"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp06oyy60a.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_file_name file_name)\n    (define (is_valid_extension\
    \ extension)\n      (or (= extension \"txt\")\n          (= extension \"exe\"\
    )\n          (= extension \"dll\")))\n    (define (is_valid_file_name_part file_name_part)\n\
    \      (and (not (empty? file_name_part))\n           (char-alphabetic? (string-ref\
    \ file_name_part 0))\n           (not (> (count (lambda (c) (char-numeric? c))\
    \ file_name_part) 3))))\n    (define (split_file_name file_name)\n      (define\
    \ (split_file_name_helper file_name result)\n        (if (empty? file_name)\n\
    \            result\n            (split_file_name_helper (rest file_name) (cons\
    \ (first file_name) result))))\n      (split_file_name_helper file_name '()))\n\
    \    (define (count_dots file_name)\n      (count (lambda (c) (= c #\\.)) file_name))\n\
    \    (define (split_file_name_parts file_name)\n      (define (split_file_name_parts_helper\
    \ file_name result)\n        (if (empty? file_name)\n            result\n    \
    \        (split_file_name_parts_helper (rest file_name) (cons (first file_name)\
    \ result))))\n      (split_file_name_parts_helper file_name '()))\n    (define\
    \ (split_file_name_parts_by_dot file_name)\n      (define (split_file_name_parts_by_dot_helper\
    \ file_name result)\n        (if (empty? file_name)\n            result\n    \
    \        (split_file_name_parts_by_dot_helper (rest file_name) (cons (first file_name)\
    \ result))))\n      (split_file_name_parts_by_dot_helper file_name '()))\n   \
    \ (define (split_file_name_parts_by_dot_helper file_name result)\n      (if (empty?\
    \ file_name)\n          result\n          (split_\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp76r7w9vx.rkt:48:10: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6hm0cv2v.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwzlonerr.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp78fq0hlo.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjazedtmz.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5run0fma.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]\" name)))\n  (define\
    \ (is_valid_file_name? file_name)\n    (let ([parts (string-split file_name #\\\
    .)])\n      (and (= (length parts) 2)\n           (is_valid_name? (first parts))\n\
    \           (is_valid_extension? (second parts)))))\n  (cond\n    [(is_valid_file_name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2aw7jsw1.rkt:35:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2aw7jsw1.rkt:36:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2aw7jsw1.rkt:37:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2aw7jsw1.rkt:38:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2aw7jsw1.rkt:39:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2aw7jsw1.rkt:40:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2aw7jsw1.rkt:41:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2aw7jsw1.rkt:42:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2aw7jsw1.rkt:43:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2aw7jsw1.rkt:44:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2aw7jsw1.rkt:45:4\n\nstring-split: contract viol"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpghw65fcz.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (and\n      (not (empty? name))\n      (char-alphabetic? (string-ref name\
    \ 0))\n      (not (string-contains name #\\0))\n      (not (string-contains name\
    \ #\\1))\n      (not (string-contains name #\\2))\n      (not (string-contains\
    \ name #\\3))\n      (not (string-contains name #\\4))\n      (not (string-contains\
    \ name #\\5))\n      (not (string-contains name #\\6))\n      (not (string-contains\
    \ name #\\7))\n      (not (string-contains name #\\8))\n      (not (string-contains\
    \ name #\\9))))\n  (define (count_dots str)\n    (cond\n      [(empty? str) 0]\n\
    \      [(equal? (first str) #\\.) (+ 1 (count_dots (rest str)))]\n      [else\
    \ (count_dots (rest str))]))\n  (define (split_file_name str)\n    (cond\n   \
    \   [(empty? str) (list \"\" \"\")]\n      [(equal? (first str) #\\.) (list (rest\
    \ str) \"\")]\n      [else (cons (string-append (first str) (first (split_file_name\
    \ (rest str)))) (second (split_file_name (rest str))))]))\n  (cond\n    [(equal?\
    \ (count_dots file_name) 1) (and (is_valid_name? (first (split_file_name file_name)))\
    \ (is_valid_extension? (second (split_file_name file_name))))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp29ktt0bp.rkt:26:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp29ktt0bp.rkt:26:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp95ymw56e.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? ext)\n    (or (equal? ext \"txt\"\
    )\n        (equal? ext \"exe\")\n        (equal? ext \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (not (regexp-match #rx\"^[0-9]+$\"\
    \ name))\n         (regexp-match #rx\"^[a-zA-Z]+$\" name)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ([parts (regexp-split #rx\"\\.\" file_name)])\n      (and\
    \ (= (length parts) 2)\n           (is_valid_name? (first parts))\n          \
    \ (is_valid_extension? (second parts)))))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbnp4ssf_.rkt:25:31: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_0c49wpg.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ddxaphq.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8v9lfw14.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][^0-9]*[0-9]{0,3}\\\\\
    .[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppqjpreo0.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension ext)\n    (cond\n      [(equal? ext\
    \ \"txt\") #t]\n      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n\
    \      [else #f]))\n  (define (is_valid_name name)\n    (define (is_valid_name_helper\
    \ name)\n      (cond\n        [(empty? name) #t]\n        [(char-alphabetic? (first\
    \ name)) (is_valid_name_helper (rest name))]\n        [(char-numeric? (first name))\
    \ (is_valid_name_helper (rest name))]\n        [else #f]))\n    (and (not (empty?\
    \ name)) (is_valid_name_helper name)))\n  (define (is_valid_file_name file_name)\n\
    \    (let ([name (first (string-split file_name \".\"))]\n          [ext (second\
    \ (string-split file_name \".\"))])\n      (and (is_valid_name name)\n       \
    \    (is_valid_extension ext))))\n  (cond\n    [(is_valid_file_name file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpttdqlp2g.rkt:44:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"example\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpttdqlp2g.rkt:45:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"1example\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpttdqlp2g.rkt:46:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"s1sdf3\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpttdqlp2g.rkt:47:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"K\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpttdqlp2g.rkt:48:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"MY16FILE3\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpttdqlp2g.rkt:49:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"His12FILE94\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpttdqlp2g.rkt:50:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"_Y\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpttdqlp2g.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"?aREYA\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpttdqlp2g.rkt:52:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"/this_is_valid\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpttdqlp2g.rkt:53:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"this_is_valid\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check_extension file_name)\n    (cond ((string=? (substring\
    \ file_name (string-length file_name) (- (string-length file_name) 3)) \"txt\"\
    ) 'Yes)\n          ((string=? (substring file_name (string-length file_name) (-\
    \ (string-length file_name) 3)) \"exe\") 'Yes)\n          ((string=? (substring\
    \ file_name (string-length file_name) (- (string-length file_name) 3)) \"dll\"\
    ) 'Yes)\n          (else 'No)))\n  (define (check_name file_name)\n    (cond ((and\
    \ (char-alphabetic? (string-ref file_name 0))\n                (not (string-contains\
    \ file_name #\\.))\n                (not (string-contains file_name #\\_))) 'Yes)\n\
    \          (else 'No)))\n  (define (check_digits file_name)\n    (cond ((> (string-length\
    \ (regexp-replace* #rx\"[^0-9]\" file_name \"\")) 3) 'No)\n          (else 'Yes)))\n\
    \  (cond ((and (check_name file_name) (check_extension file_name) (check_digits\
    \ file_name)) 'Yes)\n        (else 'No)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpddmv9jlp.rkt:23:22: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpddmv9jlp.rkt:23:22\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (define (is_valid_char? c)\n      (cond\n        [(char-alphabetic? c) #t]\n\
    \        [(char-numeric? c) #t]\n        [else #f]))\n    (define (is_valid_name_char?\
    \ c)\n      (cond\n        [(char-alphabetic? c) #t]\n        [else #f]))\n  \
    \  (define (is_valid_name_digit? c)\n      (cond\n        [(char-numeric? c) #t]\n\
    \        [else #f]))\n    (define (is_valid_name_char? c)\n      (cond\n     \
    \   [(char-alphabetic? c) #t]\n        [else #f]))\n    (define (is_valid_name_char?\
    \ c)\n      (cond\n        [(char-alphabetic? c) #t]\n        [else #f]))\n  \
    \  (define (is_valid_name_char? c)\n      (cond\n        [(char-alphabetic? c)\
    \ #t]\n        [else #f]))\n    (define (is_valid_name_char? c)\n      (cond\n\
    \        [(char-alphabetic? c) #t]\n        [else #f]))\n    (define (is_valid_name_char?\
    \ c)\n      (cond\n        [(char-alphabetic? c) #t]\n        [else #f]))\n  \
    \  (define (is_valid_name_char? c)\n      (cond\n        [(char-alphabetic? c)\
    \ #t]\n        [else #f]))\n    (define (is_valid_name_char? c)\n      (cond\n\
    \        [(char-alphabetic? c) #t]\n        [else #f]))\n    (define (is_valid_name_char?\
    \ c)\n      (cond\n        [(char-alphabetic\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp93w94txn.rkt:66:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 67\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (if (and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n\
    \          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n  \
    \        (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n   \
    \   \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6htvmix.rkt:27:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6htvmix.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6htvmix.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6htvmix.rkt:37:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6htvmix.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6htvmix.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6htvmix.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa79y1hqw.rkt:25:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa79y1hqw.rkt:28:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa79y1hqw.rkt:29:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa79y1hqw.rkt:35:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa79y1hqw.rkt:41:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa79y1hqw.rkt:42:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa79y1hqw.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (let ([file_name (string-split file_name \".\")])\n    (cond\n\
    \      [(and (= (length file_name) 2)\n            (regexp-match? #rx\"^[a-zA-Z]+$\"\
    \ (car file_name))\n            (regexp-match? #rx\"^[0-9]{0,3}$\" (car file_name))\n\
    \            (member (cadr file_name) '(\"txt\" \"exe\" \"dll\")))]\n      [else\
    \ \"No\"])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgn9vhaw2.rkt:29:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgn9vhaw2.rkt:32:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgn9vhaw2.rkt:33:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgn9vhaw2.rkt:39:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgn9vhaw2.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgn9vhaw2.rkt:46:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgn9vhaw2.rkt:47:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpxc2ecne9.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnaemsf6.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond [(string=?\
    \ extension \"txt\") #t]\n          [(string=? extension \"exe\") #t]\n      \
    \    [(string=? extension \"dll\") #t]\n          [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (and (regexp-match? #rx\"^[a-zA-Z]\" name)\n         (not (regexp-match?\
    \ #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name? file_name)\n    (define\
    \ (split_file_name file_name)\n      (string-split file_name #\\.))\n    (define\
    \ (get_extension file_name)\n      (last (split_file_name file_name)))\n    (define\
    \ (get_name file_name)\n      (first (split_file_name file_name)))\n    (and (is_valid_extension?\
    \ (get_extension file_name))\n         (is_valid_name? (get_name file_name))))\n\
    \  (cond [(is_valid_file_name? file_name) \"Yes\"]\n        [else \"No\"]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1opo_whe.rkt:41:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1opo_whe.rkt:42:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1opo_whe.rkt:43:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1opo_whe.rkt:44:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1opo_whe.rkt:45:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1opo_whe.rkt:46:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1opo_whe.rkt:47:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1opo_whe.rkt:48:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1opo_whe.rkt:49:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1opo_whe.rkt:50:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1opo_whe.rkt:51:4\n\nstring-split: contract viol"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (or (equal? extension\
    \ \"txt\")\n        (equal? extension \"exe\")\n        (equal? extension \"dll\"\
    )))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (char-alphabetic?\
    \ (string-ref name 0))))\n  (define (is_valid_file_name? file_name)\n    (define\
    \ (count_digits file_name)\n      (define (count_digits_iter file_name count)\n\
    \        (cond ((empty? file_name) count)\n              ((char-numeric? (string-ref\
    \ file_name 0)) (count_digits_iter (string-drop file_name 1) (+ count 1)))\n \
    \             (else (count_digits_iter (string-drop file_name 1) count))))\n \
    \     (count_digits_iter file_name 0))\n    (define (count_dots file_name)\n \
    \     (define (count_dots_iter file_name count)\n        (cond ((empty? file_name)\
    \ count)\n              ((equal? (string-ref file_name 0) #\\.) (count_dots_iter\
    \ (string-drop file_name 1) (+ count 1)))\n              (else (count_dots_iter\
    \ (string-drop file_name 1) count))))\n      (count_dots_iter file_name 0))\n\
    \    (define (split_file_name file_name)\n      (define (split_file_name_iter\
    \ file_name name extension)\n        (cond ((empty? file_name) (values name extension))\n\
    \              ((equal? (string-ref file_name 0) #\\.) (split_file_name_iter (string-drop\
    \ file_name 1) name (string-append extension (string (string-ref file_name 0)))))\n\
    \              (else (split_file_name_iter (string-drop file_name 1) (string-append\
    \ name (string (string-ref file_name 0))) extension))))\n      (split_file_name_iter\
    \ file_name \"\" \"\"))\n    (define (is_valid_file_name_iter file_name)\n   \
    \   (let ([name (string-\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_9ljlq8b.rkt:43:18: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 44\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (or (equal? extension\
    \ \"txt\")\n        (equal? extension \"exe\")\n        (equal? extension \"dll\"\
    )))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (not\
    \ (regexp-match #rx\"[^a-zA-Z0-9]\" name))\n         (not (regexp-match #rx\"\
    [0-9]{4,}\" name))))\n  (define (is_valid_file_name? file_name)\n    (let ([name\
    \ (string-split file_name \"\\\\.\")])\n      (and (= (length name) 2)\n     \
    \      (is_valid_name? (first name))\n           (is_valid_extension? (second\
    \ name)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"\
    ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr1gx8pr.rkt:38:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr1gx8pr.rkt:41:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr1gx8pr.rkt:42:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr1gx8pr.rkt:48:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr1gx8pr.rkt:54:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr1gx8pr.rkt:55:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr1gx8pr.rkt:56:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension extension)\n    (cond\n      [(string=?\
    \ extension \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name name)\n\
    \    (define (count_digits name)\n      (cond\n        [(empty? name) 0]\n   \
    \     [(char-numeric? (first name)) (+ 1 (count_digits (rest name)))]\n      \
    \  [else (count_digits (rest name))]))\n    (define (is_valid_first_char? char)\n\
    \      (or (char-alphabetic? char) (char-numeric? char)))\n    (and (not (empty?\
    \ name))\n         (is_valid_first_char? (first name))\n         (<= (count_digits\
    \ name) 3)))\n  (define (is_valid_file_name file_name)\n    (define (split_file_name\
    \ file_name)\n      (define (split_file_name_helper file_name acc)\n        (cond\n\
    \          [(empty? file_name) acc]\n          [(char=? (first file_name) #\\\
    .) (split_file_name_helper (rest file_name) (cons (reverse acc) (list (rest file_name))))]\n\
    \          [else (split_file_name_helper (rest file_name) (cons (first file_name)\
    \ acc))]))\n      (split_file_name_helper file_name '()))\n    (define (split_file_name_result\
    \ file_name)\n      (split_file_name file_name))\n    (define (split_file_name_name\
    \ file_name)\n      (first (split_file_name_result file_name)))\n    (define (split_file_name_extension\
    \ file_name)\n      (second (split_file_name_result file_name)))\n    (and (is_valid_name\
    \ (split_file_name_name file_name))\n         (is_valid_extension (split_file_name_extension\
    \ file_name))))\n  (cond\n   \n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsge2o6gq.rkt:49:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 51\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond [(string=?\
    \ extension \"txt\") #t]\n          [(string=? extension \"exe\") #t]\n      \
    \    [(string=? extension \"dll\") #t]\n          [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (define (is_valid_char? c)\n      (or (char-numeric? c) (char-alphabetic?\
    \ c)))\n    (define (is_valid_name_char? c)\n      (or (char-numeric? c) (char-alphabetic?\
    \ c) (char=? c #\\_)))\n    (define (is_valid_name_chars? name)\n      (and (not\
    \ (empty? name))\n           (is_valid_name_char? (car name))\n           (is_valid_name_chars?\
    \ (cdr name))))\n    (and (not (empty? name))\n         (is_valid_char? (car name))\n\
    \         (is_valid_name_chars? (cdr name))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_file_name_chars? file_name)\n      (cond [(empty?\
    \ file_name) #t]\n            [(char=? (car file_name) #\\.) #f]\n           \
    \ [(char-numeric? (car file_name)) (is_valid_file_name_chars? (cdr file_name))]\n\
    \            [else #t]))\n    (and (is_valid_name? file_name)\n         (is_valid_file_name_chars?\
    \ file_name)))\n  (define (is_valid_file_name_extension? file_name)\n    (define\
    \ (is_valid_file_name_extension_chars? file_name)\n      (cond [(empty? file_name)\
    \ #t]\n            [(char=? (car file_name) #\\.) #f]\n            [(char-numeric?\
    \ (car file_name)) (is_valid_file_name_extension_chars? (cdr file_name))]\n  \
    \          [\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1yy6j4rn.rkt:46:12: read-syntax: expected a `]` to close `[`\n\
    \  possible cause: indentation suggests a missing `]` before line 47\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (if (and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n\
    \          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n   \
    \       (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n     \
    \ \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz8n66en0.rkt:27:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz8n66en0.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz8n66en0.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz8n66en0.rkt:37:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz8n66en0.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz8n66en0.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz8n66en0.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (define (is_valid_char? c)\n      (or (char-alphabetic? c) (char-numeric?\
    \ c)))\n    (define (is_valid_name-part? name-part)\n      (and (not (empty? name-part))\n\
    \           (char-alphabetic? (string-ref name-part 0))\n           (for/and ([c\
    \ (in-string name-part)])\n             (is_valid_char? c))))\n    (define (count-digits\
    \ name-part)\n      (for/sum ([c (in-string name-part)])\n        (if (char-numeric?\
    \ c) 1 0)))\n    (define (split-name name)\n      (regexp-match* #rx\"^([^.]+)\\\
    .([^.]+)$\" name))\n    (define (name-parts name)\n      (match (split-name name)\n\
    \        [(list _ (list name-part1 name-part2))\n         (list name-part1 name-part2)]))\n\
    \    (define (name-parts-valid? name)\n      (let ([name-parts (name-parts name)])\n\
    \        (and (not (empty? name-parts))\n             (is_valid_name-part? (first\
    \ name-parts))\n             (is_valid_name-part? (second name-parts)))))\n  \
    \  (define (name-parts-count-digits name)\n      (let ([name-parts (name-parts\
    \ name)])\n        (list (count-digits (first name-parts))\n              (count-digits\
    \ (second name-parts)))))\n    (and (name-parts-valid? name)\n         (let ([name-parts-count-digits\
    \ (name-parts-count-digits name)])\n           (and (<= (first name-parts-count-digits)\
    \ 3)\n                (<= (\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4azeoh1w.rkt:34:21: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzy2rk3ju.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond [(equal? extension\
    \ \"txt\") #t]\n          [(equal? extension \"exe\") #t]\n          [(equal?\
    \ extension \"dll\") #t]\n          [else #f]))\n  (define (is_valid_name? name)\n\
    \    (and (regexp-match? #rx\"^[a-zA-Z]\" name)\n         (regexp-match? #rx\"\
    [0-9]{0,3}\" name)))\n  (define (is_valid_file_name? file_name)\n    (let ([name\
    \ (car (string-split file_name \"\\\\.\"))]\n          [extension (cadr (string-split\
    \ file_name \"\\\\.\"))])\n      (and (is_valid_name? name)\n           (is_valid_extension?\
    \ extension))))\n  (cond [(is_valid_file_name? file_name) \"Yes\"]\n        [else\
    \ \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5xutdsn7.rkt:37:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"example.txt\"\
    )\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5xutdsn7.rkt:38:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"1example.dll\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5xutdsn7.rkt:39:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"s1sdf3.asd\"\
    )\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5xutdsn7.rkt:40:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"K.dll\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5xutdsn7.rkt:41:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"MY16FILE3.exe\"\
    )\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5xutdsn7.rkt:42:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"His12FILE94.exe\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5xutdsn7.rkt:43:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"_Y.txt\"\
    )\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5xutdsn7.rkt:44:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"?aREYA.exe\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5xutdsn7.rkt:45:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(\"/this_is_valid.dll\"\
    )\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5xutdsn7.rkt:46:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(\"this_is_valid.wow\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5xutdsn7."
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu57iej07.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp_h7bkl_.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n   \
    \   [else #f]))\n  (define (is_valid_file_name? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name_with_extension? file_name)\n    (cond\n      [(and\
    \ (is_valid_file_name? file_name)\n            (is_valid_extension? (substring\
    \ file_name (string-index file_name #\\.)))) #t]\n      [else #f]))\n  (define\
    \ (is_valid_file_name_with_name? file_name)\n    (cond\n      [(and (is_valid_file_name?\
    \ file_name)\n            (is_valid_name? (substring file_name 0 (string-index\
    \ file_name #\\.)))) #t]\n      [else #f]))\n  (cond\n    [(is_valid_file_name_with_extension?\
    \ file_name)\n     (cond\n       [(is_valid_file_name_with_name? file_name) \"\
    Yes\"]\n       [else \"No\"])]\n    [else \"No\"]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9oh_bz37.rkt:28:21: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (if (and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\"\
    \ file_name)\n          (not (regexp-match #rx\"^[0-9]+\" file_name)))\n     \
    \ \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_x8ioml.rkt:26:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_x8ioml.rkt:29:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_x8ioml.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_x8ioml.rkt:36:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_x8ioml.rkt:42:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_x8ioml.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_x8ioml.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmnsjul7g.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (or (equal? extension\
    \ \"txt\")\n        (equal? extension \"exe\")\n        (equal? extension \"dll\"\
    )))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (char-alphabetic?\
    \ (string-ref name 0))))\n  (define (is_valid_file_name? file_name)\n    (let\
    \ ((parts (string-split file_name \"\\\\.\")))\n      (and (= (length parts) 2)\n\
    \           (is_valid_name? (first parts))\n           (is_valid_extension? (second\
    \ parts)))))\n  (define (is_valid_digits? digits)\n    (and (not (empty? digits))\n\
    \         (not (char-numeric? (string-ref digits 0)))\n         (not (char-numeric?\
    \ (string-ref digits 1)))\n         (not (char-numeric? (string-ref digits 2)))))\n\
    \  (define (is_valid_file_name_with_digits? file_name)\n    (let ((parts (string-split\
    \ file_name \"\\\\.\")))\n      (and (= (length parts) 2)\n           (is_valid_digits?\
    \ (first parts))\n           (is_valid_extension? (second parts)))))\n  (cond\
    \ ((is_valid_file_name? file_name) 'Yes)\n        ((is_valid_file_name_with_digits?\
    \ file_name) 'Yes)\n        (else 'No)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:47:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:48:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:49:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:50:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:51:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:52:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:53:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:54:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:55:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:56:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:57:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:58:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:59:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2cflzg92.rkt:60:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpntptd76n.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc8_h9q6c.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (or (equal? extension\
    \ \"txt\")\n        (equal? extension \"exe\")\n        (equal? extension \"dll\"\
    )))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match?\
    \ #rx\"[a-zA-Z]\" name)))\n  (define (is_valid_file_name? file_name)\n    (define\
    \ (count-digits file_name)\n      (length (regexp-match-all #rx\"[0-9]\" file_name)))\n\
    \    (define (count-dots file_name)\n      (length (regexp-match-all #rx\"\\.\"\
    \ file_name)))\n    (and (not (> (count-digits file_name) 3))\n         (= (count-dots\
    \ file_name) 1)\n         (is_valid_name? (substring file_name 0 (regexp-index-of\
    \ #rx\"\\.\" file_name)))\n         (is_valid_extension? (substring file_name\
    \ (+ 1 (regexp-index-of #rx\"\\.\" file_name))))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi0sbwf8m.rkt:27:32: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdo8aqhhj.rkt:27:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdo8aqhhj.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdo8aqhhj.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdo8aqhhj.rkt:37:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdo8aqhhj.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdo8aqhhj.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdo8aqhhj.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_file_name file_name)\n    (define (is_valid_extension\
    \ ext)\n      (member ext '(\"txt\" \"exe\" \"dll\")))\n    (define (is_valid_name\
    \ name)\n      (and (not (empty? name))\n           (char-alphabetic? (string-ref\
    \ name 0))\n           (not (regexp-match #rx\"[0-9]\" name))))\n    (define (is_valid_file_name_parts\
    \ parts)\n      (and (not (empty? parts))\n           (is_valid_name (car parts))\n\
    \           (is_valid_extension (cadr parts))))\n    (define (is_valid_file_name_parts_count\
    \ parts)\n      (and (not (empty? parts))\n           (not (> (length parts) 3))))\n\
    \    (and (is_valid_file_name_parts_count (string-split file_name #rx\"\\.\"))\n\
    \         (is_valid_file_name_parts (string-split file_name #rx\"\\.\"))))\n \
    \ (if (is_valid_file_name file_name)\n      \"Yes\"\n      \"No\"))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuqvhygsu.rkt:30:65: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpl2iz3610.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? ext)\n    (cond\n      [(string=?\
    \ ext \"txt\") #t]\n      [(string=? ext \"exe\") #t]\n      [(string=? ext \"\
    dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n    (cond\n  \
    \    [(regexp-match #rx\"[a-zA-Z]+\" name) #t]\n      [else #f]))\n  (define (is_valid_digits?\
    \ digits)\n    (cond\n      [(> (string-length digits) 3) #f]\n      [else #t]))\n\
    \  (define (is_valid_file_name? file_name)\n    (let* ([parts (string-split file_name\
    \ \"\\\\.\")]\n           [name (first parts)]\n           [ext (second parts)])\n\
    \      (and (is_valid_extension? ext)\n           (is_valid_name? name)\n    \
    \       (is_valid_digits? name))))\n  (cond\n    [(is_valid_file_name? file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:46:4\n\
    \nsecond: list contains too few elements\n  list: '(\"example.txt\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:47:4\n\
    \nsecond: list contains too few elements\n  list: '(\"1example.dll\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:48:4\n\
    \nsecond: list contains too few elements\n  list: '(\"s1sdf3.asd\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:49:4\n\
    \nsecond: list contains too few elements\n  list: '(\"K.dll\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:50:4\n\
    \nsecond: list contains too few elements\n  list: '(\"MY16FILE3.exe\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:51:4\n\
    \nsecond: list contains too few elements\n  list: '(\"His12FILE94.exe\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:52:4\n\
    \nsecond: list contains too few elements\n  list: '(\"_Y.txt\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:53:4\n\
    \nsecond: list contains too few elements\n  list: '(\"?aREYA.exe\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:54:4\n\
    \nsecond: list contains too few elements\n  list: '(\"/this_is_valid.dll\")\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvqc1kc9b.rkt:55:4\n\nsecond: list contains too few elements\n\
    \  list: '(\"this_is_valid.wow\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:56:4\n\nsecond:\
    \ list contains too few elements\n  list: '(\"this_is_valid.txt\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqc1kc9b.rkt:57:4\n\
    \nsecond: "
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy6eaidmf.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check_extension extension)\n    (cond\n      [(string=?\
    \ extension \"txt\") #t]\n      [(string=? extension \"exe\") #t]\n      [(string=?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (check_name name)\n   \
    \ (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n      [else\
    \ #f]))\n  (define (check_digits digits)\n    (cond\n      [(> digits 3) #f]\n\
    \      [else #t]))\n  (define (count_digits str)\n    (define (count_digits_iter\
    \ str count)\n      (cond\n        [(empty? str) count]\n        [(char-numeric?\
    \ (first str)) (count_digits_iter (rest str) (+ count 1))]\n        [else (count_digits_iter\
    \ (rest str) count)]))\n    (count_digits_iter str 0))\n  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\" file_name)\n     (let ([name (substring\
    \ file_name 0 (string-index file_name \".\"))]\n           [extension (substring\
    \ file_name (+ (string-index file_name \".\") 1) (string-length file_name))])\n\
    \       (cond\n         [(and (check_name name) (check_extension extension) (check_digits\
    \ (count_digits name))) \"Yes\"]\n         [else \"No\"]))]\n    [else \"No\"\
    ]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe9p8cspi.rkt:38:19: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-extension extension)\n    (cond ((equal? extension\
    \ \"txt\") #t)\n          ((equal? extension \"exe\") #t)\n          ((equal?\
    \ extension \"dll\") #t)\n          (else #f)))\n  (define (check-name name)\n\
    \    (cond ((and (not (empty? name)) (char-alphabetic? (string-ref name 0))) #t)\n\
    \          (else #f)))\n  (define (check-digits digits)\n    (cond ((> digits\
    \ 3) #f)\n          (else #t)))\n  (define (check-dot dot)\n    (cond ((equal?\
    \ dot 1) #t)\n          (else #f)))\n  (define (check-file-name file_name)\n \
    \   (let ((dot-index (string-index file_name \".\"))\n          (digits-count\
    \ (count-digits file_name)))\n      (and (check-extension (substring file_name\
    \ (+ dot-index 1)))\n           (check-name (substring file_name 0 dot-index))\n\
    \           (check-digits digits-count)\n           (check-dot dot-index))))\n\
    \  (cond ((check-file-name file_name) \"Yes\")\n        (else \"No\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk4ciq96v.rkt:31:22: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmpk4ciq96v.rkt:31:22\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppl1g5_0e.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjevqkk8w.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprj0jb0xt.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension ext)\n    (cond\n      [(equal? ext\
    \ \"txt\") #t]\n      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n\
    \      [else #f]))\n  (define (is_valid_name name)\n    (and (regexp-match? #rx\"\
    ^[a-zA-Z]+$\" name)\n         (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name file_name)\n    (define (split_file_name file_name)\n\
    \      (string-split file_name #\\.))\n    (define (get_extension file_name)\n\
    \      (last (split_file_name file_name)))\n    (define (get_name file_name)\n\
    \      (first (split_file_name file_name)))\n    (and (is_valid_extension (get_extension\
    \ file_name))\n         (is_valid_name (get_name file_name))))\n  (cond\n    [(is_valid_file_name\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplmg3v806.rkt:43:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplmg3v806.rkt:44:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplmg3v806.rkt:45:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplmg3v806.rkt:46:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplmg3v806.rkt:47:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplmg3v806.rkt:48:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplmg3v806.rkt:49:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplmg3v806.rkt:50:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplmg3v806.rkt:51:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplmg3v806.rkt:52:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplmg3v806.rkt:53:4\n\nstring-split: contract viol"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7g7rbzdg.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpebjdxhab.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]\" name)))\n  (define\
    \ (is_valid_file_name? file_name)\n    (define (count-digits file_name)\n    \
    \  (define (count-digits-iter file_name count)\n        (cond\n          [(empty?\
    \ file_name) count]\n          [(char-numeric? (first file_name)) (count-digits-iter\
    \ (rest file_name) (+ count 1))]\n          [else (count-digits-iter (rest file_name)\
    \ count)]))\n      (count-digits-iter file_name 0))\n    (define (count-dots file_name)\n\
    \      (define (count-dots-iter file_name count)\n        (cond\n          [(empty?\
    \ file_name) count]\n          [(char=? (first file_name) #\\.) (count-dots-iter\
    \ (rest file_name) (+ count 1))]\n          [else (count-dots-iter (rest file_name)\
    \ count)]))\n      (count-dots-iter file_name 0))\n    (and (not (> (count-digits\
    \ file_name) 3))\n         (= (count-dots file_name) 1)\n         (is_valid_name?\
    \ (substring file_name 0 (string-index file_name #\\.)))\n         (is_valid_extension?\
    \ (substring file_name (+ (string-index file_name #\\.) 1) (string-length file_name)))))\n\
    \  (cond\n    [(is_valid_file_name? file_name) \"Yes\"]\n    [else \"No\"]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaoje4ty6.rkt:38:49: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmpaoje4ty6.rkt:38:49\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp37e138bt.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7rs2r7lr.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (regexp-match?\
    \ #rx\"^[a-zA-Z]\" name)\n         (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name? file_name)\n    (let ([parts (string-split file_name\
    \ \"\\\\.\")])\n      (and (= (length parts) 2)\n           (is_valid_name? (first\
    \ parts))\n           (is_valid_extension? (second parts)))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkd4yqypa.rkt:35:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkd4yqypa.rkt:38:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkd4yqypa.rkt:39:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkd4yqypa.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkd4yqypa.rkt:51:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkd4yqypa.rkt:52:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkd4yqypa.rkt:53:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp75339mb_.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]+$\" name)))\n  (define\
    \ (is_valid_file_name? file_name)\n    (and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[a-zA-Z]+$\" file_name)\n         (is_valid_name? (substring file_name 0 (string-index\
    \ file_name #\\.)))\n         (is_valid_extension? (substring file_name (+ 1 (string-index\
    \ file_name #\\.))))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n\
    \      \"No\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate file_name_check))\n    (check-equal? (candidate \"example.txt\") \"\
    Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmz0t42lq.rkt:23:49: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmpmz0t42lq.rkt:23:49\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (let ([file-name-regexp (regexp \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .[a-zA-Z]{3}$\")])\n    (if (regexp-match file-name-regexp file_name)\n      \
    \  \"Yes\"\n        \"No\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj1awzav5.rkt:26:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj1awzav5.rkt:29:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj1awzav5.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj1awzav5.rkt:36:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj1awzav5.rkt:42:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj1awzav5.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj1awzav5.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? ext)\n    (cond\n      [(string=?\
    \ ext \"txt\") #t]\n      [(string=? ext \"exe\") #t]\n      [(string=? ext \"\
    dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n    (and\n   \
    \   (regexp-match? #rx\"^[a-zA-Z]\" name)\n      (not (regexp-match? #rx\"[0-9]{4,}\"\
    \ name))))\n  (define (is_valid_file_name? file_name)\n    (let* ([parts (string-split\
    \ file_name #\\.)]\n           [name (first parts)]\n           [ext (second parts)])\n\
    \      (and\n        (is_valid_name? name)\n        (is_valid_extension? ext))))\n\
    \  (cond\n    [(is_valid_file_name? file_name) \"Yes\"]\n    [else \"No\"]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpspdcg2ye.rkt:42:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpspdcg2ye.rkt:43:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpspdcg2ye.rkt:44:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpspdcg2ye.rkt:45:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpspdcg2ye.rkt:46:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpspdcg2ye.rkt:47:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpspdcg2ye.rkt:48:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpspdcg2ye.rkt:49:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpspdcg2ye.rkt:50:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpspdcg2ye.rkt:51:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpspdcg2ye.rkt:52:4\n\nstring-split: contract viol"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond ((equal? extension\
    \ \"txt\") #t)\n          ((equal? extension \"exe\") #t)\n          ((equal?\
    \ extension \"dll\") #t)\n          (else #f)))\n  (define (is_valid_name? name)\n\
    \    (cond ((regexp-match #rx\"^[a-zA-Z]+$\" name) #t)\n          (else #f)))\n\
    \  (define (is_valid_number? number)\n    (cond ((regexp-match #rx\"^[0-9]{1,3}$\"\
    \ number) #t)\n          (else #f)))\n  (define (is_valid_file_name? file_name)\n\
    \    (let* ([parts (regexp-split #rx\"\\.\" file_name)]\n           [name (first\
    \ parts)]\n           [extension (second parts)])\n      (and (is_valid_name?\
    \ name)\n           (is_valid_extension? extension)\n           (is_valid_number?\
    \ name))))\n  (cond ((is_valid_file_name? file_name) \"Yes\")\n        (else \"\
    No\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeh0_6scg.rkt:28:32: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43zuw12e.rkt:27:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43zuw12e.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43zuw12e.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43zuw12e.rkt:37:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43zuw12e.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43zuw12e.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43zuw12e.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension ext)\n    (or (string=? ext \"txt\"\
    )\n        (string=? ext \"exe\")\n        (string=? ext \"dll\")))\n  (define\
    \ (is_valid_name name)\n    (and (regexp-match? #rx\"^[a-zA-Z]+$\" name)\n   \
    \      (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name\
    \ file_name)\n    (let* ([parts (string-split file_name #\"\\.\")]\n         \
    \  [name (first parts)]\n           [ext (second parts)])\n      (and (= (length\
    \ parts) 2)\n           (is_valid_name name)\n           (is_valid_extension ext))))\n\
    \  (if (is_valid_file_name file_name)\n      \"Yes\"\n      \"No\"))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy8x2gnqf.rkt:24:42: read-syntax: unknown escape sequence `\\.`\
    \ in byte string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_file_name? file_name)\n    (define (is_valid_file_name_helper?\
    \ file_name)\n      (cond ((string=? file_name \"\") #t)\n            ((string-contains\
    \ file_name \".\") #f)\n            ((string-contains file_name \"..\") #f)\n\
    \            ((string-contains file_name \"...\") #f)\n            ((string-contains\
    \ file_name \"....\") #f)\n            ((string-contains file_name \".....\")\
    \ #f)\n            ((string-contains file_name \"0\") #f)\n            ((string-contains\
    \ file_name \"1\") #f)\n            ((string-contains file_name \"2\") #f)\n \
    \           ((string-contains file_name \"3\") #f)\n            ((string-contains\
    \ file_name \"4\") #f)\n            ((string-contains file_name \"5\") #f)\n \
    \           ((string-contains file_name \"6\") #f)\n            ((string-contains\
    \ file_name \"7\") #f)\n            ((string-contains file_name \"8\") #f)\n \
    \           ((string-contains file_name \"9\") #f)\n            ((string-contains\
    \ file_name \"txt\") #t)\n            ((string-contains file_name \"exe\") #t)\n\
    \            ((string-contains file_name \"dll\") #t)\n            (else #f)))\n\
    \    (and (is_valid_file_name_helper? file_name)\n         (string-contains file_name\
    \ \".\")\n         (not (string=? (substring file_name 0 1) \"\"))\n         (string-contains\
    \ (substring file_name 0 1) \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz2ekxecz.rkt:19:14: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpz2ekxecz.rkt:19:14\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphjj2mcww.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (count-digits str)\n    (if (empty? str)\n        0\n\
    \        (+ (if (char-numeric? (first str)) 1 0)\n           (count-digits (rest\
    \ str)))))\n  (define (count-dots str)\n    (if (empty? str)\n        0\n    \
    \    (+ (if (char=? (first str) #\\.) 1 0)\n           (count-dots (rest str)))))\n\
    \  (define (is-valid-extension str)\n    (or (string=? str \"txt\")\n        (string=?\
    \ str \"exe\")\n        (string=? str \"dll\")))\n  (define (is-valid-name str)\n\
    \    (and (not (empty? str))\n         (char-alphabetic? (first str))\n      \
    \   (not (char-numeric? (first str)))))\n  (define (is-valid-file-name str)\n\
    \    (let ((dot-index (string-index str #\\.))\n          (name (substring str\
    \ 0 dot-index))\n          (extension (substring str (+ dot-index 1))))\n    \
    \  (and (= (count-digits str) 0)\n           (= (count-dots str) 1)\n        \
    \   (is-valid-name name)\n           (is-valid-extension extension))))\n  (if\
    \ (is-valid-file-name file_name)\n      \"Yes\"\n      \"No\"))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxq4zs_0o.rkt:35:22: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmpxq4zs_0o.rkt:35:22\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcdqam2qg.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[txt|exe|dll]$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3u83b3cl.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiauntxbx.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpa9s2s_qy.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa413361u.rkt:27:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa413361u.rkt:30:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa413361u.rkt:31:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa413361u.rkt:37:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa413361u.rkt:43:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa413361u.rkt:44:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa413361u.rkt:45:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (and\n      (regexp-match? #rx\"^[a-zA-Z]+$\" name)\n      (not (regexp-match?\
    \ #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name? file_name)\n    (define\
    \ (split-file-name file_name)\n      (regexp-split #rx\"\\.\" file_name))\n  \
    \  (define (get-extension file_name)\n      (last (split-file-name file_name)))\n\
    \    (define (get-name file_name)\n      (first (split-file-name file_name)))\n\
    \    (and\n      (is_valid_extension? (get-extension file_name))\n      (is_valid_name?\
    \ (get-name file_name))))\n  (cond\n    [(is_valid_file_name? file_name) \"Yes\"\
    ]\n    [else \"No\"]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaime8g9s.rkt:28:20: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (let ([name (string-split file_name \"\\\\.\")])\n    (cond\n\
    \      [(and (equal? (length name) 2)\n            (regexp-match? #rx\"^[a-zA-Z]\\\
    \\w*$\" (car name))\n            (regexp-match? #rx\"^\\\\d{0,3}$\" (car name))\n\
    \            (member (cadr name) '(\"txt\" \"exe\" \"dll\")))\n       \"Yes\"\
    ]\n      [else \"No\"])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83vsnb47.rkt:30:4\n\
    actual:     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83vsnb47.rkt:33:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83vsnb47.rkt:34:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83vsnb47.rkt:40:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83vsnb47.rkt:46:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83vsnb47.rkt:47:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83vsnb47.rkt:48:4\nactual:\
    \     \"No\"\nexpected:   \"Yes\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2f15mv5g.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpg2b8nd85.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(string=? file_name \"\") 'No]\n    [(string=? file_name\
    \ \".\") 'No]\n    [(string=? file_name \"..\") 'No]\n    [(string=? file_name\
    \ \"...\") 'No]\n    [(string=? file_name \"....\") 'No]\n    [(string=? file_name\
    \ \".....\") 'No]\n    [(string=? file_name \"......\") 'No]\n    [(string=? file_name\
    \ \".......\") 'No]\n    [(string=? file_name \"........\") 'No]\n    [(string=?\
    \ file_name \".........\") 'No]\n    [(string=? file_name \"..........\") 'No]\n\
    \    [(string=? file_name \"...........\") 'No]\n    [(string=? file_name \"............\"\
    ) 'No]\n    [(string=? file_name \".............\") 'No]\n    [(string=? file_name\
    \ \"..............\") 'No]\n    [(string=? file_name \"...............\") 'No]\n\
    \    [(string=? file_name \"................\") 'No]\n    [(string=? file_name\
    \ \".................\") 'No]\n    [(string=? file_name \"..................\"\
    ) 'No]\n    [(string=? file_name \"...................\") 'No]\n    [(string=?\
    \ file_name \"....................\") 'No]\n    [(string=? file_name \".....................\"\
    ) 'No]\n    [(string=? file_name \"......................\") 'No]\n    [(string=?\
    \ file_name \".......................\") 'No]\n    [(string=? file_name \"........................\"\
    ) 'No]\n    [(string=? file_name \".........................\") 'No]\n    [(string=?\
    \ file_name \".........................0\") 'No]\n    [(string=? file_name \"\
    .........................1\") 'No]\n    [(string=? file_name \".........................2\"\
    ) 'No]\n    [(string=? file_name \".........................3\") 'No]\n    [(string=?\
    \ file_name \".........................4\") 'No]\n    [(string=? file_name \"\
    .........................5\") 'No]\n    [(string\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4z9zppgy.rkt:49:5: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 50\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplxrvp5x2.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? ext)\n    (cond\n      [(equal? ext\
    \ \"txt\") #t]\n      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n\
    \      [else #f]))\n  (define (is_valid_name? name)\n    (and\n      (regexp-match?\
    \ #rx\"^[a-zA-Z]\" name)\n      (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name? file_name)\n    (cond\n      [(regexp-match? #rx\"\
    ^[a-zA-Z]+[.][a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n  (define (get_extension\
    \ file_name)\n    (regexp-match #rx\"[.][a-zA-Z]+$\" file_name))\n  (define (get_name\
    \ file_name)\n    (regexp-match #rx\"^[a-zA-Z]+\" file_name))\n  (cond\n    [(is_valid_file_name?\
    \ file_name)\n     (let ([name (get_name file_name)]\n           [ext (get_extension\
    \ file_name)])\n       (cond\n         [(and (is_valid_name? name) (is_valid_extension?\
    \ ext)) \"Yes\"]\n         [else \"No\"]))]\n    [else \"No\"]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpramnfjkb.rkt:48:4\n\
    \nregexp-match?: contract violation\n  expected: (or/c bytes? string? input-port?\
    \ path?)\n  given: '(\"example\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpramnfjkb.rkt:51:4\n\nregexp-match?:\
    \ contract violation\n  expected: (or/c bytes? string? input-port? path?)\n  given:\
    \ '(\"K\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpramnfjkb.rkt:52:4\nactual:     \"No\"\nexpected:   \"Yes\"\
    \n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpramnfjkb.rkt:58:4\nactual:     \"No\"\nexpected:   \"Yes\"\
    \n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpramnfjkb.rkt:64:4\nactual:     \"No\"\nexpected:   \"Yes\"\
    \n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpramnfjkb.rkt:65:4\nactual:     \"No\"\nexpected:   \"Yes\"\
    \n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpramnfjkb.rkt:66:4\nactual:     \"No\"\nexpected:   \"Yes\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwghxn5ac.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bos6h3s.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbvvk_u0h.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkzfv797d.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo02868yv.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+$\" name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (is_valid_file_name_helper?\
    \ file_name)\n      (cond\n        [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .[a-zA-Z]+$\" file_name) #t]\n        [else #f]))\n    (define (is_valid_file_name_helper2?\
    \ file_name)\n      (cond\n        [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .[a-zA-Z]+$\" file_name) #t]\n        [else #f]))\n    (cond\n      [(is_valid_file_name_helper?\
    \ file_name) #t]\n      [(is_valid_file_name_helper2? file_name) #t]\n      [else\
    \ #f]))\n  (define (is_valid_file_name_helper? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name_helper2? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (cond\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcgrladwk.rkt:47:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 48\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsnu_14va.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (is_valid_extension? extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (define (is_valid_char? c)\n      (cond\n        [(char-alphabetic? c) #t]\n\
    \        [(char-numeric? c) #t]\n        [else #f]))\n    (define (is_valid_name-helper\
    \ name)\n      (cond\n        [(empty? name) #t]\n        [(is_valid_char? (first\
    \ name)) (is_valid_name-helper (rest name))]\n        [else #f]))\n    (cond\n\
    \      [(is_valid_name-helper name) #t]\n      [else #f]))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_file_name-helper file_name)\n      (cond\n\
    \        [(empty? file_name) #t]\n        [(char-numeric? (first file_name)) (is_valid_file_name-helper\
    \ (rest file_name))]\n        [else #f]))\n    (cond\n      [(is_valid_file_name-helper\
    \ file_name) #f]\n      [else #t]))\n  (define (is_valid_file_name-helper2 file_name)\n\
    \    (cond\n      [(empty? file_name) #t]\n      [(char-numeric? (first file_name))\
    \ (is_valid_file_name-helper2 (rest file_name))]\n      [else #f]))\n  (define\
    \ (is_valid_file_name? file_name)\n    (cond\n      [(is_valid_file_name-helper2\
    \ file_name) #f]\n      [else #t]))\n  (define (is_valid_file_name-helper3 file_name)\n\
    \    (cond\n      [(empty? file_name) #t]\n      [(char-numeric\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd6mev16k.rkt:57:7: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 58\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]\\\\w{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]\\\\w{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]\\\\w{0,2}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftrwu_x.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-extension extension)\n    (cond ((equal? extension\
    \ \"txt\") #t)\n          ((equal? extension \"exe\") #t)\n          ((equal?\
    \ extension \"dll\") #t)\n          (else #f)))\n  (define (check-name name)\n\
    \    (cond ((regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t)\n         \
    \ (else #f)))\n  (define (check-digits digits)\n    (cond ((> digits 3) #f)\n\
    \          (else #t)))\n  (define (check-dot dot)\n    (cond ((equal? dot 1) #t)\n\
    \          (else #f)))\n  (define (check-file-name file-name)\n    (let* ([parts\
    \ (regexp-split #rx\"\\.\" file-name)]\n           [name (first parts)]\n    \
    \       [extension (second parts)])\n      (and (check-name name)\n          \
    \ (check-dot (length parts))\n           (check-extension extension)\n       \
    \    (check-digits (string-length (regexp-replace* #rx\"[a-zA-Z]\" name \"\"))))))\n\
    \  (cond ((check-file-name file_name) \"Yes\")\n        (else \"No\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph71lil8e.rkt:31:32: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-equal?\
    \ (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate \"1example.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal?\
    \ (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate \"?aREYA.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp21d9r07k.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphytbc3fj.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n1bgsb_.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcjmbcctl.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsgetsotg.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9bkwgk_o.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check_extension extension)\n    (cond [(string=? extension\
    \ \"txt\") #t]\n          [(string=? extension \"exe\") #t]\n          [(string=?\
    \ extension \"dll\") #t]\n          [else #f]))\n  (define (check_name name)\n\
    \    (cond [(regexp-match #rx\"^[a-zA-Z]+$\" name) #t]\n          [else #f]))\n\
    \  (define (check_digits digits)\n    (cond [(<= (string-length digits) 3) #t]\n\
    \          [else #f]))\n  (define (check_file_name file_name)\n    (let ([name\
    \ (string-split file_name \"\\\\.\")]\n          [extension (last name)])\n  \
    \    (cond [(and (check_extension extension)\n                  (check_name (first\
    \ name))\n                  (check_digits (first name))) #t]\n            [else\
    \ #f])))\n  (cond [(check_file_name file_name) \"Yes\"]\n        [else \"No\"\
    ]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ file_name_check))\n    (check-equal? (candidate \"example.txt\") \"Yes\")\n\
    \    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal? (candidate\
    \ \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n\
    \    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate\
    \ \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\"\
    )\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate\
    \ \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"\
    #this2_i4s_5valid.ten\") \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\"\
    )\n    (check-equal? (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate\
    \ \"I563_No.exe\") \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal?\
    \ (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\"\
    ) \"No\")\n    (check-equal? (candidate \"final..txt\") \"No\")\n    (check-equal?\
    \ (candidate \"final132\") \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\"\
    ) \"No\")\n    (check-equal? (candidate \".txt\") \"No\")\n    (check-equal? (candidate\
    \ \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf3ydi3n7.rkt:29:27: name: unbound identifier\n  in: name\n  location...:\n\
    \   /tmp/tmpf3ydi3n7.rkt:29:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (count-digits file_name)\n    (define (count-digits-iter\
    \ file_name count)\n      (cond\n        [(empty? file_name) count]\n        [(char-numeric?\
    \ (first file_name)) (count-digits-iter (rest file_name) (+ count 1))]\n     \
    \   [else (count-digits-iter (rest file_name) count)]))\n    (count-digits-iter\
    \ file_name 0))\n  (define (count-dots file_name)\n    (define (count-dots-iter\
    \ file_name count)\n      (cond\n        [(empty? file_name) count]\n        [(char=?\
    \ (first file_name) #\\.) (count-dots-iter (rest file_name) (+ count 1))]\n  \
    \      [else (count-dots-iter (rest file_name) count)]))\n    (count-dots-iter\
    \ file_name 0))\n  (define (valid-extension? file_name)\n    (define (valid-extension-iter\
    \ file_name)\n      (cond\n        [(empty? file_name) #f]\n        [(char=? (first\
    \ file_name) #\\.) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\t) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\x) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\e) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\d) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\l) (valid-extension-iter (rest file_name))]\n        [else\
    \ #f]))\n    (valid-extension-iter file_name))\n  (define (valid-name? file_name)\n\
    \    (define (valid-name-iter file_name)\n      (cond\n        [(empty? file_name)\
    \ #f]\n        [(\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate file_name_check))\n    (check-equal? (candidate \"example.txt\") \"\
    Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo2i_p3ti.rkt:46:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 47\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdugcymby.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (define (check-extension extension)\n    (cond [(string=? extension\
    \ \"txt\") #t]\n          [(string=? extension \"exe\") #t]\n          [(string=?\
    \ extension \"dll\") #t]\n          [else #f]))\n  (define (check-name name)\n\
    \    (define (check-digits digits)\n      (cond [(> digits 3) #f]\n          \
    \  [else #t]))\n    (define (check-first-letter letter)\n      (cond [(char-alphabetic?\
    \ letter) #t]\n            [else #f]))\n    (define (check-name-helper name digits)\n\
    \      (cond [(empty? name) #t]\n            [(char-numeric? (first name)) (check-name-helper\
    \ (rest name) (+ digits 1))]\n            [(char-alphabetic? (first name)) (check-name-helper\
    \ (rest name) digits)]\n            [else #f]))\n    (and (check-digits digits)\n\
    \         (check-first-letter (first name))\n         (check-name-helper (rest\
    \ name) 0)))\n  (define (check-dot dot)\n    (cond [(string=? dot \".\") #t]\n\
    \          [else #f]))\n  (define (check-file-name file_name)\n    (define (check-file-name-helper\
    \ file_name dot)\n      (cond [(empty? file_name) (check-dot dot)]\n         \
    \   [(string=? (first file_name) \".\") (check-file-name-helper (rest file_name)\
    \ (string-append dot (first file_name))) ]\n            [else (check-file-name-helper\
    \ (rest file_name) dot)]))\n    (check-file-name-helper file_name \"\"))\n  (define\
    \ (check-file-name-helper file_name dot)\n    (cond [(empty? file_name) (check-dot\
    \ dot)]\n            [(string=? (first file_name) \".\") (check-file-name-helper\
    \ (rest file_name) (string-append dot (first file_name))) ]\n            [else\
    \ (check-file-name-helper (rest\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6vq2hnxp.rkt:48:42: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplfrtp8dl.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmprjqnrifg.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:25:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:26:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:27:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:28:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:29:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:30:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:31:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:35:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:37:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0o62rxm.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate file_name_check))\n    (check-equal? (candidate \"example.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1example.dll\") \"No\")\n    (check-equal?\
    \ (candidate \"s1sdf3.asd\") \"No\")\n    (check-equal? (candidate \"K.dll\")\
    \ \"Yes\")\n    (check-equal? (candidate \"MY16FILE3.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"His12FILE94.exe\") \"No\")\n    (check-equal? (candidate \"_Y.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"?aREYA.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"/this_is_valid.dll\") \"No\")\n    (check-equal? (candidate \"\
    this_is_valid.wow\") \"No\")\n    (check-equal? (candidate \"this_is_valid.txt\"\
    ) \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\") \"No\")\n \
    \   (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n    (check-equal?\
    \ (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal? (candidate \"\
    this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate \"all.exe.txt\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\")\n    (check-equal?\
    \ (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal? (candidate \"no_one#knows.dll\"\
    ) \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\") \"No\")\n    (check-equal?\
    \ (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal? (candidate \"final..txt\"\
    ) \"No\")\n    (check-equal? (candidate \"final132\") \"No\")\n    (check-equal?\
    \ (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal? (candidate \".txt\"\
    ) \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:27:4\n\
    actual:     'No\nexpected:   \"Yes\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:28:4\nactual:\
    \     'No\nexpected:   \"No\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:29:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:30:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:31:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:32:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:33:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:34:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:35:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:36:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:37:4\nactual:     'No\n\
    expected:   \"Yes\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:38:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:39:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgv1h7bwg.rkt:40:4\nactual:     'No\n\
    expected:   \"No\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Create a function which takes a string representing\
    \ a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
    \ the following conditions \n;; are met:\n;; - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly\
    \ one dot '.'\n;; - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n\
    ;; file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
    \ file_name)\n  (let ([dot-index (string-index file_name \".\")])\n    (cond\n\
    \      [(not dot-index) 'No]\n      [(> (string-length file_name) dot-index)\n\
    \       (let ([extension (substring file_name (+ dot-index 1))])\n         (cond\n\
    \           [(or (string=? extension \"txt\") (string=? extension \"exe\") (string=?\
    \ extension \"dll\"))\n            (let ([name (substring file_name 0 dot-index)])\n\
    \              (cond\n                [(string-empty? name) 'No]\n           \
    \     [(not (char-alphabetic? (string-ref name 0))) 'No]\n                [(>\
    \ (string-length (regexp-replace* #rx\"[^0-9]\" name \"\")) 3) 'No]\n        \
    \        [else 'Yes]))]\n           [else 'No]))]\n      [else 'No])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
    \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
    \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
    )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
    \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\"\
    ) \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
    \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"\
    this_is_valid.txtexe\") \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\"\
    ) \"No\")\n    (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n  \
    \  (check-equal? (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal?\
    \ (candidate \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\"\
    ) \"Yes\")\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
    \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
    ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
    \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
    ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
    \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprqwg5lh5.rkt:16:20: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmprqwg5lh5.rkt:16:20\n"
  exit_code: 1
  status: OK
