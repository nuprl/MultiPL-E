name: HumanEval_22_filter_integers
language: racket
results:
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (value) (integer? value)) values))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ integer? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (value) (integer? value)) values))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ integer? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ integer? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ integer? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ integer? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ number? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp402srbge.rkt:17:4\n\
    actual:     '(4 23.2 9)\nexpected:   '(4 9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ integer? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (\u03BB (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ number? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_bom5mma.rkt:17:4\n\
    actual:     '(4 23.2 9)\nexpected:   '(4 9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ number? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4zw67m1.rkt:17:4\n\
    actual:     '(4 23.2 9)\nexpected:   '(4 9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (\u03BB (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ integer? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ number? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe699_d2x.rkt:17:4\n\
    actual:     '(4 23.2 9)\nexpected:   '(4 9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (and (integer? x) x)) values))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (\u03BB (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ integer? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (value) (integer? value)) values))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (\u03BB (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ integer? values))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n  (filter\
    \ (lambda (x) (integer? x)) values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
